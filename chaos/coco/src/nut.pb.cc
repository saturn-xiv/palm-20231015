// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#include "nut.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace plugins {
namespace nut {
namespace v1 {
PROTOBUF_CONSTEXPR Pager::Pager(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagerDefaultTypeInternal() {}
  union {
    Pager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagerDefaultTypeInternal _Pager_default_instance_;
PROTOBUF_CONSTEXPR Pagination::Pagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.total_)*/int64_t{0}
  , /*decltype(_impl_.has_next_)*/false
  , /*decltype(_impl_.has_previous_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationDefaultTypeInternal _Pagination_default_instance_;
PROTOBUF_CONSTEXPR IdRequest::IdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdRequestDefaultTypeInternal() {}
  union {
    IdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdRequestDefaultTypeInternal _IdRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleIndexResponse_Item::LocaleIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LocaleIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LocaleIndexResponse::LocaleIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleIndexResponseDefaultTypeInternal() {}
  union {
    LocaleIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleGetRequest::LocaleGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleGetRequestDefaultTypeInternal() {}
  union {
    LocaleGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleGetRequestDefaultTypeInternal _LocaleGetRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleSetRequest::LocaleSetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleSetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleSetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleSetRequestDefaultTypeInternal() {}
  union {
    LocaleSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
PROTOBUF_CONSTEXPR AwsProfile::AwsProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.access_key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_access_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct AwsProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AwsProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AwsProfileDefaultTypeInternal() {}
  union {
    AwsProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AwsProfileDefaultTypeInternal _AwsProfile_default_instance_;
PROTOBUF_CONSTEXPR SiteAwsS3TestResponse::SiteAwsS3TestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buckets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteAwsS3TestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteAwsS3TestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteAwsS3TestResponseDefaultTypeInternal() {}
  union {
    SiteAwsS3TestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteAwsS3TestResponseDefaultTypeInternal _SiteAwsS3TestResponse_default_instance_;
PROTOBUF_CONSTEXPR SiteSmtpTestRequst::SiteSmtpTestRequst(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSmtpTestRequstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSmtpTestRequstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSmtpTestRequstDefaultTypeInternal() {}
  union {
    SiteSmtpTestRequst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSmtpTestRequstDefaultTypeInternal _SiteSmtpTestRequst_default_instance_;
PROTOBUF_CONSTEXPR SiteSetLogoRequest::SiteSetLogoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetLogoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetLogoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetLogoRequestDefaultTypeInternal() {}
  union {
    SiteSetLogoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetLogoRequestDefaultTypeInternal _SiteSetLogoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetCopyrightRequest::SiteSetCopyrightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetCopyrightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetCopyrightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetCopyrightRequestDefaultTypeInternal() {}
  union {
    SiteSetCopyrightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetKeywordsRequest::SiteSetKeywordsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetKeywordsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetKeywordsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetKeywordsRequestDefaultTypeInternal() {}
  union {
    SiteSetKeywordsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetInfoRequest::SiteSetInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetInfoRequestDefaultTypeInternal() {}
  union {
    SiteSetInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse_Author::SiteLayoutResponse_Author(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponse_AuthorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponse_AuthorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponse_AuthorDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_Author _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse::SiteLayoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keywords_)*/{}
  , /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponseDefaultTypeInternal() {}
  union {
    SiteLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
PROTOBUF_CONSTEXPR SiteNewLeaveWordRequest::SiteNewLeaveWordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteNewLeaveWordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteNewLeaveWordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteNewLeaveWordRequestDefaultTypeInternal() {}
  union {
    SiteNewLeaveWordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteNewLeaveWordRequestDefaultTypeInternal _SiteNewLeaveWordRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteIndexLeaveWordResponse_Item::SiteIndexLeaveWordResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteIndexLeaveWordResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteIndexLeaveWordResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteIndexLeaveWordResponse_ItemDefaultTypeInternal() {}
  union {
    SiteIndexLeaveWordResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteIndexLeaveWordResponse_ItemDefaultTypeInternal _SiteIndexLeaveWordResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR SiteIndexLeaveWordResponse::SiteIndexLeaveWordResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteIndexLeaveWordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteIndexLeaveWordResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteIndexLeaveWordResponseDefaultTypeInternal() {}
  union {
    SiteIndexLeaveWordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteIndexLeaveWordResponseDefaultTypeInternal _SiteIndexLeaveWordResponse_default_instance_;
PROTOBUF_CONSTEXPR GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.site_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleProfile_ReCaptchaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleProfile_ReCaptchaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleProfile_ReCaptchaDefaultTypeInternal() {}
  union {
    GoogleProfile_ReCaptcha _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleProfile_ReCaptchaDefaultTypeInternal _GoogleProfile_ReCaptcha_default_instance_;
PROTOBUF_CONSTEXPR GoogleProfile::GoogleProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.re_captcha_)*/nullptr} {}
struct GoogleProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleProfileDefaultTypeInternal() {}
  union {
    GoogleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
PROTOBUF_CONSTEXPR BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaiduProfile_SiteVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaiduProfile_SiteVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaiduProfile_SiteVerifyDefaultTypeInternal() {}
  union {
    BaiduProfile_SiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaiduProfile_SiteVerifyDefaultTypeInternal _BaiduProfile_SiteVerify_default_instance_;
PROTOBUF_CONSTEXPR BaiduProfile::BaiduProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_)*/nullptr} {}
struct BaiduProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaiduProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaiduProfileDefaultTypeInternal() {}
  union {
    BaiduProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
PROTOBUF_CONSTEXPR BingProfile::BingProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BingProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BingProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BingProfileDefaultTypeInternal() {}
  union {
    BingProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BingProfileDefaultTypeInternal _BingProfile_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Attachment::EmailTask_Attachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_AttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_AttachmentDefaultTypeInternal() {}
  union {
    EmailTask_Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
PROTOBUF_CONSTEXPR EmailTask::EmailTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_)*/{}
  , /*decltype(_impl_.bcc_)*/{}
  , /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTaskDefaultTypeInternal() {}
  union {
    EmailTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
PROTOBUF_CONSTEXPR SmtpProfile::SmtpProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bcc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmtpProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmtpProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmtpProfileDefaultTypeInternal() {}
  union {
    SmtpProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Database::SiteStatusResponse_Database(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_DatabaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_DatabaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_DatabaseDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Database _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_DatabaseDefaultTypeInternal _SiteStatusResponse_Database_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.databases_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.now_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_PostgreSqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_PostgreSql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_MySql::SiteStatusResponse_MySql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_MySqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_MySqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_MySqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_MySql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_MySqlDefaultTypeInternal _SiteStatusResponse_MySql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_Redis_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_Redis_ItemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_Redis_ItemDefaultTypeInternal _SiteStatusResponse_Redis_Item_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis::SiteStatusResponse_Redis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RedisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RedisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RedisDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RabbitMqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RabbitMqDefaultTypeInternal() {}
  union {
    SiteStatusResponse_RabbitMq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RabbitMqDefaultTypeInternal _SiteStatusResponse_RabbitMq_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_OpenSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_OpenSearchDefaultTypeInternal() {}
  union {
    SiteStatusResponse_OpenSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Health::SiteStatusResponse_Health(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_HealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_HealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_HealthDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Health _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_HealthDefaultTypeInternal _SiteStatusResponse_Health_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_System::SiteStatusResponse_System(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.boot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.swap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uptime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_SystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_SystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_SystemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_System _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_SystemDefaultTypeInternal _SiteStatusResponse_System_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse::SiteStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.healthes_)*/{}
  , /*decltype(_impl_.postgresql_)*/nullptr
  , /*decltype(_impl_.mysql_)*/nullptr
  , /*decltype(_impl_.redis_)*/nullptr
  , /*decltype(_impl_.rabbitmq_)*/nullptr
  , /*decltype(_impl_.opensearch_)*/nullptr
  , /*decltype(_impl_.system_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponseDefaultTypeInternal() {}
  union {
    SiteStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace plugins
}  // namespace palm
static ::_pb::Metadata file_level_metadata_nut_2eproto[37];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nut_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_nut_2eproto = nullptr;

const uint32_t TableStruct_nut_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pager, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pager, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _impl_.has_next_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _impl_.has_previous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::IdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::IdRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleGetRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleGetRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _impl_.endpoint_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _impl_.access_key_id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _impl_.secret_access_key_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteAwsS3TestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteAwsS3TestResponse, _impl_.buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetLogoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetLogoRequest, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetCopyrightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetCopyrightRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetKeywordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetKeywordsRequest, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse_Author, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse_Author, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse_Author, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.keywords_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.copyright_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _impl_.languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteNewLeaveWordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteNewLeaveWordRequest, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha, _impl_.site_key_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, _impl_.site_verify_id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, _impl_.re_captcha_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile_SiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile_SiteVerify, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile_SiteVerify, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile, _impl_.site_verify_),
  0,
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BingProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BingProfile, _impl_.site_verify_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _impl_.attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _impl_.bcc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Database, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Database, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, _impl_.databases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_MySql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_MySql, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_MySql, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq, _impl_.protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Health, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Health, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.cpu_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.boot_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.disk_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.fs_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.swap_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.uptime_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _impl_.network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.postgresql_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.mysql_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.redis_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.rabbitmq_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.opensearch_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _impl_.healthes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::plugins::nut::v1::Pager)},
  { 8, -1, -1, sizeof(::palm::plugins::nut::v1::Pagination)},
  { 19, -1, -1, sizeof(::palm::plugins::nut::v1::IdRequest)},
  { 26, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleIndexResponse_Item)},
  { 37, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleIndexResponse)},
  { 45, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleGetRequest)},
  { 53, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleSetRequest)},
  { 62, 72, -1, sizeof(::palm::plugins::nut::v1::AwsProfile)},
  { 76, -1, -1, sizeof(::palm::plugins::nut::v1::SiteAwsS3TestResponse)},
  { 83, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSmtpTestRequst)},
  { 92, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetLogoRequest)},
  { 99, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetCopyrightRequest)},
  { 106, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetKeywordsRequest)},
  { 113, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetInfoRequest)},
  { 122, -1, -1, sizeof(::palm::plugins::nut::v1::SiteLayoutResponse_Author)},
  { 130, -1, -1, sizeof(::palm::plugins::nut::v1::SiteLayoutResponse)},
  { 144, -1, -1, sizeof(::palm::plugins::nut::v1::SiteNewLeaveWordRequest)},
  { 151, -1, -1, sizeof(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item)},
  { 162, -1, -1, sizeof(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse)},
  { 170, -1, -1, sizeof(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha)},
  { 178, 186, -1, sizeof(::palm::plugins::nut::v1::GoogleProfile)},
  { 188, -1, -1, sizeof(::palm::plugins::nut::v1::BaiduProfile_SiteVerify)},
  { 196, 203, -1, sizeof(::palm::plugins::nut::v1::BaiduProfile)},
  { 204, 211, -1, sizeof(::palm::plugins::nut::v1::BingProfile)},
  { 212, -1, -1, sizeof(::palm::plugins::nut::v1::EmailTask_Attachment)},
  { 221, -1, -1, sizeof(::palm::plugins::nut::v1::EmailTask)},
  { 234, -1, -1, sizeof(::palm::plugins::nut::v1::SmtpProfile)},
  { 246, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Database)},
  { 254, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql)},
  { 263, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_MySql)},
  { 271, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item)},
  { 279, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Redis)},
  { 287, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq)},
  { 294, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch)},
  { 302, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Health)},
  { 310, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_System)},
  { 326, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::plugins::nut::v1::_Pager_default_instance_._instance,
  &::palm::plugins::nut::v1::_Pagination_default_instance_._instance,
  &::palm::plugins::nut::v1::_IdRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_LocaleIndexResponse_Item_default_instance_._instance,
  &::palm::plugins::nut::v1::_LocaleIndexResponse_default_instance_._instance,
  &::palm::plugins::nut::v1::_LocaleGetRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_LocaleSetRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_AwsProfile_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteAwsS3TestResponse_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteSmtpTestRequst_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteSetLogoRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteSetCopyrightRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteSetKeywordsRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteSetInfoRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteLayoutResponse_Author_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteLayoutResponse_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteNewLeaveWordRequest_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteIndexLeaveWordResponse_Item_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteIndexLeaveWordResponse_default_instance_._instance,
  &::palm::plugins::nut::v1::_GoogleProfile_ReCaptcha_default_instance_._instance,
  &::palm::plugins::nut::v1::_GoogleProfile_default_instance_._instance,
  &::palm::plugins::nut::v1::_BaiduProfile_SiteVerify_default_instance_._instance,
  &::palm::plugins::nut::v1::_BaiduProfile_default_instance_._instance,
  &::palm::plugins::nut::v1::_BingProfile_default_instance_._instance,
  &::palm::plugins::nut::v1::_EmailTask_Attachment_default_instance_._instance,
  &::palm::plugins::nut::v1::_EmailTask_default_instance_._instance,
  &::palm::plugins::nut::v1::_SmtpProfile_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_Database_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_PostgreSql_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_MySql_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_Redis_Item_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_Redis_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_RabbitMq_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_OpenSearch_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_Health_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_System_default_instance_._instance,
  &::palm::plugins::nut::v1::_SiteStatusResponse_default_instance_._instance,
};

const char descriptor_table_protodef_nut_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnut.proto\022\023palm.plugins.nut.v1\032\033google"
  "/protobuf/empty.proto\032\037google/protobuf/t"
  "imestamp.proto\"#\n\005Pager\022\014\n\004page\030\001 \001(\003\022\014\n"
  "\004size\030\002 \001(\003\"_\n\nPagination\022\014\n\004page\030\001 \001(\003\022"
  "\014\n\004size\030\002 \001(\003\022\r\n\005total\030\003 \001(\003\022\020\n\010has_next"
  "\030\013 \001(\010\022\024\n\014has_previous\030\014 \001(\010\"\027\n\tIdReques"
  "t\022\n\n\002id\030\001 \001(\005\"\371\001\n\023LocaleIndexResponse\022<\n"
  "\005items\030\001 \003(\0132-.palm.plugins.nut.v1.Local"
  "eIndexResponse.Item\0223\n\npagination\030\t \001(\0132"
  "\037.palm.plugins.nut.v1.Pagination\032o\n\004Item"
  "\022\n\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\014\n\004code\030\003 \001(\t"
  "\022\017\n\007message\030\004 \001(\t\022.\n\nupdated_at\030\t \001(\0132\032."
  "google.protobuf.Timestamp\".\n\020LocaleGetRe"
  "quest\022\014\n\004lang\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"\?\n\020Loc"
  "aleSetRequest\022\014\n\004lang\030\001 \001(\t\022\014\n\004code\030\002 \001("
  "\t\022\017\n\007message\030\003 \001(\t\"r\n\nAwsProfile\022\016\n\006regi"
  "on\030\001 \001(\t\022\025\n\010endpoint\030\002 \001(\tH\000\210\001\001\022\025\n\racces"
  "s_key_id\030\003 \001(\t\022\031\n\021secret_access_key\030\004 \001("
  "\tB\013\n\t_endpoint\"(\n\025SiteAwsS3TestResponse\022"
  "\017\n\007buckets\030\001 \003(\t\"\?\n\022SiteSmtpTestRequst\022\n"
  "\n\002to\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022\014\n\004body\030\003 \001("
  "\t\"!\n\022SiteSetLogoRequest\022\013\n\003url\030\001 \001(\t\"*\n\027"
  "SiteSetCopyrightRequest\022\017\n\007payload\030\001 \001(\t"
  "\"\'\n\026SiteSetKeywordsRequest\022\r\n\005items\030\001 \003("
  "\t\"I\n\022SiteSetInfoRequest\022\r\n\005title\030\001 \001(\t\022\017"
  "\n\007subhead\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\"\366\001\n"
  "\022SiteLayoutResponse\022\r\n\005title\030\001 \001(\t\022\017\n\007su"
  "bhead\030\002 \001(\t\022\020\n\010keywords\030\003 \003(\t\022\023\n\013descrip"
  "tion\030\004 \001(\t\022>\n\006author\030\005 \001(\0132..palm.plugin"
  "s.nut.v1.SiteLayoutResponse.Author\022\021\n\tco"
  "pyright\030\006 \001(\t\022\014\n\004logo\030\007 \001(\t\022\021\n\tlanguages"
  "\030\t \003(\t\032%\n\006Author\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030"
  "\002 \001(\t\"\'\n\027SiteNewLeaveWordRequest\022\014\n\004body"
  "\030\001 \001(\t\"\202\002\n\032SiteIndexLeaveWordResponse\022C\n"
  "\005items\030\001 \003(\01324.palm.plugins.nut.v1.SiteI"
  "ndexLeaveWordResponse.Item\0223\n\npagination"
  "\030\t \001(\0132\037.palm.plugins.nut.v1.Pagination\032"
  "j\n\004Item\022\n\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\n\n\002ip\030"
  "\003 \001(\t\022\014\n\004body\030\004 \001(\t\022.\n\ncreated_at\030\t \001(\0132"
  "\032.google.protobuf.Timestamp\"\304\001\n\rGooglePr"
  "ofile\022\033\n\016site_verify_id\030\001 \001(\tH\000\210\001\001\022E\n\nre"
  "_captcha\030\002 \001(\0132,.palm.plugins.nut.v1.Goo"
  "gleProfile.ReCaptchaH\001\210\001\001\032-\n\tReCaptcha\022\020"
  "\n\010site_key\030\001 \001(\t\022\016\n\006secret\030\002 \001(\tB\021\n\017_sit"
  "e_verify_idB\r\n\013_re_captcha\"\221\001\n\014BaiduProf"
  "ile\022F\n\013site_verify\030\001 \001(\0132,.palm.plugins."
  "nut.v1.BaiduProfile.SiteVerifyH\000\210\001\001\032)\n\nS"
  "iteVerify\022\n\n\002id\030\001 \001(\t\022\017\n\007content\030\002 \001(\tB\016"
  "\n\014_site_verify\"=\n\013BingProfile\022\033\n\016site_ve"
  "rify_id\030\001 \001(\tH\000\210\001\001B\021\n\017_site_verify_id\"\356\002"
  "\n\tEmailTask\022\017\n\007subject\030\001 \001(\t\022\014\n\004body\030\002 \001"
  "(\t\022@\n\014content_type\030\003 \001(\0162*.palm.plugins."
  "nut.v1.EmailTask.ContentType\022\n\n\002to\030\013 \001(\t"
  "\022\n\n\002cc\030\014 \003(\t\022\013\n\003bcc\030\r \003(\t\022>\n\013attachments"
  "\030\025 \003(\0132).palm.plugins.nut.v1.EmailTask.A"
  "ttachment\032m\n\nAttachment\022\014\n\004name\030\001 \001(\t\022@\n"
  "\014content_type\030\002 \001(\0162*.palm.plugins.nut.v"
  "1.EmailTask.ContentType\022\017\n\007payload\030\013 \001(\014"
  "\",\n\013ContentType\022\016\n\nTEXT_PLAIN\020\000\022\r\n\tTEXT_"
  "HTML\020\001\"b\n\013SmtpProfile\022\014\n\004host\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\r\022\014\n\004user\030\003 \001(\t\022\020\n\010password\030\004 \001("
  "\t\022\n\n\002cc\030\005 \001(\t\022\013\n\003bcc\030\006 \001(\t\"\315\010\n\022SiteStatu"
  "sResponse\022F\n\npostgresql\030\001 \001(\01322.palm.plu"
  "gins.nut.v1.SiteStatusResponse.PostgreSq"
  "l\022<\n\005mysql\030\002 \001(\0132-.palm.plugins.nut.v1.S"
  "iteStatusResponse.MySql\022<\n\005redis\030\003 \001(\0132-"
  ".palm.plugins.nut.v1.SiteStatusResponse."
  "Redis\022B\n\010rabbitmq\030\004 \001(\01320.palm.plugins.n"
  "ut.v1.SiteStatusResponse.RabbitMq\022F\n\nope"
  "nsearch\030\005 \001(\01322.palm.plugins.nut.v1.Site"
  "StatusResponse.OpenSearch\022>\n\006system\030\013 \001("
  "\0132..palm.plugins.nut.v1.SiteStatusRespon"
  "se.System\022@\n\010healthes\030\025 \003(\0132..palm.plugi"
  "ns.nut.v1.SiteStatusResponse.Health\032&\n\010D"
  "atabase\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\t\032\213\001\n\n"
  "PostgreSql\022\017\n\007version\030\001 \001(\t\022\'\n\003now\030\002 \001(\013"
  "2\032.google.protobuf.Timestamp\022C\n\tdatabase"
  "s\030\t \003(\01320.palm.plugins.nut.v1.SiteStatus"
  "Response.Database\032&\n\005MySql\022\014\n\004size\030\001 \001(\004"
  "\022\017\n\007version\030\002 \001(\t\032z\n\005Redis\022\014\n\004info\030\001 \001(\t"
  "\022A\n\005items\030\002 \003(\01322.palm.plugins.nut.v1.Si"
  "teStatusResponse.Redis.Item\032 \n\004Item\022\013\n\003k"
  "ey\030\001 \001(\t\022\013\n\003ttl\030\002 \001(\003\032\034\n\010RabbitMq\022\020\n\010pro"
  "tocol\030\001 \001(\t\032\'\n\nOpenSearch\022\013\n\003url\030\001 \001(\t\022\014"
  "\n\004info\030\002 \001(\t\032&\n\006Health\022\014\n\004name\030\001 \001(\t\022\016\n\006"
  "status\030\002 \001(\t\032\233\001\n\006System\022\017\n\007version\030\001 \001(\t"
  "\022\013\n\003cpu\030\002 \001(\t\022\016\n\006memory\030\003 \001(\t\022\014\n\004boot\030\004 "
  "\001(\t\022\014\n\004disk\030\005 \001(\t\022\014\n\004load\030\006 \001(\t\022\n\n\002fs\030\007 "
  "\001(\t\022\014\n\004swap\030\010 \001(\t\022\016\n\006uptime\030\t \001(\t\022\017\n\007net"
  "work\030\n \001(\t2\305\002\n\006Locale\022F\n\003Set\022%.palm.plug"
  "ins.nut.v1.LocaleSetRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022]\n\003Get\022%.palm.plugins.nut."
  "v1.LocaleGetRequest\032-.palm.plugins.nut.v"
  "1.LocaleIndexResponse.Item\"\000\022O\n\005Index\022\032."
  "palm.plugins.nut.v1.Pager\032(.palm.plugins"
  ".nut.v1.LocaleIndexResponse\"\000\022C\n\007Destroy"
  "\022\036.palm.plugins.nut.v1.IdRequest\032\026.googl"
  "e.protobuf.Empty\"\0002\370\r\n\004Site\022>\n\nClearCach"
  "e\022\026.google.protobuf.Empty\032\026.google.proto"
  "buf.Empty\"\000\022K\n\006Layout\022\026.google.protobuf."
  "Empty\032\'.palm.plugins.nut.v1.SiteLayoutRe"
  "sponse\"\000\022U\n\tSetAuthor\022..palm.plugins.nut"
  ".v1.SiteLayoutResponse.Author\032\026.google.p"
  "rotobuf.Empty\"\000\022V\n\014SetCopyright\022,.palm.p"
  "lugins.nut.v1.SiteSetCopyrightRequest\032\026."
  "google.protobuf.Empty\"\000\022T\n\013SetKeywords\022+"
  ".palm.plugins.nut.v1.SiteSetKeywordsRequ"
  "est\032\026.google.protobuf.Empty\"\000\022L\n\007SetInfo"
  "\022\'.palm.plugins.nut.v1.SiteSetInfoReques"
  "t\032\026.google.protobuf.Empty\"\000\022L\n\007SetLogo\022\'"
  ".palm.plugins.nut.v1.SiteSetLogoRequest\032"
  "\026.google.protobuf.Empty\"\000\022C\n\006SetAws\022\037.pa"
  "lm.plugins.nut.v1.AwsProfile\032\026.google.pr"
  "otobuf.Empty\"\000\022C\n\006GetAws\022\026.google.protob"
  "uf.Empty\032\037.palm.plugins.nut.v1.AwsProfil"
  "e\"\000\022Q\n\tTestAwsS3\022\026.google.protobuf.Empty"
  "\032*.palm.plugins.nut.v1.SiteAwsS3TestResp"
  "onse\"\000\022E\n\007SetSmtp\022 .palm.plugins.nut.v1."
  "SmtpProfile\032\026.google.protobuf.Empty\"\000\022E\n"
  "\007GetSmtp\022\026.google.protobuf.Empty\032 .palm."
  "plugins.nut.v1.SmtpProfile\"\000\022M\n\010TestSmtp"
  "\022\'.palm.plugins.nut.v1.SiteSmtpTestRequs"
  "t\032\026.google.protobuf.Empty\"\000\022E\n\007SetBing\022 "
  ".palm.plugins.nut.v1.BingProfile\032\026.googl"
  "e.protobuf.Empty\"\000\022E\n\007GetBing\022\026.google.p"
  "rotobuf.Empty\032 .palm.plugins.nut.v1.Bing"
  "Profile\"\000\022I\n\tSetGoogle\022\".palm.plugins.nu"
  "t.v1.GoogleProfile\032\026.google.protobuf.Emp"
  "ty\"\000\022I\n\tGetGoogle\022\026.google.protobuf.Empt"
  "y\032\".palm.plugins.nut.v1.GoogleProfile\"\000\022"
  "G\n\010SetBaidu\022!.palm.plugins.nut.v1.BaiduP"
  "rofile\032\026.google.protobuf.Empty\"\000\022G\n\010GetB"
  "aidu\022\026.google.protobuf.Empty\032!.palm.plug"
  "ins.nut.v1.BaiduProfile\"\000\022K\n\006Status\022\026.go"
  "ogle.protobuf.Empty\032\'.palm.plugins.nut.v"
  "1.SiteStatusResponse\"\000\022V\n\014NewLeaveWord\022,"
  ".palm.plugins.nut.v1.SiteNewLeaveWordReq"
  "uest\032\026.google.protobuf.Empty\"\000\022_\n\016IndexL"
  "eaveWord\022\032.palm.plugins.nut.v1.Pager\032/.p"
  "alm.plugins.nut.v1.SiteIndexLeaveWordRes"
  "ponse\"\000\022L\n\020DestroyLeaveWord\022\036.palm.plugi"
  "ns.nut.v1.IdRequest\032\026.google.protobuf.Em"
  "pty\"\000B\002P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_nut_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_nut_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nut_2eproto = {
    false, false, 5697, descriptor_table_protodef_nut_2eproto,
    "nut.proto",
    &descriptor_table_nut_2eproto_once, descriptor_table_nut_2eproto_deps, 2, 37,
    schemas, file_default_instances, TableStruct_nut_2eproto::offsets,
    file_level_metadata_nut_2eproto, file_level_enum_descriptors_nut_2eproto,
    file_level_service_descriptors_nut_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nut_2eproto_getter() {
  return &descriptor_table_nut_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_nut_2eproto(&descriptor_table_nut_2eproto);
namespace palm {
namespace plugins {
namespace nut {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmailTask_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nut_2eproto);
  return file_level_enum_descriptors_nut_2eproto[0];
}
bool EmailTask_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EmailTask_ContentType EmailTask::TEXT_PLAIN;
constexpr EmailTask_ContentType EmailTask::TEXT_HTML;
constexpr EmailTask_ContentType EmailTask::ContentType_MIN;
constexpr EmailTask_ContentType EmailTask::ContentType_MAX;
constexpr int EmailTask::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Pager::_Internal {
 public:
};

Pager::Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.Pager)
}
Pager::Pager(const Pager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pager* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.Pager)
}

inline void Pager::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pager::~Pager() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.Pager)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pager::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pager::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.Pager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pager::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.Pager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.Pager)
  return target;
}

size_t Pager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.Pager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pager::GetClassData() const { return &_class_data_; }


void Pager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pager*>(&to_msg);
  auto& from = static_cast<const Pager&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.Pager)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pager::CopyFrom(const Pager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.Pager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pager::IsInitialized() const {
  return true;
}

void Pager::InternalSwap(Pager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pager, _impl_.size_)
      + sizeof(Pager::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Pager, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pager::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[0]);
}

// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.total_){}
    , decltype(_impl_.has_next_){}
    , decltype(_impl_.has_previous_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_previous_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.has_previous_));
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.Pagination)
}

inline void Pagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.total_){int64_t{0}}
    , decltype(_impl_.has_next_){false}
    , decltype(_impl_.has_previous_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.Pagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.Pagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_previous_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.has_previous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_next = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.has_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_previous = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.has_previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.Pagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total(), target);
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_has_next(), target);
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_has_previous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.Pagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total());
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    total_size += 1 + 1;
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }


void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pagination*>(&to_msg);
  auto& from = static_cast<const Pagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.Pagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_has_next() != 0) {
    _this->_internal_set_has_next(from._internal_has_next());
  }
  if (from._internal_has_previous() != 0) {
    _this->_internal_set_has_previous(from._internal_has_previous());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, _impl_.has_previous_)
      + sizeof(Pagination::_impl_.has_previous_)
      - PROTOBUF_FIELD_OFFSET(Pagination, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[1]);
}

// ===================================================================

class IdRequest::_Internal {
 public:
};

IdRequest::IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.IdRequest)
}
IdRequest::IdRequest(const IdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.IdRequest)
}

inline void IdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdRequest::~IdRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.IdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.IdRequest)
  return target;
}

size_t IdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.IdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdRequest::GetClassData() const { return &_class_data_; }


void IdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdRequest*>(&to_msg);
  auto& from = static_cast<const IdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.IdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdRequest::CopyFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdRequest::IsInitialized() const {
  return true;
}

void IdRequest::InternalSwap(IdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[2]);
}

// ===================================================================

class LocaleIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LocaleIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LocaleIndexResponse_Item::_Internal::updated_at(const LocaleIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void LocaleIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleIndexResponse.Item)
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleIndexResponse.Item)
}

inline void LocaleIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleIndexResponse_Item::~LocaleIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void LocaleIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleIndexResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleIndexResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  return target;
}

size_t LocaleIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse_Item::GetClassData() const { return &_class_data_; }


void LocaleIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const LocaleIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse_Item::CopyFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse_Item::IsInitialized() const {
  return true;
}

void LocaleIndexResponse_Item::InternalSwap(LocaleIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, _impl_.id_)
      + sizeof(LocaleIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[3]);
}

// ===================================================================

class LocaleIndexResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::Pagination& pagination(const LocaleIndexResponse* msg);
};

const ::palm::plugins::nut::v1::Pagination&
LocaleIndexResponse::_Internal::pagination(const LocaleIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
LocaleIndexResponse::LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleIndexResponse)
}
LocaleIndexResponse::LocaleIndexResponse(const LocaleIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::plugins::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleIndexResponse)
}

inline void LocaleIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocaleIndexResponse::~LocaleIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void LocaleIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleIndexResponse)
  return target;
}

size_t LocaleIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse::GetClassData() const { return &_class_data_; }


void LocaleIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleIndexResponse*>(&to_msg);
  auto& from = static_cast<const LocaleIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::plugins::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse::CopyFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse::IsInitialized() const {
  return true;
}

void LocaleIndexResponse::InternalSwap(LocaleIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[4]);
}

// ===================================================================

class LocaleGetRequest::_Internal {
 public:
};

LocaleGetRequest::LocaleGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleGetRequest)
}
LocaleGetRequest::LocaleGetRequest(const LocaleGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleGetRequest)
}

inline void LocaleGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleGetRequest::~LocaleGetRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
}

void LocaleGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleGetRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleGetRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleGetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleGetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleGetRequest)
  return target;
}

size_t LocaleGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleGetRequest::GetClassData() const { return &_class_data_; }


void LocaleGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleGetRequest*>(&to_msg);
  auto& from = static_cast<const LocaleGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleGetRequest::CopyFrom(const LocaleGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleGetRequest::IsInitialized() const {
  return true;
}

void LocaleGetRequest::InternalSwap(LocaleGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[5]);
}

// ===================================================================

class LocaleSetRequest::_Internal {
 public:
};

LocaleSetRequest::LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleSetRequest)
}
LocaleSetRequest::LocaleSetRequest(const LocaleSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleSetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleSetRequest)
}

inline void LocaleSetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleSetRequest::~LocaleSetRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleSetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
}

void LocaleSetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleSetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleSetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleSetRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleSetRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleSetRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleSetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleSetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleSetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleSetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleSetRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleSetRequest)
  return target;
}

size_t LocaleSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleSetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleSetRequest::GetClassData() const { return &_class_data_; }


void LocaleSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleSetRequest*>(&to_msg);
  auto& from = static_cast<const LocaleSetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleSetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleSetRequest::CopyFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleSetRequest::IsInitialized() const {
  return true;
}

void LocaleSetRequest::InternalSwap(LocaleSetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleSetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[6]);
}

// ===================================================================

class AwsProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<AwsProfile>()._impl_._has_bits_);
  static void set_has_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AwsProfile::AwsProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.AwsProfile)
}
AwsProfile::AwsProfile(const AwsProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AwsProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.region_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.access_key_id_){}
    , decltype(_impl_.secret_access_key_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_endpoint()) {
    _this->_impl_.endpoint_.Set(from._internal_endpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.access_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_key_id().empty()) {
    _this->_impl_.access_key_id_.Set(from._internal_access_key_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_access_key().empty()) {
    _this->_impl_.secret_access_key_.Set(from._internal_secret_access_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.AwsProfile)
}

inline void AwsProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.region_){}
    , decltype(_impl_.endpoint_){}
    , decltype(_impl_.access_key_id_){}
    , decltype(_impl_.secret_access_key_){}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.access_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_access_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_access_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AwsProfile::~AwsProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.AwsProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AwsProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
  _impl_.endpoint_.Destroy();
  _impl_.access_key_id_.Destroy();
  _impl_.secret_access_key_.Destroy();
}

void AwsProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AwsProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.AwsProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.endpoint_.ClearNonDefaultToEmpty();
  }
  _impl_.access_key_id_.ClearToEmpty();
  _impl_.secret_access_key_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwsProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.region"));
        } else
          goto handle_unusual;
        continue;
      // optional string endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.endpoint"));
        } else
          goto handle_unusual;
        continue;
      // string access_key_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_access_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.access_key_id"));
        } else
          goto handle_unusual;
        continue;
      // string secret_access_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_secret_access_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.secret_access_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AwsProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.AwsProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // optional string endpoint = 2;
  if (_internal_has_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.endpoint");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_endpoint(), target);
  }

  // string access_key_id = 3;
  if (!this->_internal_access_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key_id().data(), static_cast<int>(this->_internal_access_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.access_key_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_key_id(), target);
  }

  // string secret_access_key = 4;
  if (!this->_internal_secret_access_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_access_key().data(), static_cast<int>(this->_internal_secret_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.secret_access_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secret_access_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.AwsProfile)
  return target;
}

size_t AwsProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.AwsProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // optional string endpoint = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string access_key_id = 3;
  if (!this->_internal_access_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key_id());
  }

  // string secret_access_key = 4;
  if (!this->_internal_secret_access_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_access_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AwsProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AwsProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AwsProfile::GetClassData() const { return &_class_data_; }


void AwsProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AwsProfile*>(&to_msg);
  auto& from = static_cast<const AwsProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.AwsProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_has_endpoint()) {
    _this->_internal_set_endpoint(from._internal_endpoint());
  }
  if (!from._internal_access_key_id().empty()) {
    _this->_internal_set_access_key_id(from._internal_access_key_id());
  }
  if (!from._internal_secret_access_key().empty()) {
    _this->_internal_set_secret_access_key(from._internal_secret_access_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AwsProfile::CopyFrom(const AwsProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.AwsProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwsProfile::IsInitialized() const {
  return true;
}

void AwsProfile::InternalSwap(AwsProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endpoint_, lhs_arena,
      &other->_impl_.endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_key_id_, lhs_arena,
      &other->_impl_.access_key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_access_key_, lhs_arena,
      &other->_impl_.secret_access_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AwsProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[7]);
}

// ===================================================================

class SiteAwsS3TestResponse::_Internal {
 public:
};

SiteAwsS3TestResponse::SiteAwsS3TestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteAwsS3TestResponse)
}
SiteAwsS3TestResponse::SiteAwsS3TestResponse(const SiteAwsS3TestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteAwsS3TestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buckets_){from._impl_.buckets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteAwsS3TestResponse)
}

inline void SiteAwsS3TestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buckets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteAwsS3TestResponse::~SiteAwsS3TestResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteAwsS3TestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buckets_.~RepeatedPtrField();
}

void SiteAwsS3TestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteAwsS3TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buckets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteAwsS3TestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buckets();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteAwsS3TestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string buckets = 1;
  for (int i = 0, n = this->_internal_buckets_size(); i < n; i++) {
    const auto& s = this->_internal_buckets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  return target;
}

size_t SiteAwsS3TestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buckets = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.buckets_.size());
  for (int i = 0, n = _impl_.buckets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.buckets_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteAwsS3TestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteAwsS3TestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteAwsS3TestResponse::GetClassData() const { return &_class_data_; }


void SiteAwsS3TestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteAwsS3TestResponse*>(&to_msg);
  auto& from = static_cast<const SiteAwsS3TestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buckets_.MergeFrom(from._impl_.buckets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteAwsS3TestResponse::CopyFrom(const SiteAwsS3TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteAwsS3TestResponse::IsInitialized() const {
  return true;
}

void SiteAwsS3TestResponse::InternalSwap(SiteAwsS3TestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buckets_.InternalSwap(&other->_impl_.buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteAwsS3TestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[8]);
}

// ===================================================================

class SiteSmtpTestRequst::_Internal {
 public:
};

SiteSmtpTestRequst::SiteSmtpTestRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSmtpTestRequst)
}
SiteSmtpTestRequst::SiteSmtpTestRequst(const SiteSmtpTestRequst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSmtpTestRequst* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSmtpTestRequst)
}

inline void SiteSmtpTestRequst::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSmtpTestRequst::~SiteSmtpTestRequst() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSmtpTestRequst)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSmtpTestRequst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.Destroy();
  _impl_.subject_.Destroy();
  _impl_.body_.Destroy();
}

void SiteSmtpTestRequst::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSmtpTestRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.ClearToEmpty();
  _impl_.subject_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSmtpTestRequst::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSmtpTestRequst.to"));
        } else
          goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSmtpTestRequst.subject"));
        } else
          goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSmtpTestRequst.body"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSmtpTestRequst::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSmtpTestRequst.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSmtpTestRequst.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSmtpTestRequst.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSmtpTestRequst)
  return target;
}

size_t SiteSmtpTestRequst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSmtpTestRequst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSmtpTestRequst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSmtpTestRequst::GetClassData() const { return &_class_data_; }


void SiteSmtpTestRequst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSmtpTestRequst*>(&to_msg);
  auto& from = static_cast<const SiteSmtpTestRequst&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSmtpTestRequst::CopyFrom(const SiteSmtpTestRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSmtpTestRequst::IsInitialized() const {
  return true;
}

void SiteSmtpTestRequst::InternalSwap(SiteSmtpTestRequst* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSmtpTestRequst::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[9]);
}

// ===================================================================

class SiteSetLogoRequest::_Internal {
 public:
};

SiteSetLogoRequest::SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetLogoRequest)
}
SiteSetLogoRequest::SiteSetLogoRequest(const SiteSetLogoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetLogoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetLogoRequest)
}

inline void SiteSetLogoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetLogoRequest::~SiteSetLogoRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetLogoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetLogoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void SiteSetLogoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetLogoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetLogoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetLogoRequest.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetLogoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetLogoRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetLogoRequest)
  return target;
}

size_t SiteSetLogoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetLogoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetLogoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetLogoRequest::GetClassData() const { return &_class_data_; }


void SiteSetLogoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetLogoRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetLogoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetLogoRequest::CopyFrom(const SiteSetLogoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetLogoRequest::IsInitialized() const {
  return true;
}

void SiteSetLogoRequest::InternalSwap(SiteSetLogoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetLogoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[10]);
}

// ===================================================================

class SiteSetCopyrightRequest::_Internal {
 public:
};

SiteSetCopyrightRequest::SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetCopyrightRequest)
}
SiteSetCopyrightRequest::SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetCopyrightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetCopyrightRequest)
}

inline void SiteSetCopyrightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetCopyrightRequest::~SiteSetCopyrightRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetCopyrightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SiteSetCopyrightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetCopyrightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetCopyrightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetCopyrightRequest.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetCopyrightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetCopyrightRequest.payload");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  return target;
}

size_t SiteSetCopyrightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetCopyrightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetCopyrightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetCopyrightRequest::GetClassData() const { return &_class_data_; }


void SiteSetCopyrightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetCopyrightRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetCopyrightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetCopyrightRequest::CopyFrom(const SiteSetCopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetCopyrightRequest::IsInitialized() const {
  return true;
}

void SiteSetCopyrightRequest::InternalSwap(SiteSetCopyrightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetCopyrightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[11]);
}

// ===================================================================

class SiteSetKeywordsRequest::_Internal {
 public:
};

SiteSetKeywordsRequest::SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetKeywordsRequest)
}
SiteSetKeywordsRequest::SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetKeywordsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetKeywordsRequest)
}

inline void SiteSetKeywordsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteSetKeywordsRequest::~SiteSetKeywordsRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetKeywordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SiteSetKeywordsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetKeywordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetKeywordsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetKeywordsRequest.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetKeywordsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetKeywordsRequest.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  return target;
}

size_t SiteSetKeywordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetKeywordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetKeywordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetKeywordsRequest::GetClassData() const { return &_class_data_; }


void SiteSetKeywordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetKeywordsRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetKeywordsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetKeywordsRequest::CopyFrom(const SiteSetKeywordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetKeywordsRequest::IsInitialized() const {
  return true;
}

void SiteSetKeywordsRequest::InternalSwap(SiteSetKeywordsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetKeywordsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[12]);
}

// ===================================================================

class SiteSetInfoRequest::_Internal {
 public:
};

SiteSetInfoRequest::SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetInfoRequest)
}
SiteSetInfoRequest::SiteSetInfoRequest(const SiteSetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetInfoRequest)
}

inline void SiteSetInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetInfoRequest::~SiteSetInfoRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
}

void SiteSetInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetInfoRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetInfoRequest.subhead"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetInfoRequest.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetInfoRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetInfoRequest.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetInfoRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetInfoRequest)
  return target;
}

size_t SiteSetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetInfoRequest::GetClassData() const { return &_class_data_; }


void SiteSetInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetInfoRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetInfoRequest::CopyFrom(const SiteSetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetInfoRequest::IsInitialized() const {
  return true;
}

void SiteSetInfoRequest::InternalSwap(SiteSetInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[13]);
}

// ===================================================================

class SiteLayoutResponse_Author::_Internal {
 public:
};

SiteLayoutResponse_Author::SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteLayoutResponse.Author)
}
SiteLayoutResponse_Author::SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse_Author* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteLayoutResponse.Author)
}

inline void SiteLayoutResponse_Author::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse_Author::~SiteLayoutResponse_Author() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse_Author::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void SiteLayoutResponse_Author::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse_Author::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_Author::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.Author.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.Author.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse_Author::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.Author.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.Author.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  return target;
}

size_t SiteLayoutResponse_Author::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_Author::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse_Author::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_Author::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse_Author::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse_Author*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse_Author&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_Author::CopyFrom(const SiteLayoutResponse_Author& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_Author::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_Author::InternalSwap(SiteLayoutResponse_Author* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_Author::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[14]);
}

// ===================================================================

class SiteLayoutResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& author(const SiteLayoutResponse* msg);
};

const ::palm::plugins::nut::v1::SiteLayoutResponse_Author&
SiteLayoutResponse::_Internal::author(const SiteLayoutResponse* msg) {
  return *msg->_impl_.author_;
}
SiteLayoutResponse::SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteLayoutResponse)
}
SiteLayoutResponse::SiteLayoutResponse(const SiteLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keywords_){from._impl_.keywords_}
    , decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::palm::plugins::nut::v1::SiteLayoutResponse_Author(*from._impl_.author_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteLayoutResponse)
}

inline void SiteLayoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keywords_){arena}
    , decltype(_impl_.languages_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse::~SiteLayoutResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteLayoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keywords_.~RepeatedPtrField();
  _impl_.languages_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
  _impl_.copyright_.Destroy();
  _impl_.logo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
}

void SiteLayoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keywords_.Clear();
  _impl_.languages_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.subhead"));
        } else
          goto handle_unusual;
        continue;
      // repeated string keywords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.keywords"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.description"));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string copyright = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.copyright"));
        } else
          goto handle_unusual;
        continue;
      // string logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.logo"));
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.keywords");
    target = stream->WriteString(3, s, target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.copyright");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_copyright(), target);
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.logo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logo(), target);
  }

  // repeated string languages = 9;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.languages");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteLayoutResponse)
  return target;
}

size_t SiteLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteLayoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keywords_.size());
  for (int i = 0, n = _impl_.keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keywords_.Get(i));
  }

  // repeated string languages = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteLayoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::palm::plugins::nut::v1::SiteLayoutResponse_Author::MergeFrom(
        from._internal_author());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse::CopyFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse::IsInitialized() const {
  return true;
}

void SiteLayoutResponse::InternalSwap(SiteLayoutResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keywords_.InternalSwap(&other->_impl_.keywords_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_, lhs_arena,
      &other->_impl_.logo_, rhs_arena
  );
  swap(_impl_.author_, other->_impl_.author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[15]);
}

// ===================================================================

class SiteNewLeaveWordRequest::_Internal {
 public:
};

SiteNewLeaveWordRequest::SiteNewLeaveWordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
}
SiteNewLeaveWordRequest::SiteNewLeaveWordRequest(const SiteNewLeaveWordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteNewLeaveWordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
}

inline void SiteNewLeaveWordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteNewLeaveWordRequest::~SiteNewLeaveWordRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteNewLeaveWordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
}

void SiteNewLeaveWordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteNewLeaveWordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteNewLeaveWordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteNewLeaveWordRequest.body"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteNewLeaveWordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteNewLeaveWordRequest.body");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  return target;
}

size_t SiteNewLeaveWordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteNewLeaveWordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteNewLeaveWordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteNewLeaveWordRequest::GetClassData() const { return &_class_data_; }


void SiteNewLeaveWordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteNewLeaveWordRequest*>(&to_msg);
  auto& from = static_cast<const SiteNewLeaveWordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteNewLeaveWordRequest::CopyFrom(const SiteNewLeaveWordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteNewLeaveWordRequest::IsInitialized() const {
  return true;
}

void SiteNewLeaveWordRequest::InternalSwap(SiteNewLeaveWordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteNewLeaveWordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[16]);
}

// ===================================================================

class SiteIndexLeaveWordResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const SiteIndexLeaveWordResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SiteIndexLeaveWordResponse_Item::_Internal::created_at(const SiteIndexLeaveWordResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void SiteIndexLeaveWordResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
SiteIndexLeaveWordResponse_Item::SiteIndexLeaveWordResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
}
SiteIndexLeaveWordResponse_Item::SiteIndexLeaveWordResponse_Item(const SiteIndexLeaveWordResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteIndexLeaveWordResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
}

inline void SiteIndexLeaveWordResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteIndexLeaveWordResponse_Item::~SiteIndexLeaveWordResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteIndexLeaveWordResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void SiteIndexLeaveWordResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteIndexLeaveWordResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIndexLeaveWordResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteIndexLeaveWordResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  return target;
}

size_t SiteIndexLeaveWordResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteIndexLeaveWordResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteIndexLeaveWordResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteIndexLeaveWordResponse_Item::GetClassData() const { return &_class_data_; }


void SiteIndexLeaveWordResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteIndexLeaveWordResponse_Item*>(&to_msg);
  auto& from = static_cast<const SiteIndexLeaveWordResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteIndexLeaveWordResponse_Item::CopyFrom(const SiteIndexLeaveWordResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIndexLeaveWordResponse_Item::IsInitialized() const {
  return true;
}

void SiteIndexLeaveWordResponse_Item::InternalSwap(SiteIndexLeaveWordResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteIndexLeaveWordResponse_Item, _impl_.id_)
      + sizeof(SiteIndexLeaveWordResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SiteIndexLeaveWordResponse_Item, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIndexLeaveWordResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[17]);
}

// ===================================================================

class SiteIndexLeaveWordResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::Pagination& pagination(const SiteIndexLeaveWordResponse* msg);
};

const ::palm::plugins::nut::v1::Pagination&
SiteIndexLeaveWordResponse::_Internal::pagination(const SiteIndexLeaveWordResponse* msg) {
  return *msg->_impl_.pagination_;
}
SiteIndexLeaveWordResponse::SiteIndexLeaveWordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
}
SiteIndexLeaveWordResponse::SiteIndexLeaveWordResponse(const SiteIndexLeaveWordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteIndexLeaveWordResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::plugins::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
}

inline void SiteIndexLeaveWordResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteIndexLeaveWordResponse::~SiteIndexLeaveWordResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteIndexLeaveWordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void SiteIndexLeaveWordResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteIndexLeaveWordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIndexLeaveWordResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteIndexLeaveWordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  return target;
}

size_t SiteIndexLeaveWordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteIndexLeaveWordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteIndexLeaveWordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteIndexLeaveWordResponse::GetClassData() const { return &_class_data_; }


void SiteIndexLeaveWordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteIndexLeaveWordResponse*>(&to_msg);
  auto& from = static_cast<const SiteIndexLeaveWordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::plugins::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteIndexLeaveWordResponse::CopyFrom(const SiteIndexLeaveWordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIndexLeaveWordResponse::IsInitialized() const {
  return true;
}

void SiteIndexLeaveWordResponse::InternalSwap(SiteIndexLeaveWordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIndexLeaveWordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[18]);
}

// ===================================================================

class GoogleProfile_ReCaptcha::_Internal {
 public:
};

GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
}
GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(const GoogleProfile_ReCaptcha& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleProfile_ReCaptcha* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_key().empty()) {
    _this->_impl_.site_key_.Set(from._internal_site_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
}

inline void GoogleProfile_ReCaptcha::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleProfile_ReCaptcha::~GoogleProfile_ReCaptcha() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleProfile_ReCaptcha::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_key_.Destroy();
  _impl_.secret_.Destroy();
}

void GoogleProfile_ReCaptcha::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleProfile_ReCaptcha::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.site_key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile_ReCaptcha::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string site_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleProfile_ReCaptcha::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_key().data(), static_cast<int>(this->_internal_site_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  return target;
}

size_t GoogleProfile_ReCaptcha::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile_ReCaptcha::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleProfile_ReCaptcha::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile_ReCaptcha::GetClassData() const { return &_class_data_; }


void GoogleProfile_ReCaptcha::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleProfile_ReCaptcha*>(&to_msg);
  auto& from = static_cast<const GoogleProfile_ReCaptcha&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_site_key().empty()) {
    _this->_internal_set_site_key(from._internal_site_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile_ReCaptcha::CopyFrom(const GoogleProfile_ReCaptcha& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile_ReCaptcha::IsInitialized() const {
  return true;
}

void GoogleProfile_ReCaptcha::InternalSwap(GoogleProfile_ReCaptcha* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_key_, lhs_arena,
      &other->_impl_.site_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile_ReCaptcha::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[19]);
}

// ===================================================================

class GoogleProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<GoogleProfile>()._impl_._has_bits_);
  static void set_has_site_verify_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha& re_captcha(const GoogleProfile* msg);
  static void set_has_re_captcha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha&
GoogleProfile::_Internal::re_captcha(const GoogleProfile* msg) {
  return *msg->_impl_.re_captcha_;
}
GoogleProfile::GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.GoogleProfile)
}
GoogleProfile::GoogleProfile(const GoogleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
    , decltype(_impl_.re_captcha_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_verify_id()) {
    _this->_impl_.site_verify_id_.Set(from._internal_site_verify_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_re_captcha()) {
    _this->_impl_.re_captcha_ = new ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha(*from._impl_.re_captcha_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.GoogleProfile)
}

inline void GoogleProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
    , decltype(_impl_.re_captcha_){nullptr}
  };
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleProfile::~GoogleProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.GoogleProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_verify_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.re_captcha_;
}

void GoogleProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.GoogleProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.site_verify_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.re_captcha_ != nullptr);
      _impl_.re_captcha_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string site_verify_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_verify_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.GoogleProfile.site_verify_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_re_captcha(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.GoogleProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  if (_internal_has_site_verify_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_verify_id().data(), static_cast<int>(this->_internal_site_verify_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.GoogleProfile.site_verify_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_verify_id(), target);
  }

  // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
  if (_internal_has_re_captcha()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::re_captcha(this),
        _Internal::re_captcha(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.GoogleProfile)
  return target;
}

size_t GoogleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.GoogleProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string site_verify_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_verify_id());
    }

    // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.re_captcha_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile::GetClassData() const { return &_class_data_; }


void GoogleProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleProfile*>(&to_msg);
  auto& from = static_cast<const GoogleProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.GoogleProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_site_verify_id(from._internal_site_verify_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_re_captcha()->::palm::plugins::nut::v1::GoogleProfile_ReCaptcha::MergeFrom(
          from._internal_re_captcha());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile::CopyFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.GoogleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile::IsInitialized() const {
  return true;
}

void GoogleProfile::InternalSwap(GoogleProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_verify_id_, lhs_arena,
      &other->_impl_.site_verify_id_, rhs_arena
  );
  swap(_impl_.re_captcha_, other->_impl_.re_captcha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[20]);
}

// ===================================================================

class BaiduProfile_SiteVerify::_Internal {
 public:
};

BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
}
BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(const BaiduProfile_SiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaiduProfile_SiteVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
}

inline void BaiduProfile_SiteVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BaiduProfile_SiteVerify::~BaiduProfile_SiteVerify() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaiduProfile_SiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.content_.Destroy();
}

void BaiduProfile_SiteVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaiduProfile_SiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile_SiteVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.BaiduProfile.SiteVerify.id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.BaiduProfile.SiteVerify.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaiduProfile_SiteVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.BaiduProfile.SiteVerify.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.BaiduProfile.SiteVerify.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  return target;
}

size_t BaiduProfile_SiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile_SiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaiduProfile_SiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile_SiteVerify::GetClassData() const { return &_class_data_; }


void BaiduProfile_SiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaiduProfile_SiteVerify*>(&to_msg);
  auto& from = static_cast<const BaiduProfile_SiteVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile_SiteVerify::CopyFrom(const BaiduProfile_SiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile_SiteVerify::IsInitialized() const {
  return true;
}

void BaiduProfile_SiteVerify::InternalSwap(BaiduProfile_SiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile_SiteVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[21]);
}

// ===================================================================

class BaiduProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BaiduProfile>()._impl_._has_bits_);
  static const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify& site_verify(const BaiduProfile* msg);
  static void set_has_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify&
BaiduProfile::_Internal::site_verify(const BaiduProfile* msg) {
  return *msg->_impl_.site_verify_;
}
BaiduProfile::BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.BaiduProfile)
}
BaiduProfile::BaiduProfile(const BaiduProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaiduProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_verify()) {
    _this->_impl_.site_verify_ = new ::palm::plugins::nut::v1::BaiduProfile_SiteVerify(*from._impl_.site_verify_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.BaiduProfile)
}

inline void BaiduProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_){nullptr}
  };
}

BaiduProfile::~BaiduProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.BaiduProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaiduProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.site_verify_;
}

void BaiduProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaiduProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.BaiduProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.site_verify_ != nullptr);
    _impl_.site_verify_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaiduProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.BaiduProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
  if (_internal_has_site_verify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::site_verify(this),
        _Internal::site_verify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.BaiduProfile)
  return target;
}

size_t BaiduProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.BaiduProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.site_verify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaiduProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile::GetClassData() const { return &_class_data_; }


void BaiduProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaiduProfile*>(&to_msg);
  auto& from = static_cast<const BaiduProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.BaiduProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_verify()) {
    _this->_internal_mutable_site_verify()->::palm::plugins::nut::v1::BaiduProfile_SiteVerify::MergeFrom(
        from._internal_site_verify());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile::CopyFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.BaiduProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile::IsInitialized() const {
  return true;
}

void BaiduProfile::InternalSwap(BaiduProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.site_verify_, other->_impl_.site_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[22]);
}

// ===================================================================

class BingProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BingProfile>()._impl_._has_bits_);
  static void set_has_site_verify_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BingProfile::BingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.BingProfile)
}
BingProfile::BingProfile(const BingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BingProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_verify_id()) {
    _this->_impl_.site_verify_id_.Set(from._internal_site_verify_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.BingProfile)
}

inline void BingProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
  };
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BingProfile::~BingProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.BingProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BingProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_verify_id_.Destroy();
}

void BingProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.BingProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.site_verify_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BingProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string site_verify_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_verify_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.BingProfile.site_verify_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BingProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.BingProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  if (_internal_has_site_verify_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_verify_id().data(), static_cast<int>(this->_internal_site_verify_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.BingProfile.site_verify_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_verify_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.BingProfile)
  return target;
}

size_t BingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.BingProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_verify_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BingProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BingProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BingProfile::GetClassData() const { return &_class_data_; }


void BingProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BingProfile*>(&to_msg);
  auto& from = static_cast<const BingProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.BingProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_verify_id()) {
    _this->_internal_set_site_verify_id(from._internal_site_verify_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BingProfile::CopyFrom(const BingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.BingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BingProfile::IsInitialized() const {
  return true;
}

void BingProfile::InternalSwap(BingProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_verify_id_, lhs_arena,
      &other->_impl_.site_verify_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BingProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[23]);
}

// ===================================================================

class EmailTask_Attachment::_Internal {
 public:
};

EmailTask_Attachment::EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.EmailTask.Attachment)
}
EmailTask_Attachment::EmailTask_Attachment(const EmailTask_Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Attachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.content_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.content_type_ = from._impl_.content_type_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.EmailTask.Attachment)
}

inline void EmailTask_Attachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.content_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Attachment::~EmailTask_Attachment() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.EmailTask.Attachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.payload_.Destroy();
}

void EmailTask_Attachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.EmailTask.Attachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Attachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.Attachment.name"));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::palm::plugins::nut::v1::EmailTask_ContentType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Attachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.EmailTask.Attachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.Attachment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_content_type(), target);
  }

  // bytes payload = 11;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.EmailTask.Attachment)
  return target;
}

size_t EmailTask_Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.EmailTask.Attachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes payload = 11;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Attachment::GetClassData() const { return &_class_data_; }


void EmailTask_Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Attachment*>(&to_msg);
  auto& from = static_cast<const EmailTask_Attachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.EmailTask.Attachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_content_type() != 0) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Attachment::CopyFrom(const EmailTask_Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.EmailTask.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Attachment::IsInitialized() const {
  return true;
}

void EmailTask_Attachment::InternalSwap(EmailTask_Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.content_type_, other->_impl_.content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Attachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[24]);
}

// ===================================================================

class EmailTask::_Internal {
 public:
};

EmailTask::EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.EmailTask)
}
EmailTask::EmailTask(const EmailTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){from._impl_.cc_}
    , decltype(_impl_.bcc_){from._impl_.bcc_}
    , decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.content_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.content_type_ = from._impl_.content_type_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.EmailTask)
}

inline void EmailTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){arena}
    , decltype(_impl_.bcc_){arena}
    , decltype(_impl_.attachments_){arena}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.content_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask::~EmailTask() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.EmailTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_.~RepeatedPtrField();
  _impl_.bcc_.~RepeatedPtrField();
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.subject_.Destroy();
  _impl_.body_.Destroy();
  _impl_.to_.Destroy();
}

void EmailTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.EmailTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_.Clear();
  _impl_.bcc_.Clear();
  _impl_.attachments_.Clear();
  _impl_.subject_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  _impl_.content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.subject"));
        } else
          goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.body"));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::palm::plugins::nut::v1::EmailTask_ContentType>(val));
        } else
          goto handle_unusual;
        continue;
      // string to = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.to"));
        } else
          goto handle_unusual;
        continue;
      // repeated string cc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cc();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.cc"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string bcc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bcc();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.bcc"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.EmailTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_content_type(), target);
  }

  // string to = 11;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.to");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_to(), target);
  }

  // repeated string cc = 12;
  for (int i = 0, n = this->_internal_cc_size(); i < n; i++) {
    const auto& s = this->_internal_cc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.cc");
    target = stream->WriteString(12, s, target);
  }

  // repeated string bcc = 13;
  for (int i = 0, n = this->_internal_bcc_size(); i < n; i++) {
    const auto& s = this->_internal_bcc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.bcc");
    target = stream->WriteString(13, s, target);
  }

  // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.EmailTask)
  return target;
}

size_t EmailTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.EmailTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cc = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cc_.size());
  for (int i = 0, n = _impl_.cc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cc_.Get(i));
  }

  // repeated string bcc = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bcc_.size());
  for (int i = 0, n = _impl_.bcc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bcc_.Get(i));
  }

  // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // string to = 11;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask::GetClassData() const { return &_class_data_; }


void EmailTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask*>(&to_msg);
  auto& from = static_cast<const EmailTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.EmailTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_.MergeFrom(from._impl_.cc_);
  _this->_impl_.bcc_.MergeFrom(from._impl_.bcc_);
  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_content_type() != 0) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask::CopyFrom(const EmailTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.EmailTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask::IsInitialized() const {
  return true;
}

void EmailTask::InternalSwap(EmailTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_.InternalSwap(&other->_impl_.cc_);
  _impl_.bcc_.InternalSwap(&other->_impl_.bcc_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  swap(_impl_.content_type_, other->_impl_.content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[25]);
}

// ===================================================================

class SmtpProfile::_Internal {
 public:
};

SmtpProfile::SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SmtpProfile)
}
SmtpProfile::SmtpProfile(const SmtpProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmtpProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.cc_){}
    , decltype(_impl_.bcc_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cc().empty()) {
    _this->_impl_.cc_.Set(from._internal_cc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bcc().empty()) {
    _this->_impl_.bcc_.Set(from._internal_bcc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SmtpProfile)
}

inline void SmtpProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.cc_){}
    , decltype(_impl_.bcc_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmtpProfile::~SmtpProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SmtpProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmtpProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.user_.Destroy();
  _impl_.password_.Destroy();
  _impl_.cc_.Destroy();
  _impl_.bcc_.Destroy();
}

void SmtpProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmtpProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SmtpProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.cc_.ClearToEmpty();
  _impl_.bcc_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmtpProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.host"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.user"));
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.password"));
        } else
          goto handle_unusual;
        continue;
      // string cc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.cc"));
        } else
          goto handle_unusual;
        continue;
      // string bcc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bcc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.bcc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmtpProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SmtpProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // string user = 3;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string cc = 5;
  if (!this->_internal_cc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cc().data(), static_cast<int>(this->_internal_cc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.cc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cc(), target);
  }

  // string bcc = 6;
  if (!this->_internal_bcc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bcc().data(), static_cast<int>(this->_internal_bcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.bcc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bcc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SmtpProfile)
  return target;
}

size_t SmtpProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SmtpProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string user = 3;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string cc = 5;
  if (!this->_internal_cc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cc());
  }

  // string bcc = 6;
  if (!this->_internal_bcc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bcc());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmtpProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmtpProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmtpProfile::GetClassData() const { return &_class_data_; }


void SmtpProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmtpProfile*>(&to_msg);
  auto& from = static_cast<const SmtpProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SmtpProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_cc().empty()) {
    _this->_internal_set_cc(from._internal_cc());
  }
  if (!from._internal_bcc().empty()) {
    _this->_internal_set_bcc(from._internal_bcc());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmtpProfile::CopyFrom(const SmtpProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SmtpProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtpProfile::IsInitialized() const {
  return true;
}

void SmtpProfile::InternalSwap(SmtpProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cc_, lhs_arena,
      &other->_impl_.cc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bcc_, lhs_arena,
      &other->_impl_.bcc_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmtpProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[26]);
}

// ===================================================================

class SiteStatusResponse_Database::_Internal {
 public:
};

SiteStatusResponse_Database::SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Database)
}
SiteStatusResponse_Database::SiteStatusResponse_Database(const SiteStatusResponse_Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Database* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_size().empty()) {
    _this->_impl_.size_.Set(from._internal_size(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Database)
}

inline void SiteStatusResponse_Database::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Database::~SiteStatusResponse_Database() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Database)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Database::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.size_.Destroy();
}

void SiteStatusResponse_Database::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.size_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Database::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Database.name"));
        } else
          goto handle_unusual;
        continue;
      // string size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Database.size"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Database::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Database.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Database.size");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Database)
  return target;
}

size_t SiteStatusResponse_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Database::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Database::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Database::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Database::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Database*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Database&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_size().empty()) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Database::CopyFrom(const SiteStatusResponse_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Database::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Database::InternalSwap(SiteStatusResponse_Database* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.size_, lhs_arena,
      &other->_impl_.size_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Database::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[27]);
}

// ===================================================================

class SiteStatusResponse_PostgreSql::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& now(const SiteStatusResponse_PostgreSql* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SiteStatusResponse_PostgreSql::_Internal::now(const SiteStatusResponse_PostgreSql* msg) {
  return *msg->_impl_.now_;
}
void SiteStatusResponse_PostgreSql::clear_now() {
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_PostgreSql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.databases_){from._impl_.databases_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.now_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_now()) {
    _this->_impl_.now_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.now_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
}

inline void SiteStatusResponse_PostgreSql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.databases_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.now_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_PostgreSql::~SiteStatusResponse_PostgreSql() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_PostgreSql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.databases_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.now_;
}

void SiteStatusResponse_PostgreSql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_PostgreSql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.databases_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_PostgreSql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp now = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_databases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_PostgreSql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::now(this),
        _Internal::now(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_databases_size()); i < n; i++) {
    const auto& repfield = this->_internal_databases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  return target;
}

size_t SiteStatusResponse_PostgreSql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
  total_size += 1UL * this->_internal_databases_size();
  for (const auto& msg : this->_impl_.databases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.now_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_PostgreSql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_PostgreSql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_PostgreSql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_PostgreSql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_PostgreSql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_PostgreSql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.databases_.MergeFrom(from._impl_.databases_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_now()) {
    _this->_internal_mutable_now()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_now());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_PostgreSql::CopyFrom(const SiteStatusResponse_PostgreSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_PostgreSql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_PostgreSql::InternalSwap(SiteStatusResponse_PostgreSql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.databases_.InternalSwap(&other->_impl_.databases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.now_, other->_impl_.now_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_PostgreSql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[28]);
}

// ===================================================================

class SiteStatusResponse_MySql::_Internal {
 public:
};

SiteStatusResponse_MySql::SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.MySql)
}
SiteStatusResponse_MySql::SiteStatusResponse_MySql(const SiteStatusResponse_MySql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_MySql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.MySql)
}

inline void SiteStatusResponse_MySql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_MySql::~SiteStatusResponse_MySql() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_MySql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void SiteStatusResponse_MySql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_MySql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_MySql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.MySql.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_MySql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.MySql.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  return target;
}

size_t SiteStatusResponse_MySql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_MySql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_MySql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_MySql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_MySql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_MySql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_MySql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_MySql::CopyFrom(const SiteStatusResponse_MySql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_MySql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_MySql::InternalSwap(SiteStatusResponse_MySql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_MySql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[29]);
}

// ===================================================================

class SiteStatusResponse_Redis_Item::_Internal {
 public:
};

SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
}
SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(const SiteStatusResponse_Redis_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.ttl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ttl_ = from._impl_.ttl_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
}

inline void SiteStatusResponse_Redis_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.ttl_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Redis_Item::~SiteStatusResponse_Redis_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void SiteStatusResponse_Redis_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.ttl_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key"));
        } else
          goto handle_unusual;
        continue;
      // int64 ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 ttl = 2;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  return target;
}

size_t SiteStatusResponse_Redis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 ttl = 2;
  if (this->_internal_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis_Item::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis_Item*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_ttl() != 0) {
    _this->_internal_set_ttl(from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis_Item::CopyFrom(const SiteStatusResponse_Redis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis_Item::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis_Item::InternalSwap(SiteStatusResponse_Redis_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[30]);
}

// ===================================================================

class SiteStatusResponse_Redis::_Internal {
 public:
};

SiteStatusResponse_Redis::SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis)
}
SiteStatusResponse_Redis::SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis)
}

inline void SiteStatusResponse_Redis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Redis::~SiteStatusResponse_Redis() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.info_.Destroy();
}

void SiteStatusResponse_Redis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Redis.info"));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Redis.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  return target;
}

size_t SiteStatusResponse_Redis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis::CopyFrom(const SiteStatusResponse_Redis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis::InternalSwap(SiteStatusResponse_Redis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[31]);
}

// ===================================================================

class SiteStatusResponse_RabbitMq::_Internal {
 public:
};

SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
}
SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(const SiteStatusResponse_RabbitMq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_RabbitMq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
}

inline void SiteStatusResponse_RabbitMq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_RabbitMq::~SiteStatusResponse_RabbitMq() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_RabbitMq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocol_.Destroy();
}

void SiteStatusResponse_RabbitMq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_RabbitMq::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_RabbitMq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_RabbitMq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  return target;
}

size_t SiteStatusResponse_RabbitMq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_RabbitMq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_RabbitMq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_RabbitMq::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_RabbitMq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_RabbitMq*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_RabbitMq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_RabbitMq::CopyFrom(const SiteStatusResponse_RabbitMq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_RabbitMq::IsInitialized() const {
  return true;
}

void SiteStatusResponse_RabbitMq::InternalSwap(SiteStatusResponse_RabbitMq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_RabbitMq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[32]);
}

// ===================================================================

class SiteStatusResponse_OpenSearch::_Internal {
 public:
};

SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
}
SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_OpenSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
}

inline void SiteStatusResponse_OpenSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_OpenSearch::~SiteStatusResponse_OpenSearch() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_OpenSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.info_.Destroy();
}

void SiteStatusResponse_OpenSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_OpenSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_OpenSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url"));
        } else
          goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_OpenSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  return target;
}

size_t SiteStatusResponse_OpenSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_OpenSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_OpenSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_OpenSearch::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_OpenSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_OpenSearch*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_OpenSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_OpenSearch::CopyFrom(const SiteStatusResponse_OpenSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_OpenSearch::IsInitialized() const {
  return true;
}

void SiteStatusResponse_OpenSearch::InternalSwap(SiteStatusResponse_OpenSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_OpenSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[33]);
}

// ===================================================================

class SiteStatusResponse_Health::_Internal {
 public:
};

SiteStatusResponse_Health::SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Health)
}
SiteStatusResponse_Health::SiteStatusResponse_Health(const SiteStatusResponse_Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Health* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Health)
}

inline void SiteStatusResponse_Health::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Health::~SiteStatusResponse_Health() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Health)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Health::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.status_.Destroy();
}

void SiteStatusResponse_Health::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Health::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Health::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Health.name"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Health.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Health::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Health.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Health.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Health)
  return target;
}

size_t SiteStatusResponse_Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Health::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Health::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Health::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Health::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Health*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Health&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Health::CopyFrom(const SiteStatusResponse_Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Health::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Health::InternalSwap(SiteStatusResponse_Health* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Health::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[34]);
}

// ===================================================================

class SiteStatusResponse_System::_Internal {
 public:
};

SiteStatusResponse_System::SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.System)
}
SiteStatusResponse_System::SiteStatusResponse_System(const SiteStatusResponse_System& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_System* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.boot_){}
    , decltype(_impl_.disk_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.swap_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu().empty()) {
    _this->_impl_.cpu_.Set(from._internal_cpu(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory().empty()) {
    _this->_impl_.memory_.Set(from._internal_memory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.boot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_boot().empty()) {
    _this->_impl_.boot_.Set(from._internal_boot(), 
      _this->GetArenaForAllocation());
  }
  _impl_.disk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disk().empty()) {
    _this->_impl_.disk_.Set(from._internal_disk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.load_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load().empty()) {
    _this->_impl_.load_.Set(from._internal_load(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fs().empty()) {
    _this->_impl_.fs_.Set(from._internal_fs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.swap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.swap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_swap().empty()) {
    _this->_impl_.swap_.Set(from._internal_swap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uptime().empty()) {
    _this->_impl_.uptime_.Set(from._internal_uptime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.System)
}

inline void SiteStatusResponse_System::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.boot_){}
    , decltype(_impl_.disk_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.swap_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.boot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.disk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.load_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.swap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.swap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_System::~SiteStatusResponse_System() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.System)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_System::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.cpu_.Destroy();
  _impl_.memory_.Destroy();
  _impl_.boot_.Destroy();
  _impl_.disk_.Destroy();
  _impl_.load_.Destroy();
  _impl_.fs_.Destroy();
  _impl_.swap_.Destroy();
  _impl_.uptime_.Destroy();
  _impl_.network_.Destroy();
}

void SiteStatusResponse_System::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_System::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.cpu_.ClearToEmpty();
  _impl_.memory_.ClearToEmpty();
  _impl_.boot_.ClearToEmpty();
  _impl_.disk_.ClearToEmpty();
  _impl_.load_.ClearToEmpty();
  _impl_.fs_.ClearToEmpty();
  _impl_.swap_.ClearToEmpty();
  _impl_.uptime_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_System::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.version"));
        } else
          goto handle_unusual;
        continue;
      // string cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cpu();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.cpu"));
        } else
          goto handle_unusual;
        continue;
      // string memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.memory"));
        } else
          goto handle_unusual;
        continue;
      // string boot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_boot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.boot"));
        } else
          goto handle_unusual;
        continue;
      // string disk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_disk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.disk"));
        } else
          goto handle_unusual;
        continue;
      // string load = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_load();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.load"));
        } else
          goto handle_unusual;
        continue;
      // string fs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.fs"));
        } else
          goto handle_unusual;
        continue;
      // string swap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_swap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.swap"));
        } else
          goto handle_unusual;
        continue;
      // string uptime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_uptime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.uptime"));
        } else
          goto handle_unusual;
        continue;
      // string network = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.network"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_System::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.cpu");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu(), target);
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory().data(), static_cast<int>(this->_internal_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.memory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memory(), target);
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boot().data(), static_cast<int>(this->_internal_boot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.boot");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_boot(), target);
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disk().data(), static_cast<int>(this->_internal_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.disk");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_disk(), target);
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load().data(), static_cast<int>(this->_internal_load().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.load");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_load(), target);
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fs().data(), static_cast<int>(this->_internal_fs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.fs");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fs(), target);
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_swap().data(), static_cast<int>(this->_internal_swap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.swap");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_swap(), target);
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uptime().data(), static_cast<int>(this->_internal_uptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.uptime");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uptime(), target);
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.network");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.System)
  return target;
}

size_t SiteStatusResponse_System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory());
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boot());
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disk());
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load());
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fs());
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_swap());
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uptime());
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_System::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_System::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_System::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_System::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_System*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_System&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_cpu().empty()) {
    _this->_internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_memory().empty()) {
    _this->_internal_set_memory(from._internal_memory());
  }
  if (!from._internal_boot().empty()) {
    _this->_internal_set_boot(from._internal_boot());
  }
  if (!from._internal_disk().empty()) {
    _this->_internal_set_disk(from._internal_disk());
  }
  if (!from._internal_load().empty()) {
    _this->_internal_set_load(from._internal_load());
  }
  if (!from._internal_fs().empty()) {
    _this->_internal_set_fs(from._internal_fs());
  }
  if (!from._internal_swap().empty()) {
    _this->_internal_set_swap(from._internal_swap());
  }
  if (!from._internal_uptime().empty()) {
    _this->_internal_set_uptime(from._internal_uptime());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_System::CopyFrom(const SiteStatusResponse_System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_System::IsInitialized() const {
  return true;
}

void SiteStatusResponse_System::InternalSwap(SiteStatusResponse_System* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_, lhs_arena,
      &other->_impl_.cpu_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_, lhs_arena,
      &other->_impl_.memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.boot_, lhs_arena,
      &other->_impl_.boot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disk_, lhs_arena,
      &other->_impl_.disk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_, lhs_arena,
      &other->_impl_.load_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fs_, lhs_arena,
      &other->_impl_.fs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.swap_, lhs_arena,
      &other->_impl_.swap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uptime_, lhs_arena,
      &other->_impl_.uptime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_System::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[35]);
}

// ===================================================================

class SiteStatusResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql& postgresql(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_MySql& mysql(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_Redis& redis(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq& rabbitmq(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch& opensearch(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_System& system(const SiteStatusResponse* msg);
};

const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql&
SiteStatusResponse::_Internal::postgresql(const SiteStatusResponse* msg) {
  return *msg->_impl_.postgresql_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_MySql&
SiteStatusResponse::_Internal::mysql(const SiteStatusResponse* msg) {
  return *msg->_impl_.mysql_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_Redis&
SiteStatusResponse::_Internal::redis(const SiteStatusResponse* msg) {
  return *msg->_impl_.redis_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq&
SiteStatusResponse::_Internal::rabbitmq(const SiteStatusResponse* msg) {
  return *msg->_impl_.rabbitmq_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch&
SiteStatusResponse::_Internal::opensearch(const SiteStatusResponse* msg) {
  return *msg->_impl_.opensearch_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_System&
SiteStatusResponse::_Internal::system(const SiteStatusResponse* msg) {
  return *msg->_impl_.system_;
}
SiteStatusResponse::SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse)
}
SiteStatusResponse::SiteStatusResponse(const SiteStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.healthes_){from._impl_.healthes_}
    , decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.mysql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.rabbitmq_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postgresql()) {
    _this->_impl_.postgresql_ = new ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql(*from._impl_.postgresql_);
  }
  if (from._internal_has_mysql()) {
    _this->_impl_.mysql_ = new ::palm::plugins::nut::v1::SiteStatusResponse_MySql(*from._impl_.mysql_);
  }
  if (from._internal_has_redis()) {
    _this->_impl_.redis_ = new ::palm::plugins::nut::v1::SiteStatusResponse_Redis(*from._impl_.redis_);
  }
  if (from._internal_has_rabbitmq()) {
    _this->_impl_.rabbitmq_ = new ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq(*from._impl_.rabbitmq_);
  }
  if (from._internal_has_opensearch()) {
    _this->_impl_.opensearch_ = new ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch(*from._impl_.opensearch_);
  }
  if (from._internal_has_system()) {
    _this->_impl_.system_ = new ::palm::plugins::nut::v1::SiteStatusResponse_System(*from._impl_.system_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse)
}

inline void SiteStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.healthes_){arena}
    , decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.mysql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.rabbitmq_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteStatusResponse::~SiteStatusResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.healthes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.postgresql_;
  if (this != internal_default_instance()) delete _impl_.mysql_;
  if (this != internal_default_instance()) delete _impl_.redis_;
  if (this != internal_default_instance()) delete _impl_.rabbitmq_;
  if (this != internal_default_instance()) delete _impl_.opensearch_;
  if (this != internal_default_instance()) delete _impl_.system_;
}

void SiteStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.healthes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.postgresql_ != nullptr) {
    delete _impl_.postgresql_;
  }
  _impl_.postgresql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mysql_ != nullptr) {
    delete _impl_.mysql_;
  }
  _impl_.mysql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.redis_ != nullptr) {
    delete _impl_.redis_;
  }
  _impl_.redis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rabbitmq_ != nullptr) {
    delete _impl_.rabbitmq_;
  }
  _impl_.rabbitmq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opensearch_ != nullptr) {
    delete _impl_.opensearch_;
  }
  _impl_.opensearch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_postgresql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rabbitmq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opensearch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_healthes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::postgresql(this),
        _Internal::postgresql(this).GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mysql(this),
        _Internal::mysql(this).GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::redis(this),
        _Internal::redis(this).GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rabbitmq(this),
        _Internal::rabbitmq(this).GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::opensearch(this),
        _Internal::opensearch(this).GetCachedSize(), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_healthes_size()); i < n; i++) {
    const auto& repfield = this->_internal_healthes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse)
  return target;
}

size_t SiteStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
  total_size += 2UL * this->_internal_healthes_size();
  for (const auto& msg : this->_impl_.healthes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.postgresql_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mysql_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redis_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rabbitmq_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opensearch_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse::GetClassData() const { return &_class_data_; }


void SiteStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.healthes_.MergeFrom(from._impl_.healthes_);
  if (from._internal_has_postgresql()) {
    _this->_internal_mutable_postgresql()->::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql::MergeFrom(
        from._internal_postgresql());
  }
  if (from._internal_has_mysql()) {
    _this->_internal_mutable_mysql()->::palm::plugins::nut::v1::SiteStatusResponse_MySql::MergeFrom(
        from._internal_mysql());
  }
  if (from._internal_has_redis()) {
    _this->_internal_mutable_redis()->::palm::plugins::nut::v1::SiteStatusResponse_Redis::MergeFrom(
        from._internal_redis());
  }
  if (from._internal_has_rabbitmq()) {
    _this->_internal_mutable_rabbitmq()->::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq::MergeFrom(
        from._internal_rabbitmq());
  }
  if (from._internal_has_opensearch()) {
    _this->_internal_mutable_opensearch()->::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch::MergeFrom(
        from._internal_opensearch());
  }
  if (from._internal_has_system()) {
    _this->_internal_mutable_system()->::palm::plugins::nut::v1::SiteStatusResponse_System::MergeFrom(
        from._internal_system());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse::CopyFrom(const SiteStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse::IsInitialized() const {
  return true;
}

void SiteStatusResponse::InternalSwap(SiteStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.healthes_.InternalSwap(&other->_impl_.healthes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.system_)
      + sizeof(SiteStatusResponse::_impl_.system_)
      - PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.postgresql_)>(
          reinterpret_cast<char*>(&_impl_.postgresql_),
          reinterpret_cast<char*>(&other->_impl_.postgresql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[36]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace nut
}  // namespace plugins
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::Pager*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::Pager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::Pager >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::Pagination*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::IdRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::IdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::IdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleIndexResponse*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleGetRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleSetRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::AwsProfile*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::AwsProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::AwsProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteAwsS3TestResponse*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteAwsS3TestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteAwsS3TestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSmtpTestRequst*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSmtpTestRequst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSmtpTestRequst >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetLogoRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetLogoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetLogoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetCopyrightRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetCopyrightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetCopyrightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetKeywordsRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetKeywordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetKeywordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetInfoRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteLayoutResponse_Author*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteLayoutResponse_Author >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteLayoutResponse_Author >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteLayoutResponse*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteNewLeaveWordRequest*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteNewLeaveWordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteNewLeaveWordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::GoogleProfile*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::GoogleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::GoogleProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::BaiduProfile_SiteVerify*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::BaiduProfile_SiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::BaiduProfile_SiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::BaiduProfile*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::BaiduProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::BaiduProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::BingProfile*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::BingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::BingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::EmailTask_Attachment*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::EmailTask_Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::EmailTask_Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::EmailTask*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::EmailTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::EmailTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SmtpProfile*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SmtpProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SmtpProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Database*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Database >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Database >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_MySql*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_MySql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_MySql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Redis*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Redis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Redis >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Health*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Health >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_System*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_System >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_System >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse*
Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
