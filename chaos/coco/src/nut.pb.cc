// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#include "nut.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace palm {
namespace plugins {
namespace nut {
namespace v1 {
constexpr Pager::Pager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_(int64_t{0})
  , size_(int64_t{0}){}
struct PagerDefaultTypeInternal {
  constexpr PagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PagerDefaultTypeInternal() {}
  union {
    Pager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PagerDefaultTypeInternal _Pager_default_instance_;
constexpr Pagination::Pagination(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_(int64_t{0})
  , size_(int64_t{0})
  , total_(int64_t{0})
  , has_next_(false)
  , has_previous_(false){}
struct PaginationDefaultTypeInternal {
  constexpr PaginationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaginationDefaultTypeInternal _Pagination_default_instance_;
constexpr IdRequest::IdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct IdRequestDefaultTypeInternal {
  constexpr IdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdRequestDefaultTypeInternal() {}
  union {
    IdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdRequestDefaultTypeInternal _IdRequest_default_instance_;
constexpr LocaleIndexResponse_Item::LocaleIndexResponse_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(nullptr)
  , id_(0){}
struct LocaleIndexResponse_ItemDefaultTypeInternal {
  constexpr LocaleIndexResponse_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LocaleIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
constexpr LocaleIndexResponse::LocaleIndexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , pagination_(nullptr){}
struct LocaleIndexResponseDefaultTypeInternal {
  constexpr LocaleIndexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleIndexResponseDefaultTypeInternal() {}
  union {
    LocaleIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
constexpr LocaleGetRequest::LocaleGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocaleGetRequestDefaultTypeInternal {
  constexpr LocaleGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleGetRequestDefaultTypeInternal() {}
  union {
    LocaleGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleGetRequestDefaultTypeInternal _LocaleGetRequest_default_instance_;
constexpr LocaleSetRequest::LocaleSetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocaleSetRequestDefaultTypeInternal {
  constexpr LocaleSetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleSetRequestDefaultTypeInternal() {}
  union {
    LocaleSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
constexpr AwsProfile::AwsProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , access_key_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_access_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AwsProfileDefaultTypeInternal {
  constexpr AwsProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AwsProfileDefaultTypeInternal() {}
  union {
    AwsProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AwsProfileDefaultTypeInternal _AwsProfile_default_instance_;
constexpr SiteAwsS3TestResponse::SiteAwsS3TestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buckets_(){}
struct SiteAwsS3TestResponseDefaultTypeInternal {
  constexpr SiteAwsS3TestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteAwsS3TestResponseDefaultTypeInternal() {}
  union {
    SiteAwsS3TestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteAwsS3TestResponseDefaultTypeInternal _SiteAwsS3TestResponse_default_instance_;
constexpr SiteSmtpTestRequst::SiteSmtpTestRequst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteSmtpTestRequstDefaultTypeInternal {
  constexpr SiteSmtpTestRequstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteSmtpTestRequstDefaultTypeInternal() {}
  union {
    SiteSmtpTestRequst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteSmtpTestRequstDefaultTypeInternal _SiteSmtpTestRequst_default_instance_;
constexpr SiteSetLogoRequest::SiteSetLogoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteSetLogoRequestDefaultTypeInternal {
  constexpr SiteSetLogoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteSetLogoRequestDefaultTypeInternal() {}
  union {
    SiteSetLogoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteSetLogoRequestDefaultTypeInternal _SiteSetLogoRequest_default_instance_;
constexpr SiteSetCopyrightRequest::SiteSetCopyrightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteSetCopyrightRequestDefaultTypeInternal {
  constexpr SiteSetCopyrightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteSetCopyrightRequestDefaultTypeInternal() {}
  union {
    SiteSetCopyrightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
constexpr SiteSetKeywordsRequest::SiteSetKeywordsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct SiteSetKeywordsRequestDefaultTypeInternal {
  constexpr SiteSetKeywordsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteSetKeywordsRequestDefaultTypeInternal() {}
  union {
    SiteSetKeywordsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
constexpr SiteSetInfoRequest::SiteSetInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subhead_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteSetInfoRequestDefaultTypeInternal {
  constexpr SiteSetInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteSetInfoRequestDefaultTypeInternal() {}
  union {
    SiteSetInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
constexpr SiteLayoutResponse_Author::SiteLayoutResponse_Author(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteLayoutResponse_AuthorDefaultTypeInternal {
  constexpr SiteLayoutResponse_AuthorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteLayoutResponse_AuthorDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_Author _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
constexpr SiteLayoutResponse::SiteLayoutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keywords_()
  , languages_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subhead_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , copyright_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(nullptr){}
struct SiteLayoutResponseDefaultTypeInternal {
  constexpr SiteLayoutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteLayoutResponseDefaultTypeInternal() {}
  union {
    SiteLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
constexpr SiteNewLeaveWordRequest::SiteNewLeaveWordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteNewLeaveWordRequestDefaultTypeInternal {
  constexpr SiteNewLeaveWordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteNewLeaveWordRequestDefaultTypeInternal() {}
  union {
    SiteNewLeaveWordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteNewLeaveWordRequestDefaultTypeInternal _SiteNewLeaveWordRequest_default_instance_;
constexpr SiteIndexLeaveWordResponse_Item::SiteIndexLeaveWordResponse_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , id_(0){}
struct SiteIndexLeaveWordResponse_ItemDefaultTypeInternal {
  constexpr SiteIndexLeaveWordResponse_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteIndexLeaveWordResponse_ItemDefaultTypeInternal() {}
  union {
    SiteIndexLeaveWordResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteIndexLeaveWordResponse_ItemDefaultTypeInternal _SiteIndexLeaveWordResponse_Item_default_instance_;
constexpr SiteIndexLeaveWordResponse::SiteIndexLeaveWordResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , pagination_(nullptr){}
struct SiteIndexLeaveWordResponseDefaultTypeInternal {
  constexpr SiteIndexLeaveWordResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteIndexLeaveWordResponseDefaultTypeInternal() {}
  union {
    SiteIndexLeaveWordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteIndexLeaveWordResponseDefaultTypeInternal _SiteIndexLeaveWordResponse_default_instance_;
constexpr GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GoogleProfile_ReCaptchaDefaultTypeInternal {
  constexpr GoogleProfile_ReCaptchaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GoogleProfile_ReCaptchaDefaultTypeInternal() {}
  union {
    GoogleProfile_ReCaptcha _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GoogleProfile_ReCaptchaDefaultTypeInternal _GoogleProfile_ReCaptcha_default_instance_;
constexpr GoogleProfile::GoogleProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_verify_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , re_captcha_(nullptr){}
struct GoogleProfileDefaultTypeInternal {
  constexpr GoogleProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GoogleProfileDefaultTypeInternal() {}
  union {
    GoogleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
constexpr BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BaiduProfile_SiteVerifyDefaultTypeInternal {
  constexpr BaiduProfile_SiteVerifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaiduProfile_SiteVerifyDefaultTypeInternal() {}
  union {
    BaiduProfile_SiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaiduProfile_SiteVerifyDefaultTypeInternal _BaiduProfile_SiteVerify_default_instance_;
constexpr BaiduProfile::BaiduProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_verify_(nullptr){}
struct BaiduProfileDefaultTypeInternal {
  constexpr BaiduProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaiduProfileDefaultTypeInternal() {}
  union {
    BaiduProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
constexpr BingProfile::BingProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_verify_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BingProfileDefaultTypeInternal {
  constexpr BingProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BingProfileDefaultTypeInternal() {}
  union {
    BingProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BingProfileDefaultTypeInternal _BingProfile_default_instance_;
constexpr EmailTask_Attachment::EmailTask_Attachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0)
{}
struct EmailTask_AttachmentDefaultTypeInternal {
  constexpr EmailTask_AttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmailTask_AttachmentDefaultTypeInternal() {}
  union {
    EmailTask_Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
constexpr EmailTask::EmailTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cc_()
  , bcc_()
  , attachments_()
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0)
{}
struct EmailTaskDefaultTypeInternal {
  constexpr EmailTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmailTaskDefaultTypeInternal() {}
  union {
    EmailTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
constexpr SmtpProfile::SmtpProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bcc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u){}
struct SmtpProfileDefaultTypeInternal {
  constexpr SmtpProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SmtpProfileDefaultTypeInternal() {}
  union {
    SmtpProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
constexpr SiteStatusResponse_Database::SiteStatusResponse_Database(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteStatusResponse_DatabaseDefaultTypeInternal {
  constexpr SiteStatusResponse_DatabaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_DatabaseDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Database _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_DatabaseDefaultTypeInternal _SiteStatusResponse_Database_default_instance_;
constexpr SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : databases_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , now_(nullptr){}
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal {
  constexpr SiteStatusResponse_PostgreSqlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_PostgreSqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_PostgreSql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
constexpr SiteStatusResponse_MySql::SiteStatusResponse_MySql(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(uint64_t{0u}){}
struct SiteStatusResponse_MySqlDefaultTypeInternal {
  constexpr SiteStatusResponse_MySqlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_MySqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_MySql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_MySqlDefaultTypeInternal _SiteStatusResponse_MySql_default_instance_;
constexpr SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ttl_(int64_t{0}){}
struct SiteStatusResponse_Redis_ItemDefaultTypeInternal {
  constexpr SiteStatusResponse_Redis_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_Redis_ItemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_Redis_ItemDefaultTypeInternal _SiteStatusResponse_Redis_Item_default_instance_;
constexpr SiteStatusResponse_Redis::SiteStatusResponse_Redis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteStatusResponse_RedisDefaultTypeInternal {
  constexpr SiteStatusResponse_RedisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_RedisDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
constexpr SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteStatusResponse_RabbitMqDefaultTypeInternal {
  constexpr SiteStatusResponse_RabbitMqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_RabbitMqDefaultTypeInternal() {}
  union {
    SiteStatusResponse_RabbitMq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_RabbitMqDefaultTypeInternal _SiteStatusResponse_RabbitMq_default_instance_;
constexpr SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteStatusResponse_OpenSearchDefaultTypeInternal {
  constexpr SiteStatusResponse_OpenSearchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_OpenSearchDefaultTypeInternal() {}
  union {
    SiteStatusResponse_OpenSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
constexpr SiteStatusResponse_Health::SiteStatusResponse_Health(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteStatusResponse_HealthDefaultTypeInternal {
  constexpr SiteStatusResponse_HealthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_HealthDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Health _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_HealthDefaultTypeInternal _SiteStatusResponse_Health_default_instance_;
constexpr SiteStatusResponse_System::SiteStatusResponse_System(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , boot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , disk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , load_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , swap_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uptime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SiteStatusResponse_SystemDefaultTypeInternal {
  constexpr SiteStatusResponse_SystemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponse_SystemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_System _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponse_SystemDefaultTypeInternal _SiteStatusResponse_System_default_instance_;
constexpr SiteStatusResponse::SiteStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : healthes_()
  , postgresql_(nullptr)
  , mysql_(nullptr)
  , redis_(nullptr)
  , rabbitmq_(nullptr)
  , opensearch_(nullptr)
  , system_(nullptr){}
struct SiteStatusResponseDefaultTypeInternal {
  constexpr SiteStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteStatusResponseDefaultTypeInternal() {}
  union {
    SiteStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace plugins
}  // namespace palm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nut_2eproto[37];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nut_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nut_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nut_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pager, page_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pager, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, page_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, size_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, total_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, has_next_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::Pagination, has_previous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::IdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::IdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, code_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, message_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse_Item, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse, items_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleIndexResponse, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleGetRequest, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleGetRequest, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, code_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::LocaleSetRequest, message_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, region_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, endpoint_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, access_key_id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::AwsProfile, secret_access_key_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteAwsS3TestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteAwsS3TestResponse, buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, to_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, subject_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSmtpTestRequst, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetLogoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetLogoRequest, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetCopyrightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetCopyrightRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetKeywordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetKeywordsRequest, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, title_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteSetInfoRequest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse_Author, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse_Author, name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse_Author, email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, title_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, keywords_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, description_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, author_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, copyright_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, logo_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteLayoutResponse, languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteNewLeaveWordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteNewLeaveWordRequest, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, ip_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, body_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, items_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha, site_key_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha, secret_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, site_verify_id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::GoogleProfile, re_captcha_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile_SiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile_SiteVerify, id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile_SiteVerify, content_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BaiduProfile, site_verify_),
  0,
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BingProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BingProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::BingProfile, site_verify_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask_Attachment, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, subject_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, body_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, to_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, cc_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::EmailTask, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, host_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, port_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, user_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, password_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, cc_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SmtpProfile, bcc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Database, name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Database, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, version_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, now_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql, databases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_MySql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_MySql, size_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_MySql, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item, key_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis, info_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Redis, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch, url_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Health, name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_Health, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, version_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, cpu_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, memory_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, boot_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, disk_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, load_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, fs_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, swap_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, uptime_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse_System, network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, postgresql_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, mysql_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, redis_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, rabbitmq_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, opensearch_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, system_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::nut::v1::SiteStatusResponse, healthes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::plugins::nut::v1::Pager)},
  { 8, -1, -1, sizeof(::palm::plugins::nut::v1::Pagination)},
  { 19, -1, -1, sizeof(::palm::plugins::nut::v1::IdRequest)},
  { 26, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleIndexResponse_Item)},
  { 37, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleIndexResponse)},
  { 45, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleGetRequest)},
  { 53, -1, -1, sizeof(::palm::plugins::nut::v1::LocaleSetRequest)},
  { 62, 72, -1, sizeof(::palm::plugins::nut::v1::AwsProfile)},
  { 76, -1, -1, sizeof(::palm::plugins::nut::v1::SiteAwsS3TestResponse)},
  { 83, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSmtpTestRequst)},
  { 92, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetLogoRequest)},
  { 99, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetCopyrightRequest)},
  { 106, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetKeywordsRequest)},
  { 113, -1, -1, sizeof(::palm::plugins::nut::v1::SiteSetInfoRequest)},
  { 122, -1, -1, sizeof(::palm::plugins::nut::v1::SiteLayoutResponse_Author)},
  { 130, -1, -1, sizeof(::palm::plugins::nut::v1::SiteLayoutResponse)},
  { 144, -1, -1, sizeof(::palm::plugins::nut::v1::SiteNewLeaveWordRequest)},
  { 151, -1, -1, sizeof(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item)},
  { 162, -1, -1, sizeof(::palm::plugins::nut::v1::SiteIndexLeaveWordResponse)},
  { 170, -1, -1, sizeof(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha)},
  { 178, 186, -1, sizeof(::palm::plugins::nut::v1::GoogleProfile)},
  { 188, -1, -1, sizeof(::palm::plugins::nut::v1::BaiduProfile_SiteVerify)},
  { 196, 203, -1, sizeof(::palm::plugins::nut::v1::BaiduProfile)},
  { 204, 211, -1, sizeof(::palm::plugins::nut::v1::BingProfile)},
  { 212, -1, -1, sizeof(::palm::plugins::nut::v1::EmailTask_Attachment)},
  { 221, -1, -1, sizeof(::palm::plugins::nut::v1::EmailTask)},
  { 234, -1, -1, sizeof(::palm::plugins::nut::v1::SmtpProfile)},
  { 246, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Database)},
  { 254, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql)},
  { 263, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_MySql)},
  { 271, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item)},
  { 279, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Redis)},
  { 287, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq)},
  { 294, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch)},
  { 302, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_Health)},
  { 310, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse_System)},
  { 326, -1, -1, sizeof(::palm::plugins::nut::v1::SiteStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_Pager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_IdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_LocaleIndexResponse_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_LocaleIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_LocaleGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_LocaleSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_AwsProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteAwsS3TestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteSmtpTestRequst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteSetLogoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteSetCopyrightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteSetKeywordsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteSetInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteLayoutResponse_Author_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteLayoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteNewLeaveWordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteIndexLeaveWordResponse_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteIndexLeaveWordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_GoogleProfile_ReCaptcha_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_GoogleProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_BaiduProfile_SiteVerify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_BaiduProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_BingProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_EmailTask_Attachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_EmailTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SmtpProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_Database_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_PostgreSql_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_MySql_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_Redis_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_Redis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_RabbitMq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_OpenSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_Health_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_System_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::nut::v1::_SiteStatusResponse_default_instance_),
};

const char descriptor_table_protodef_nut_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnut.proto\022\023palm.plugins.nut.v1\032\033google"
  "/protobuf/empty.proto\032\037google/protobuf/t"
  "imestamp.proto\"#\n\005Pager\022\014\n\004page\030\001 \001(\003\022\014\n"
  "\004size\030\002 \001(\003\"_\n\nPagination\022\014\n\004page\030\001 \001(\003\022"
  "\014\n\004size\030\002 \001(\003\022\r\n\005total\030\003 \001(\003\022\020\n\010has_next"
  "\030\013 \001(\010\022\024\n\014has_previous\030\014 \001(\010\"\027\n\tIdReques"
  "t\022\n\n\002id\030\001 \001(\005\"\371\001\n\023LocaleIndexResponse\022<\n"
  "\005items\030\001 \003(\0132-.palm.plugins.nut.v1.Local"
  "eIndexResponse.Item\0223\n\npagination\030\t \001(\0132"
  "\037.palm.plugins.nut.v1.Pagination\032o\n\004Item"
  "\022\n\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\014\n\004code\030\003 \001(\t"
  "\022\017\n\007message\030\004 \001(\t\022.\n\nupdated_at\030\t \001(\0132\032."
  "google.protobuf.Timestamp\".\n\020LocaleGetRe"
  "quest\022\014\n\004lang\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"\?\n\020Loc"
  "aleSetRequest\022\014\n\004lang\030\001 \001(\t\022\014\n\004code\030\002 \001("
  "\t\022\017\n\007message\030\003 \001(\t\"r\n\nAwsProfile\022\016\n\006regi"
  "on\030\001 \001(\t\022\025\n\010endpoint\030\002 \001(\tH\000\210\001\001\022\025\n\racces"
  "s_key_id\030\003 \001(\t\022\031\n\021secret_access_key\030\004 \001("
  "\tB\013\n\t_endpoint\"(\n\025SiteAwsS3TestResponse\022"
  "\017\n\007buckets\030\001 \003(\t\"\?\n\022SiteSmtpTestRequst\022\n"
  "\n\002to\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022\014\n\004body\030\003 \001("
  "\t\"!\n\022SiteSetLogoRequest\022\013\n\003url\030\001 \001(\t\"*\n\027"
  "SiteSetCopyrightRequest\022\017\n\007payload\030\001 \001(\t"
  "\"\'\n\026SiteSetKeywordsRequest\022\r\n\005items\030\001 \003("
  "\t\"I\n\022SiteSetInfoRequest\022\r\n\005title\030\001 \001(\t\022\017"
  "\n\007subhead\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\"\366\001\n"
  "\022SiteLayoutResponse\022\r\n\005title\030\001 \001(\t\022\017\n\007su"
  "bhead\030\002 \001(\t\022\020\n\010keywords\030\003 \003(\t\022\023\n\013descrip"
  "tion\030\004 \001(\t\022>\n\006author\030\005 \001(\0132..palm.plugin"
  "s.nut.v1.SiteLayoutResponse.Author\022\021\n\tco"
  "pyright\030\006 \001(\t\022\014\n\004logo\030\007 \001(\t\022\021\n\tlanguages"
  "\030\t \003(\t\032%\n\006Author\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030"
  "\002 \001(\t\"\'\n\027SiteNewLeaveWordRequest\022\014\n\004body"
  "\030\001 \001(\t\"\202\002\n\032SiteIndexLeaveWordResponse\022C\n"
  "\005items\030\001 \003(\01324.palm.plugins.nut.v1.SiteI"
  "ndexLeaveWordResponse.Item\0223\n\npagination"
  "\030\t \001(\0132\037.palm.plugins.nut.v1.Pagination\032"
  "j\n\004Item\022\n\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\n\n\002ip\030"
  "\003 \001(\t\022\014\n\004body\030\004 \001(\t\022.\n\ncreated_at\030\t \001(\0132"
  "\032.google.protobuf.Timestamp\"\304\001\n\rGooglePr"
  "ofile\022\033\n\016site_verify_id\030\001 \001(\tH\000\210\001\001\022E\n\nre"
  "_captcha\030\002 \001(\0132,.palm.plugins.nut.v1.Goo"
  "gleProfile.ReCaptchaH\001\210\001\001\032-\n\tReCaptcha\022\020"
  "\n\010site_key\030\001 \001(\t\022\016\n\006secret\030\002 \001(\tB\021\n\017_sit"
  "e_verify_idB\r\n\013_re_captcha\"\221\001\n\014BaiduProf"
  "ile\022F\n\013site_verify\030\001 \001(\0132,.palm.plugins."
  "nut.v1.BaiduProfile.SiteVerifyH\000\210\001\001\032)\n\nS"
  "iteVerify\022\n\n\002id\030\001 \001(\t\022\017\n\007content\030\002 \001(\tB\016"
  "\n\014_site_verify\"=\n\013BingProfile\022\033\n\016site_ve"
  "rify_id\030\001 \001(\tH\000\210\001\001B\021\n\017_site_verify_id\"\356\002"
  "\n\tEmailTask\022\017\n\007subject\030\001 \001(\t\022\014\n\004body\030\002 \001"
  "(\t\022@\n\014content_type\030\003 \001(\0162*.palm.plugins."
  "nut.v1.EmailTask.ContentType\022\n\n\002to\030\013 \001(\t"
  "\022\n\n\002cc\030\014 \003(\t\022\013\n\003bcc\030\r \003(\t\022>\n\013attachments"
  "\030\025 \003(\0132).palm.plugins.nut.v1.EmailTask.A"
  "ttachment\032m\n\nAttachment\022\014\n\004name\030\001 \001(\t\022@\n"
  "\014content_type\030\002 \001(\0162*.palm.plugins.nut.v"
  "1.EmailTask.ContentType\022\017\n\007payload\030\013 \001(\014"
  "\",\n\013ContentType\022\016\n\nTEXT_PLAIN\020\000\022\r\n\tTEXT_"
  "HTML\020\001\"b\n\013SmtpProfile\022\014\n\004host\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\r\022\014\n\004user\030\003 \001(\t\022\020\n\010password\030\004 \001("
  "\t\022\n\n\002cc\030\005 \001(\t\022\013\n\003bcc\030\006 \001(\t\"\315\010\n\022SiteStatu"
  "sResponse\022F\n\npostgresql\030\001 \001(\01322.palm.plu"
  "gins.nut.v1.SiteStatusResponse.PostgreSq"
  "l\022<\n\005mysql\030\002 \001(\0132-.palm.plugins.nut.v1.S"
  "iteStatusResponse.MySql\022<\n\005redis\030\003 \001(\0132-"
  ".palm.plugins.nut.v1.SiteStatusResponse."
  "Redis\022B\n\010rabbitmq\030\004 \001(\01320.palm.plugins.n"
  "ut.v1.SiteStatusResponse.RabbitMq\022F\n\nope"
  "nsearch\030\005 \001(\01322.palm.plugins.nut.v1.Site"
  "StatusResponse.OpenSearch\022>\n\006system\030\013 \001("
  "\0132..palm.plugins.nut.v1.SiteStatusRespon"
  "se.System\022@\n\010healthes\030\025 \003(\0132..palm.plugi"
  "ns.nut.v1.SiteStatusResponse.Health\032&\n\010D"
  "atabase\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\t\032\213\001\n\n"
  "PostgreSql\022\017\n\007version\030\001 \001(\t\022\'\n\003now\030\002 \001(\013"
  "2\032.google.protobuf.Timestamp\022C\n\tdatabase"
  "s\030\t \003(\01320.palm.plugins.nut.v1.SiteStatus"
  "Response.Database\032&\n\005MySql\022\014\n\004size\030\001 \001(\004"
  "\022\017\n\007version\030\002 \001(\t\032z\n\005Redis\022\014\n\004info\030\001 \001(\t"
  "\022A\n\005items\030\002 \003(\01322.palm.plugins.nut.v1.Si"
  "teStatusResponse.Redis.Item\032 \n\004Item\022\013\n\003k"
  "ey\030\001 \001(\t\022\013\n\003ttl\030\002 \001(\003\032\034\n\010RabbitMq\022\020\n\010pro"
  "tocol\030\001 \001(\t\032\'\n\nOpenSearch\022\013\n\003url\030\001 \001(\t\022\014"
  "\n\004info\030\002 \001(\t\032&\n\006Health\022\014\n\004name\030\001 \001(\t\022\016\n\006"
  "status\030\002 \001(\t\032\233\001\n\006System\022\017\n\007version\030\001 \001(\t"
  "\022\013\n\003cpu\030\002 \001(\t\022\016\n\006memory\030\003 \001(\t\022\014\n\004boot\030\004 "
  "\001(\t\022\014\n\004disk\030\005 \001(\t\022\014\n\004load\030\006 \001(\t\022\n\n\002fs\030\007 "
  "\001(\t\022\014\n\004swap\030\010 \001(\t\022\016\n\006uptime\030\t \001(\t\022\017\n\007net"
  "work\030\n \001(\t2\305\002\n\006Locale\022F\n\003Set\022%.palm.plug"
  "ins.nut.v1.LocaleSetRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022]\n\003Get\022%.palm.plugins.nut."
  "v1.LocaleGetRequest\032-.palm.plugins.nut.v"
  "1.LocaleIndexResponse.Item\"\000\022O\n\005Index\022\032."
  "palm.plugins.nut.v1.Pager\032(.palm.plugins"
  ".nut.v1.LocaleIndexResponse\"\000\022C\n\007Destroy"
  "\022\036.palm.plugins.nut.v1.IdRequest\032\026.googl"
  "e.protobuf.Empty\"\0002\370\r\n\004Site\022>\n\nClearCach"
  "e\022\026.google.protobuf.Empty\032\026.google.proto"
  "buf.Empty\"\000\022K\n\006Layout\022\026.google.protobuf."
  "Empty\032\'.palm.plugins.nut.v1.SiteLayoutRe"
  "sponse\"\000\022U\n\tSetAuthor\022..palm.plugins.nut"
  ".v1.SiteLayoutResponse.Author\032\026.google.p"
  "rotobuf.Empty\"\000\022V\n\014SetCopyright\022,.palm.p"
  "lugins.nut.v1.SiteSetCopyrightRequest\032\026."
  "google.protobuf.Empty\"\000\022T\n\013SetKeywords\022+"
  ".palm.plugins.nut.v1.SiteSetKeywordsRequ"
  "est\032\026.google.protobuf.Empty\"\000\022L\n\007SetInfo"
  "\022\'.palm.plugins.nut.v1.SiteSetInfoReques"
  "t\032\026.google.protobuf.Empty\"\000\022L\n\007SetLogo\022\'"
  ".palm.plugins.nut.v1.SiteSetLogoRequest\032"
  "\026.google.protobuf.Empty\"\000\022C\n\006SetAws\022\037.pa"
  "lm.plugins.nut.v1.AwsProfile\032\026.google.pr"
  "otobuf.Empty\"\000\022C\n\006GetAws\022\026.google.protob"
  "uf.Empty\032\037.palm.plugins.nut.v1.AwsProfil"
  "e\"\000\022Q\n\tTestAwsS3\022\026.google.protobuf.Empty"
  "\032*.palm.plugins.nut.v1.SiteAwsS3TestResp"
  "onse\"\000\022E\n\007SetSmtp\022 .palm.plugins.nut.v1."
  "SmtpProfile\032\026.google.protobuf.Empty\"\000\022E\n"
  "\007GetSmtp\022\026.google.protobuf.Empty\032 .palm."
  "plugins.nut.v1.SmtpProfile\"\000\022M\n\010TestSmtp"
  "\022\'.palm.plugins.nut.v1.SiteSmtpTestRequs"
  "t\032\026.google.protobuf.Empty\"\000\022E\n\007SetBing\022 "
  ".palm.plugins.nut.v1.BingProfile\032\026.googl"
  "e.protobuf.Empty\"\000\022E\n\007GetBing\022\026.google.p"
  "rotobuf.Empty\032 .palm.plugins.nut.v1.Bing"
  "Profile\"\000\022I\n\tSetGoogle\022\".palm.plugins.nu"
  "t.v1.GoogleProfile\032\026.google.protobuf.Emp"
  "ty\"\000\022I\n\tGetGoogle\022\026.google.protobuf.Empt"
  "y\032\".palm.plugins.nut.v1.GoogleProfile\"\000\022"
  "G\n\010SetBaidu\022!.palm.plugins.nut.v1.BaiduP"
  "rofile\032\026.google.protobuf.Empty\"\000\022G\n\010GetB"
  "aidu\022\026.google.protobuf.Empty\032!.palm.plug"
  "ins.nut.v1.BaiduProfile\"\000\022K\n\006Status\022\026.go"
  "ogle.protobuf.Empty\032\'.palm.plugins.nut.v"
  "1.SiteStatusResponse\"\000\022V\n\014NewLeaveWord\022,"
  ".palm.plugins.nut.v1.SiteNewLeaveWordReq"
  "uest\032\026.google.protobuf.Empty\"\000\022_\n\016IndexL"
  "eaveWord\022\032.palm.plugins.nut.v1.Pager\032/.p"
  "alm.plugins.nut.v1.SiteIndexLeaveWordRes"
  "ponse\"\000\022L\n\020DestroyLeaveWord\022\036.palm.plugi"
  "ns.nut.v1.IdRequest\032\026.google.protobuf.Em"
  "pty\"\000B\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nut_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nut_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto = {
  false, false, 5697, descriptor_table_protodef_nut_2eproto, "nut.proto", 
  &descriptor_table_nut_2eproto_once, descriptor_table_nut_2eproto_deps, 2, 37,
  schemas, file_default_instances, TableStruct_nut_2eproto::offsets,
  file_level_metadata_nut_2eproto, file_level_enum_descriptors_nut_2eproto, file_level_service_descriptors_nut_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_nut_2eproto_getter() {
  return &descriptor_table_nut_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_nut_2eproto(&descriptor_table_nut_2eproto);
namespace palm {
namespace plugins {
namespace nut {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmailTask_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nut_2eproto);
  return file_level_enum_descriptors_nut_2eproto[0];
}
bool EmailTask_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmailTask_ContentType EmailTask::TEXT_PLAIN;
constexpr EmailTask_ContentType EmailTask::TEXT_HTML;
constexpr EmailTask_ContentType EmailTask::ContentType_MIN;
constexpr EmailTask_ContentType EmailTask::ContentType_MAX;
constexpr int EmailTask::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Pager::_Internal {
 public:
};

Pager::Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.Pager)
}
Pager::Pager(const Pager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&page_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.Pager)
}

void Pager::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&page_)) + sizeof(size_));
}

Pager::~Pager() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.Pager)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pager::ArenaDtor(void* object) {
  Pager* _this = reinterpret_cast< Pager* >(object);
  (void)_this;
}
void Pager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pager::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.Pager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&page_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.Pager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.Pager)
  return target;
}

size_t Pager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.Pager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pager::GetClassData() const { return &_class_data_; }

void Pager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pager *>(to)->MergeFrom(
      static_cast<const Pager &>(from));
}


void Pager::MergeFrom(const Pager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.Pager)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pager::CopyFrom(const Pager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.Pager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pager::IsInitialized() const {
  return true;
}

void Pager::InternalSwap(Pager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pager, size_)
      + sizeof(Pager::size_)
      - PROTOBUF_FIELD_OFFSET(Pager, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[0]);
}

// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_previous_) -
    reinterpret_cast<char*>(&page_)) + sizeof(has_previous_));
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.Pagination)
}

void Pagination::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_previous_) -
    reinterpret_cast<char*>(&page_)) + sizeof(has_previous_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.Pagination)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pagination::ArenaDtor(void* object) {
  Pagination* _this = reinterpret_cast< Pagination* >(object);
  (void)_this;
}
void Pagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_previous_) -
      reinterpret_cast<char*>(&page_)) + sizeof(has_previous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_next = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          has_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_previous = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          has_previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total(), target);
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_has_next(), target);
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_has_previous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.Pagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total());
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    total_size += 1 + 1;
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }

void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pagination *>(to)->MergeFrom(
      static_cast<const Pagination &>(from));
}


void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from._internal_has_next() != 0) {
    _internal_set_has_next(from._internal_has_next());
  }
  if (from._internal_has_previous() != 0) {
    _internal_set_has_previous(from._internal_has_previous());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, has_previous_)
      + sizeof(Pagination::has_previous_)
      - PROTOBUF_FIELD_OFFSET(Pagination, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[1]);
}

// ===================================================================

class IdRequest::_Internal {
 public:
};

IdRequest::IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.IdRequest)
}
IdRequest::IdRequest(const IdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.IdRequest)
}

void IdRequest::SharedCtor() {
id_ = 0;
}

IdRequest::~IdRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.IdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdRequest::ArenaDtor(void* object) {
  IdRequest* _this = reinterpret_cast< IdRequest* >(object);
  (void)_this;
}
void IdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.IdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.IdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.IdRequest)
  return target;
}

size_t IdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.IdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdRequest::GetClassData() const { return &_class_data_; }

void IdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IdRequest *>(to)->MergeFrom(
      static_cast<const IdRequest &>(from));
}


void IdRequest::MergeFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.IdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdRequest::CopyFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdRequest::IsInitialized() const {
  return true;
}

void IdRequest::InternalSwap(IdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[2]);
}

// ===================================================================

class LocaleIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LocaleIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LocaleIndexResponse_Item::_Internal::updated_at(const LocaleIndexResponse_Item* msg) {
  return *msg->updated_at_;
}
void LocaleIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleIndexResponse.Item)
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleIndexResponse.Item)
}

void LocaleIndexResponse_Item::SharedCtor() {
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&updated_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&updated_at_)) + sizeof(id_));
}

LocaleIndexResponse_Item::~LocaleIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocaleIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_at_;
}

void LocaleIndexResponse_Item::ArenaDtor(void* object) {
  LocaleIndexResponse_Item* _this = reinterpret_cast< LocaleIndexResponse_Item* >(object);
  (void)_this;
}
void LocaleIndexResponse_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleIndexResponse_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lang_.ClearToEmpty();
  code_.ClearToEmpty();
  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleIndexResponse.Item.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleIndexResponse.Item.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleIndexResponse.Item.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleIndexResponse_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleIndexResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::updated_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  return target;
}

size_t LocaleIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocaleIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse_Item::GetClassData() const { return &_class_data_; }

void LocaleIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocaleIndexResponse_Item *>(to)->MergeFrom(
      static_cast<const LocaleIndexResponse_Item &>(from));
}


void LocaleIndexResponse_Item::MergeFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_updated_at()) {
    _internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse_Item::CopyFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse_Item::IsInitialized() const {
  return true;
}

void LocaleIndexResponse_Item::InternalSwap(LocaleIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, id_)
      + sizeof(LocaleIndexResponse_Item::id_)
      - PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, updated_at_)>(
          reinterpret_cast<char*>(&updated_at_),
          reinterpret_cast<char*>(&other->updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[3]);
}

// ===================================================================

class LocaleIndexResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::Pagination& pagination(const LocaleIndexResponse* msg);
};

const ::palm::plugins::nut::v1::Pagination&
LocaleIndexResponse::_Internal::pagination(const LocaleIndexResponse* msg) {
  return *msg->pagination_;
}
LocaleIndexResponse::LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleIndexResponse)
}
LocaleIndexResponse::LocaleIndexResponse(const LocaleIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    pagination_ = new ::palm::plugins::nut::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleIndexResponse)
}

void LocaleIndexResponse::SharedCtor() {
pagination_ = nullptr;
}

LocaleIndexResponse::~LocaleIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleIndexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocaleIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pagination_;
}

void LocaleIndexResponse::ArenaDtor(void* object) {
  LocaleIndexResponse* _this = reinterpret_cast< LocaleIndexResponse* >(object);
  (void)_this;
}
void LocaleIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleIndexResponse)
  return target;
}

size_t LocaleIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocaleIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse::GetClassData() const { return &_class_data_; }

void LocaleIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocaleIndexResponse *>(to)->MergeFrom(
      static_cast<const LocaleIndexResponse &>(from));
}


void LocaleIndexResponse::MergeFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::palm::plugins::nut::v1::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse::CopyFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse::IsInitialized() const {
  return true;
}

void LocaleIndexResponse::InternalSwap(LocaleIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[4]);
}

// ===================================================================

class LocaleGetRequest::_Internal {
 public:
};

LocaleGetRequest::LocaleGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleGetRequest)
}
LocaleGetRequest::LocaleGetRequest(const LocaleGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleGetRequest)
}

void LocaleGetRequest::SharedCtor() {
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocaleGetRequest::~LocaleGetRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocaleGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocaleGetRequest::ArenaDtor(void* object) {
  LocaleGetRequest* _this = reinterpret_cast< LocaleGetRequest* >(object);
  (void)_this;
}
void LocaleGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lang_.ClearToEmpty();
  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleGetRequest.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleGetRequest.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleGetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleGetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleGetRequest)
  return target;
}

size_t LocaleGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocaleGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleGetRequest::GetClassData() const { return &_class_data_; }

void LocaleGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocaleGetRequest *>(to)->MergeFrom(
      static_cast<const LocaleGetRequest &>(from));
}


void LocaleGetRequest::MergeFrom(const LocaleGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleGetRequest::CopyFrom(const LocaleGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleGetRequest::IsInitialized() const {
  return true;
}

void LocaleGetRequest::InternalSwap(LocaleGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[5]);
}

// ===================================================================

class LocaleSetRequest::_Internal {
 public:
};

LocaleSetRequest::LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.LocaleSetRequest)
}
LocaleSetRequest::LocaleSetRequest(const LocaleSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.LocaleSetRequest)
}

void LocaleSetRequest::SharedCtor() {
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocaleSetRequest::~LocaleSetRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.LocaleSetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocaleSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocaleSetRequest::ArenaDtor(void* object) {
  LocaleSetRequest* _this = reinterpret_cast< LocaleSetRequest* >(object);
  (void)_this;
}
void LocaleSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.LocaleSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lang_.ClearToEmpty();
  code_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleSetRequest.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleSetRequest.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.LocaleSetRequest.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.LocaleSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleSetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleSetRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.LocaleSetRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.LocaleSetRequest)
  return target;
}

size_t LocaleSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.LocaleSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocaleSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleSetRequest::GetClassData() const { return &_class_data_; }

void LocaleSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocaleSetRequest *>(to)->MergeFrom(
      static_cast<const LocaleSetRequest &>(from));
}


void LocaleSetRequest::MergeFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.LocaleSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleSetRequest::CopyFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.LocaleSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleSetRequest::IsInitialized() const {
  return true;
}

void LocaleSetRequest::InternalSwap(LocaleSetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleSetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[6]);
}

// ===================================================================

class AwsProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<AwsProfile>()._has_bits_);
  static void set_has_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AwsProfile::AwsProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.AwsProfile)
}
AwsProfile::AwsProfile(const AwsProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region(), 
      GetArenaForAllocation());
  }
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_endpoint()) {
    endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endpoint(), 
      GetArenaForAllocation());
  }
  access_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_key_id().empty()) {
    access_key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_access_key_id(), 
      GetArenaForAllocation());
  }
  secret_access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret_access_key().empty()) {
    secret_access_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_access_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.AwsProfile)
}

void AwsProfile::SharedCtor() {
region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
access_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secret_access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AwsProfile::~AwsProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.AwsProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AwsProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_access_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AwsProfile::ArenaDtor(void* object) {
  AwsProfile* _this = reinterpret_cast< AwsProfile* >(object);
  (void)_this;
}
void AwsProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AwsProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AwsProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.AwsProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    endpoint_.ClearNonDefaultToEmpty();
  }
  access_key_id_.ClearToEmpty();
  secret_access_key_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AwsProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.region"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.endpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string access_key_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.access_key_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret_access_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_secret_access_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.AwsProfile.secret_access_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AwsProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.AwsProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // optional string endpoint = 2;
  if (_internal_has_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.endpoint");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_endpoint(), target);
  }

  // string access_key_id = 3;
  if (!this->_internal_access_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key_id().data(), static_cast<int>(this->_internal_access_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.access_key_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_key_id(), target);
  }

  // string secret_access_key = 4;
  if (!this->_internal_secret_access_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_access_key().data(), static_cast<int>(this->_internal_secret_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.AwsProfile.secret_access_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secret_access_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.AwsProfile)
  return target;
}

size_t AwsProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.AwsProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // optional string endpoint = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string access_key_id = 3;
  if (!this->_internal_access_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key_id());
  }

  // string secret_access_key = 4;
  if (!this->_internal_secret_access_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_access_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AwsProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AwsProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AwsProfile::GetClassData() const { return &_class_data_; }

void AwsProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AwsProfile *>(to)->MergeFrom(
      static_cast<const AwsProfile &>(from));
}


void AwsProfile::MergeFrom(const AwsProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.AwsProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _internal_set_region(from._internal_region());
  }
  if (from._internal_has_endpoint()) {
    _internal_set_endpoint(from._internal_endpoint());
  }
  if (!from._internal_access_key_id().empty()) {
    _internal_set_access_key_id(from._internal_access_key_id());
  }
  if (!from._internal_secret_access_key().empty()) {
    _internal_set_secret_access_key(from._internal_secret_access_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AwsProfile::CopyFrom(const AwsProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.AwsProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwsProfile::IsInitialized() const {
  return true;
}

void AwsProfile::InternalSwap(AwsProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &region_, lhs_arena,
      &other->region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &endpoint_, lhs_arena,
      &other->endpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &access_key_id_, lhs_arena,
      &other->access_key_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_access_key_, lhs_arena,
      &other->secret_access_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AwsProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[7]);
}

// ===================================================================

class SiteAwsS3TestResponse::_Internal {
 public:
};

SiteAwsS3TestResponse::SiteAwsS3TestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buckets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteAwsS3TestResponse)
}
SiteAwsS3TestResponse::SiteAwsS3TestResponse(const SiteAwsS3TestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteAwsS3TestResponse)
}

void SiteAwsS3TestResponse::SharedCtor() {
}

SiteAwsS3TestResponse::~SiteAwsS3TestResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteAwsS3TestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteAwsS3TestResponse::ArenaDtor(void* object) {
  SiteAwsS3TestResponse* _this = reinterpret_cast< SiteAwsS3TestResponse* >(object);
  (void)_this;
}
void SiteAwsS3TestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteAwsS3TestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteAwsS3TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteAwsS3TestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buckets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteAwsS3TestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string buckets = 1;
  for (int i = 0, n = this->_internal_buckets_size(); i < n; i++) {
    const auto& s = this->_internal_buckets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  return target;
}

size_t SiteAwsS3TestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buckets = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buckets_.size());
  for (int i = 0, n = buckets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      buckets_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteAwsS3TestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteAwsS3TestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteAwsS3TestResponse::GetClassData() const { return &_class_data_; }

void SiteAwsS3TestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteAwsS3TestResponse *>(to)->MergeFrom(
      static_cast<const SiteAwsS3TestResponse &>(from));
}


void SiteAwsS3TestResponse::MergeFrom(const SiteAwsS3TestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteAwsS3TestResponse::CopyFrom(const SiteAwsS3TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteAwsS3TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteAwsS3TestResponse::IsInitialized() const {
  return true;
}

void SiteAwsS3TestResponse::InternalSwap(SiteAwsS3TestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buckets_.InternalSwap(&other->buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteAwsS3TestResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[8]);
}

// ===================================================================

class SiteSmtpTestRequst::_Internal {
 public:
};

SiteSmtpTestRequst::SiteSmtpTestRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSmtpTestRequst)
}
SiteSmtpTestRequst::SiteSmtpTestRequst(const SiteSmtpTestRequst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSmtpTestRequst)
}

void SiteSmtpTestRequst::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteSmtpTestRequst::~SiteSmtpTestRequst() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSmtpTestRequst)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteSmtpTestRequst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteSmtpTestRequst::ArenaDtor(void* object) {
  SiteSmtpTestRequst* _this = reinterpret_cast< SiteSmtpTestRequst* >(object);
  (void)_this;
}
void SiteSmtpTestRequst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteSmtpTestRequst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteSmtpTestRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  subject_.ClearToEmpty();
  body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSmtpTestRequst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSmtpTestRequst.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSmtpTestRequst.subject"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSmtpTestRequst.body"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteSmtpTestRequst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSmtpTestRequst.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSmtpTestRequst.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSmtpTestRequst.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSmtpTestRequst)
  return target;
}

size_t SiteSmtpTestRequst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSmtpTestRequst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteSmtpTestRequst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSmtpTestRequst::GetClassData() const { return &_class_data_; }

void SiteSmtpTestRequst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteSmtpTestRequst *>(to)->MergeFrom(
      static_cast<const SiteSmtpTestRequst &>(from));
}


void SiteSmtpTestRequst::MergeFrom(const SiteSmtpTestRequst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_subject().empty()) {
    _internal_set_subject(from._internal_subject());
  }
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSmtpTestRequst::CopyFrom(const SiteSmtpTestRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSmtpTestRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSmtpTestRequst::IsInitialized() const {
  return true;
}

void SiteSmtpTestRequst::InternalSwap(SiteSmtpTestRequst* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subject_, lhs_arena,
      &other->subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSmtpTestRequst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[9]);
}

// ===================================================================

class SiteSetLogoRequest::_Internal {
 public:
};

SiteSetLogoRequest::SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetLogoRequest)
}
SiteSetLogoRequest::SiteSetLogoRequest(const SiteSetLogoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetLogoRequest)
}

void SiteSetLogoRequest::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteSetLogoRequest::~SiteSetLogoRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetLogoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteSetLogoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteSetLogoRequest::ArenaDtor(void* object) {
  SiteSetLogoRequest* _this = reinterpret_cast< SiteSetLogoRequest* >(object);
  (void)_this;
}
void SiteSetLogoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteSetLogoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteSetLogoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetLogoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetLogoRequest.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteSetLogoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetLogoRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetLogoRequest)
  return target;
}

size_t SiteSetLogoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetLogoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteSetLogoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetLogoRequest::GetClassData() const { return &_class_data_; }

void SiteSetLogoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteSetLogoRequest *>(to)->MergeFrom(
      static_cast<const SiteSetLogoRequest &>(from));
}


void SiteSetLogoRequest::MergeFrom(const SiteSetLogoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetLogoRequest::CopyFrom(const SiteSetLogoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetLogoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetLogoRequest::IsInitialized() const {
  return true;
}

void SiteSetLogoRequest::InternalSwap(SiteSetLogoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetLogoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[10]);
}

// ===================================================================

class SiteSetCopyrightRequest::_Internal {
 public:
};

SiteSetCopyrightRequest::SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetCopyrightRequest)
}
SiteSetCopyrightRequest::SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetCopyrightRequest)
}

void SiteSetCopyrightRequest::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteSetCopyrightRequest::~SiteSetCopyrightRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteSetCopyrightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteSetCopyrightRequest::ArenaDtor(void* object) {
  SiteSetCopyrightRequest* _this = reinterpret_cast< SiteSetCopyrightRequest* >(object);
  (void)_this;
}
void SiteSetCopyrightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteSetCopyrightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteSetCopyrightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetCopyrightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetCopyrightRequest.payload"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteSetCopyrightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetCopyrightRequest.payload");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  return target;
}

size_t SiteSetCopyrightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetCopyrightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteSetCopyrightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetCopyrightRequest::GetClassData() const { return &_class_data_; }

void SiteSetCopyrightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteSetCopyrightRequest *>(to)->MergeFrom(
      static_cast<const SiteSetCopyrightRequest &>(from));
}


void SiteSetCopyrightRequest::MergeFrom(const SiteSetCopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetCopyrightRequest::CopyFrom(const SiteSetCopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetCopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetCopyrightRequest::IsInitialized() const {
  return true;
}

void SiteSetCopyrightRequest::InternalSwap(SiteSetCopyrightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetCopyrightRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[11]);
}

// ===================================================================

class SiteSetKeywordsRequest::_Internal {
 public:
};

SiteSetKeywordsRequest::SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetKeywordsRequest)
}
SiteSetKeywordsRequest::SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetKeywordsRequest)
}

void SiteSetKeywordsRequest::SharedCtor() {
}

SiteSetKeywordsRequest::~SiteSetKeywordsRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteSetKeywordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteSetKeywordsRequest::ArenaDtor(void* object) {
  SiteSetKeywordsRequest* _this = reinterpret_cast< SiteSetKeywordsRequest* >(object);
  (void)_this;
}
void SiteSetKeywordsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteSetKeywordsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteSetKeywordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetKeywordsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetKeywordsRequest.items"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteSetKeywordsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetKeywordsRequest.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  return target;
}

size_t SiteSetKeywordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(items_.size());
  for (int i = 0, n = items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetKeywordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteSetKeywordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetKeywordsRequest::GetClassData() const { return &_class_data_; }

void SiteSetKeywordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteSetKeywordsRequest *>(to)->MergeFrom(
      static_cast<const SiteSetKeywordsRequest &>(from));
}


void SiteSetKeywordsRequest::MergeFrom(const SiteSetKeywordsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetKeywordsRequest::CopyFrom(const SiteSetKeywordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetKeywordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetKeywordsRequest::IsInitialized() const {
  return true;
}

void SiteSetKeywordsRequest::InternalSwap(SiteSetKeywordsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetKeywordsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[12]);
}

// ===================================================================

class SiteSetInfoRequest::_Internal {
 public:
};

SiteSetInfoRequest::SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteSetInfoRequest)
}
SiteSetInfoRequest::SiteSetInfoRequest(const SiteSetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  subhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subhead().empty()) {
    subhead_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subhead(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteSetInfoRequest)
}

void SiteSetInfoRequest::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteSetInfoRequest::~SiteSetInfoRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteSetInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteSetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subhead_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteSetInfoRequest::ArenaDtor(void* object) {
  SiteSetInfoRequest* _this = reinterpret_cast< SiteSetInfoRequest* >(object);
  (void)_this;
}
void SiteSetInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteSetInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteSetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  subhead_.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetInfoRequest.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetInfoRequest.subhead"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteSetInfoRequest.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteSetInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetInfoRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetInfoRequest.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteSetInfoRequest.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteSetInfoRequest)
  return target;
}

size_t SiteSetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteSetInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetInfoRequest::GetClassData() const { return &_class_data_; }

void SiteSetInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteSetInfoRequest *>(to)->MergeFrom(
      static_cast<const SiteSetInfoRequest &>(from));
}


void SiteSetInfoRequest::MergeFrom(const SiteSetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetInfoRequest::CopyFrom(const SiteSetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteSetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetInfoRequest::IsInitialized() const {
  return true;
}

void SiteSetInfoRequest::InternalSwap(SiteSetInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subhead_, lhs_arena,
      &other->subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[13]);
}

// ===================================================================

class SiteLayoutResponse_Author::_Internal {
 public:
};

SiteLayoutResponse_Author::SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteLayoutResponse.Author)
}
SiteLayoutResponse_Author::SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteLayoutResponse.Author)
}

void SiteLayoutResponse_Author::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteLayoutResponse_Author::~SiteLayoutResponse_Author() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteLayoutResponse_Author::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteLayoutResponse_Author::ArenaDtor(void* object) {
  SiteLayoutResponse_Author* _this = reinterpret_cast< SiteLayoutResponse_Author* >(object);
  (void)_this;
}
void SiteLayoutResponse_Author::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteLayoutResponse_Author::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteLayoutResponse_Author::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_Author::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.Author.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.Author.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteLayoutResponse_Author::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.Author.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.Author.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  return target;
}

size_t SiteLayoutResponse_Author::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_Author::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteLayoutResponse_Author::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_Author::GetClassData() const { return &_class_data_; }

void SiteLayoutResponse_Author::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteLayoutResponse_Author *>(to)->MergeFrom(
      static_cast<const SiteLayoutResponse_Author &>(from));
}


void SiteLayoutResponse_Author::MergeFrom(const SiteLayoutResponse_Author& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_Author::CopyFrom(const SiteLayoutResponse_Author& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteLayoutResponse.Author)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_Author::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_Author::InternalSwap(SiteLayoutResponse_Author* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_Author::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[14]);
}

// ===================================================================

class SiteLayoutResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& author(const SiteLayoutResponse* msg);
};

const ::palm::plugins::nut::v1::SiteLayoutResponse_Author&
SiteLayoutResponse::_Internal::author(const SiteLayoutResponse* msg) {
  return *msg->author_;
}
SiteLayoutResponse::SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keywords_(arena),
  languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteLayoutResponse)
}
SiteLayoutResponse::SiteLayoutResponse(const SiteLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keywords_(from.keywords_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  subhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subhead().empty()) {
    subhead_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subhead(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  copyright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_copyright().empty()) {
    copyright_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_copyright(), 
      GetArenaForAllocation());
  }
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logo().empty()) {
    logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    author_ = new ::palm::plugins::nut::v1::SiteLayoutResponse_Author(*from.author_);
  } else {
    author_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteLayoutResponse)
}

void SiteLayoutResponse::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
copyright_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_ = nullptr;
}

SiteLayoutResponse::~SiteLayoutResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteLayoutResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subhead_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  copyright_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete author_;
}

void SiteLayoutResponse::ArenaDtor(void* object) {
  SiteLayoutResponse* _this = reinterpret_cast< SiteLayoutResponse* >(object);
  (void)_this;
}
void SiteLayoutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteLayoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteLayoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keywords_.Clear();
  languages_.Clear();
  title_.ClearToEmpty();
  subhead_.ClearToEmpty();
  description_.ClearToEmpty();
  copyright_.ClearToEmpty();
  logo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.subhead"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string keywords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.keywords"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string copyright = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_copyright();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.copyright"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.logo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteLayoutResponse.languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteLayoutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteLayoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.keywords");
    target = stream->WriteString(3, s, target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::author(this), target, stream);
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.copyright");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_copyright(), target);
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.logo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logo(), target);
  }

  // repeated string languages = 9;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteLayoutResponse.languages");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteLayoutResponse)
  return target;
}

size_t SiteLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteLayoutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keywords_.size());
  for (int i = 0, n = keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keywords_.Get(i));
  }

  // repeated string languages = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(languages_.size());
  for (int i = 0, n = languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      languages_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *author_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse::GetClassData() const { return &_class_data_; }

void SiteLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteLayoutResponse *>(to)->MergeFrom(
      static_cast<const SiteLayoutResponse &>(from));
}


void SiteLayoutResponse::MergeFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteLayoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keywords_.MergeFrom(from.keywords_);
  languages_.MergeFrom(from.languages_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _internal_set_copyright(from._internal_copyright());
  }
  if (!from._internal_logo().empty()) {
    _internal_set_logo(from._internal_logo());
  }
  if (from._internal_has_author()) {
    _internal_mutable_author()->::palm::plugins::nut::v1::SiteLayoutResponse_Author::MergeFrom(from._internal_author());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse::CopyFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse::IsInitialized() const {
  return true;
}

void SiteLayoutResponse::InternalSwap(SiteLayoutResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keywords_.InternalSwap(&other->keywords_);
  languages_.InternalSwap(&other->languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subhead_, lhs_arena,
      &other->subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &copyright_, lhs_arena,
      &other->copyright_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logo_, lhs_arena,
      &other->logo_, rhs_arena
  );
  swap(author_, other->author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[15]);
}

// ===================================================================

class SiteNewLeaveWordRequest::_Internal {
 public:
};

SiteNewLeaveWordRequest::SiteNewLeaveWordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
}
SiteNewLeaveWordRequest::SiteNewLeaveWordRequest(const SiteNewLeaveWordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
}

void SiteNewLeaveWordRequest::SharedCtor() {
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteNewLeaveWordRequest::~SiteNewLeaveWordRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteNewLeaveWordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteNewLeaveWordRequest::ArenaDtor(void* object) {
  SiteNewLeaveWordRequest* _this = reinterpret_cast< SiteNewLeaveWordRequest* >(object);
  (void)_this;
}
void SiteNewLeaveWordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteNewLeaveWordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteNewLeaveWordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteNewLeaveWordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteNewLeaveWordRequest.body"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteNewLeaveWordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteNewLeaveWordRequest.body");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  return target;
}

size_t SiteNewLeaveWordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteNewLeaveWordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteNewLeaveWordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteNewLeaveWordRequest::GetClassData() const { return &_class_data_; }

void SiteNewLeaveWordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteNewLeaveWordRequest *>(to)->MergeFrom(
      static_cast<const SiteNewLeaveWordRequest &>(from));
}


void SiteNewLeaveWordRequest::MergeFrom(const SiteNewLeaveWordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteNewLeaveWordRequest::CopyFrom(const SiteNewLeaveWordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteNewLeaveWordRequest::IsInitialized() const {
  return true;
}

void SiteNewLeaveWordRequest::InternalSwap(SiteNewLeaveWordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteNewLeaveWordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[16]);
}

// ===================================================================

class SiteIndexLeaveWordResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const SiteIndexLeaveWordResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SiteIndexLeaveWordResponse_Item::_Internal::created_at(const SiteIndexLeaveWordResponse_Item* msg) {
  return *msg->created_at_;
}
void SiteIndexLeaveWordResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
SiteIndexLeaveWordResponse_Item::SiteIndexLeaveWordResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
}
SiteIndexLeaveWordResponse_Item::SiteIndexLeaveWordResponse_Item(const SiteIndexLeaveWordResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
}

void SiteIndexLeaveWordResponse_Item::SharedCtor() {
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(id_));
}

SiteIndexLeaveWordResponse_Item::~SiteIndexLeaveWordResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteIndexLeaveWordResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
}

void SiteIndexLeaveWordResponse_Item::ArenaDtor(void* object) {
  SiteIndexLeaveWordResponse_Item* _this = reinterpret_cast< SiteIndexLeaveWordResponse_Item* >(object);
  (void)_this;
}
void SiteIndexLeaveWordResponse_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteIndexLeaveWordResponse_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteIndexLeaveWordResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lang_.ClearToEmpty();
  ip_.ClearToEmpty();
  body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIndexLeaveWordResponse_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteIndexLeaveWordResponse_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::created_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  return target;
}

size_t SiteIndexLeaveWordResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteIndexLeaveWordResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteIndexLeaveWordResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteIndexLeaveWordResponse_Item::GetClassData() const { return &_class_data_; }

void SiteIndexLeaveWordResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteIndexLeaveWordResponse_Item *>(to)->MergeFrom(
      static_cast<const SiteIndexLeaveWordResponse_Item &>(from));
}


void SiteIndexLeaveWordResponse_Item::MergeFrom(const SiteIndexLeaveWordResponse_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteIndexLeaveWordResponse_Item::CopyFrom(const SiteIndexLeaveWordResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIndexLeaveWordResponse_Item::IsInitialized() const {
  return true;
}

void SiteIndexLeaveWordResponse_Item::InternalSwap(SiteIndexLeaveWordResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteIndexLeaveWordResponse_Item, id_)
      + sizeof(SiteIndexLeaveWordResponse_Item::id_)
      - PROTOBUF_FIELD_OFFSET(SiteIndexLeaveWordResponse_Item, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIndexLeaveWordResponse_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[17]);
}

// ===================================================================

class SiteIndexLeaveWordResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::Pagination& pagination(const SiteIndexLeaveWordResponse* msg);
};

const ::palm::plugins::nut::v1::Pagination&
SiteIndexLeaveWordResponse::_Internal::pagination(const SiteIndexLeaveWordResponse* msg) {
  return *msg->pagination_;
}
SiteIndexLeaveWordResponse::SiteIndexLeaveWordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
}
SiteIndexLeaveWordResponse::SiteIndexLeaveWordResponse(const SiteIndexLeaveWordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    pagination_ = new ::palm::plugins::nut::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
}

void SiteIndexLeaveWordResponse::SharedCtor() {
pagination_ = nullptr;
}

SiteIndexLeaveWordResponse::~SiteIndexLeaveWordResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteIndexLeaveWordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pagination_;
}

void SiteIndexLeaveWordResponse::ArenaDtor(void* object) {
  SiteIndexLeaveWordResponse* _this = reinterpret_cast< SiteIndexLeaveWordResponse* >(object);
  (void)_this;
}
void SiteIndexLeaveWordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteIndexLeaveWordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteIndexLeaveWordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteIndexLeaveWordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteIndexLeaveWordResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  return target;
}

size_t SiteIndexLeaveWordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteIndexLeaveWordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteIndexLeaveWordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteIndexLeaveWordResponse::GetClassData() const { return &_class_data_; }

void SiteIndexLeaveWordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteIndexLeaveWordResponse *>(to)->MergeFrom(
      static_cast<const SiteIndexLeaveWordResponse &>(from));
}


void SiteIndexLeaveWordResponse::MergeFrom(const SiteIndexLeaveWordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::palm::plugins::nut::v1::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteIndexLeaveWordResponse::CopyFrom(const SiteIndexLeaveWordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteIndexLeaveWordResponse::IsInitialized() const {
  return true;
}

void SiteIndexLeaveWordResponse::InternalSwap(SiteIndexLeaveWordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteIndexLeaveWordResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[18]);
}

// ===================================================================

class GoogleProfile_ReCaptcha::_Internal {
 public:
};

GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
}
GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(const GoogleProfile_ReCaptcha& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_key().empty()) {
    site_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_key(), 
      GetArenaForAllocation());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
}

void GoogleProfile_ReCaptcha::SharedCtor() {
site_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GoogleProfile_ReCaptcha::~GoogleProfile_ReCaptcha() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GoogleProfile_ReCaptcha::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  site_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GoogleProfile_ReCaptcha::ArenaDtor(void* object) {
  GoogleProfile_ReCaptcha* _this = reinterpret_cast< GoogleProfile_ReCaptcha* >(object);
  (void)_this;
}
void GoogleProfile_ReCaptcha::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoogleProfile_ReCaptcha::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GoogleProfile_ReCaptcha::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_key_.ClearToEmpty();
  secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile_ReCaptcha::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string site_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_site_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoogleProfile_ReCaptcha::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_key().data(), static_cast<int>(this->_internal_site_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  return target;
}

size_t GoogleProfile_ReCaptcha::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile_ReCaptcha::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GoogleProfile_ReCaptcha::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile_ReCaptcha::GetClassData() const { return &_class_data_; }

void GoogleProfile_ReCaptcha::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GoogleProfile_ReCaptcha *>(to)->MergeFrom(
      static_cast<const GoogleProfile_ReCaptcha &>(from));
}


void GoogleProfile_ReCaptcha::MergeFrom(const GoogleProfile_ReCaptcha& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_site_key().empty()) {
    _internal_set_site_key(from._internal_site_key());
  }
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile_ReCaptcha::CopyFrom(const GoogleProfile_ReCaptcha& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile_ReCaptcha::IsInitialized() const {
  return true;
}

void GoogleProfile_ReCaptcha::InternalSwap(GoogleProfile_ReCaptcha* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_key_, lhs_arena,
      &other->site_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile_ReCaptcha::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[19]);
}

// ===================================================================

class GoogleProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<GoogleProfile>()._has_bits_);
  static void set_has_site_verify_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha& re_captcha(const GoogleProfile* msg);
  static void set_has_re_captcha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha&
GoogleProfile::_Internal::re_captcha(const GoogleProfile* msg) {
  return *msg->re_captcha_;
}
GoogleProfile::GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.GoogleProfile)
}
GoogleProfile::GoogleProfile(const GoogleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_verify_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_site_verify_id()) {
    site_verify_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_verify_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_re_captcha()) {
    re_captcha_ = new ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha(*from.re_captcha_);
  } else {
    re_captcha_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.GoogleProfile)
}

void GoogleProfile::SharedCtor() {
site_verify_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
re_captcha_ = nullptr;
}

GoogleProfile::~GoogleProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.GoogleProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GoogleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  site_verify_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete re_captcha_;
}

void GoogleProfile::ArenaDtor(void* object) {
  GoogleProfile* _this = reinterpret_cast< GoogleProfile* >(object);
  (void)_this;
}
void GoogleProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoogleProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GoogleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.GoogleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      site_verify_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(re_captcha_ != nullptr);
      re_captcha_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string site_verify_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_site_verify_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.GoogleProfile.site_verify_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_re_captcha(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoogleProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.GoogleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  if (_internal_has_site_verify_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_verify_id().data(), static_cast<int>(this->_internal_site_verify_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.GoogleProfile.site_verify_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_verify_id(), target);
  }

  // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
  if (_internal_has_re_captcha()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::re_captcha(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.GoogleProfile)
  return target;
}

size_t GoogleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.GoogleProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string site_verify_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_verify_id());
    }

    // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *re_captcha_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GoogleProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile::GetClassData() const { return &_class_data_; }

void GoogleProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GoogleProfile *>(to)->MergeFrom(
      static_cast<const GoogleProfile &>(from));
}


void GoogleProfile::MergeFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.GoogleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_site_verify_id(from._internal_site_verify_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_re_captcha()->::palm::plugins::nut::v1::GoogleProfile_ReCaptcha::MergeFrom(from._internal_re_captcha());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile::CopyFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.GoogleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile::IsInitialized() const {
  return true;
}

void GoogleProfile::InternalSwap(GoogleProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_verify_id_, lhs_arena,
      &other->site_verify_id_, rhs_arena
  );
  swap(re_captcha_, other->re_captcha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[20]);
}

// ===================================================================

class BaiduProfile_SiteVerify::_Internal {
 public:
};

BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
}
BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(const BaiduProfile_SiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
}

void BaiduProfile_SiteVerify::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BaiduProfile_SiteVerify::~BaiduProfile_SiteVerify() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaiduProfile_SiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaiduProfile_SiteVerify::ArenaDtor(void* object) {
  BaiduProfile_SiteVerify* _this = reinterpret_cast< BaiduProfile_SiteVerify* >(object);
  (void)_this;
}
void BaiduProfile_SiteVerify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaiduProfile_SiteVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaiduProfile_SiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile_SiteVerify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.BaiduProfile.SiteVerify.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.BaiduProfile.SiteVerify.content"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaiduProfile_SiteVerify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.BaiduProfile.SiteVerify.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.BaiduProfile.SiteVerify.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  return target;
}

size_t BaiduProfile_SiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile_SiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaiduProfile_SiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile_SiteVerify::GetClassData() const { return &_class_data_; }

void BaiduProfile_SiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BaiduProfile_SiteVerify *>(to)->MergeFrom(
      static_cast<const BaiduProfile_SiteVerify &>(from));
}


void BaiduProfile_SiteVerify::MergeFrom(const BaiduProfile_SiteVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile_SiteVerify::CopyFrom(const BaiduProfile_SiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile_SiteVerify::IsInitialized() const {
  return true;
}

void BaiduProfile_SiteVerify::InternalSwap(BaiduProfile_SiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile_SiteVerify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[21]);
}

// ===================================================================

class BaiduProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BaiduProfile>()._has_bits_);
  static const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify& site_verify(const BaiduProfile* msg);
  static void set_has_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify&
BaiduProfile::_Internal::site_verify(const BaiduProfile* msg) {
  return *msg->site_verify_;
}
BaiduProfile::BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.BaiduProfile)
}
BaiduProfile::BaiduProfile(const BaiduProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_verify()) {
    site_verify_ = new ::palm::plugins::nut::v1::BaiduProfile_SiteVerify(*from.site_verify_);
  } else {
    site_verify_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.BaiduProfile)
}

void BaiduProfile::SharedCtor() {
site_verify_ = nullptr;
}

BaiduProfile::~BaiduProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.BaiduProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaiduProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete site_verify_;
}

void BaiduProfile::ArenaDtor(void* object) {
  BaiduProfile* _this = reinterpret_cast< BaiduProfile* >(object);
  (void)_this;
}
void BaiduProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaiduProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaiduProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.BaiduProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(site_verify_ != nullptr);
    site_verify_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaiduProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.BaiduProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
  if (_internal_has_site_verify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::site_verify(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.BaiduProfile)
  return target;
}

size_t BaiduProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.BaiduProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *site_verify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaiduProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile::GetClassData() const { return &_class_data_; }

void BaiduProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BaiduProfile *>(to)->MergeFrom(
      static_cast<const BaiduProfile &>(from));
}


void BaiduProfile::MergeFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.BaiduProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_verify()) {
    _internal_mutable_site_verify()->::palm::plugins::nut::v1::BaiduProfile_SiteVerify::MergeFrom(from._internal_site_verify());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile::CopyFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.BaiduProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile::IsInitialized() const {
  return true;
}

void BaiduProfile::InternalSwap(BaiduProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(site_verify_, other->site_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[22]);
}

// ===================================================================

class BingProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BingProfile>()._has_bits_);
  static void set_has_site_verify_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BingProfile::BingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.BingProfile)
}
BingProfile::BingProfile(const BingProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_verify_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_site_verify_id()) {
    site_verify_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_verify_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.BingProfile)
}

void BingProfile::SharedCtor() {
site_verify_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BingProfile::~BingProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.BingProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BingProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  site_verify_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BingProfile::ArenaDtor(void* object) {
  BingProfile* _this = reinterpret_cast< BingProfile* >(object);
  (void)_this;
}
void BingProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BingProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BingProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.BingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    site_verify_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BingProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string site_verify_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_site_verify_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.BingProfile.site_verify_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BingProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.BingProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  if (_internal_has_site_verify_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_verify_id().data(), static_cast<int>(this->_internal_site_verify_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.BingProfile.site_verify_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_verify_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.BingProfile)
  return target;
}

size_t BingProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.BingProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_verify_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BingProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BingProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BingProfile::GetClassData() const { return &_class_data_; }

void BingProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BingProfile *>(to)->MergeFrom(
      static_cast<const BingProfile &>(from));
}


void BingProfile::MergeFrom(const BingProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.BingProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_verify_id()) {
    _internal_set_site_verify_id(from._internal_site_verify_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BingProfile::CopyFrom(const BingProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.BingProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BingProfile::IsInitialized() const {
  return true;
}

void BingProfile::InternalSwap(BingProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_verify_id_, lhs_arena,
      &other->site_verify_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BingProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[23]);
}

// ===================================================================

class EmailTask_Attachment::_Internal {
 public:
};

EmailTask_Attachment::EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.EmailTask.Attachment)
}
EmailTask_Attachment::EmailTask_Attachment(const EmailTask_Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.EmailTask.Attachment)
}

void EmailTask_Attachment::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_type_ = 0;
}

EmailTask_Attachment::~EmailTask_Attachment() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.EmailTask.Attachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmailTask_Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmailTask_Attachment::ArenaDtor(void* object) {
  EmailTask_Attachment* _this = reinterpret_cast< EmailTask_Attachment* >(object);
  (void)_this;
}
void EmailTask_Attachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmailTask_Attachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmailTask_Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.EmailTask.Attachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  payload_.ClearToEmpty();
  content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Attachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.Attachment.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::palm::plugins::nut::v1::EmailTask_ContentType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmailTask_Attachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.EmailTask.Attachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.Attachment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_content_type(), target);
  }

  // bytes payload = 11;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.EmailTask.Attachment)
  return target;
}

size_t EmailTask_Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.EmailTask.Attachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes payload = 11;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmailTask_Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Attachment::GetClassData() const { return &_class_data_; }

void EmailTask_Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmailTask_Attachment *>(to)->MergeFrom(
      static_cast<const EmailTask_Attachment &>(from));
}


void EmailTask_Attachment::MergeFrom(const EmailTask_Attachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.EmailTask.Attachment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Attachment::CopyFrom(const EmailTask_Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.EmailTask.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Attachment::IsInitialized() const {
  return true;
}

void EmailTask_Attachment::InternalSwap(EmailTask_Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Attachment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[24]);
}

// ===================================================================

class EmailTask::_Internal {
 public:
};

EmailTask::EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cc_(arena),
  bcc_(arena),
  attachments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.EmailTask)
}
EmailTask::EmailTask(const EmailTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cc_(from.cc_),
      bcc_(from.bcc_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.EmailTask)
}

void EmailTask::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_type_ = 0;
}

EmailTask::~EmailTask() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.EmailTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmailTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmailTask::ArenaDtor(void* object) {
  EmailTask* _this = reinterpret_cast< EmailTask* >(object);
  (void)_this;
}
void EmailTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmailTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmailTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.EmailTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cc_.Clear();
  bcc_.Clear();
  attachments_.Clear();
  subject_.ClearToEmpty();
  body_.ClearToEmpty();
  to_.ClearToEmpty();
  content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.subject"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.body"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::palm::plugins::nut::v1::EmailTask_ContentType>(val));
        } else
          goto handle_unusual;
        continue;
      // string to = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string cc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.cc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string bcc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bcc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.EmailTask.bcc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmailTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.EmailTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
  if (this->_internal_content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_content_type(), target);
  }

  // string to = 11;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.to");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_to(), target);
  }

  // repeated string cc = 12;
  for (int i = 0, n = this->_internal_cc_size(); i < n; i++) {
    const auto& s = this->_internal_cc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.cc");
    target = stream->WriteString(12, s, target);
  }

  // repeated string bcc = 13;
  for (int i = 0, n = this->_internal_bcc_size(); i < n; i++) {
    const auto& s = this->_internal_bcc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.EmailTask.bcc");
    target = stream->WriteString(13, s, target);
  }

  // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.EmailTask)
  return target;
}

size_t EmailTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.EmailTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cc = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cc_.size());
  for (int i = 0, n = cc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cc_.Get(i));
  }

  // repeated string bcc = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bcc_.size());
  for (int i = 0, n = bcc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bcc_.Get(i));
  }

  // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // string to = 11;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
  if (this->_internal_content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmailTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask::GetClassData() const { return &_class_data_; }

void EmailTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmailTask *>(to)->MergeFrom(
      static_cast<const EmailTask &>(from));
}


void EmailTask::MergeFrom(const EmailTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.EmailTask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cc_.MergeFrom(from.cc_);
  bcc_.MergeFrom(from.bcc_);
  attachments_.MergeFrom(from.attachments_);
  if (!from._internal_subject().empty()) {
    _internal_set_subject(from._internal_subject());
  }
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask::CopyFrom(const EmailTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.EmailTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask::IsInitialized() const {
  return true;
}

void EmailTask::InternalSwap(EmailTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cc_.InternalSwap(&other->cc_);
  bcc_.InternalSwap(&other->bcc_);
  attachments_.InternalSwap(&other->attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subject_, lhs_arena,
      &other->subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[25]);
}

// ===================================================================

class SmtpProfile::_Internal {
 public:
};

SmtpProfile::SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SmtpProfile)
}
SmtpProfile::SmtpProfile(const SmtpProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  cc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cc().empty()) {
    cc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cc(), 
      GetArenaForAllocation());
  }
  bcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bcc().empty()) {
    bcc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bcc(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SmtpProfile)
}

void SmtpProfile::SharedCtor() {
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bcc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0u;
}

SmtpProfile::~SmtpProfile() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SmtpProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SmtpProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bcc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SmtpProfile::ArenaDtor(void* object) {
  SmtpProfile* _this = reinterpret_cast< SmtpProfile* >(object);
  (void)_this;
}
void SmtpProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmtpProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SmtpProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SmtpProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmpty();
  user_.ClearToEmpty();
  password_.ClearToEmpty();
  cc_.ClearToEmpty();
  bcc_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmtpProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.host"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.user"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.cc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bcc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bcc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SmtpProfile.bcc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmtpProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SmtpProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // string user = 3;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string cc = 5;
  if (!this->_internal_cc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cc().data(), static_cast<int>(this->_internal_cc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.cc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cc(), target);
  }

  // string bcc = 6;
  if (!this->_internal_bcc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bcc().data(), static_cast<int>(this->_internal_bcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SmtpProfile.bcc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bcc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SmtpProfile)
  return target;
}

size_t SmtpProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SmtpProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string user = 3;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string cc = 5;
  if (!this->_internal_cc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cc());
  }

  // string bcc = 6;
  if (!this->_internal_bcc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bcc());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmtpProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmtpProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmtpProfile::GetClassData() const { return &_class_data_; }

void SmtpProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SmtpProfile *>(to)->MergeFrom(
      static_cast<const SmtpProfile &>(from));
}


void SmtpProfile::MergeFrom(const SmtpProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SmtpProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (!from._internal_user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_cc().empty()) {
    _internal_set_cc(from._internal_cc());
  }
  if (!from._internal_bcc().empty()) {
    _internal_set_bcc(from._internal_bcc());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmtpProfile::CopyFrom(const SmtpProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SmtpProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtpProfile::IsInitialized() const {
  return true;
}

void SmtpProfile::InternalSwap(SmtpProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, lhs_arena,
      &other->user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cc_, lhs_arena,
      &other->cc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bcc_, lhs_arena,
      &other->bcc_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmtpProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[26]);
}

// ===================================================================

class SiteStatusResponse_Database::_Internal {
 public:
};

SiteStatusResponse_Database::SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Database)
}
SiteStatusResponse_Database::SiteStatusResponse_Database(const SiteStatusResponse_Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_size().empty()) {
    size_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_size(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Database)
}

void SiteStatusResponse_Database::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteStatusResponse_Database::~SiteStatusResponse_Database() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Database)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_Database::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_Database::ArenaDtor(void* object) {
  SiteStatusResponse_Database* _this = reinterpret_cast< SiteStatusResponse_Database* >(object);
  (void)_this;
}
void SiteStatusResponse_Database::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_Database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  size_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Database::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Database.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Database.size"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_Database::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Database.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Database.size");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Database)
  return target;
}

size_t SiteStatusResponse_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Database::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_Database::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Database::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_Database::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_Database *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_Database &>(from));
}


void SiteStatusResponse_Database::MergeFrom(const SiteStatusResponse_Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_size().empty()) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Database::CopyFrom(const SiteStatusResponse_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Database::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Database::InternalSwap(SiteStatusResponse_Database* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &size_, lhs_arena,
      &other->size_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Database::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[27]);
}

// ===================================================================

class SiteStatusResponse_PostgreSql::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& now(const SiteStatusResponse_PostgreSql* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SiteStatusResponse_PostgreSql::_Internal::now(const SiteStatusResponse_PostgreSql* msg) {
  return *msg->now_;
}
void SiteStatusResponse_PostgreSql::clear_now() {
  if (GetArenaForAllocation() == nullptr && now_ != nullptr) {
    delete now_;
  }
  now_ = nullptr;
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  databases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      databases_(from.databases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_now()) {
    now_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.now_);
  } else {
    now_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
}

void SiteStatusResponse_PostgreSql::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
now_ = nullptr;
}

SiteStatusResponse_PostgreSql::~SiteStatusResponse_PostgreSql() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_PostgreSql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete now_;
}

void SiteStatusResponse_PostgreSql::ArenaDtor(void* object) {
  SiteStatusResponse_PostgreSql* _this = reinterpret_cast< SiteStatusResponse_PostgreSql* >(object);
  (void)_this;
}
void SiteStatusResponse_PostgreSql::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_PostgreSql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_PostgreSql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  databases_.Clear();
  version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && now_ != nullptr) {
    delete now_;
  }
  now_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_PostgreSql::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp now = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_databases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_PostgreSql::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::now(this), target, stream);
  }

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_databases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_databases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  return target;
}

size_t SiteStatusResponse_PostgreSql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
  total_size += 1UL * this->_internal_databases_size();
  for (const auto& msg : this->databases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *now_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_PostgreSql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_PostgreSql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_PostgreSql::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_PostgreSql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_PostgreSql *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_PostgreSql &>(from));
}


void SiteStatusResponse_PostgreSql::MergeFrom(const SiteStatusResponse_PostgreSql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  databases_.MergeFrom(from.databases_);
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_now()) {
    _internal_mutable_now()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_now());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_PostgreSql::CopyFrom(const SiteStatusResponse_PostgreSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_PostgreSql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_PostgreSql::InternalSwap(SiteStatusResponse_PostgreSql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  databases_.InternalSwap(&other->databases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(now_, other->now_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_PostgreSql::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[28]);
}

// ===================================================================

class SiteStatusResponse_MySql::_Internal {
 public:
};

SiteStatusResponse_MySql::SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.MySql)
}
SiteStatusResponse_MySql::SiteStatusResponse_MySql(const SiteStatusResponse_MySql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.MySql)
}

void SiteStatusResponse_MySql::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
size_ = uint64_t{0u};
}

SiteStatusResponse_MySql::~SiteStatusResponse_MySql() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_MySql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_MySql::ArenaDtor(void* object) {
  SiteStatusResponse_MySql* _this = reinterpret_cast< SiteStatusResponse_MySql* >(object);
  (void)_this;
}
void SiteStatusResponse_MySql::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_MySql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_MySql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_MySql::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.MySql.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_MySql::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.MySql.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  return target;
}

size_t SiteStatusResponse_MySql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_MySql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_MySql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_MySql::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_MySql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_MySql *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_MySql &>(from));
}


void SiteStatusResponse_MySql::MergeFrom(const SiteStatusResponse_MySql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_MySql::CopyFrom(const SiteStatusResponse_MySql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.MySql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_MySql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_MySql::InternalSwap(SiteStatusResponse_MySql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_MySql::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[29]);
}

// ===================================================================

class SiteStatusResponse_Redis_Item::_Internal {
 public:
};

SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
}
SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(const SiteStatusResponse_Redis_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ttl_ = from.ttl_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
}

void SiteStatusResponse_Redis_Item::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ttl_ = int64_t{0};
}

SiteStatusResponse_Redis_Item::~SiteStatusResponse_Redis_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_Redis_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_Redis_Item::ArenaDtor(void* object) {
  SiteStatusResponse_Redis_Item* _this = reinterpret_cast< SiteStatusResponse_Redis_Item* >(object);
  (void)_this;
}
void SiteStatusResponse_Redis_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_Redis_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_Redis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  ttl_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_Redis_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 ttl = 2;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  return target;
}

size_t SiteStatusResponse_Redis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 ttl = 2;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_Redis_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis_Item::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_Redis_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_Redis_Item *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_Redis_Item &>(from));
}


void SiteStatusResponse_Redis_Item::MergeFrom(const SiteStatusResponse_Redis_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis_Item::CopyFrom(const SiteStatusResponse_Redis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis_Item::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis_Item::InternalSwap(SiteStatusResponse_Redis_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(ttl_, other->ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[30]);
}

// ===================================================================

class SiteStatusResponse_Redis::_Internal {
 public:
};

SiteStatusResponse_Redis::SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis)
}
SiteStatusResponse_Redis::SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Redis)
}

void SiteStatusResponse_Redis::SharedCtor() {
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteStatusResponse_Redis::~SiteStatusResponse_Redis() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_Redis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_Redis::ArenaDtor(void* object) {
  SiteStatusResponse_Redis* _this = reinterpret_cast< SiteStatusResponse_Redis* >(object);
  (void)_this;
}
void SiteStatusResponse_Redis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_Redis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_Redis::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Redis.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_Redis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Redis.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  return target;
}

size_t SiteStatusResponse_Redis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_Redis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_Redis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_Redis *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_Redis &>(from));
}


void SiteStatusResponse_Redis::MergeFrom(const SiteStatusResponse_Redis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis::CopyFrom(const SiteStatusResponse_Redis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Redis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis::InternalSwap(SiteStatusResponse_Redis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[31]);
}

// ===================================================================

class SiteStatusResponse_RabbitMq::_Internal {
 public:
};

SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
}
SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(const SiteStatusResponse_RabbitMq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
}

void SiteStatusResponse_RabbitMq::SharedCtor() {
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteStatusResponse_RabbitMq::~SiteStatusResponse_RabbitMq() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_RabbitMq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_RabbitMq::ArenaDtor(void* object) {
  SiteStatusResponse_RabbitMq* _this = reinterpret_cast< SiteStatusResponse_RabbitMq* >(object);
  (void)_this;
}
void SiteStatusResponse_RabbitMq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_RabbitMq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_RabbitMq::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_RabbitMq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_RabbitMq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  return target;
}

size_t SiteStatusResponse_RabbitMq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_RabbitMq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_RabbitMq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_RabbitMq::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_RabbitMq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_RabbitMq *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_RabbitMq &>(from));
}


void SiteStatusResponse_RabbitMq::MergeFrom(const SiteStatusResponse_RabbitMq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol().empty()) {
    _internal_set_protocol(from._internal_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_RabbitMq::CopyFrom(const SiteStatusResponse_RabbitMq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_RabbitMq::IsInitialized() const {
  return true;
}

void SiteStatusResponse_RabbitMq::InternalSwap(SiteStatusResponse_RabbitMq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, lhs_arena,
      &other->protocol_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_RabbitMq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[32]);
}

// ===================================================================

class SiteStatusResponse_OpenSearch::_Internal {
 public:
};

SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
}
SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
}

void SiteStatusResponse_OpenSearch::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteStatusResponse_OpenSearch::~SiteStatusResponse_OpenSearch() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_OpenSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_OpenSearch::ArenaDtor(void* object) {
  SiteStatusResponse_OpenSearch* _this = reinterpret_cast< SiteStatusResponse_OpenSearch* >(object);
  (void)_this;
}
void SiteStatusResponse_OpenSearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_OpenSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_OpenSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_OpenSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_OpenSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  return target;
}

size_t SiteStatusResponse_OpenSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_OpenSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_OpenSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_OpenSearch::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_OpenSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_OpenSearch *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_OpenSearch &>(from));
}


void SiteStatusResponse_OpenSearch::MergeFrom(const SiteStatusResponse_OpenSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_info().empty()) {
    _internal_set_info(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_OpenSearch::CopyFrom(const SiteStatusResponse_OpenSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_OpenSearch::IsInitialized() const {
  return true;
}

void SiteStatusResponse_OpenSearch::InternalSwap(SiteStatusResponse_OpenSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &info_, lhs_arena,
      &other->info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_OpenSearch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[33]);
}

// ===================================================================

class SiteStatusResponse_Health::_Internal {
 public:
};

SiteStatusResponse_Health::SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.Health)
}
SiteStatusResponse_Health::SiteStatusResponse_Health(const SiteStatusResponse_Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.Health)
}

void SiteStatusResponse_Health::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteStatusResponse_Health::~SiteStatusResponse_Health() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.Health)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_Health::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_Health::ArenaDtor(void* object) {
  SiteStatusResponse_Health* _this = reinterpret_cast< SiteStatusResponse_Health* >(object);
  (void)_this;
}
void SiteStatusResponse_Health::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_Health::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Health::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Health.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.Health.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_Health::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Health.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.Health.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.Health)
  return target;
}

size_t SiteStatusResponse_Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Health::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_Health::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Health::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_Health::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_Health *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_Health &>(from));
}


void SiteStatusResponse_Health::MergeFrom(const SiteStatusResponse_Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Health::CopyFrom(const SiteStatusResponse_Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Health::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Health::InternalSwap(SiteStatusResponse_Health* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Health::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[34]);
}

// ===================================================================

class SiteStatusResponse_System::_Internal {
 public:
};

SiteStatusResponse_System::SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse.System)
}
SiteStatusResponse_System::SiteStatusResponse_System(const SiteStatusResponse_System& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu().empty()) {
    cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu(), 
      GetArenaForAllocation());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory().empty()) {
    memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memory(), 
      GetArenaForAllocation());
  }
  boot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boot().empty()) {
    boot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boot(), 
      GetArenaForAllocation());
  }
  disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_disk().empty()) {
    disk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_disk(), 
      GetArenaForAllocation());
  }
  load_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load().empty()) {
    load_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load(), 
      GetArenaForAllocation());
  }
  fs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fs().empty()) {
    fs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fs(), 
      GetArenaForAllocation());
  }
  swap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_swap().empty()) {
    swap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_swap(), 
      GetArenaForAllocation());
  }
  uptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uptime().empty()) {
    uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uptime(), 
      GetArenaForAllocation());
  }
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network().empty()) {
    network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse.System)
}

void SiteStatusResponse_System::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
boot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
load_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
swap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
uptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteStatusResponse_System::~SiteStatusResponse_System() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse.System)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse_System::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  swap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uptime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteStatusResponse_System::ArenaDtor(void* object) {
  SiteStatusResponse_System* _this = reinterpret_cast< SiteStatusResponse_System* >(object);
  (void)_this;
}
void SiteStatusResponse_System::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse_System::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse_System::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  cpu_.ClearToEmpty();
  memory_.ClearToEmpty();
  boot_.ClearToEmpty();
  disk_.ClearToEmpty();
  load_.ClearToEmpty();
  fs_.ClearToEmpty();
  swap_.ClearToEmpty();
  uptime_.ClearToEmpty();
  network_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_System::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cpu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.cpu"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_memory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.memory"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string boot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_boot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.boot"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string disk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_disk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.disk"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string load = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_load();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.load"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.fs"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string swap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_swap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.swap"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uptime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_uptime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.uptime"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string network = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.nut.v1.SiteStatusResponse.System.network"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse_System::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.cpu");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu(), target);
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory().data(), static_cast<int>(this->_internal_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.memory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memory(), target);
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boot().data(), static_cast<int>(this->_internal_boot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.boot");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_boot(), target);
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disk().data(), static_cast<int>(this->_internal_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.disk");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_disk(), target);
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load().data(), static_cast<int>(this->_internal_load().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.load");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_load(), target);
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fs().data(), static_cast<int>(this->_internal_fs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.fs");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fs(), target);
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_swap().data(), static_cast<int>(this->_internal_swap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.swap");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_swap(), target);
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uptime().data(), static_cast<int>(this->_internal_uptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.uptime");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uptime(), target);
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.nut.v1.SiteStatusResponse.System.network");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse.System)
  return target;
}

size_t SiteStatusResponse_System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory());
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boot());
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disk());
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load());
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fs());
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_swap());
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uptime());
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_System::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse_System::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_System::GetClassData() const { return &_class_data_; }

void SiteStatusResponse_System::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse_System *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse_System &>(from));
}


void SiteStatusResponse_System::MergeFrom(const SiteStatusResponse_System& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_cpu().empty()) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_memory().empty()) {
    _internal_set_memory(from._internal_memory());
  }
  if (!from._internal_boot().empty()) {
    _internal_set_boot(from._internal_boot());
  }
  if (!from._internal_disk().empty()) {
    _internal_set_disk(from._internal_disk());
  }
  if (!from._internal_load().empty()) {
    _internal_set_load(from._internal_load());
  }
  if (!from._internal_fs().empty()) {
    _internal_set_fs(from._internal_fs());
  }
  if (!from._internal_swap().empty()) {
    _internal_set_swap(from._internal_swap());
  }
  if (!from._internal_uptime().empty()) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (!from._internal_network().empty()) {
    _internal_set_network(from._internal_network());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_System::CopyFrom(const SiteStatusResponse_System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_System::IsInitialized() const {
  return true;
}

void SiteStatusResponse_System::InternalSwap(SiteStatusResponse_System* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpu_, lhs_arena,
      &other->cpu_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memory_, lhs_arena,
      &other->memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boot_, lhs_arena,
      &other->boot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &disk_, lhs_arena,
      &other->disk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_, lhs_arena,
      &other->load_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fs_, lhs_arena,
      &other->fs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &swap_, lhs_arena,
      &other->swap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uptime_, lhs_arena,
      &other->uptime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &network_, lhs_arena,
      &other->network_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_System::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[35]);
}

// ===================================================================

class SiteStatusResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql& postgresql(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_MySql& mysql(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_Redis& redis(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq& rabbitmq(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch& opensearch(const SiteStatusResponse* msg);
  static const ::palm::plugins::nut::v1::SiteStatusResponse_System& system(const SiteStatusResponse* msg);
};

const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql&
SiteStatusResponse::_Internal::postgresql(const SiteStatusResponse* msg) {
  return *msg->postgresql_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_MySql&
SiteStatusResponse::_Internal::mysql(const SiteStatusResponse* msg) {
  return *msg->mysql_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_Redis&
SiteStatusResponse::_Internal::redis(const SiteStatusResponse* msg) {
  return *msg->redis_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq&
SiteStatusResponse::_Internal::rabbitmq(const SiteStatusResponse* msg) {
  return *msg->rabbitmq_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch&
SiteStatusResponse::_Internal::opensearch(const SiteStatusResponse* msg) {
  return *msg->opensearch_;
}
const ::palm::plugins::nut::v1::SiteStatusResponse_System&
SiteStatusResponse::_Internal::system(const SiteStatusResponse* msg) {
  return *msg->system_;
}
SiteStatusResponse::SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  healthes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.nut.v1.SiteStatusResponse)
}
SiteStatusResponse::SiteStatusResponse(const SiteStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      healthes_(from.healthes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postgresql()) {
    postgresql_ = new ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql(*from.postgresql_);
  } else {
    postgresql_ = nullptr;
  }
  if (from._internal_has_mysql()) {
    mysql_ = new ::palm::plugins::nut::v1::SiteStatusResponse_MySql(*from.mysql_);
  } else {
    mysql_ = nullptr;
  }
  if (from._internal_has_redis()) {
    redis_ = new ::palm::plugins::nut::v1::SiteStatusResponse_Redis(*from.redis_);
  } else {
    redis_ = nullptr;
  }
  if (from._internal_has_rabbitmq()) {
    rabbitmq_ = new ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq(*from.rabbitmq_);
  } else {
    rabbitmq_ = nullptr;
  }
  if (from._internal_has_opensearch()) {
    opensearch_ = new ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch(*from.opensearch_);
  } else {
    opensearch_ = nullptr;
  }
  if (from._internal_has_system()) {
    system_ = new ::palm::plugins::nut::v1::SiteStatusResponse_System(*from.system_);
  } else {
    system_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.nut.v1.SiteStatusResponse)
}

void SiteStatusResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&postgresql_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&system_) -
    reinterpret_cast<char*>(&postgresql_)) + sizeof(system_));
}

SiteStatusResponse::~SiteStatusResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.nut.v1.SiteStatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete postgresql_;
  if (this != internal_default_instance()) delete mysql_;
  if (this != internal_default_instance()) delete redis_;
  if (this != internal_default_instance()) delete rabbitmq_;
  if (this != internal_default_instance()) delete opensearch_;
  if (this != internal_default_instance()) delete system_;
}

void SiteStatusResponse::ArenaDtor(void* object) {
  SiteStatusResponse* _this = reinterpret_cast< SiteStatusResponse* >(object);
  (void)_this;
}
void SiteStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.nut.v1.SiteStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  healthes_.Clear();
  if (GetArenaForAllocation() == nullptr && postgresql_ != nullptr) {
    delete postgresql_;
  }
  postgresql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mysql_ != nullptr) {
    delete mysql_;
  }
  mysql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && redis_ != nullptr) {
    delete redis_;
  }
  redis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rabbitmq_ != nullptr) {
    delete rabbitmq_;
  }
  rabbitmq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && opensearch_ != nullptr) {
    delete opensearch_;
  }
  opensearch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && system_ != nullptr) {
    delete system_;
  }
  system_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_postgresql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rabbitmq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opensearch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_healthes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.nut.v1.SiteStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::postgresql(this), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mysql(this), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::redis(this), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rabbitmq(this), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::opensearch(this), target, stream);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::system(this), target, stream);
  }

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_healthes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_healthes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.nut.v1.SiteStatusResponse)
  return target;
}

size_t SiteStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.nut.v1.SiteStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
  total_size += 2UL * this->_internal_healthes_size();
  for (const auto& msg : this->healthes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postgresql_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mysql_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redis_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rabbitmq_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opensearch_);
  }

  // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse::GetClassData() const { return &_class_data_; }

void SiteStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteStatusResponse *>(to)->MergeFrom(
      static_cast<const SiteStatusResponse &>(from));
}


void SiteStatusResponse::MergeFrom(const SiteStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.nut.v1.SiteStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  healthes_.MergeFrom(from.healthes_);
  if (from._internal_has_postgresql()) {
    _internal_mutable_postgresql()->::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql::MergeFrom(from._internal_postgresql());
  }
  if (from._internal_has_mysql()) {
    _internal_mutable_mysql()->::palm::plugins::nut::v1::SiteStatusResponse_MySql::MergeFrom(from._internal_mysql());
  }
  if (from._internal_has_redis()) {
    _internal_mutable_redis()->::palm::plugins::nut::v1::SiteStatusResponse_Redis::MergeFrom(from._internal_redis());
  }
  if (from._internal_has_rabbitmq()) {
    _internal_mutable_rabbitmq()->::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq::MergeFrom(from._internal_rabbitmq());
  }
  if (from._internal_has_opensearch()) {
    _internal_mutable_opensearch()->::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch::MergeFrom(from._internal_opensearch());
  }
  if (from._internal_has_system()) {
    _internal_mutable_system()->::palm::plugins::nut::v1::SiteStatusResponse_System::MergeFrom(from._internal_system());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse::CopyFrom(const SiteStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.nut.v1.SiteStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse::IsInitialized() const {
  return true;
}

void SiteStatusResponse::InternalSwap(SiteStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  healthes_.InternalSwap(&other->healthes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteStatusResponse, system_)
      + sizeof(SiteStatusResponse::system_)
      - PROTOBUF_FIELD_OFFSET(SiteStatusResponse, postgresql_)>(
          reinterpret_cast<char*>(&postgresql_),
          reinterpret_cast<char*>(&other->postgresql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[36]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace nut
}  // namespace plugins
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::Pager* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::Pager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::Pager >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::Pagination* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::IdRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::IdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::IdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleIndexResponse_Item* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleIndexResponse* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleGetRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::LocaleSetRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::LocaleSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::LocaleSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::AwsProfile* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::AwsProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::AwsProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteAwsS3TestResponse* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteAwsS3TestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteAwsS3TestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSmtpTestRequst* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSmtpTestRequst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSmtpTestRequst >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetLogoRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetLogoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetLogoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetCopyrightRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetCopyrightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetCopyrightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetKeywordsRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetKeywordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetKeywordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteSetInfoRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteSetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteSetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteLayoutResponse_Author* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteLayoutResponse_Author >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteLayoutResponse_Author >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteLayoutResponse* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteNewLeaveWordRequest* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteNewLeaveWordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteNewLeaveWordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::GoogleProfile* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::GoogleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::GoogleProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::BaiduProfile_SiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::BaiduProfile_SiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::BaiduProfile* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::BaiduProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::BaiduProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::BingProfile* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::BingProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::BingProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::EmailTask_Attachment* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::EmailTask_Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::EmailTask_Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::EmailTask* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::EmailTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::EmailTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SmtpProfile* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SmtpProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SmtpProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Database* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Database >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Database >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_MySql* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_MySql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_MySql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Redis* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Redis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Redis >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_Health* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_Health >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse_System* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse_System >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse_System >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::nut::v1::SiteStatusResponse* Arena::CreateMaybeMessage< ::palm::plugins::nut::v1::SiteStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::nut::v1::SiteStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
