// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto;
namespace palm {
namespace plugins {
namespace nut {
namespace v1 {
class AwsProfile;
struct AwsProfileDefaultTypeInternal;
extern AwsProfileDefaultTypeInternal _AwsProfile_default_instance_;
class BaiduProfile;
struct BaiduProfileDefaultTypeInternal;
extern BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
class BaiduProfile_SiteVerify;
struct BaiduProfile_SiteVerifyDefaultTypeInternal;
extern BaiduProfile_SiteVerifyDefaultTypeInternal _BaiduProfile_SiteVerify_default_instance_;
class BingProfile;
struct BingProfileDefaultTypeInternal;
extern BingProfileDefaultTypeInternal _BingProfile_default_instance_;
class EmailTask;
struct EmailTaskDefaultTypeInternal;
extern EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
class EmailTask_Attachment;
struct EmailTask_AttachmentDefaultTypeInternal;
extern EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
class GoogleProfile;
struct GoogleProfileDefaultTypeInternal;
extern GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
class GoogleProfile_ReCaptcha;
struct GoogleProfile_ReCaptchaDefaultTypeInternal;
extern GoogleProfile_ReCaptchaDefaultTypeInternal _GoogleProfile_ReCaptcha_default_instance_;
class IdRequest;
struct IdRequestDefaultTypeInternal;
extern IdRequestDefaultTypeInternal _IdRequest_default_instance_;
class LocaleGetRequest;
struct LocaleGetRequestDefaultTypeInternal;
extern LocaleGetRequestDefaultTypeInternal _LocaleGetRequest_default_instance_;
class LocaleIndexResponse;
struct LocaleIndexResponseDefaultTypeInternal;
extern LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
class LocaleIndexResponse_Item;
struct LocaleIndexResponse_ItemDefaultTypeInternal;
extern LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
class LocaleSetRequest;
struct LocaleSetRequestDefaultTypeInternal;
extern LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
class Pager;
struct PagerDefaultTypeInternal;
extern PagerDefaultTypeInternal _Pager_default_instance_;
class Pagination;
struct PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class SiteAwsS3TestResponse;
struct SiteAwsS3TestResponseDefaultTypeInternal;
extern SiteAwsS3TestResponseDefaultTypeInternal _SiteAwsS3TestResponse_default_instance_;
class SiteIndexLeaveWordResponse;
struct SiteIndexLeaveWordResponseDefaultTypeInternal;
extern SiteIndexLeaveWordResponseDefaultTypeInternal _SiteIndexLeaveWordResponse_default_instance_;
class SiteIndexLeaveWordResponse_Item;
struct SiteIndexLeaveWordResponse_ItemDefaultTypeInternal;
extern SiteIndexLeaveWordResponse_ItemDefaultTypeInternal _SiteIndexLeaveWordResponse_Item_default_instance_;
class SiteLayoutResponse;
struct SiteLayoutResponseDefaultTypeInternal;
extern SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
class SiteLayoutResponse_Author;
struct SiteLayoutResponse_AuthorDefaultTypeInternal;
extern SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
class SiteNewLeaveWordRequest;
struct SiteNewLeaveWordRequestDefaultTypeInternal;
extern SiteNewLeaveWordRequestDefaultTypeInternal _SiteNewLeaveWordRequest_default_instance_;
class SiteSetCopyrightRequest;
struct SiteSetCopyrightRequestDefaultTypeInternal;
extern SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
class SiteSetInfoRequest;
struct SiteSetInfoRequestDefaultTypeInternal;
extern SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
class SiteSetKeywordsRequest;
struct SiteSetKeywordsRequestDefaultTypeInternal;
extern SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
class SiteSetLogoRequest;
struct SiteSetLogoRequestDefaultTypeInternal;
extern SiteSetLogoRequestDefaultTypeInternal _SiteSetLogoRequest_default_instance_;
class SiteSmtpTestRequst;
struct SiteSmtpTestRequstDefaultTypeInternal;
extern SiteSmtpTestRequstDefaultTypeInternal _SiteSmtpTestRequst_default_instance_;
class SiteStatusResponse;
struct SiteStatusResponseDefaultTypeInternal;
extern SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
class SiteStatusResponse_Database;
struct SiteStatusResponse_DatabaseDefaultTypeInternal;
extern SiteStatusResponse_DatabaseDefaultTypeInternal _SiteStatusResponse_Database_default_instance_;
class SiteStatusResponse_Health;
struct SiteStatusResponse_HealthDefaultTypeInternal;
extern SiteStatusResponse_HealthDefaultTypeInternal _SiteStatusResponse_Health_default_instance_;
class SiteStatusResponse_MySql;
struct SiteStatusResponse_MySqlDefaultTypeInternal;
extern SiteStatusResponse_MySqlDefaultTypeInternal _SiteStatusResponse_MySql_default_instance_;
class SiteStatusResponse_OpenSearch;
struct SiteStatusResponse_OpenSearchDefaultTypeInternal;
extern SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
class SiteStatusResponse_PostgreSql;
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal;
extern SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
class SiteStatusResponse_RabbitMq;
struct SiteStatusResponse_RabbitMqDefaultTypeInternal;
extern SiteStatusResponse_RabbitMqDefaultTypeInternal _SiteStatusResponse_RabbitMq_default_instance_;
class SiteStatusResponse_Redis;
struct SiteStatusResponse_RedisDefaultTypeInternal;
extern SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
class SiteStatusResponse_Redis_Item;
struct SiteStatusResponse_Redis_ItemDefaultTypeInternal;
extern SiteStatusResponse_Redis_ItemDefaultTypeInternal _SiteStatusResponse_Redis_Item_default_instance_;
class SiteStatusResponse_System;
struct SiteStatusResponse_SystemDefaultTypeInternal;
extern SiteStatusResponse_SystemDefaultTypeInternal _SiteStatusResponse_System_default_instance_;
class SmtpProfile;
struct SmtpProfileDefaultTypeInternal;
extern SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace plugins
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::plugins::nut::v1::AwsProfile* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::AwsProfile>(Arena*);
template<> ::palm::plugins::nut::v1::BaiduProfile* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::BaiduProfile>(Arena*);
template<> ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::BaiduProfile_SiteVerify>(Arena*);
template<> ::palm::plugins::nut::v1::BingProfile* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::BingProfile>(Arena*);
template<> ::palm::plugins::nut::v1::EmailTask* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::EmailTask>(Arena*);
template<> ::palm::plugins::nut::v1::EmailTask_Attachment* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::EmailTask_Attachment>(Arena*);
template<> ::palm::plugins::nut::v1::GoogleProfile* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::GoogleProfile>(Arena*);
template<> ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::GoogleProfile_ReCaptcha>(Arena*);
template<> ::palm::plugins::nut::v1::IdRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::IdRequest>(Arena*);
template<> ::palm::plugins::nut::v1::LocaleGetRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::LocaleGetRequest>(Arena*);
template<> ::palm::plugins::nut::v1::LocaleIndexResponse* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::LocaleIndexResponse>(Arena*);
template<> ::palm::plugins::nut::v1::LocaleIndexResponse_Item* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::LocaleIndexResponse_Item>(Arena*);
template<> ::palm::plugins::nut::v1::LocaleSetRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::LocaleSetRequest>(Arena*);
template<> ::palm::plugins::nut::v1::Pager* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::Pager>(Arena*);
template<> ::palm::plugins::nut::v1::Pagination* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::Pagination>(Arena*);
template<> ::palm::plugins::nut::v1::SiteAwsS3TestResponse* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteAwsS3TestResponse>(Arena*);
template<> ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteIndexLeaveWordResponse>(Arena*);
template<> ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item>(Arena*);
template<> ::palm::plugins::nut::v1::SiteLayoutResponse* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteLayoutResponse>(Arena*);
template<> ::palm::plugins::nut::v1::SiteLayoutResponse_Author* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteLayoutResponse_Author>(Arena*);
template<> ::palm::plugins::nut::v1::SiteNewLeaveWordRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteNewLeaveWordRequest>(Arena*);
template<> ::palm::plugins::nut::v1::SiteSetCopyrightRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteSetCopyrightRequest>(Arena*);
template<> ::palm::plugins::nut::v1::SiteSetInfoRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteSetInfoRequest>(Arena*);
template<> ::palm::plugins::nut::v1::SiteSetKeywordsRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteSetKeywordsRequest>(Arena*);
template<> ::palm::plugins::nut::v1::SiteSetLogoRequest* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteSetLogoRequest>(Arena*);
template<> ::palm::plugins::nut::v1::SiteSmtpTestRequst* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteSmtpTestRequst>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_Database* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_Database>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_Health* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_Health>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_MySql* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_MySql>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_Redis* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_Redis>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item>(Arena*);
template<> ::palm::plugins::nut::v1::SiteStatusResponse_System* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_System>(Arena*);
template<> ::palm::plugins::nut::v1::SmtpProfile* Arena::CreateMaybeMessage<::palm::plugins::nut::v1::SmtpProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace plugins {
namespace nut {
namespace v1 {

enum EmailTask_ContentType : int {
  EmailTask_ContentType_TEXT_PLAIN = 0,
  EmailTask_ContentType_TEXT_HTML = 1,
  EmailTask_ContentType_EmailTask_ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EmailTask_ContentType_EmailTask_ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EmailTask_ContentType_IsValid(int value);
constexpr EmailTask_ContentType EmailTask_ContentType_ContentType_MIN = EmailTask_ContentType_TEXT_PLAIN;
constexpr EmailTask_ContentType EmailTask_ContentType_ContentType_MAX = EmailTask_ContentType_TEXT_HTML;
constexpr int EmailTask_ContentType_ContentType_ARRAYSIZE = EmailTask_ContentType_ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmailTask_ContentType_descriptor();
template<typename T>
inline const std::string& EmailTask_ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EmailTask_ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EmailTask_ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EmailTask_ContentType_descriptor(), enum_t_value);
}
inline bool EmailTask_ContentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EmailTask_ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EmailTask_ContentType>(
    EmailTask_ContentType_descriptor(), name, value);
}
// ===================================================================

class Pager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.Pager) */ {
 public:
  inline Pager() : Pager(nullptr) {}
  ~Pager() override;
  explicit PROTOBUF_CONSTEXPR Pager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pager(const Pager& from);
  Pager(Pager&& from) noexcept
    : Pager() {
    *this = ::std::move(from);
  }

  inline Pager& operator=(const Pager& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pager& operator=(Pager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pager& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pager* internal_default_instance() {
    return reinterpret_cast<const Pager*>(
               &_Pager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pager& a, Pager& b) {
    a.Swap(&b);
  }
  inline void Swap(Pager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pager& from) {
    Pager::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.Pager";
  }
  protected:
  explicit Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // int64 page = 1;
  void clear_page();
  int64_t page() const;
  void set_page(int64_t value);
  private:
  int64_t _internal_page() const;
  void _internal_set_page(int64_t value);
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.Pager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t page_;
    int64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class Pagination final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  ~Pagination() override;
  explicit PROTOBUF_CONSTEXPR Pagination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pagination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pagination& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pagination& from) {
    Pagination::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTotalFieldNumber = 3,
    kHasNextFieldNumber = 11,
    kHasPreviousFieldNumber = 12,
  };
  // int64 page = 1;
  void clear_page();
  int64_t page() const;
  void set_page(int64_t value);
  private:
  int64_t _internal_page() const;
  void _internal_set_page(int64_t value);
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 total = 3;
  void clear_total();
  int64_t total() const;
  void set_total(int64_t value);
  private:
  int64_t _internal_total() const;
  void _internal_set_total(int64_t value);
  public:

  // bool has_next = 11;
  void clear_has_next();
  bool has_next() const;
  void set_has_next(bool value);
  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);
  public:

  // bool has_previous = 12;
  void clear_has_previous();
  bool has_previous() const;
  void set_has_previous(bool value);
  private:
  bool _internal_has_previous() const;
  void _internal_set_has_previous(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t page_;
    int64_t size_;
    int64_t total_;
    bool has_next_;
    bool has_previous_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class IdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.IdRequest) */ {
 public:
  inline IdRequest() : IdRequest(nullptr) {}
  ~IdRequest() override;
  explicit PROTOBUF_CONSTEXPR IdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdRequest(const IdRequest& from);
  IdRequest(IdRequest&& from) noexcept
    : IdRequest() {
    *this = ::std::move(from);
  }

  inline IdRequest& operator=(const IdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdRequest& operator=(IdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdRequest* internal_default_instance() {
    return reinterpret_cast<const IdRequest*>(
               &_IdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IdRequest& a, IdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdRequest& from) {
    IdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.IdRequest";
  }
  protected:
  explicit IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.IdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.LocaleIndexResponse.Item) */ {
 public:
  inline LocaleIndexResponse_Item() : LocaleIndexResponse_Item(nullptr) {}
  ~LocaleIndexResponse_Item() override;
  explicit PROTOBUF_CONSTEXPR LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from);
  LocaleIndexResponse_Item(LocaleIndexResponse_Item&& from) noexcept
    : LocaleIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse_Item& operator=(const LocaleIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse_Item& operator=(LocaleIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse_Item*>(
               &_LocaleIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocaleIndexResponse_Item& a, LocaleIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleIndexResponse_Item& from) {
    LocaleIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.LocaleIndexResponse.Item";
  }
  protected:
  explicit LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 2,
    kCodeFieldNumber = 3,
    kMessageFieldNumber = 4,
    kUpdatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
  };
  // string lang = 2;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.LocaleIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.LocaleIndexResponse) */ {
 public:
  inline LocaleIndexResponse() : LocaleIndexResponse(nullptr) {}
  ~LocaleIndexResponse() override;
  explicit PROTOBUF_CONSTEXPR LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse(const LocaleIndexResponse& from);
  LocaleIndexResponse(LocaleIndexResponse&& from) noexcept
    : LocaleIndexResponse() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse& operator=(const LocaleIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse& operator=(LocaleIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse*>(
               &_LocaleIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LocaleIndexResponse& a, LocaleIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleIndexResponse& from) {
    LocaleIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.LocaleIndexResponse";
  }
  protected:
  explicit LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocaleIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::plugins::nut::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::plugins::nut::v1::LocaleIndexResponse_Item& _internal_items(int index) const;
  ::palm::plugins::nut::v1::LocaleIndexResponse_Item* _internal_add_items();
  public:
  const ::palm::plugins::nut::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::plugins::nut::v1::LocaleIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >&
      items() const;

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::palm::plugins::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::Pagination* release_pagination();
  ::palm::plugins::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::plugins::nut::v1::Pagination* pagination);
  private:
  const ::palm::plugins::nut::v1::Pagination& _internal_pagination() const;
  ::palm::plugins::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::plugins::nut::v1::Pagination* pagination);
  ::palm::plugins::nut::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.LocaleIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::LocaleIndexResponse_Item > items_;
    ::palm::plugins::nut::v1::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.LocaleGetRequest) */ {
 public:
  inline LocaleGetRequest() : LocaleGetRequest(nullptr) {}
  ~LocaleGetRequest() override;
  explicit PROTOBUF_CONSTEXPR LocaleGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleGetRequest(const LocaleGetRequest& from);
  LocaleGetRequest(LocaleGetRequest&& from) noexcept
    : LocaleGetRequest() {
    *this = ::std::move(from);
  }

  inline LocaleGetRequest& operator=(const LocaleGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleGetRequest& operator=(LocaleGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleGetRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleGetRequest*>(
               &_LocaleGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocaleGetRequest& a, LocaleGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleGetRequest& from) {
    LocaleGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.LocaleGetRequest";
  }
  protected:
  explicit LocaleGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string lang = 1;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.LocaleGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.LocaleSetRequest) */ {
 public:
  inline LocaleSetRequest() : LocaleSetRequest(nullptr) {}
  ~LocaleSetRequest() override;
  explicit PROTOBUF_CONSTEXPR LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleSetRequest(const LocaleSetRequest& from);
  LocaleSetRequest(LocaleSetRequest&& from) noexcept
    : LocaleSetRequest() {
    *this = ::std::move(from);
  }

  inline LocaleSetRequest& operator=(const LocaleSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleSetRequest& operator=(LocaleSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleSetRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleSetRequest*>(
               &_LocaleSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LocaleSetRequest& a, LocaleSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleSetRequest& from) {
    LocaleSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.LocaleSetRequest";
  }
  protected:
  explicit LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kCodeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string lang = 1;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.LocaleSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class AwsProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.AwsProfile) */ {
 public:
  inline AwsProfile() : AwsProfile(nullptr) {}
  ~AwsProfile() override;
  explicit PROTOBUF_CONSTEXPR AwsProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AwsProfile(const AwsProfile& from);
  AwsProfile(AwsProfile&& from) noexcept
    : AwsProfile() {
    *this = ::std::move(from);
  }

  inline AwsProfile& operator=(const AwsProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwsProfile& operator=(AwsProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AwsProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const AwsProfile* internal_default_instance() {
    return reinterpret_cast<const AwsProfile*>(
               &_AwsProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AwsProfile& a, AwsProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(AwsProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwsProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AwsProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AwsProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AwsProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AwsProfile& from) {
    AwsProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwsProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.AwsProfile";
  }
  protected:
  explicit AwsProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kEndpointFieldNumber = 2,
    kAccessKeyIdFieldNumber = 3,
    kSecretAccessKeyFieldNumber = 4,
  };
  // string region = 1;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // optional string endpoint = 2;
  bool has_endpoint() const;
  private:
  bool _internal_has_endpoint() const;
  public:
  void clear_endpoint();
  const std::string& endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // string access_key_id = 3;
  void clear_access_key_id();
  const std::string& access_key_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_key_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_key_id();
  PROTOBUF_NODISCARD std::string* release_access_key_id();
  void set_allocated_access_key_id(std::string* access_key_id);
  private:
  const std::string& _internal_access_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_key_id(const std::string& value);
  std::string* _internal_mutable_access_key_id();
  public:

  // string secret_access_key = 4;
  void clear_secret_access_key();
  const std::string& secret_access_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_access_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_access_key();
  PROTOBUF_NODISCARD std::string* release_secret_access_key();
  void set_allocated_secret_access_key(std::string* secret_access_key);
  private:
  const std::string& _internal_secret_access_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_access_key(const std::string& value);
  std::string* _internal_mutable_secret_access_key();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.AwsProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_access_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteAwsS3TestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteAwsS3TestResponse) */ {
 public:
  inline SiteAwsS3TestResponse() : SiteAwsS3TestResponse(nullptr) {}
  ~SiteAwsS3TestResponse() override;
  explicit PROTOBUF_CONSTEXPR SiteAwsS3TestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteAwsS3TestResponse(const SiteAwsS3TestResponse& from);
  SiteAwsS3TestResponse(SiteAwsS3TestResponse&& from) noexcept
    : SiteAwsS3TestResponse() {
    *this = ::std::move(from);
  }

  inline SiteAwsS3TestResponse& operator=(const SiteAwsS3TestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteAwsS3TestResponse& operator=(SiteAwsS3TestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteAwsS3TestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteAwsS3TestResponse* internal_default_instance() {
    return reinterpret_cast<const SiteAwsS3TestResponse*>(
               &_SiteAwsS3TestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SiteAwsS3TestResponse& a, SiteAwsS3TestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteAwsS3TestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteAwsS3TestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteAwsS3TestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteAwsS3TestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteAwsS3TestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteAwsS3TestResponse& from) {
    SiteAwsS3TestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteAwsS3TestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteAwsS3TestResponse";
  }
  protected:
  explicit SiteAwsS3TestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 1,
  };
  // repeated string buckets = 1;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  const std::string& buckets(int index) const;
  std::string* mutable_buckets(int index);
  void set_buckets(int index, const std::string& value);
  void set_buckets(int index, std::string&& value);
  void set_buckets(int index, const char* value);
  void set_buckets(int index, const char* value, size_t size);
  std::string* add_buckets();
  void add_buckets(const std::string& value);
  void add_buckets(std::string&& value);
  void add_buckets(const char* value);
  void add_buckets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& buckets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_buckets();
  private:
  const std::string& _internal_buckets(int index) const;
  std::string* _internal_add_buckets();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteAwsS3TestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> buckets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSmtpTestRequst final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteSmtpTestRequst) */ {
 public:
  inline SiteSmtpTestRequst() : SiteSmtpTestRequst(nullptr) {}
  ~SiteSmtpTestRequst() override;
  explicit PROTOBUF_CONSTEXPR SiteSmtpTestRequst(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSmtpTestRequst(const SiteSmtpTestRequst& from);
  SiteSmtpTestRequst(SiteSmtpTestRequst&& from) noexcept
    : SiteSmtpTestRequst() {
    *this = ::std::move(from);
  }

  inline SiteSmtpTestRequst& operator=(const SiteSmtpTestRequst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSmtpTestRequst& operator=(SiteSmtpTestRequst&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSmtpTestRequst& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSmtpTestRequst* internal_default_instance() {
    return reinterpret_cast<const SiteSmtpTestRequst*>(
               &_SiteSmtpTestRequst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SiteSmtpTestRequst& a, SiteSmtpTestRequst& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSmtpTestRequst* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSmtpTestRequst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSmtpTestRequst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSmtpTestRequst>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSmtpTestRequst& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSmtpTestRequst& from) {
    SiteSmtpTestRequst::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSmtpTestRequst* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteSmtpTestRequst";
  }
  protected:
  explicit SiteSmtpTestRequst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kSubjectFieldNumber = 2,
    kBodyFieldNumber = 3,
  };
  // string to = 1;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string subject = 2;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 3;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteSmtpTestRequst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSetLogoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteSetLogoRequest) */ {
 public:
  inline SiteSetLogoRequest() : SiteSetLogoRequest(nullptr) {}
  ~SiteSetLogoRequest() override;
  explicit PROTOBUF_CONSTEXPR SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetLogoRequest(const SiteSetLogoRequest& from);
  SiteSetLogoRequest(SiteSetLogoRequest&& from) noexcept
    : SiteSetLogoRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetLogoRequest& operator=(const SiteSetLogoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetLogoRequest& operator=(SiteSetLogoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetLogoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetLogoRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetLogoRequest*>(
               &_SiteSetLogoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SiteSetLogoRequest& a, SiteSetLogoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetLogoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetLogoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetLogoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetLogoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetLogoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetLogoRequest& from) {
    SiteSetLogoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetLogoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteSetLogoRequest";
  }
  protected:
  explicit SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteSetLogoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSetCopyrightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteSetCopyrightRequest) */ {
 public:
  inline SiteSetCopyrightRequest() : SiteSetCopyrightRequest(nullptr) {}
  ~SiteSetCopyrightRequest() override;
  explicit PROTOBUF_CONSTEXPR SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from);
  SiteSetCopyrightRequest(SiteSetCopyrightRequest&& from) noexcept
    : SiteSetCopyrightRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetCopyrightRequest& operator=(const SiteSetCopyrightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetCopyrightRequest& operator=(SiteSetCopyrightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetCopyrightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetCopyrightRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetCopyrightRequest*>(
               &_SiteSetCopyrightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SiteSetCopyrightRequest& a, SiteSetCopyrightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetCopyrightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetCopyrightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetCopyrightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetCopyrightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetCopyrightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetCopyrightRequest& from) {
    SiteSetCopyrightRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetCopyrightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteSetCopyrightRequest";
  }
  protected:
  explicit SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteSetCopyrightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSetKeywordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteSetKeywordsRequest) */ {
 public:
  inline SiteSetKeywordsRequest() : SiteSetKeywordsRequest(nullptr) {}
  ~SiteSetKeywordsRequest() override;
  explicit PROTOBUF_CONSTEXPR SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from);
  SiteSetKeywordsRequest(SiteSetKeywordsRequest&& from) noexcept
    : SiteSetKeywordsRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetKeywordsRequest& operator=(const SiteSetKeywordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetKeywordsRequest& operator=(SiteSetKeywordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetKeywordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetKeywordsRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetKeywordsRequest*>(
               &_SiteSetKeywordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SiteSetKeywordsRequest& a, SiteSetKeywordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetKeywordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetKeywordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetKeywordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetKeywordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetKeywordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetKeywordsRequest& from) {
    SiteSetKeywordsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetKeywordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteSetKeywordsRequest";
  }
  protected:
  explicit SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteSetKeywordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSetInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteSetInfoRequest) */ {
 public:
  inline SiteSetInfoRequest() : SiteSetInfoRequest(nullptr) {}
  ~SiteSetInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetInfoRequest(const SiteSetInfoRequest& from);
  SiteSetInfoRequest(SiteSetInfoRequest&& from) noexcept
    : SiteSetInfoRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetInfoRequest& operator=(const SiteSetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetInfoRequest& operator=(SiteSetInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetInfoRequest*>(
               &_SiteSetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SiteSetInfoRequest& a, SiteSetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetInfoRequest& from) {
    SiteSetInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteSetInfoRequest";
  }
  protected:
  explicit SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kSubheadFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subhead = 2;
  void clear_subhead();
  const std::string& subhead() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subhead(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subhead();
  PROTOBUF_NODISCARD std::string* release_subhead();
  void set_allocated_subhead(std::string* subhead);
  private:
  const std::string& _internal_subhead() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subhead(const std::string& value);
  std::string* _internal_mutable_subhead();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteSetInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subhead_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteLayoutResponse_Author final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteLayoutResponse.Author) */ {
 public:
  inline SiteLayoutResponse_Author() : SiteLayoutResponse_Author(nullptr) {}
  ~SiteLayoutResponse_Author() override;
  explicit PROTOBUF_CONSTEXPR SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from);
  SiteLayoutResponse_Author(SiteLayoutResponse_Author&& from) noexcept
    : SiteLayoutResponse_Author() {
    *this = ::std::move(from);
  }

  inline SiteLayoutResponse_Author& operator=(const SiteLayoutResponse_Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteLayoutResponse_Author& operator=(SiteLayoutResponse_Author&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteLayoutResponse_Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteLayoutResponse_Author* internal_default_instance() {
    return reinterpret_cast<const SiteLayoutResponse_Author*>(
               &_SiteLayoutResponse_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SiteLayoutResponse_Author& a, SiteLayoutResponse_Author& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteLayoutResponse_Author* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteLayoutResponse_Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteLayoutResponse_Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteLayoutResponse_Author>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteLayoutResponse_Author& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteLayoutResponse_Author& from) {
    SiteLayoutResponse_Author::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteLayoutResponse_Author* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteLayoutResponse.Author";
  }
  protected:
  explicit SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteLayoutResponse.Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteLayoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteLayoutResponse) */ {
 public:
  inline SiteLayoutResponse() : SiteLayoutResponse(nullptr) {}
  ~SiteLayoutResponse() override;
  explicit PROTOBUF_CONSTEXPR SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteLayoutResponse(const SiteLayoutResponse& from);
  SiteLayoutResponse(SiteLayoutResponse&& from) noexcept
    : SiteLayoutResponse() {
    *this = ::std::move(from);
  }

  inline SiteLayoutResponse& operator=(const SiteLayoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteLayoutResponse& operator=(SiteLayoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteLayoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteLayoutResponse* internal_default_instance() {
    return reinterpret_cast<const SiteLayoutResponse*>(
               &_SiteLayoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SiteLayoutResponse& a, SiteLayoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteLayoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteLayoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteLayoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteLayoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteLayoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteLayoutResponse& from) {
    SiteLayoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteLayoutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteLayoutResponse";
  }
  protected:
  explicit SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteLayoutResponse_Author Author;

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordsFieldNumber = 3,
    kLanguagesFieldNumber = 9,
    kTitleFieldNumber = 1,
    kSubheadFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kCopyrightFieldNumber = 6,
    kLogoFieldNumber = 7,
    kAuthorFieldNumber = 5,
  };
  // repeated string keywords = 3;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();
  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  public:

  // repeated string languages = 9;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subhead = 2;
  void clear_subhead();
  const std::string& subhead() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subhead(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subhead();
  PROTOBUF_NODISCARD std::string* release_subhead();
  void set_allocated_subhead(std::string* subhead);
  private:
  const std::string& _internal_subhead() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subhead(const std::string& value);
  std::string* _internal_mutable_subhead();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string copyright = 6;
  void clear_copyright();
  const std::string& copyright() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyright(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyright();
  PROTOBUF_NODISCARD std::string* release_copyright();
  void set_allocated_copyright(std::string* copyright);
  private:
  const std::string& _internal_copyright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyright(const std::string& value);
  std::string* _internal_mutable_copyright();
  public:

  // string logo = 7;
  void clear_logo();
  const std::string& logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo();
  PROTOBUF_NODISCARD std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& author() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteLayoutResponse_Author* release_author();
  ::palm::plugins::nut::v1::SiteLayoutResponse_Author* mutable_author();
  void set_allocated_author(::palm::plugins::nut::v1::SiteLayoutResponse_Author* author);
  private:
  const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& _internal_author() const;
  ::palm::plugins::nut::v1::SiteLayoutResponse_Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::palm::plugins::nut::v1::SiteLayoutResponse_Author* author);
  ::palm::plugins::nut::v1::SiteLayoutResponse_Author* unsafe_arena_release_author();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteLayoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subhead_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyright_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
    ::palm::plugins::nut::v1::SiteLayoutResponse_Author* author_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteNewLeaveWordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteNewLeaveWordRequest) */ {
 public:
  inline SiteNewLeaveWordRequest() : SiteNewLeaveWordRequest(nullptr) {}
  ~SiteNewLeaveWordRequest() override;
  explicit PROTOBUF_CONSTEXPR SiteNewLeaveWordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteNewLeaveWordRequest(const SiteNewLeaveWordRequest& from);
  SiteNewLeaveWordRequest(SiteNewLeaveWordRequest&& from) noexcept
    : SiteNewLeaveWordRequest() {
    *this = ::std::move(from);
  }

  inline SiteNewLeaveWordRequest& operator=(const SiteNewLeaveWordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteNewLeaveWordRequest& operator=(SiteNewLeaveWordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteNewLeaveWordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteNewLeaveWordRequest* internal_default_instance() {
    return reinterpret_cast<const SiteNewLeaveWordRequest*>(
               &_SiteNewLeaveWordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SiteNewLeaveWordRequest& a, SiteNewLeaveWordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteNewLeaveWordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteNewLeaveWordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteNewLeaveWordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteNewLeaveWordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteNewLeaveWordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteNewLeaveWordRequest& from) {
    SiteNewLeaveWordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteNewLeaveWordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteNewLeaveWordRequest";
  }
  protected:
  explicit SiteNewLeaveWordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
  };
  // string body = 1;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteNewLeaveWordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteIndexLeaveWordResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item) */ {
 public:
  inline SiteIndexLeaveWordResponse_Item() : SiteIndexLeaveWordResponse_Item(nullptr) {}
  ~SiteIndexLeaveWordResponse_Item() override;
  explicit PROTOBUF_CONSTEXPR SiteIndexLeaveWordResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteIndexLeaveWordResponse_Item(const SiteIndexLeaveWordResponse_Item& from);
  SiteIndexLeaveWordResponse_Item(SiteIndexLeaveWordResponse_Item&& from) noexcept
    : SiteIndexLeaveWordResponse_Item() {
    *this = ::std::move(from);
  }

  inline SiteIndexLeaveWordResponse_Item& operator=(const SiteIndexLeaveWordResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteIndexLeaveWordResponse_Item& operator=(SiteIndexLeaveWordResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteIndexLeaveWordResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteIndexLeaveWordResponse_Item* internal_default_instance() {
    return reinterpret_cast<const SiteIndexLeaveWordResponse_Item*>(
               &_SiteIndexLeaveWordResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SiteIndexLeaveWordResponse_Item& a, SiteIndexLeaveWordResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteIndexLeaveWordResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteIndexLeaveWordResponse_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteIndexLeaveWordResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteIndexLeaveWordResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteIndexLeaveWordResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteIndexLeaveWordResponse_Item& from) {
    SiteIndexLeaveWordResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteIndexLeaveWordResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item";
  }
  protected:
  explicit SiteIndexLeaveWordResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 2,
    kIpFieldNumber = 3,
    kBodyFieldNumber = 4,
    kCreatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
  };
  // string lang = 2;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string body = 4;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .google.protobuf.Timestamp created_at = 9;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteIndexLeaveWordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteIndexLeaveWordResponse) */ {
 public:
  inline SiteIndexLeaveWordResponse() : SiteIndexLeaveWordResponse(nullptr) {}
  ~SiteIndexLeaveWordResponse() override;
  explicit PROTOBUF_CONSTEXPR SiteIndexLeaveWordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteIndexLeaveWordResponse(const SiteIndexLeaveWordResponse& from);
  SiteIndexLeaveWordResponse(SiteIndexLeaveWordResponse&& from) noexcept
    : SiteIndexLeaveWordResponse() {
    *this = ::std::move(from);
  }

  inline SiteIndexLeaveWordResponse& operator=(const SiteIndexLeaveWordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteIndexLeaveWordResponse& operator=(SiteIndexLeaveWordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteIndexLeaveWordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteIndexLeaveWordResponse* internal_default_instance() {
    return reinterpret_cast<const SiteIndexLeaveWordResponse*>(
               &_SiteIndexLeaveWordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SiteIndexLeaveWordResponse& a, SiteIndexLeaveWordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteIndexLeaveWordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteIndexLeaveWordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteIndexLeaveWordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteIndexLeaveWordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteIndexLeaveWordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteIndexLeaveWordResponse& from) {
    SiteIndexLeaveWordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteIndexLeaveWordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteIndexLeaveWordResponse";
  }
  protected:
  explicit SiteIndexLeaveWordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteIndexLeaveWordResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >*
      mutable_items();
  private:
  const ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item& _internal_items(int index) const;
  ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* _internal_add_items();
  public:
  const ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item& items(int index) const;
  ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >&
      items() const;

  // .palm.plugins.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::palm::plugins::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::Pagination* release_pagination();
  ::palm::plugins::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::plugins::nut::v1::Pagination* pagination);
  private:
  const ::palm::plugins::nut::v1::Pagination& _internal_pagination() const;
  ::palm::plugins::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::plugins::nut::v1::Pagination* pagination);
  ::palm::plugins::nut::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteIndexLeaveWordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item > items_;
    ::palm::plugins::nut::v1::Pagination* pagination_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class GoogleProfile_ReCaptcha final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.GoogleProfile.ReCaptcha) */ {
 public:
  inline GoogleProfile_ReCaptcha() : GoogleProfile_ReCaptcha(nullptr) {}
  ~GoogleProfile_ReCaptcha() override;
  explicit PROTOBUF_CONSTEXPR GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleProfile_ReCaptcha(const GoogleProfile_ReCaptcha& from);
  GoogleProfile_ReCaptcha(GoogleProfile_ReCaptcha&& from) noexcept
    : GoogleProfile_ReCaptcha() {
    *this = ::std::move(from);
  }

  inline GoogleProfile_ReCaptcha& operator=(const GoogleProfile_ReCaptcha& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleProfile_ReCaptcha& operator=(GoogleProfile_ReCaptcha&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleProfile_ReCaptcha& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleProfile_ReCaptcha* internal_default_instance() {
    return reinterpret_cast<const GoogleProfile_ReCaptcha*>(
               &_GoogleProfile_ReCaptcha_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GoogleProfile_ReCaptcha& a, GoogleProfile_ReCaptcha& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleProfile_ReCaptcha* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleProfile_ReCaptcha* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleProfile_ReCaptcha* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleProfile_ReCaptcha>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleProfile_ReCaptcha& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GoogleProfile_ReCaptcha& from) {
    GoogleProfile_ReCaptcha::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleProfile_ReCaptcha* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.GoogleProfile.ReCaptcha";
  }
  protected:
  explicit GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteKeyFieldNumber = 1,
    kSecretFieldNumber = 2,
  };
  // string site_key = 1;
  void clear_site_key();
  const std::string& site_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_key();
  PROTOBUF_NODISCARD std::string* release_site_key();
  void set_allocated_site_key(std::string* site_key);
  private:
  const std::string& _internal_site_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_key(const std::string& value);
  std::string* _internal_mutable_site_key();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.GoogleProfile.ReCaptcha)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class GoogleProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.GoogleProfile) */ {
 public:
  inline GoogleProfile() : GoogleProfile(nullptr) {}
  ~GoogleProfile() override;
  explicit PROTOBUF_CONSTEXPR GoogleProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleProfile(const GoogleProfile& from);
  GoogleProfile(GoogleProfile&& from) noexcept
    : GoogleProfile() {
    *this = ::std::move(from);
  }

  inline GoogleProfile& operator=(const GoogleProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleProfile& operator=(GoogleProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleProfile* internal_default_instance() {
    return reinterpret_cast<const GoogleProfile*>(
               &_GoogleProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GoogleProfile& a, GoogleProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GoogleProfile& from) {
    GoogleProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.GoogleProfile";
  }
  protected:
  explicit GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GoogleProfile_ReCaptcha ReCaptcha;

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
    kReCaptchaFieldNumber = 2,
  };
  // optional string site_verify_id = 1;
  bool has_site_verify_id() const;
  private:
  bool _internal_has_site_verify_id() const;
  public:
  void clear_site_verify_id();
  const std::string& site_verify_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_verify_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_verify_id();
  PROTOBUF_NODISCARD std::string* release_site_verify_id();
  void set_allocated_site_verify_id(std::string* site_verify_id);
  private:
  const std::string& _internal_site_verify_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_verify_id(const std::string& value);
  std::string* _internal_mutable_site_verify_id();
  public:

  // optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
  bool has_re_captcha() const;
  private:
  bool _internal_has_re_captcha() const;
  public:
  void clear_re_captcha();
  const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha& re_captcha() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* release_re_captcha();
  ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* mutable_re_captcha();
  void set_allocated_re_captcha(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* re_captcha);
  private:
  const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha& _internal_re_captcha() const;
  ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* _internal_mutable_re_captcha();
  public:
  void unsafe_arena_set_allocated_re_captcha(
      ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* re_captcha);
  ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* unsafe_arena_release_re_captcha();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.GoogleProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_verify_id_;
    ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* re_captcha_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class BaiduProfile_SiteVerify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.BaiduProfile.SiteVerify) */ {
 public:
  inline BaiduProfile_SiteVerify() : BaiduProfile_SiteVerify(nullptr) {}
  ~BaiduProfile_SiteVerify() override;
  explicit PROTOBUF_CONSTEXPR BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaiduProfile_SiteVerify(const BaiduProfile_SiteVerify& from);
  BaiduProfile_SiteVerify(BaiduProfile_SiteVerify&& from) noexcept
    : BaiduProfile_SiteVerify() {
    *this = ::std::move(from);
  }

  inline BaiduProfile_SiteVerify& operator=(const BaiduProfile_SiteVerify& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaiduProfile_SiteVerify& operator=(BaiduProfile_SiteVerify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaiduProfile_SiteVerify& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaiduProfile_SiteVerify* internal_default_instance() {
    return reinterpret_cast<const BaiduProfile_SiteVerify*>(
               &_BaiduProfile_SiteVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BaiduProfile_SiteVerify& a, BaiduProfile_SiteVerify& b) {
    a.Swap(&b);
  }
  inline void Swap(BaiduProfile_SiteVerify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaiduProfile_SiteVerify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaiduProfile_SiteVerify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaiduProfile_SiteVerify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaiduProfile_SiteVerify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaiduProfile_SiteVerify& from) {
    BaiduProfile_SiteVerify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaiduProfile_SiteVerify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.BaiduProfile.SiteVerify";
  }
  protected:
  explicit BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.BaiduProfile.SiteVerify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class BaiduProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.BaiduProfile) */ {
 public:
  inline BaiduProfile() : BaiduProfile(nullptr) {}
  ~BaiduProfile() override;
  explicit PROTOBUF_CONSTEXPR BaiduProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaiduProfile(const BaiduProfile& from);
  BaiduProfile(BaiduProfile&& from) noexcept
    : BaiduProfile() {
    *this = ::std::move(from);
  }

  inline BaiduProfile& operator=(const BaiduProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaiduProfile& operator=(BaiduProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaiduProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaiduProfile* internal_default_instance() {
    return reinterpret_cast<const BaiduProfile*>(
               &_BaiduProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BaiduProfile& a, BaiduProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BaiduProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaiduProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaiduProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaiduProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaiduProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaiduProfile& from) {
    BaiduProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaiduProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.BaiduProfile";
  }
  protected:
  explicit BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BaiduProfile_SiteVerify SiteVerify;

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyFieldNumber = 1,
  };
  // optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
  bool has_site_verify() const;
  private:
  bool _internal_has_site_verify() const;
  public:
  void clear_site_verify();
  const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify& site_verify() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* release_site_verify();
  ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* mutable_site_verify();
  void set_allocated_site_verify(::palm::plugins::nut::v1::BaiduProfile_SiteVerify* site_verify);
  private:
  const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify& _internal_site_verify() const;
  ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* _internal_mutable_site_verify();
  public:
  void unsafe_arena_set_allocated_site_verify(
      ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* site_verify);
  ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* unsafe_arena_release_site_verify();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.BaiduProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* site_verify_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class BingProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.BingProfile) */ {
 public:
  inline BingProfile() : BingProfile(nullptr) {}
  ~BingProfile() override;
  explicit PROTOBUF_CONSTEXPR BingProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BingProfile(const BingProfile& from);
  BingProfile(BingProfile&& from) noexcept
    : BingProfile() {
    *this = ::std::move(from);
  }

  inline BingProfile& operator=(const BingProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BingProfile& operator=(BingProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BingProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const BingProfile* internal_default_instance() {
    return reinterpret_cast<const BingProfile*>(
               &_BingProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BingProfile& a, BingProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BingProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BingProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BingProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BingProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BingProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BingProfile& from) {
    BingProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BingProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.BingProfile";
  }
  protected:
  explicit BingProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
  };
  // optional string site_verify_id = 1;
  bool has_site_verify_id() const;
  private:
  bool _internal_has_site_verify_id() const;
  public:
  void clear_site_verify_id();
  const std::string& site_verify_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_verify_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_verify_id();
  PROTOBUF_NODISCARD std::string* release_site_verify_id();
  void set_allocated_site_verify_id(std::string* site_verify_id);
  private:
  const std::string& _internal_site_verify_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_verify_id(const std::string& value);
  std::string* _internal_mutable_site_verify_id();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.BingProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_verify_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class EmailTask_Attachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.EmailTask.Attachment) */ {
 public:
  inline EmailTask_Attachment() : EmailTask_Attachment(nullptr) {}
  ~EmailTask_Attachment() override;
  explicit PROTOBUF_CONSTEXPR EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Attachment(const EmailTask_Attachment& from);
  EmailTask_Attachment(EmailTask_Attachment&& from) noexcept
    : EmailTask_Attachment() {
    *this = ::std::move(from);
  }

  inline EmailTask_Attachment& operator=(const EmailTask_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Attachment& operator=(EmailTask_Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Attachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Attachment* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Attachment*>(
               &_EmailTask_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EmailTask_Attachment& a, EmailTask_Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Attachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Attachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Attachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Attachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Attachment& from) {
    EmailTask_Attachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Attachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.EmailTask.Attachment";
  }
  protected:
  explicit EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPayloadFieldNumber = 11,
    kContentTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes payload = 11;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
  void clear_content_type();
  ::palm::plugins::nut::v1::EmailTask_ContentType content_type() const;
  void set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value);
  private:
  ::palm::plugins::nut::v1::EmailTask_ContentType _internal_content_type() const;
  void _internal_set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.EmailTask.Attachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    int content_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class EmailTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.EmailTask) */ {
 public:
  inline EmailTask() : EmailTask(nullptr) {}
  ~EmailTask() override;
  explicit PROTOBUF_CONSTEXPR EmailTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask(const EmailTask& from);
  EmailTask(EmailTask&& from) noexcept
    : EmailTask() {
    *this = ::std::move(from);
  }

  inline EmailTask& operator=(const EmailTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask& operator=(EmailTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask* internal_default_instance() {
    return reinterpret_cast<const EmailTask*>(
               &_EmailTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EmailTask& a, EmailTask& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask& from) {
    EmailTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.EmailTask";
  }
  protected:
  explicit EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EmailTask_Attachment Attachment;

  typedef EmailTask_ContentType ContentType;
  static constexpr ContentType TEXT_PLAIN =
    EmailTask_ContentType_TEXT_PLAIN;
  static constexpr ContentType TEXT_HTML =
    EmailTask_ContentType_TEXT_HTML;
  static inline bool ContentType_IsValid(int value) {
    return EmailTask_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN =
    EmailTask_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX =
    EmailTask_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE =
    EmailTask_ContentType_ContentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ContentType_descriptor() {
    return EmailTask_ContentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentType_Name.");
    return EmailTask_ContentType_Name(enum_t_value);
  }
  static inline bool ContentType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ContentType* value) {
    return EmailTask_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 12,
    kBccFieldNumber = 13,
    kAttachmentsFieldNumber = 21,
    kSubjectFieldNumber = 1,
    kBodyFieldNumber = 2,
    kToFieldNumber = 11,
    kContentTypeFieldNumber = 3,
  };
  // repeated string cc = 12;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  const std::string& cc(int index) const;
  std::string* mutable_cc(int index);
  void set_cc(int index, const std::string& value);
  void set_cc(int index, std::string&& value);
  void set_cc(int index, const char* value);
  void set_cc(int index, const char* value, size_t size);
  std::string* add_cc();
  void add_cc(const std::string& value);
  void add_cc(std::string&& value);
  void add_cc(const char* value);
  void add_cc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cc();
  private:
  const std::string& _internal_cc(int index) const;
  std::string* _internal_add_cc();
  public:

  // repeated string bcc = 13;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  const std::string& bcc(int index) const;
  std::string* mutable_bcc(int index);
  void set_bcc(int index, const std::string& value);
  void set_bcc(int index, std::string&& value);
  void set_bcc(int index, const char* value);
  void set_bcc(int index, const char* value, size_t size);
  std::string* add_bcc();
  void add_bcc(const std::string& value);
  void add_bcc(std::string&& value);
  void add_bcc(const char* value);
  void add_bcc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bcc();
  private:
  const std::string& _internal_bcc(int index) const;
  std::string* _internal_add_bcc();
  public:

  // repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::palm::plugins::nut::v1::EmailTask_Attachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::EmailTask_Attachment >*
      mutable_attachments();
  private:
  const ::palm::plugins::nut::v1::EmailTask_Attachment& _internal_attachments(int index) const;
  ::palm::plugins::nut::v1::EmailTask_Attachment* _internal_add_attachments();
  public:
  const ::palm::plugins::nut::v1::EmailTask_Attachment& attachments(int index) const;
  ::palm::plugins::nut::v1::EmailTask_Attachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::EmailTask_Attachment >&
      attachments() const;

  // string subject = 1;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // string to = 11;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
  void clear_content_type();
  ::palm::plugins::nut::v1::EmailTask_ContentType content_type() const;
  void set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value);
  private:
  ::palm::plugins::nut::v1::EmailTask_ContentType _internal_content_type() const;
  void _internal_set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.EmailTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bcc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::EmailTask_Attachment > attachments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    int content_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SmtpProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SmtpProfile) */ {
 public:
  inline SmtpProfile() : SmtpProfile(nullptr) {}
  ~SmtpProfile() override;
  explicit PROTOBUF_CONSTEXPR SmtpProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmtpProfile(const SmtpProfile& from);
  SmtpProfile(SmtpProfile&& from) noexcept
    : SmtpProfile() {
    *this = ::std::move(from);
  }

  inline SmtpProfile& operator=(const SmtpProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmtpProfile& operator=(SmtpProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmtpProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmtpProfile* internal_default_instance() {
    return reinterpret_cast<const SmtpProfile*>(
               &_SmtpProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SmtpProfile& a, SmtpProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SmtpProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmtpProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmtpProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmtpProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmtpProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmtpProfile& from) {
    SmtpProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmtpProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SmtpProfile";
  }
  protected:
  explicit SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kCcFieldNumber = 5,
    kBccFieldNumber = 6,
    kPortFieldNumber = 2,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string cc = 5;
  void clear_cc();
  const std::string& cc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cc();
  PROTOBUF_NODISCARD std::string* release_cc();
  void set_allocated_cc(std::string* cc);
  private:
  const std::string& _internal_cc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cc(const std::string& value);
  std::string* _internal_mutable_cc();
  public:

  // string bcc = 6;
  void clear_bcc();
  const std::string& bcc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bcc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bcc();
  PROTOBUF_NODISCARD std::string* release_bcc();
  void set_allocated_bcc(std::string* bcc);
  private:
  const std::string& _internal_bcc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bcc(const std::string& value);
  std::string* _internal_mutable_bcc();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SmtpProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bcc_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_Database final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.Database) */ {
 public:
  inline SiteStatusResponse_Database() : SiteStatusResponse_Database(nullptr) {}
  ~SiteStatusResponse_Database() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Database(const SiteStatusResponse_Database& from);
  SiteStatusResponse_Database(SiteStatusResponse_Database&& from) noexcept
    : SiteStatusResponse_Database() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Database& operator=(const SiteStatusResponse_Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Database& operator=(SiteStatusResponse_Database&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Database& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Database* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Database*>(
               &_SiteStatusResponse_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SiteStatusResponse_Database& a, SiteStatusResponse_Database& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Database* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Database* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Database>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Database& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Database& from) {
    SiteStatusResponse_Database::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Database* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.Database";
  }
  protected:
  explicit SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string size = 2;
  void clear_size();
  const std::string& size() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_size(ArgT0&& arg0, ArgT... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* size);
  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(const std::string& value);
  std::string* _internal_mutable_size();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.Database)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_PostgreSql final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql) */ {
 public:
  inline SiteStatusResponse_PostgreSql() : SiteStatusResponse_PostgreSql(nullptr) {}
  ~SiteStatusResponse_PostgreSql() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from);
  SiteStatusResponse_PostgreSql(SiteStatusResponse_PostgreSql&& from) noexcept
    : SiteStatusResponse_PostgreSql() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_PostgreSql& operator=(const SiteStatusResponse_PostgreSql& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_PostgreSql& operator=(SiteStatusResponse_PostgreSql&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_PostgreSql& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_PostgreSql* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_PostgreSql*>(
               &_SiteStatusResponse_PostgreSql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SiteStatusResponse_PostgreSql& a, SiteStatusResponse_PostgreSql& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_PostgreSql* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_PostgreSql* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_PostgreSql* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_PostgreSql>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_PostgreSql& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_PostgreSql& from) {
    SiteStatusResponse_PostgreSql::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_PostgreSql* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.PostgreSql";
  }
  protected:
  explicit SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 9,
    kVersionFieldNumber = 1,
    kNowFieldNumber = 2,
  };
  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
  int databases_size() const;
  private:
  int _internal_databases_size() const;
  public:
  void clear_databases();
  ::palm::plugins::nut::v1::SiteStatusResponse_Database* mutable_databases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Database >*
      mutable_databases();
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Database& _internal_databases(int index) const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Database* _internal_add_databases();
  public:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Database& databases(int index) const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Database* add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Database >&
      databases() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.protobuf.Timestamp now = 2;
  bool has_now() const;
  private:
  bool _internal_has_now() const;
  public:
  void clear_now();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& now() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_now();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_now();
  void set_allocated_now(::PROTOBUF_NAMESPACE_ID::Timestamp* now);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_now() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_now();
  public:
  void unsafe_arena_set_allocated_now(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* now);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_now();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Database > databases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* now_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_MySql final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.MySql) */ {
 public:
  inline SiteStatusResponse_MySql() : SiteStatusResponse_MySql(nullptr) {}
  ~SiteStatusResponse_MySql() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_MySql(const SiteStatusResponse_MySql& from);
  SiteStatusResponse_MySql(SiteStatusResponse_MySql&& from) noexcept
    : SiteStatusResponse_MySql() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_MySql& operator=(const SiteStatusResponse_MySql& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_MySql& operator=(SiteStatusResponse_MySql&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_MySql& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_MySql* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_MySql*>(
               &_SiteStatusResponse_MySql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SiteStatusResponse_MySql& a, SiteStatusResponse_MySql& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_MySql* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_MySql* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_MySql* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_MySql>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_MySql& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_MySql& from) {
    SiteStatusResponse_MySql::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_MySql* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.MySql";
  }
  protected:
  explicit SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint64 size = 1;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.MySql)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    uint64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_Redis_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item) */ {
 public:
  inline SiteStatusResponse_Redis_Item() : SiteStatusResponse_Redis_Item(nullptr) {}
  ~SiteStatusResponse_Redis_Item() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Redis_Item(const SiteStatusResponse_Redis_Item& from);
  SiteStatusResponse_Redis_Item(SiteStatusResponse_Redis_Item&& from) noexcept
    : SiteStatusResponse_Redis_Item() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Redis_Item& operator=(const SiteStatusResponse_Redis_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Redis_Item& operator=(SiteStatusResponse_Redis_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Redis_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Redis_Item* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Redis_Item*>(
               &_SiteStatusResponse_Redis_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SiteStatusResponse_Redis_Item& a, SiteStatusResponse_Redis_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Redis_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Redis_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Redis_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Redis_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Redis_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Redis_Item& from) {
    SiteStatusResponse_Redis_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Redis_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.Redis.Item";
  }
  protected:
  explicit SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTtlFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 ttl = 2;
  void clear_ttl();
  int64_t ttl() const;
  void set_ttl(int64_t value);
  private:
  int64_t _internal_ttl() const;
  void _internal_set_ttl(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int64_t ttl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_Redis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.Redis) */ {
 public:
  inline SiteStatusResponse_Redis() : SiteStatusResponse_Redis(nullptr) {}
  ~SiteStatusResponse_Redis() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from);
  SiteStatusResponse_Redis(SiteStatusResponse_Redis&& from) noexcept
    : SiteStatusResponse_Redis() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Redis& operator=(const SiteStatusResponse_Redis& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Redis& operator=(SiteStatusResponse_Redis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Redis& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Redis* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Redis*>(
               &_SiteStatusResponse_Redis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SiteStatusResponse_Redis& a, SiteStatusResponse_Redis& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Redis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Redis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Redis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Redis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Redis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Redis& from) {
    SiteStatusResponse_Redis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Redis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.Redis";
  }
  protected:
  explicit SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteStatusResponse_Redis_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >*
      mutable_items();
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item& _internal_items(int index) const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* _internal_add_items();
  public:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item& items(int index) const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >&
      items() const;

  // string info = 1;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.Redis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_RabbitMq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq) */ {
 public:
  inline SiteStatusResponse_RabbitMq() : SiteStatusResponse_RabbitMq(nullptr) {}
  ~SiteStatusResponse_RabbitMq() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_RabbitMq(const SiteStatusResponse_RabbitMq& from);
  SiteStatusResponse_RabbitMq(SiteStatusResponse_RabbitMq&& from) noexcept
    : SiteStatusResponse_RabbitMq() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_RabbitMq& operator=(const SiteStatusResponse_RabbitMq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_RabbitMq& operator=(SiteStatusResponse_RabbitMq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_RabbitMq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_RabbitMq* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_RabbitMq*>(
               &_SiteStatusResponse_RabbitMq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SiteStatusResponse_RabbitMq& a, SiteStatusResponse_RabbitMq& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_RabbitMq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_RabbitMq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_RabbitMq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_RabbitMq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_RabbitMq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_RabbitMq& from) {
    SiteStatusResponse_RabbitMq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_RabbitMq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.RabbitMq";
  }
  protected:
  explicit SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 1,
  };
  // string protocol = 1;
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_OpenSearch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch) */ {
 public:
  inline SiteStatusResponse_OpenSearch() : SiteStatusResponse_OpenSearch(nullptr) {}
  ~SiteStatusResponse_OpenSearch() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from);
  SiteStatusResponse_OpenSearch(SiteStatusResponse_OpenSearch&& from) noexcept
    : SiteStatusResponse_OpenSearch() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_OpenSearch& operator=(const SiteStatusResponse_OpenSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_OpenSearch& operator=(SiteStatusResponse_OpenSearch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_OpenSearch& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_OpenSearch* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_OpenSearch*>(
               &_SiteStatusResponse_OpenSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SiteStatusResponse_OpenSearch& a, SiteStatusResponse_OpenSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_OpenSearch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_OpenSearch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_OpenSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_OpenSearch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_OpenSearch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_OpenSearch& from) {
    SiteStatusResponse_OpenSearch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_OpenSearch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.OpenSearch";
  }
  protected:
  explicit SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string info = 2;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_Health final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.Health) */ {
 public:
  inline SiteStatusResponse_Health() : SiteStatusResponse_Health(nullptr) {}
  ~SiteStatusResponse_Health() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Health(const SiteStatusResponse_Health& from);
  SiteStatusResponse_Health(SiteStatusResponse_Health&& from) noexcept
    : SiteStatusResponse_Health() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Health& operator=(const SiteStatusResponse_Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Health& operator=(SiteStatusResponse_Health&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Health& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Health* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Health*>(
               &_SiteStatusResponse_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SiteStatusResponse_Health& a, SiteStatusResponse_Health& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Health* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Health>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Health& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Health& from) {
    SiteStatusResponse_Health::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Health* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.Health";
  }
  protected:
  explicit SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.Health)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse_System final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse.System) */ {
 public:
  inline SiteStatusResponse_System() : SiteStatusResponse_System(nullptr) {}
  ~SiteStatusResponse_System() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_System(const SiteStatusResponse_System& from);
  SiteStatusResponse_System(SiteStatusResponse_System&& from) noexcept
    : SiteStatusResponse_System() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_System& operator=(const SiteStatusResponse_System& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_System& operator=(SiteStatusResponse_System&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_System& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_System* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_System*>(
               &_SiteStatusResponse_System_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SiteStatusResponse_System& a, SiteStatusResponse_System& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_System* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_System* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_System* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_System>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_System& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_System& from) {
    SiteStatusResponse_System::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_System* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse.System";
  }
  protected:
  explicit SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCpuFieldNumber = 2,
    kMemoryFieldNumber = 3,
    kBootFieldNumber = 4,
    kDiskFieldNumber = 5,
    kLoadFieldNumber = 6,
    kFsFieldNumber = 7,
    kSwapFieldNumber = 8,
    kUptimeFieldNumber = 9,
    kNetworkFieldNumber = 10,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string cpu = 2;
  void clear_cpu();
  const std::string& cpu() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu();
  PROTOBUF_NODISCARD std::string* release_cpu();
  void set_allocated_cpu(std::string* cpu);
  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(const std::string& value);
  std::string* _internal_mutable_cpu();
  public:

  // string memory = 3;
  void clear_memory();
  const std::string& memory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memory();
  PROTOBUF_NODISCARD std::string* release_memory();
  void set_allocated_memory(std::string* memory);
  private:
  const std::string& _internal_memory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memory(const std::string& value);
  std::string* _internal_mutable_memory();
  public:

  // string boot = 4;
  void clear_boot();
  const std::string& boot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boot();
  PROTOBUF_NODISCARD std::string* release_boot();
  void set_allocated_boot(std::string* boot);
  private:
  const std::string& _internal_boot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boot(const std::string& value);
  std::string* _internal_mutable_boot();
  public:

  // string disk = 5;
  void clear_disk();
  const std::string& disk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_disk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_disk();
  PROTOBUF_NODISCARD std::string* release_disk();
  void set_allocated_disk(std::string* disk);
  private:
  const std::string& _internal_disk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_disk(const std::string& value);
  std::string* _internal_mutable_disk();
  public:

  // string load = 6;
  void clear_load();
  const std::string& load() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load();
  PROTOBUF_NODISCARD std::string* release_load();
  void set_allocated_load(std::string* load);
  private:
  const std::string& _internal_load() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load(const std::string& value);
  std::string* _internal_mutable_load();
  public:

  // string fs = 7;
  void clear_fs();
  const std::string& fs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fs();
  PROTOBUF_NODISCARD std::string* release_fs();
  void set_allocated_fs(std::string* fs);
  private:
  const std::string& _internal_fs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fs(const std::string& value);
  std::string* _internal_mutable_fs();
  public:

  // string swap = 8;
  void clear_swap();
  const std::string& swap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swap();
  PROTOBUF_NODISCARD std::string* release_swap();
  void set_allocated_swap(std::string* swap);
  private:
  const std::string& _internal_swap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swap(const std::string& value);
  std::string* _internal_mutable_swap();
  public:

  // string uptime = 9;
  void clear_uptime();
  const std::string& uptime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uptime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uptime();
  PROTOBUF_NODISCARD std::string* release_uptime();
  void set_allocated_uptime(std::string* uptime);
  private:
  const std::string& _internal_uptime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uptime(const std::string& value);
  std::string* _internal_mutable_uptime();
  public:

  // string network = 10;
  void clear_network();
  const std::string& network() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network();
  PROTOBUF_NODISCARD std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse.System)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boot_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uptime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.plugins.nut.v1.SiteStatusResponse) */ {
 public:
  inline SiteStatusResponse() : SiteStatusResponse(nullptr) {}
  ~SiteStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse(const SiteStatusResponse& from);
  SiteStatusResponse(SiteStatusResponse&& from) noexcept
    : SiteStatusResponse() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse& operator=(const SiteStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse& operator=(SiteStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse*>(
               &_SiteStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SiteStatusResponse& a, SiteStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse& from) {
    SiteStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.plugins.nut.v1.SiteStatusResponse";
  }
  protected:
  explicit SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteStatusResponse_Database Database;
  typedef SiteStatusResponse_PostgreSql PostgreSql;
  typedef SiteStatusResponse_MySql MySql;
  typedef SiteStatusResponse_Redis Redis;
  typedef SiteStatusResponse_RabbitMq RabbitMq;
  typedef SiteStatusResponse_OpenSearch OpenSearch;
  typedef SiteStatusResponse_Health Health;
  typedef SiteStatusResponse_System System;

  // accessors -------------------------------------------------------

  enum : int {
    kHealthesFieldNumber = 21,
    kPostgresqlFieldNumber = 1,
    kMysqlFieldNumber = 2,
    kRedisFieldNumber = 3,
    kRabbitmqFieldNumber = 4,
    kOpensearchFieldNumber = 5,
    kSystemFieldNumber = 11,
  };
  // repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
  int healthes_size() const;
  private:
  int _internal_healthes_size() const;
  public:
  void clear_healthes();
  ::palm::plugins::nut::v1::SiteStatusResponse_Health* mutable_healthes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Health >*
      mutable_healthes();
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Health& _internal_healthes(int index) const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Health* _internal_add_healthes();
  public:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Health& healthes(int index) const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Health* add_healthes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Health >&
      healthes() const;

  // .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  bool has_postgresql() const;
  private:
  bool _internal_has_postgresql() const;
  public:
  void clear_postgresql();
  const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql& postgresql() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* release_postgresql();
  ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* mutable_postgresql();
  void set_allocated_postgresql(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* postgresql);
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql& _internal_postgresql() const;
  ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* _internal_mutable_postgresql();
  public:
  void unsafe_arena_set_allocated_postgresql(
      ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* postgresql);
  ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* unsafe_arena_release_postgresql();

  // .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
  bool has_mysql() const;
  private:
  bool _internal_has_mysql() const;
  public:
  void clear_mysql();
  const ::palm::plugins::nut::v1::SiteStatusResponse_MySql& mysql() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteStatusResponse_MySql* release_mysql();
  ::palm::plugins::nut::v1::SiteStatusResponse_MySql* mutable_mysql();
  void set_allocated_mysql(::palm::plugins::nut::v1::SiteStatusResponse_MySql* mysql);
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_MySql& _internal_mysql() const;
  ::palm::plugins::nut::v1::SiteStatusResponse_MySql* _internal_mutable_mysql();
  public:
  void unsafe_arena_set_allocated_mysql(
      ::palm::plugins::nut::v1::SiteStatusResponse_MySql* mysql);
  ::palm::plugins::nut::v1::SiteStatusResponse_MySql* unsafe_arena_release_mysql();

  // .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
  bool has_redis() const;
  private:
  bool _internal_has_redis() const;
  public:
  void clear_redis();
  const ::palm::plugins::nut::v1::SiteStatusResponse_Redis& redis() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteStatusResponse_Redis* release_redis();
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis* mutable_redis();
  void set_allocated_redis(::palm::plugins::nut::v1::SiteStatusResponse_Redis* redis);
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_Redis& _internal_redis() const;
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis* _internal_mutable_redis();
  public:
  void unsafe_arena_set_allocated_redis(
      ::palm::plugins::nut::v1::SiteStatusResponse_Redis* redis);
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis* unsafe_arena_release_redis();

  // .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  bool has_rabbitmq() const;
  private:
  bool _internal_has_rabbitmq() const;
  public:
  void clear_rabbitmq();
  const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq& rabbitmq() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* release_rabbitmq();
  ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* mutable_rabbitmq();
  void set_allocated_rabbitmq(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq);
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq& _internal_rabbitmq() const;
  ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* _internal_mutable_rabbitmq();
  public:
  void unsafe_arena_set_allocated_rabbitmq(
      ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq);
  ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* unsafe_arena_release_rabbitmq();

  // .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  bool has_opensearch() const;
  private:
  bool _internal_has_opensearch() const;
  public:
  void clear_opensearch();
  const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch& opensearch() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* release_opensearch();
  ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* mutable_opensearch();
  void set_allocated_opensearch(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* opensearch);
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch& _internal_opensearch() const;
  ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* _internal_mutable_opensearch();
  public:
  void unsafe_arena_set_allocated_opensearch(
      ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* opensearch);
  ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* unsafe_arena_release_opensearch();

  // .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
  bool has_system() const;
  private:
  bool _internal_has_system() const;
  public:
  void clear_system();
  const ::palm::plugins::nut::v1::SiteStatusResponse_System& system() const;
  PROTOBUF_NODISCARD ::palm::plugins::nut::v1::SiteStatusResponse_System* release_system();
  ::palm::plugins::nut::v1::SiteStatusResponse_System* mutable_system();
  void set_allocated_system(::palm::plugins::nut::v1::SiteStatusResponse_System* system);
  private:
  const ::palm::plugins::nut::v1::SiteStatusResponse_System& _internal_system() const;
  ::palm::plugins::nut::v1::SiteStatusResponse_System* _internal_mutable_system();
  public:
  void unsafe_arena_set_allocated_system(
      ::palm::plugins::nut::v1::SiteStatusResponse_System* system);
  ::palm::plugins::nut::v1::SiteStatusResponse_System* unsafe_arena_release_system();

  // @@protoc_insertion_point(class_scope:palm.plugins.nut.v1.SiteStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Health > healthes_;
    ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* postgresql_;
    ::palm::plugins::nut::v1::SiteStatusResponse_MySql* mysql_;
    ::palm::plugins::nut::v1::SiteStatusResponse_Redis* redis_;
    ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq_;
    ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* opensearch_;
    ::palm::plugins::nut::v1::SiteStatusResponse_System* system_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pager

// int64 page = 1;
inline void Pager::clear_page() {
  _impl_.page_ = int64_t{0};
}
inline int64_t Pager::_internal_page() const {
  return _impl_.page_;
}
inline int64_t Pager::page() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pager.page)
  return _internal_page();
}
inline void Pager::_internal_set_page(int64_t value) {
  
  _impl_.page_ = value;
}
inline void Pager::set_page(int64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pager.page)
}

// int64 size = 2;
inline void Pager::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t Pager::_internal_size() const {
  return _impl_.size_;
}
inline int64_t Pager::size() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pager.size)
  return _internal_size();
}
inline void Pager::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void Pager::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pager.size)
}

// -------------------------------------------------------------------

// Pagination

// int64 page = 1;
inline void Pagination::clear_page() {
  _impl_.page_ = int64_t{0};
}
inline int64_t Pagination::_internal_page() const {
  return _impl_.page_;
}
inline int64_t Pagination::page() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pagination.page)
  return _internal_page();
}
inline void Pagination::_internal_set_page(int64_t value) {
  
  _impl_.page_ = value;
}
inline void Pagination::set_page(int64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pagination.page)
}

// int64 size = 2;
inline void Pagination::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t Pagination::_internal_size() const {
  return _impl_.size_;
}
inline int64_t Pagination::size() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pagination.size)
  return _internal_size();
}
inline void Pagination::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void Pagination::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pagination.size)
}

// int64 total = 3;
inline void Pagination::clear_total() {
  _impl_.total_ = int64_t{0};
}
inline int64_t Pagination::_internal_total() const {
  return _impl_.total_;
}
inline int64_t Pagination::total() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pagination.total)
  return _internal_total();
}
inline void Pagination::_internal_set_total(int64_t value) {
  
  _impl_.total_ = value;
}
inline void Pagination::set_total(int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pagination.total)
}

// bool has_next = 11;
inline void Pagination::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool Pagination::_internal_has_next() const {
  return _impl_.has_next_;
}
inline bool Pagination::has_next() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pagination.has_next)
  return _internal_has_next();
}
inline void Pagination::_internal_set_has_next(bool value) {
  
  _impl_.has_next_ = value;
}
inline void Pagination::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pagination.has_next)
}

// bool has_previous = 12;
inline void Pagination::clear_has_previous() {
  _impl_.has_previous_ = false;
}
inline bool Pagination::_internal_has_previous() const {
  return _impl_.has_previous_;
}
inline bool Pagination::has_previous() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.Pagination.has_previous)
  return _internal_has_previous();
}
inline void Pagination::_internal_set_has_previous(bool value) {
  
  _impl_.has_previous_ = value;
}
inline void Pagination::set_has_previous(bool value) {
  _internal_set_has_previous(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.Pagination.has_previous)
}

// -------------------------------------------------------------------

// IdRequest

// int32 id = 1;
inline void IdRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t IdRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t IdRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.IdRequest.id)
  return _internal_id();
}
inline void IdRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void IdRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.IdRequest.id)
}

// -------------------------------------------------------------------

// LocaleIndexResponse_Item

// int32 id = 1;
inline void LocaleIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t LocaleIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline int32_t LocaleIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.Item.id)
  return _internal_id();
}
inline void LocaleIndexResponse_Item::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void LocaleIndexResponse_Item::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleIndexResponse.Item.id)
}

// string lang = 2;
inline void LocaleIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_lang(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lang_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleIndexResponse.Item.lang)
}
inline std::string* LocaleIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleIndexResponse.Item.lang)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_lang(const std::string& value) {
  
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_lang() {
  
  return _impl_.lang_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  _impl_.lang_.SetAllocated(lang, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lang_.IsDefault()) {
    _impl_.lang_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.Item.lang)
}

// string code = 3;
inline void LocaleIndexResponse_Item::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.Item.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleIndexResponse.Item.code)
}
inline std::string* LocaleIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleIndexResponse.Item.code)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleIndexResponse.Item.code)
  return _impl_.code_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.Item.code)
}

// string message = 4;
inline void LocaleIndexResponse_Item::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.Item.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleIndexResponse.Item.message)
}
inline std::string* LocaleIndexResponse_Item::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleIndexResponse.Item.message)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_message() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleIndexResponse.Item.message)
  return _impl_.message_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.Item.message)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool LocaleIndexResponse_Item::_internal_has_updated_at() const {
  return this != internal_default_instance() && _impl_.updated_at_ != nullptr;
}
inline bool LocaleIndexResponse_Item::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void LocaleIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleIndexResponse.Item.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::_internal_mutable_updated_at() {
  
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _msg;
}
inline void LocaleIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// LocaleIndexResponse

// repeated .palm.plugins.nut.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int LocaleIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleIndexResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::palm::plugins::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleIndexResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >*
LocaleIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.LocaleIndexResponse.items)
  return &_impl_.items_;
}
inline const ::palm::plugins::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::palm::plugins::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::plugins::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::palm::plugins::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::add_items() {
  ::palm::plugins::nut::v1::LocaleIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.LocaleIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::LocaleIndexResponse_Item >&
LocaleIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.LocaleIndexResponse.items)
  return _impl_.items_;
}

// .palm.plugins.nut.v1.Pagination pagination = 9;
inline bool LocaleIndexResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool LocaleIndexResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline void LocaleIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
inline const ::palm::plugins::nut::v1::Pagination& LocaleIndexResponse::_internal_pagination() const {
  const ::palm::plugins::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::Pagination&>(
      ::palm::plugins::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::plugins::nut::v1::Pagination& LocaleIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleIndexResponse.pagination)
  return _internal_pagination();
}
inline void LocaleIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::plugins::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.pagination)
}
inline ::palm::plugins::nut::v1::Pagination* LocaleIndexResponse::release_pagination() {
  
  ::palm::plugins::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::Pagination* LocaleIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleIndexResponse.pagination)
  
  ::palm::plugins::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::Pagination* LocaleIndexResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::plugins::nut::v1::Pagination* LocaleIndexResponse::mutable_pagination() {
  ::palm::plugins::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleIndexResponse.pagination)
  return _msg;
}
inline void LocaleIndexResponse::set_allocated_pagination(::palm::plugins::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleIndexResponse.pagination)
}

// -------------------------------------------------------------------

// LocaleGetRequest

// string lang = 1;
inline void LocaleGetRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleGetRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleGetRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleGetRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lang_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleGetRequest.lang)
}
inline std::string* LocaleGetRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleGetRequest.lang)
  return _s;
}
inline const std::string& LocaleGetRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleGetRequest::_internal_set_lang(const std::string& value) {
  
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleGetRequest::_internal_mutable_lang() {
  
  return _impl_.lang_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleGetRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleGetRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleGetRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  _impl_.lang_.SetAllocated(lang, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lang_.IsDefault()) {
    _impl_.lang_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleGetRequest.lang)
}

// string code = 2;
inline void LocaleGetRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleGetRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleGetRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleGetRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleGetRequest.code)
}
inline std::string* LocaleGetRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleGetRequest.code)
  return _s;
}
inline const std::string& LocaleGetRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleGetRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleGetRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleGetRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleGetRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleGetRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleGetRequest.code)
}

// -------------------------------------------------------------------

// LocaleSetRequest

// string lang = 1;
inline void LocaleSetRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleSetRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lang_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleSetRequest.lang)
}
inline std::string* LocaleSetRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleSetRequest.lang)
  return _s;
}
inline const std::string& LocaleSetRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleSetRequest::_internal_set_lang(const std::string& value) {
  
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_lang() {
  
  return _impl_.lang_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleSetRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleSetRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  _impl_.lang_.SetAllocated(lang, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lang_.IsDefault()) {
    _impl_.lang_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleSetRequest.lang)
}

// string code = 2;
inline void LocaleSetRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleSetRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleSetRequest.code)
}
inline std::string* LocaleSetRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleSetRequest.code)
  return _s;
}
inline const std::string& LocaleSetRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleSetRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleSetRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleSetRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleSetRequest.code)
}

// string message = 3;
inline void LocaleSetRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.LocaleSetRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.LocaleSetRequest.message)
}
inline std::string* LocaleSetRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.LocaleSetRequest.message)
  return _s;
}
inline const std::string& LocaleSetRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocaleSetRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_message() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.LocaleSetRequest.message)
  return _impl_.message_.Release();
}
inline void LocaleSetRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.LocaleSetRequest.message)
}

// -------------------------------------------------------------------

// AwsProfile

// string region = 1;
inline void AwsProfile::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& AwsProfile::region() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.AwsProfile.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AwsProfile::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.AwsProfile.region)
}
inline std::string* AwsProfile::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.AwsProfile.region)
  return _s;
}
inline const std::string& AwsProfile::_internal_region() const {
  return _impl_.region_.Get();
}
inline void AwsProfile::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* AwsProfile::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* AwsProfile::release_region() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.AwsProfile.region)
  return _impl_.region_.Release();
}
inline void AwsProfile::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.AwsProfile.region)
}

// optional string endpoint = 2;
inline bool AwsProfile::_internal_has_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AwsProfile::has_endpoint() const {
  return _internal_has_endpoint();
}
inline void AwsProfile::clear_endpoint() {
  _impl_.endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AwsProfile::endpoint() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.AwsProfile.endpoint)
  return _internal_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AwsProfile::set_endpoint(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.AwsProfile.endpoint)
}
inline std::string* AwsProfile::mutable_endpoint() {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.AwsProfile.endpoint)
  return _s;
}
inline const std::string& AwsProfile::_internal_endpoint() const {
  return _impl_.endpoint_.Get();
}
inline void AwsProfile::_internal_set_endpoint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* AwsProfile::_internal_mutable_endpoint() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* AwsProfile::release_endpoint() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.AwsProfile.endpoint)
  if (!_internal_has_endpoint()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.endpoint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endpoint_.IsDefault()) {
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AwsProfile::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.endpoint_.SetAllocated(endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endpoint_.IsDefault()) {
    _impl_.endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.AwsProfile.endpoint)
}

// string access_key_id = 3;
inline void AwsProfile::clear_access_key_id() {
  _impl_.access_key_id_.ClearToEmpty();
}
inline const std::string& AwsProfile::access_key_id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.AwsProfile.access_key_id)
  return _internal_access_key_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AwsProfile::set_access_key_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_key_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.AwsProfile.access_key_id)
}
inline std::string* AwsProfile::mutable_access_key_id() {
  std::string* _s = _internal_mutable_access_key_id();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.AwsProfile.access_key_id)
  return _s;
}
inline const std::string& AwsProfile::_internal_access_key_id() const {
  return _impl_.access_key_id_.Get();
}
inline void AwsProfile::_internal_set_access_key_id(const std::string& value) {
  
  _impl_.access_key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AwsProfile::_internal_mutable_access_key_id() {
  
  return _impl_.access_key_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AwsProfile::release_access_key_id() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.AwsProfile.access_key_id)
  return _impl_.access_key_id_.Release();
}
inline void AwsProfile::set_allocated_access_key_id(std::string* access_key_id) {
  if (access_key_id != nullptr) {
    
  } else {
    
  }
  _impl_.access_key_id_.SetAllocated(access_key_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_key_id_.IsDefault()) {
    _impl_.access_key_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.AwsProfile.access_key_id)
}

// string secret_access_key = 4;
inline void AwsProfile::clear_secret_access_key() {
  _impl_.secret_access_key_.ClearToEmpty();
}
inline const std::string& AwsProfile::secret_access_key() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.AwsProfile.secret_access_key)
  return _internal_secret_access_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AwsProfile::set_secret_access_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secret_access_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.AwsProfile.secret_access_key)
}
inline std::string* AwsProfile::mutable_secret_access_key() {
  std::string* _s = _internal_mutable_secret_access_key();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.AwsProfile.secret_access_key)
  return _s;
}
inline const std::string& AwsProfile::_internal_secret_access_key() const {
  return _impl_.secret_access_key_.Get();
}
inline void AwsProfile::_internal_set_secret_access_key(const std::string& value) {
  
  _impl_.secret_access_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AwsProfile::_internal_mutable_secret_access_key() {
  
  return _impl_.secret_access_key_.Mutable(GetArenaForAllocation());
}
inline std::string* AwsProfile::release_secret_access_key() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.AwsProfile.secret_access_key)
  return _impl_.secret_access_key_.Release();
}
inline void AwsProfile::set_allocated_secret_access_key(std::string* secret_access_key) {
  if (secret_access_key != nullptr) {
    
  } else {
    
  }
  _impl_.secret_access_key_.SetAllocated(secret_access_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secret_access_key_.IsDefault()) {
    _impl_.secret_access_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.AwsProfile.secret_access_key)
}

// -------------------------------------------------------------------

// SiteAwsS3TestResponse

// repeated string buckets = 1;
inline int SiteAwsS3TestResponse::_internal_buckets_size() const {
  return _impl_.buckets_.size();
}
inline int SiteAwsS3TestResponse::buckets_size() const {
  return _internal_buckets_size();
}
inline void SiteAwsS3TestResponse::clear_buckets() {
  _impl_.buckets_.Clear();
}
inline std::string* SiteAwsS3TestResponse::add_buckets() {
  std::string* _s = _internal_add_buckets();
  // @@protoc_insertion_point(field_add_mutable:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
  return _s;
}
inline const std::string& SiteAwsS3TestResponse::_internal_buckets(int index) const {
  return _impl_.buckets_.Get(index);
}
inline const std::string& SiteAwsS3TestResponse::buckets(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
  return _internal_buckets(index);
}
inline std::string* SiteAwsS3TestResponse::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
  return _impl_.buckets_.Mutable(index);
}
inline void SiteAwsS3TestResponse::set_buckets(int index, const std::string& value) {
  _impl_.buckets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline void SiteAwsS3TestResponse::set_buckets(int index, std::string&& value) {
  _impl_.buckets_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline void SiteAwsS3TestResponse::set_buckets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.buckets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline void SiteAwsS3TestResponse::set_buckets(int index, const char* value, size_t size) {
  _impl_.buckets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline std::string* SiteAwsS3TestResponse::_internal_add_buckets() {
  return _impl_.buckets_.Add();
}
inline void SiteAwsS3TestResponse::add_buckets(const std::string& value) {
  _impl_.buckets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline void SiteAwsS3TestResponse::add_buckets(std::string&& value) {
  _impl_.buckets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline void SiteAwsS3TestResponse::add_buckets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.buckets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline void SiteAwsS3TestResponse::add_buckets(const char* value, size_t size) {
  _impl_.buckets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteAwsS3TestResponse::buckets() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
  return _impl_.buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteAwsS3TestResponse::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteAwsS3TestResponse.buckets)
  return &_impl_.buckets_;
}

// -------------------------------------------------------------------

// SiteSmtpTestRequst

// string to = 1;
inline void SiteSmtpTestRequst::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& SiteSmtpTestRequst::to() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSmtpTestRequst.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSmtpTestRequst::set_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSmtpTestRequst.to)
}
inline std::string* SiteSmtpTestRequst::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSmtpTestRequst.to)
  return _s;
}
inline const std::string& SiteSmtpTestRequst::_internal_to() const {
  return _impl_.to_.Get();
}
inline void SiteSmtpTestRequst::_internal_set_to(const std::string& value) {
  
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSmtpTestRequst::_internal_mutable_to() {
  
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSmtpTestRequst::release_to() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSmtpTestRequst.to)
  return _impl_.to_.Release();
}
inline void SiteSmtpTestRequst::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSmtpTestRequst.to)
}

// string subject = 2;
inline void SiteSmtpTestRequst::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& SiteSmtpTestRequst::subject() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSmtpTestRequst.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSmtpTestRequst::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSmtpTestRequst.subject)
}
inline std::string* SiteSmtpTestRequst::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSmtpTestRequst.subject)
  return _s;
}
inline const std::string& SiteSmtpTestRequst::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void SiteSmtpTestRequst::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSmtpTestRequst::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSmtpTestRequst::release_subject() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSmtpTestRequst.subject)
  return _impl_.subject_.Release();
}
inline void SiteSmtpTestRequst::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSmtpTestRequst.subject)
}

// string body = 3;
inline void SiteSmtpTestRequst::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SiteSmtpTestRequst::body() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSmtpTestRequst.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSmtpTestRequst::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSmtpTestRequst.body)
}
inline std::string* SiteSmtpTestRequst::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSmtpTestRequst.body)
  return _s;
}
inline const std::string& SiteSmtpTestRequst::_internal_body() const {
  return _impl_.body_.Get();
}
inline void SiteSmtpTestRequst::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSmtpTestRequst::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSmtpTestRequst::release_body() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSmtpTestRequst.body)
  return _impl_.body_.Release();
}
inline void SiteSmtpTestRequst::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSmtpTestRequst.body)
}

// -------------------------------------------------------------------

// SiteSetLogoRequest

// string url = 1;
inline void SiteSetLogoRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& SiteSetLogoRequest::url() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSetLogoRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetLogoRequest::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetLogoRequest.url)
}
inline std::string* SiteSetLogoRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSetLogoRequest.url)
  return _s;
}
inline const std::string& SiteSetLogoRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void SiteSetLogoRequest::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetLogoRequest::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSetLogoRequest::release_url() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSetLogoRequest.url)
  return _impl_.url_.Release();
}
inline void SiteSetLogoRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSetLogoRequest.url)
}

// -------------------------------------------------------------------

// SiteSetCopyrightRequest

// string payload = 1;
inline void SiteSetCopyrightRequest::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SiteSetCopyrightRequest::payload() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSetCopyrightRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetCopyrightRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetCopyrightRequest.payload)
}
inline std::string* SiteSetCopyrightRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSetCopyrightRequest.payload)
  return _s;
}
inline const std::string& SiteSetCopyrightRequest::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void SiteSetCopyrightRequest::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetCopyrightRequest::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSetCopyrightRequest::release_payload() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSetCopyrightRequest.payload)
  return _impl_.payload_.Release();
}
inline void SiteSetCopyrightRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSetCopyrightRequest.payload)
}

// -------------------------------------------------------------------

// SiteSetKeywordsRequest

// repeated string items = 1;
inline int SiteSetKeywordsRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int SiteSetKeywordsRequest::items_size() const {
  return _internal_items_size();
}
inline void SiteSetKeywordsRequest::clear_items() {
  _impl_.items_.Clear();
}
inline std::string* SiteSetKeywordsRequest::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
  return _s;
}
inline const std::string& SiteSetKeywordsRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const std::string& SiteSetKeywordsRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
  return _internal_items(index);
}
inline std::string* SiteSetKeywordsRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
  return _impl_.items_.Mutable(index);
}
inline void SiteSetKeywordsRequest::set_items(int index, const std::string& value) {
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, std::string&& value) {
  _impl_.items_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, const char* value, size_t size) {
  _impl_.items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline std::string* SiteSetKeywordsRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline void SiteSetKeywordsRequest::add_items(const std::string& value) {
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(std::string&& value) {
  _impl_.items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const char* value, size_t size) {
  _impl_.items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteSetKeywordsRequest::items() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteSetKeywordsRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteSetKeywordsRequest.items)
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SiteSetInfoRequest

// string title = 1;
inline void SiteSetInfoRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::title() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSetInfoRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetInfoRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetInfoRequest.title)
}
inline std::string* SiteSetInfoRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSetInfoRequest.title)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SiteSetInfoRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_title() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSetInfoRequest.title)
  return _impl_.title_.Release();
}
inline void SiteSetInfoRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSetInfoRequest.title)
}

// string subhead = 2;
inline void SiteSetInfoRequest::clear_subhead() {
  _impl_.subhead_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::subhead() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSetInfoRequest.subhead)
  return _internal_subhead();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetInfoRequest::set_subhead(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subhead_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetInfoRequest.subhead)
}
inline std::string* SiteSetInfoRequest::mutable_subhead() {
  std::string* _s = _internal_mutable_subhead();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSetInfoRequest.subhead)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_subhead() const {
  return _impl_.subhead_.Get();
}
inline void SiteSetInfoRequest::_internal_set_subhead(const std::string& value) {
  
  _impl_.subhead_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_subhead() {
  
  return _impl_.subhead_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_subhead() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSetInfoRequest.subhead)
  return _impl_.subhead_.Release();
}
inline void SiteSetInfoRequest::set_allocated_subhead(std::string* subhead) {
  if (subhead != nullptr) {
    
  } else {
    
  }
  _impl_.subhead_.SetAllocated(subhead, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subhead_.IsDefault()) {
    _impl_.subhead_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSetInfoRequest.subhead)
}

// string description = 3;
inline void SiteSetInfoRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::description() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteSetInfoRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetInfoRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteSetInfoRequest.description)
}
inline std::string* SiteSetInfoRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteSetInfoRequest.description)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SiteSetInfoRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_description() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteSetInfoRequest.description)
  return _impl_.description_.Release();
}
inline void SiteSetInfoRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteSetInfoRequest.description)
}

// -------------------------------------------------------------------

// SiteLayoutResponse_Author

// string name = 1;
inline void SiteLayoutResponse_Author::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse_Author::name() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.Author.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse_Author::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.Author.name)
}
inline std::string* SiteLayoutResponse_Author::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.Author.name)
  return _s;
}
inline const std::string& SiteLayoutResponse_Author::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SiteLayoutResponse_Author::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::release_name() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.Author.name)
  return _impl_.name_.Release();
}
inline void SiteLayoutResponse_Author::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.Author.name)
}

// string email = 2;
inline void SiteLayoutResponse_Author::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse_Author::email() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.Author.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse_Author::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.Author.email)
}
inline std::string* SiteLayoutResponse_Author::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.Author.email)
  return _s;
}
inline const std::string& SiteLayoutResponse_Author::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SiteLayoutResponse_Author::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::release_email() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.Author.email)
  return _impl_.email_.Release();
}
inline void SiteLayoutResponse_Author::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.Author.email)
}

// -------------------------------------------------------------------

// SiteLayoutResponse

// string title = 1;
inline void SiteLayoutResponse::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::title() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.title)
}
inline std::string* SiteLayoutResponse::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.title)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SiteLayoutResponse::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_title() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.title)
  return _impl_.title_.Release();
}
inline void SiteLayoutResponse::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.title)
}

// string subhead = 2;
inline void SiteLayoutResponse::clear_subhead() {
  _impl_.subhead_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::subhead() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.subhead)
  return _internal_subhead();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse::set_subhead(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subhead_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.subhead)
}
inline std::string* SiteLayoutResponse::mutable_subhead() {
  std::string* _s = _internal_mutable_subhead();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.subhead)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_subhead() const {
  return _impl_.subhead_.Get();
}
inline void SiteLayoutResponse::_internal_set_subhead(const std::string& value) {
  
  _impl_.subhead_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_subhead() {
  
  return _impl_.subhead_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_subhead() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.subhead)
  return _impl_.subhead_.Release();
}
inline void SiteLayoutResponse::set_allocated_subhead(std::string* subhead) {
  if (subhead != nullptr) {
    
  } else {
    
  }
  _impl_.subhead_.SetAllocated(subhead, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subhead_.IsDefault()) {
    _impl_.subhead_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.subhead)
}

// repeated string keywords = 3;
inline int SiteLayoutResponse::_internal_keywords_size() const {
  return _impl_.keywords_.size();
}
inline int SiteLayoutResponse::keywords_size() const {
  return _internal_keywords_size();
}
inline void SiteLayoutResponse::clear_keywords() {
  _impl_.keywords_.Clear();
}
inline std::string* SiteLayoutResponse::add_keywords() {
  std::string* _s = _internal_add_keywords();
  // @@protoc_insertion_point(field_add_mutable:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_keywords(int index) const {
  return _impl_.keywords_.Get(index);
}
inline const std::string& SiteLayoutResponse::keywords(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
  return _internal_keywords(index);
}
inline std::string* SiteLayoutResponse::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
  return _impl_.keywords_.Mutable(index);
}
inline void SiteLayoutResponse::set_keywords(int index, const std::string& value) {
  _impl_.keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, std::string&& value) {
  _impl_.keywords_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, const char* value, size_t size) {
  _impl_.keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline std::string* SiteLayoutResponse::_internal_add_keywords() {
  return _impl_.keywords_.Add();
}
inline void SiteLayoutResponse::add_keywords(const std::string& value) {
  _impl_.keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(std::string&& value) {
  _impl_.keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(const char* value, size_t size) {
  _impl_.keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteLayoutResponse::keywords() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
  return _impl_.keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteLayoutResponse::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteLayoutResponse.keywords)
  return &_impl_.keywords_;
}

// string description = 4;
inline void SiteLayoutResponse::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::description() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.description)
}
inline std::string* SiteLayoutResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.description)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SiteLayoutResponse::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_description() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.description)
  return _impl_.description_.Release();
}
inline void SiteLayoutResponse::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.description)
}

// .palm.plugins.nut.v1.SiteLayoutResponse.Author author = 5;
inline bool SiteLayoutResponse::_internal_has_author() const {
  return this != internal_default_instance() && _impl_.author_ != nullptr;
}
inline bool SiteLayoutResponse::has_author() const {
  return _internal_has_author();
}
inline void SiteLayoutResponse::clear_author() {
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& SiteLayoutResponse::_internal_author() const {
  const ::palm::plugins::nut::v1::SiteLayoutResponse_Author* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteLayoutResponse_Author&>(
      ::palm::plugins::nut::v1::_SiteLayoutResponse_Author_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& SiteLayoutResponse::author() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.author)
  return _internal_author();
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_author(
    ::palm::plugins::nut::v1::SiteLayoutResponse_Author* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.author)
}
inline ::palm::plugins::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::release_author() {
  
  ::palm::plugins::nut::v1::SiteLayoutResponse_Author* temp = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.author)
  
  ::palm::plugins::nut::v1::SiteLayoutResponse_Author* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::_internal_mutable_author() {
  
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteLayoutResponse_Author>(GetArenaForAllocation());
    _impl_.author_ = p;
  }
  return _impl_.author_;
}
inline ::palm::plugins::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::mutable_author() {
  ::palm::plugins::nut::v1::SiteLayoutResponse_Author* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.author)
  return _msg;
}
inline void SiteLayoutResponse::set_allocated_author(::palm::plugins::nut::v1::SiteLayoutResponse_Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.author_ = author;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.author)
}

// string copyright = 6;
inline void SiteLayoutResponse::clear_copyright() {
  _impl_.copyright_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::copyright() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.copyright)
  return _internal_copyright();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse::set_copyright(ArgT0&& arg0, ArgT... args) {
 
 _impl_.copyright_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.copyright)
}
inline std::string* SiteLayoutResponse::mutable_copyright() {
  std::string* _s = _internal_mutable_copyright();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.copyright)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_copyright() const {
  return _impl_.copyright_.Get();
}
inline void SiteLayoutResponse::_internal_set_copyright(const std::string& value) {
  
  _impl_.copyright_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_copyright() {
  
  return _impl_.copyright_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_copyright() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.copyright)
  return _impl_.copyright_.Release();
}
inline void SiteLayoutResponse::set_allocated_copyright(std::string* copyright) {
  if (copyright != nullptr) {
    
  } else {
    
  }
  _impl_.copyright_.SetAllocated(copyright, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copyright_.IsDefault()) {
    _impl_.copyright_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.copyright)
}

// string logo = 7;
inline void SiteLayoutResponse::clear_logo() {
  _impl_.logo_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::logo() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.logo)
  return _internal_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteLayoutResponse::set_logo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.logo)
}
inline std::string* SiteLayoutResponse::mutable_logo() {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.logo)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_logo() const {
  return _impl_.logo_.Get();
}
inline void SiteLayoutResponse::_internal_set_logo(const std::string& value) {
  
  _impl_.logo_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_logo() {
  
  return _impl_.logo_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_logo() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteLayoutResponse.logo)
  return _impl_.logo_.Release();
}
inline void SiteLayoutResponse::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  _impl_.logo_.SetAllocated(logo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logo_.IsDefault()) {
    _impl_.logo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteLayoutResponse.logo)
}

// repeated string languages = 9;
inline int SiteLayoutResponse::_internal_languages_size() const {
  return _impl_.languages_.size();
}
inline int SiteLayoutResponse::languages_size() const {
  return _internal_languages_size();
}
inline void SiteLayoutResponse::clear_languages() {
  _impl_.languages_.Clear();
}
inline std::string* SiteLayoutResponse::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:palm.plugins.nut.v1.SiteLayoutResponse.languages)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_languages(int index) const {
  return _impl_.languages_.Get(index);
}
inline const std::string& SiteLayoutResponse::languages(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteLayoutResponse.languages)
  return _internal_languages(index);
}
inline std::string* SiteLayoutResponse::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteLayoutResponse.languages)
  return _impl_.languages_.Mutable(index);
}
inline void SiteLayoutResponse::set_languages(int index, const std::string& value) {
  _impl_.languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, std::string&& value) {
  _impl_.languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, const char* value, size_t size) {
  _impl_.languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline std::string* SiteLayoutResponse::_internal_add_languages() {
  return _impl_.languages_.Add();
}
inline void SiteLayoutResponse::add_languages(const std::string& value) {
  _impl_.languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(std::string&& value) {
  _impl_.languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(const char* value, size_t size) {
  _impl_.languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.plugins.nut.v1.SiteLayoutResponse.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteLayoutResponse::languages() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteLayoutResponse.languages)
  return _impl_.languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteLayoutResponse::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteLayoutResponse.languages)
  return &_impl_.languages_;
}

// -------------------------------------------------------------------

// SiteNewLeaveWordRequest

// string body = 1;
inline void SiteNewLeaveWordRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SiteNewLeaveWordRequest::body() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteNewLeaveWordRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteNewLeaveWordRequest::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteNewLeaveWordRequest.body)
}
inline std::string* SiteNewLeaveWordRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteNewLeaveWordRequest.body)
  return _s;
}
inline const std::string& SiteNewLeaveWordRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void SiteNewLeaveWordRequest::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteNewLeaveWordRequest::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteNewLeaveWordRequest::release_body() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteNewLeaveWordRequest.body)
  return _impl_.body_.Release();
}
inline void SiteNewLeaveWordRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteNewLeaveWordRequest.body)
}

// -------------------------------------------------------------------

// SiteIndexLeaveWordResponse_Item

// int32 id = 1;
inline void SiteIndexLeaveWordResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SiteIndexLeaveWordResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SiteIndexLeaveWordResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.id)
  return _internal_id();
}
inline void SiteIndexLeaveWordResponse_Item::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SiteIndexLeaveWordResponse_Item::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.id)
}

// string lang = 2;
inline void SiteIndexLeaveWordResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& SiteIndexLeaveWordResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteIndexLeaveWordResponse_Item::set_lang(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lang_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang)
}
inline std::string* SiteIndexLeaveWordResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang)
  return _s;
}
inline const std::string& SiteIndexLeaveWordResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void SiteIndexLeaveWordResponse_Item::_internal_set_lang(const std::string& value) {
  
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteIndexLeaveWordResponse_Item::_internal_mutable_lang() {
  
  return _impl_.lang_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteIndexLeaveWordResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void SiteIndexLeaveWordResponse_Item::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  _impl_.lang_.SetAllocated(lang, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lang_.IsDefault()) {
    _impl_.lang_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.lang)
}

// string ip = 3;
inline void SiteIndexLeaveWordResponse_Item::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& SiteIndexLeaveWordResponse_Item::ip() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteIndexLeaveWordResponse_Item::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip)
}
inline std::string* SiteIndexLeaveWordResponse_Item::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip)
  return _s;
}
inline const std::string& SiteIndexLeaveWordResponse_Item::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void SiteIndexLeaveWordResponse_Item::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteIndexLeaveWordResponse_Item::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteIndexLeaveWordResponse_Item::release_ip() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip)
  return _impl_.ip_.Release();
}
inline void SiteIndexLeaveWordResponse_Item::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.ip)
}

// string body = 4;
inline void SiteIndexLeaveWordResponse_Item::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SiteIndexLeaveWordResponse_Item::body() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteIndexLeaveWordResponse_Item::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body)
}
inline std::string* SiteIndexLeaveWordResponse_Item::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body)
  return _s;
}
inline const std::string& SiteIndexLeaveWordResponse_Item::_internal_body() const {
  return _impl_.body_.Get();
}
inline void SiteIndexLeaveWordResponse_Item::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteIndexLeaveWordResponse_Item::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteIndexLeaveWordResponse_Item::release_body() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body)
  return _impl_.body_.Release();
}
inline void SiteIndexLeaveWordResponse_Item::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.body)
}

// .google.protobuf.Timestamp created_at = 9;
inline bool SiteIndexLeaveWordResponse_Item::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool SiteIndexLeaveWordResponse_Item::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SiteIndexLeaveWordResponse_Item::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SiteIndexLeaveWordResponse_Item::created_at() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.created_at)
  return _internal_created_at();
}
inline void SiteIndexLeaveWordResponse_Item::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteIndexLeaveWordResponse_Item::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteIndexLeaveWordResponse_Item::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteIndexLeaveWordResponse_Item::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteIndexLeaveWordResponse_Item::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.created_at)
  return _msg;
}
inline void SiteIndexLeaveWordResponse_Item::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item.created_at)
}

// -------------------------------------------------------------------

// SiteIndexLeaveWordResponse

// repeated .palm.plugins.nut.v1.SiteIndexLeaveWordResponse.Item items = 1;
inline int SiteIndexLeaveWordResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int SiteIndexLeaveWordResponse::items_size() const {
  return _internal_items_size();
}
inline void SiteIndexLeaveWordResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* SiteIndexLeaveWordResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >*
SiteIndexLeaveWordResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.items)
  return &_impl_.items_;
}
inline const ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item& SiteIndexLeaveWordResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item& SiteIndexLeaveWordResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.items)
  return _internal_items(index);
}
inline ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* SiteIndexLeaveWordResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* SiteIndexLeaveWordResponse::add_items() {
  ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse_Item >&
SiteIndexLeaveWordResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.items)
  return _impl_.items_;
}

// .palm.plugins.nut.v1.Pagination pagination = 9;
inline bool SiteIndexLeaveWordResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool SiteIndexLeaveWordResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline void SiteIndexLeaveWordResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
inline const ::palm::plugins::nut::v1::Pagination& SiteIndexLeaveWordResponse::_internal_pagination() const {
  const ::palm::plugins::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::Pagination&>(
      ::palm::plugins::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::plugins::nut::v1::Pagination& SiteIndexLeaveWordResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.pagination)
  return _internal_pagination();
}
inline void SiteIndexLeaveWordResponse::unsafe_arena_set_allocated_pagination(
    ::palm::plugins::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.pagination)
}
inline ::palm::plugins::nut::v1::Pagination* SiteIndexLeaveWordResponse::release_pagination() {
  
  ::palm::plugins::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::Pagination* SiteIndexLeaveWordResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.pagination)
  
  ::palm::plugins::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::Pagination* SiteIndexLeaveWordResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::plugins::nut::v1::Pagination* SiteIndexLeaveWordResponse::mutable_pagination() {
  ::palm::plugins::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.pagination)
  return _msg;
}
inline void SiteIndexLeaveWordResponse::set_allocated_pagination(::palm::plugins::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteIndexLeaveWordResponse.pagination)
}

// -------------------------------------------------------------------

// GoogleProfile_ReCaptcha

// string site_key = 1;
inline void GoogleProfile_ReCaptcha::clear_site_key() {
  _impl_.site_key_.ClearToEmpty();
}
inline const std::string& GoogleProfile_ReCaptcha::site_key() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key)
  return _internal_site_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleProfile_ReCaptcha::set_site_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.site_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key)
}
inline std::string* GoogleProfile_ReCaptcha::mutable_site_key() {
  std::string* _s = _internal_mutable_site_key();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key)
  return _s;
}
inline const std::string& GoogleProfile_ReCaptcha::_internal_site_key() const {
  return _impl_.site_key_.Get();
}
inline void GoogleProfile_ReCaptcha::_internal_set_site_key(const std::string& value) {
  
  _impl_.site_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::_internal_mutable_site_key() {
  
  return _impl_.site_key_.Mutable(GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::release_site_key() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key)
  return _impl_.site_key_.Release();
}
inline void GoogleProfile_ReCaptcha::set_allocated_site_key(std::string* site_key) {
  if (site_key != nullptr) {
    
  } else {
    
  }
  _impl_.site_key_.SetAllocated(site_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.site_key_.IsDefault()) {
    _impl_.site_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.site_key)
}

// string secret = 2;
inline void GoogleProfile_ReCaptcha::clear_secret() {
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& GoogleProfile_ReCaptcha::secret() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret)
  return _internal_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleProfile_ReCaptcha::set_secret(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secret_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret)
}
inline std::string* GoogleProfile_ReCaptcha::mutable_secret() {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret)
  return _s;
}
inline const std::string& GoogleProfile_ReCaptcha::_internal_secret() const {
  return _impl_.secret_.Get();
}
inline void GoogleProfile_ReCaptcha::_internal_set_secret(const std::string& value) {
  
  _impl_.secret_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::_internal_mutable_secret() {
  
  return _impl_.secret_.Mutable(GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::release_secret() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret)
  return _impl_.secret_.Release();
}
inline void GoogleProfile_ReCaptcha::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  _impl_.secret_.SetAllocated(secret, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secret_.IsDefault()) {
    _impl_.secret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.GoogleProfile.ReCaptcha.secret)
}

// -------------------------------------------------------------------

// GoogleProfile

// optional string site_verify_id = 1;
inline bool GoogleProfile::_internal_has_site_verify_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GoogleProfile::has_site_verify_id() const {
  return _internal_has_site_verify_id();
}
inline void GoogleProfile::clear_site_verify_id() {
  _impl_.site_verify_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GoogleProfile::site_verify_id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.GoogleProfile.site_verify_id)
  return _internal_site_verify_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleProfile::set_site_verify_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.site_verify_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.GoogleProfile.site_verify_id)
}
inline std::string* GoogleProfile::mutable_site_verify_id() {
  std::string* _s = _internal_mutable_site_verify_id();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.GoogleProfile.site_verify_id)
  return _s;
}
inline const std::string& GoogleProfile::_internal_site_verify_id() const {
  return _impl_.site_verify_id_.Get();
}
inline void GoogleProfile::_internal_set_site_verify_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.site_verify_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleProfile::_internal_mutable_site_verify_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.site_verify_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GoogleProfile::release_site_verify_id() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.GoogleProfile.site_verify_id)
  if (!_internal_has_site_verify_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.site_verify_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.site_verify_id_.IsDefault()) {
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GoogleProfile::set_allocated_site_verify_id(std::string* site_verify_id) {
  if (site_verify_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.site_verify_id_.SetAllocated(site_verify_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.site_verify_id_.IsDefault()) {
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.GoogleProfile.site_verify_id)
}

// optional .palm.plugins.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
inline bool GoogleProfile::_internal_has_re_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.re_captcha_ != nullptr);
  return value;
}
inline bool GoogleProfile::has_re_captcha() const {
  return _internal_has_re_captcha();
}
inline void GoogleProfile::clear_re_captcha() {
  if (_impl_.re_captcha_ != nullptr) _impl_.re_captcha_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha& GoogleProfile::_internal_re_captcha() const {
  const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* p = _impl_.re_captcha_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha&>(
      ::palm::plugins::nut::v1::_GoogleProfile_ReCaptcha_default_instance_);
}
inline const ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha& GoogleProfile::re_captcha() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.GoogleProfile.re_captcha)
  return _internal_re_captcha();
}
inline void GoogleProfile::unsafe_arena_set_allocated_re_captcha(
    ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* re_captcha) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.re_captcha_);
  }
  _impl_.re_captcha_ = re_captcha;
  if (re_captcha) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.GoogleProfile.re_captcha)
}
inline ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::release_re_captcha() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* temp = _impl_.re_captcha_;
  _impl_.re_captcha_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::unsafe_arena_release_re_captcha() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.GoogleProfile.re_captcha)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* temp = _impl_.re_captcha_;
  _impl_.re_captcha_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::_internal_mutable_re_captcha() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.re_captcha_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::GoogleProfile_ReCaptcha>(GetArenaForAllocation());
    _impl_.re_captcha_ = p;
  }
  return _impl_.re_captcha_;
}
inline ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::mutable_re_captcha() {
  ::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* _msg = _internal_mutable_re_captcha();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.GoogleProfile.re_captcha)
  return _msg;
}
inline void GoogleProfile::set_allocated_re_captcha(::palm::plugins::nut::v1::GoogleProfile_ReCaptcha* re_captcha) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.re_captcha_;
  }
  if (re_captcha) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(re_captcha);
    if (message_arena != submessage_arena) {
      re_captcha = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, re_captcha, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.re_captcha_ = re_captcha;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.GoogleProfile.re_captcha)
}

// -------------------------------------------------------------------

// BaiduProfile_SiteVerify

// string id = 1;
inline void BaiduProfile_SiteVerify::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BaiduProfile_SiteVerify::id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.BaiduProfile.SiteVerify.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaiduProfile_SiteVerify::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.BaiduProfile.SiteVerify.id)
}
inline std::string* BaiduProfile_SiteVerify::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.BaiduProfile.SiteVerify.id)
  return _s;
}
inline const std::string& BaiduProfile_SiteVerify::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BaiduProfile_SiteVerify::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::release_id() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.BaiduProfile.SiteVerify.id)
  return _impl_.id_.Release();
}
inline void BaiduProfile_SiteVerify::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.BaiduProfile.SiteVerify.id)
}

// string content = 2;
inline void BaiduProfile_SiteVerify::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& BaiduProfile_SiteVerify::content() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.BaiduProfile.SiteVerify.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaiduProfile_SiteVerify::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.BaiduProfile.SiteVerify.content)
}
inline std::string* BaiduProfile_SiteVerify::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.BaiduProfile.SiteVerify.content)
  return _s;
}
inline const std::string& BaiduProfile_SiteVerify::_internal_content() const {
  return _impl_.content_.Get();
}
inline void BaiduProfile_SiteVerify::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::release_content() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.BaiduProfile.SiteVerify.content)
  return _impl_.content_.Release();
}
inline void BaiduProfile_SiteVerify::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.BaiduProfile.SiteVerify.content)
}

// -------------------------------------------------------------------

// BaiduProfile

// optional .palm.plugins.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
inline bool BaiduProfile::_internal_has_site_verify() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.site_verify_ != nullptr);
  return value;
}
inline bool BaiduProfile::has_site_verify() const {
  return _internal_has_site_verify();
}
inline void BaiduProfile::clear_site_verify() {
  if (_impl_.site_verify_ != nullptr) _impl_.site_verify_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify& BaiduProfile::_internal_site_verify() const {
  const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* p = _impl_.site_verify_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify&>(
      ::palm::plugins::nut::v1::_BaiduProfile_SiteVerify_default_instance_);
}
inline const ::palm::plugins::nut::v1::BaiduProfile_SiteVerify& BaiduProfile::site_verify() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.BaiduProfile.site_verify)
  return _internal_site_verify();
}
inline void BaiduProfile::unsafe_arena_set_allocated_site_verify(
    ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* site_verify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.site_verify_);
  }
  _impl_.site_verify_ = site_verify;
  if (site_verify) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.BaiduProfile.site_verify)
}
inline ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::release_site_verify() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* temp = _impl_.site_verify_;
  _impl_.site_verify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::unsafe_arena_release_site_verify() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.BaiduProfile.site_verify)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* temp = _impl_.site_verify_;
  _impl_.site_verify_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::_internal_mutable_site_verify() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.site_verify_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::BaiduProfile_SiteVerify>(GetArenaForAllocation());
    _impl_.site_verify_ = p;
  }
  return _impl_.site_verify_;
}
inline ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::mutable_site_verify() {
  ::palm::plugins::nut::v1::BaiduProfile_SiteVerify* _msg = _internal_mutable_site_verify();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.BaiduProfile.site_verify)
  return _msg;
}
inline void BaiduProfile::set_allocated_site_verify(::palm::plugins::nut::v1::BaiduProfile_SiteVerify* site_verify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.site_verify_;
  }
  if (site_verify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(site_verify);
    if (message_arena != submessage_arena) {
      site_verify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_verify, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.site_verify_ = site_verify;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.BaiduProfile.site_verify)
}

// -------------------------------------------------------------------

// BingProfile

// optional string site_verify_id = 1;
inline bool BingProfile::_internal_has_site_verify_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BingProfile::has_site_verify_id() const {
  return _internal_has_site_verify_id();
}
inline void BingProfile::clear_site_verify_id() {
  _impl_.site_verify_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BingProfile::site_verify_id() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.BingProfile.site_verify_id)
  return _internal_site_verify_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BingProfile::set_site_verify_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.site_verify_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.BingProfile.site_verify_id)
}
inline std::string* BingProfile::mutable_site_verify_id() {
  std::string* _s = _internal_mutable_site_verify_id();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.BingProfile.site_verify_id)
  return _s;
}
inline const std::string& BingProfile::_internal_site_verify_id() const {
  return _impl_.site_verify_id_.Get();
}
inline void BingProfile::_internal_set_site_verify_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.site_verify_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BingProfile::_internal_mutable_site_verify_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.site_verify_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BingProfile::release_site_verify_id() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.BingProfile.site_verify_id)
  if (!_internal_has_site_verify_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.site_verify_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.site_verify_id_.IsDefault()) {
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BingProfile::set_allocated_site_verify_id(std::string* site_verify_id) {
  if (site_verify_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.site_verify_id_.SetAllocated(site_verify_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.site_verify_id_.IsDefault()) {
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.BingProfile.site_verify_id)
}

// -------------------------------------------------------------------

// EmailTask_Attachment

// string name = 1;
inline void EmailTask_Attachment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::name() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.Attachment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Attachment::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.Attachment.name)
}
inline std::string* EmailTask_Attachment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.Attachment.name)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EmailTask_Attachment::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::release_name() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.EmailTask.Attachment.name)
  return _impl_.name_.Release();
}
inline void EmailTask_Attachment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.EmailTask.Attachment.name)
}

// .palm.plugins.nut.v1.EmailTask.ContentType content_type = 2;
inline void EmailTask_Attachment::clear_content_type() {
  _impl_.content_type_ = 0;
}
inline ::palm::plugins::nut::v1::EmailTask_ContentType EmailTask_Attachment::_internal_content_type() const {
  return static_cast< ::palm::plugins::nut::v1::EmailTask_ContentType >(_impl_.content_type_);
}
inline ::palm::plugins::nut::v1::EmailTask_ContentType EmailTask_Attachment::content_type() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.Attachment.content_type)
  return _internal_content_type();
}
inline void EmailTask_Attachment::_internal_set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value) {
  
  _impl_.content_type_ = value;
}
inline void EmailTask_Attachment::set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.Attachment.content_type)
}

// bytes payload = 11;
inline void EmailTask_Attachment::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::payload() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.Attachment.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Attachment::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.Attachment.payload)
}
inline std::string* EmailTask_Attachment::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.Attachment.payload)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void EmailTask_Attachment::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::release_payload() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.EmailTask.Attachment.payload)
  return _impl_.payload_.Release();
}
inline void EmailTask_Attachment::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.EmailTask.Attachment.payload)
}

// -------------------------------------------------------------------

// EmailTask

// string subject = 1;
inline void EmailTask::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& EmailTask::subject() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.subject)
}
inline std::string* EmailTask::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.subject)
  return _s;
}
inline const std::string& EmailTask::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void EmailTask::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask::release_subject() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.EmailTask.subject)
  return _impl_.subject_.Release();
}
inline void EmailTask::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.EmailTask.subject)
}

// string body = 2;
inline void EmailTask::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& EmailTask::body() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.body)
}
inline std::string* EmailTask::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.body)
  return _s;
}
inline const std::string& EmailTask::_internal_body() const {
  return _impl_.body_.Get();
}
inline void EmailTask::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask::release_body() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.EmailTask.body)
  return _impl_.body_.Release();
}
inline void EmailTask::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.EmailTask.body)
}

// .palm.plugins.nut.v1.EmailTask.ContentType content_type = 3;
inline void EmailTask::clear_content_type() {
  _impl_.content_type_ = 0;
}
inline ::palm::plugins::nut::v1::EmailTask_ContentType EmailTask::_internal_content_type() const {
  return static_cast< ::palm::plugins::nut::v1::EmailTask_ContentType >(_impl_.content_type_);
}
inline ::palm::plugins::nut::v1::EmailTask_ContentType EmailTask::content_type() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.content_type)
  return _internal_content_type();
}
inline void EmailTask::_internal_set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value) {
  
  _impl_.content_type_ = value;
}
inline void EmailTask::set_content_type(::palm::plugins::nut::v1::EmailTask_ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.content_type)
}

// string to = 11;
inline void EmailTask::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& EmailTask::to() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask::set_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.to)
}
inline std::string* EmailTask::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.to)
  return _s;
}
inline const std::string& EmailTask::_internal_to() const {
  return _impl_.to_.Get();
}
inline void EmailTask::_internal_set_to(const std::string& value) {
  
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask::_internal_mutable_to() {
  
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask::release_to() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.EmailTask.to)
  return _impl_.to_.Release();
}
inline void EmailTask::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.EmailTask.to)
}

// repeated string cc = 12;
inline int EmailTask::_internal_cc_size() const {
  return _impl_.cc_.size();
}
inline int EmailTask::cc_size() const {
  return _internal_cc_size();
}
inline void EmailTask::clear_cc() {
  _impl_.cc_.Clear();
}
inline std::string* EmailTask::add_cc() {
  std::string* _s = _internal_add_cc();
  // @@protoc_insertion_point(field_add_mutable:palm.plugins.nut.v1.EmailTask.cc)
  return _s;
}
inline const std::string& EmailTask::_internal_cc(int index) const {
  return _impl_.cc_.Get(index);
}
inline const std::string& EmailTask::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.cc)
  return _internal_cc(index);
}
inline std::string* EmailTask::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.cc)
  return _impl_.cc_.Mutable(index);
}
inline void EmailTask::set_cc(int index, const std::string& value) {
  _impl_.cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.cc)
}
inline void EmailTask::set_cc(int index, std::string&& value) {
  _impl_.cc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.cc)
}
inline void EmailTask::set_cc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.plugins.nut.v1.EmailTask.cc)
}
inline void EmailTask::set_cc(int index, const char* value, size_t size) {
  _impl_.cc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.plugins.nut.v1.EmailTask.cc)
}
inline std::string* EmailTask::_internal_add_cc() {
  return _impl_.cc_.Add();
}
inline void EmailTask::add_cc(const std::string& value) {
  _impl_.cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.EmailTask.cc)
}
inline void EmailTask::add_cc(std::string&& value) {
  _impl_.cc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.EmailTask.cc)
}
inline void EmailTask::add_cc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.plugins.nut.v1.EmailTask.cc)
}
inline void EmailTask::add_cc(const char* value, size_t size) {
  _impl_.cc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.plugins.nut.v1.EmailTask.cc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EmailTask::cc() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.EmailTask.cc)
  return _impl_.cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EmailTask::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.EmailTask.cc)
  return &_impl_.cc_;
}

// repeated string bcc = 13;
inline int EmailTask::_internal_bcc_size() const {
  return _impl_.bcc_.size();
}
inline int EmailTask::bcc_size() const {
  return _internal_bcc_size();
}
inline void EmailTask::clear_bcc() {
  _impl_.bcc_.Clear();
}
inline std::string* EmailTask::add_bcc() {
  std::string* _s = _internal_add_bcc();
  // @@protoc_insertion_point(field_add_mutable:palm.plugins.nut.v1.EmailTask.bcc)
  return _s;
}
inline const std::string& EmailTask::_internal_bcc(int index) const {
  return _impl_.bcc_.Get(index);
}
inline const std::string& EmailTask::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.bcc)
  return _internal_bcc(index);
}
inline std::string* EmailTask::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.bcc)
  return _impl_.bcc_.Mutable(index);
}
inline void EmailTask::set_bcc(int index, const std::string& value) {
  _impl_.bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.bcc)
}
inline void EmailTask::set_bcc(int index, std::string&& value) {
  _impl_.bcc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.EmailTask.bcc)
}
inline void EmailTask::set_bcc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.plugins.nut.v1.EmailTask.bcc)
}
inline void EmailTask::set_bcc(int index, const char* value, size_t size) {
  _impl_.bcc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.plugins.nut.v1.EmailTask.bcc)
}
inline std::string* EmailTask::_internal_add_bcc() {
  return _impl_.bcc_.Add();
}
inline void EmailTask::add_bcc(const std::string& value) {
  _impl_.bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.EmailTask.bcc)
}
inline void EmailTask::add_bcc(std::string&& value) {
  _impl_.bcc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.EmailTask.bcc)
}
inline void EmailTask::add_bcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.plugins.nut.v1.EmailTask.bcc)
}
inline void EmailTask::add_bcc(const char* value, size_t size) {
  _impl_.bcc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.plugins.nut.v1.EmailTask.bcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EmailTask::bcc() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.EmailTask.bcc)
  return _impl_.bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EmailTask::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.EmailTask.bcc)
  return &_impl_.bcc_;
}

// repeated .palm.plugins.nut.v1.EmailTask.Attachment attachments = 21;
inline int EmailTask::_internal_attachments_size() const {
  return _impl_.attachments_.size();
}
inline int EmailTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void EmailTask::clear_attachments() {
  _impl_.attachments_.Clear();
}
inline ::palm::plugins::nut::v1::EmailTask_Attachment* EmailTask::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.EmailTask.attachments)
  return _impl_.attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::EmailTask_Attachment >*
EmailTask::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.EmailTask.attachments)
  return &_impl_.attachments_;
}
inline const ::palm::plugins::nut::v1::EmailTask_Attachment& EmailTask::_internal_attachments(int index) const {
  return _impl_.attachments_.Get(index);
}
inline const ::palm::plugins::nut::v1::EmailTask_Attachment& EmailTask::attachments(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.EmailTask.attachments)
  return _internal_attachments(index);
}
inline ::palm::plugins::nut::v1::EmailTask_Attachment* EmailTask::_internal_add_attachments() {
  return _impl_.attachments_.Add();
}
inline ::palm::plugins::nut::v1::EmailTask_Attachment* EmailTask::add_attachments() {
  ::palm::plugins::nut::v1::EmailTask_Attachment* _add = _internal_add_attachments();
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.EmailTask.attachments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::EmailTask_Attachment >&
EmailTask::attachments() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.EmailTask.attachments)
  return _impl_.attachments_;
}

// -------------------------------------------------------------------

// SmtpProfile

// string host = 1;
inline void SmtpProfile::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& SmtpProfile::host() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SmtpProfile.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SmtpProfile.host)
}
inline std::string* SmtpProfile::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SmtpProfile.host)
  return _s;
}
inline const std::string& SmtpProfile::_internal_host() const {
  return _impl_.host_.Get();
}
inline void SmtpProfile::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_host() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SmtpProfile.host)
  return _impl_.host_.Release();
}
inline void SmtpProfile::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SmtpProfile.host)
}

// uint32 port = 2;
inline void SmtpProfile::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t SmtpProfile::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t SmtpProfile::port() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SmtpProfile.port)
  return _internal_port();
}
inline void SmtpProfile::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void SmtpProfile::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SmtpProfile.port)
}

// string user = 3;
inline void SmtpProfile::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& SmtpProfile::user() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SmtpProfile.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SmtpProfile.user)
}
inline std::string* SmtpProfile::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SmtpProfile.user)
  return _s;
}
inline const std::string& SmtpProfile::_internal_user() const {
  return _impl_.user_.Get();
}
inline void SmtpProfile::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_user() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SmtpProfile.user)
  return _impl_.user_.Release();
}
inline void SmtpProfile::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SmtpProfile.user)
}

// string password = 4;
inline void SmtpProfile::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& SmtpProfile::password() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SmtpProfile.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SmtpProfile.password)
}
inline std::string* SmtpProfile::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SmtpProfile.password)
  return _s;
}
inline const std::string& SmtpProfile::_internal_password() const {
  return _impl_.password_.Get();
}
inline void SmtpProfile::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_password() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SmtpProfile.password)
  return _impl_.password_.Release();
}
inline void SmtpProfile::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SmtpProfile.password)
}

// string cc = 5;
inline void SmtpProfile::clear_cc() {
  _impl_.cc_.ClearToEmpty();
}
inline const std::string& SmtpProfile::cc() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SmtpProfile.cc)
  return _internal_cc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_cc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SmtpProfile.cc)
}
inline std::string* SmtpProfile::mutable_cc() {
  std::string* _s = _internal_mutable_cc();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SmtpProfile.cc)
  return _s;
}
inline const std::string& SmtpProfile::_internal_cc() const {
  return _impl_.cc_.Get();
}
inline void SmtpProfile::_internal_set_cc(const std::string& value) {
  
  _impl_.cc_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_cc() {
  
  return _impl_.cc_.Mutable(GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_cc() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SmtpProfile.cc)
  return _impl_.cc_.Release();
}
inline void SmtpProfile::set_allocated_cc(std::string* cc) {
  if (cc != nullptr) {
    
  } else {
    
  }
  _impl_.cc_.SetAllocated(cc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cc_.IsDefault()) {
    _impl_.cc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SmtpProfile.cc)
}

// string bcc = 6;
inline void SmtpProfile::clear_bcc() {
  _impl_.bcc_.ClearToEmpty();
}
inline const std::string& SmtpProfile::bcc() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SmtpProfile.bcc)
  return _internal_bcc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_bcc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bcc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SmtpProfile.bcc)
}
inline std::string* SmtpProfile::mutable_bcc() {
  std::string* _s = _internal_mutable_bcc();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SmtpProfile.bcc)
  return _s;
}
inline const std::string& SmtpProfile::_internal_bcc() const {
  return _impl_.bcc_.Get();
}
inline void SmtpProfile::_internal_set_bcc(const std::string& value) {
  
  _impl_.bcc_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_bcc() {
  
  return _impl_.bcc_.Mutable(GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_bcc() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SmtpProfile.bcc)
  return _impl_.bcc_.Release();
}
inline void SmtpProfile::set_allocated_bcc(std::string* bcc) {
  if (bcc != nullptr) {
    
  } else {
    
  }
  _impl_.bcc_.SetAllocated(bcc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bcc_.IsDefault()) {
    _impl_.bcc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SmtpProfile.bcc)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Database

// string name = 1;
inline void SiteStatusResponse_Database::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Database::name() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Database.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_Database::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Database.name)
}
inline std::string* SiteStatusResponse_Database::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Database.name)
  return _s;
}
inline const std::string& SiteStatusResponse_Database::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SiteStatusResponse_Database::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::release_name() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.Database.name)
  return _impl_.name_.Release();
}
inline void SiteStatusResponse_Database::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.Database.name)
}

// string size = 2;
inline void SiteStatusResponse_Database::clear_size() {
  _impl_.size_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Database::size() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Database.size)
  return _internal_size();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_Database::set_size(ArgT0&& arg0, ArgT... args) {
 
 _impl_.size_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Database.size)
}
inline std::string* SiteStatusResponse_Database::mutable_size() {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Database.size)
  return _s;
}
inline const std::string& SiteStatusResponse_Database::_internal_size() const {
  return _impl_.size_.Get();
}
inline void SiteStatusResponse_Database::_internal_set_size(const std::string& value) {
  
  _impl_.size_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::_internal_mutable_size() {
  
  return _impl_.size_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::release_size() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.Database.size)
  return _impl_.size_.Release();
}
inline void SiteStatusResponse_Database::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    
  } else {
    
  }
  _impl_.size_.SetAllocated(size, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.size_.IsDefault()) {
    _impl_.size_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.Database.size)
}

// -------------------------------------------------------------------

// SiteStatusResponse_PostgreSql

// string version = 1;
inline void SiteStatusResponse_PostgreSql::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_PostgreSql::version() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_PostgreSql::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version)
}
inline std::string* SiteStatusResponse_PostgreSql::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version)
  return _s;
}
inline const std::string& SiteStatusResponse_PostgreSql::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SiteStatusResponse_PostgreSql::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_PostgreSql::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_PostgreSql::release_version() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version)
  return _impl_.version_.Release();
}
inline void SiteStatusResponse_PostgreSql::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.version)
}

// .google.protobuf.Timestamp now = 2;
inline bool SiteStatusResponse_PostgreSql::_internal_has_now() const {
  return this != internal_default_instance() && _impl_.now_ != nullptr;
}
inline bool SiteStatusResponse_PostgreSql::has_now() const {
  return _internal_has_now();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SiteStatusResponse_PostgreSql::_internal_now() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.now_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SiteStatusResponse_PostgreSql::now() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.now)
  return _internal_now();
}
inline void SiteStatusResponse_PostgreSql::unsafe_arena_set_allocated_now(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* now) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  _impl_.now_ = now;
  if (now) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.now)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::release_now() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::unsafe_arena_release_now() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.now)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::_internal_mutable_now() {
  
  if (_impl_.now_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.now_ = p;
  }
  return _impl_.now_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::mutable_now() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_now();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.now)
  return _msg;
}
inline void SiteStatusResponse_PostgreSql::set_allocated_now(::PROTOBUF_NAMESPACE_ID::Timestamp* now) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  if (now) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(now));
    if (message_arena != submessage_arena) {
      now = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.now_ = now;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.now)
}

// repeated .palm.plugins.nut.v1.SiteStatusResponse.Database databases = 9;
inline int SiteStatusResponse_PostgreSql::_internal_databases_size() const {
  return _impl_.databases_.size();
}
inline int SiteStatusResponse_PostgreSql::databases_size() const {
  return _internal_databases_size();
}
inline void SiteStatusResponse_PostgreSql::clear_databases() {
  _impl_.databases_.Clear();
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Database* SiteStatusResponse_PostgreSql::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _impl_.databases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Database >*
SiteStatusResponse_PostgreSql::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return &_impl_.databases_;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Database& SiteStatusResponse_PostgreSql::_internal_databases(int index) const {
  return _impl_.databases_.Get(index);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Database& SiteStatusResponse_PostgreSql::databases(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _internal_databases(index);
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Database* SiteStatusResponse_PostgreSql::_internal_add_databases() {
  return _impl_.databases_.Add();
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Database* SiteStatusResponse_PostgreSql::add_databases() {
  ::palm::plugins::nut::v1::SiteStatusResponse_Database* _add = _internal_add_databases();
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Database >&
SiteStatusResponse_PostgreSql::databases() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _impl_.databases_;
}

// -------------------------------------------------------------------

// SiteStatusResponse_MySql

// uint64 size = 1;
inline void SiteStatusResponse_MySql::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t SiteStatusResponse_MySql::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t SiteStatusResponse_MySql::size() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.MySql.size)
  return _internal_size();
}
inline void SiteStatusResponse_MySql::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void SiteStatusResponse_MySql::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.MySql.size)
}

// string version = 2;
inline void SiteStatusResponse_MySql::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_MySql::version() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.MySql.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_MySql::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.MySql.version)
}
inline std::string* SiteStatusResponse_MySql::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.MySql.version)
  return _s;
}
inline const std::string& SiteStatusResponse_MySql::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SiteStatusResponse_MySql::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_MySql::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_MySql::release_version() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.MySql.version)
  return _impl_.version_.Release();
}
inline void SiteStatusResponse_MySql::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.MySql.version)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Redis_Item

// string key = 1;
inline void SiteStatusResponse_Redis_Item::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Redis_Item::key() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_Redis_Item::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key)
}
inline std::string* SiteStatusResponse_Redis_Item::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key)
  return _s;
}
inline const std::string& SiteStatusResponse_Redis_Item::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SiteStatusResponse_Redis_Item::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis_Item::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis_Item::release_key() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key)
  return _impl_.key_.Release();
}
inline void SiteStatusResponse_Redis_Item::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.key)
}

// int64 ttl = 2;
inline void SiteStatusResponse_Redis_Item::clear_ttl() {
  _impl_.ttl_ = int64_t{0};
}
inline int64_t SiteStatusResponse_Redis_Item::_internal_ttl() const {
  return _impl_.ttl_;
}
inline int64_t SiteStatusResponse_Redis_Item::ttl() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.ttl)
  return _internal_ttl();
}
inline void SiteStatusResponse_Redis_Item::_internal_set_ttl(int64_t value) {
  
  _impl_.ttl_ = value;
}
inline void SiteStatusResponse_Redis_Item::set_ttl(int64_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Redis.Item.ttl)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Redis

// string info = 1;
inline void SiteStatusResponse_Redis::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Redis::info() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Redis.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_Redis::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Redis.info)
}
inline std::string* SiteStatusResponse_Redis::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Redis.info)
  return _s;
}
inline const std::string& SiteStatusResponse_Redis::_internal_info() const {
  return _impl_.info_.Get();
}
inline void SiteStatusResponse_Redis::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis::release_info() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.Redis.info)
  return _impl_.info_.Release();
}
inline void SiteStatusResponse_Redis::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.Redis.info)
}

// repeated .palm.plugins.nut.v1.SiteStatusResponse.Redis.Item items = 2;
inline int SiteStatusResponse_Redis::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int SiteStatusResponse_Redis::items_size() const {
  return _internal_items_size();
}
inline void SiteStatusResponse_Redis::clear_items() {
  _impl_.items_.Clear();
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* SiteStatusResponse_Redis::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Redis.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >*
SiteStatusResponse_Redis::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteStatusResponse.Redis.items)
  return &_impl_.items_;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item& SiteStatusResponse_Redis::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item& SiteStatusResponse_Redis::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Redis.items)
  return _internal_items(index);
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* SiteStatusResponse_Redis::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* SiteStatusResponse_Redis::add_items() {
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteStatusResponse.Redis.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Redis_Item >&
SiteStatusResponse_Redis::items() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteStatusResponse.Redis.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// SiteStatusResponse_RabbitMq

// string protocol = 1;
inline void SiteStatusResponse_RabbitMq::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_RabbitMq::protocol() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_RabbitMq::set_protocol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protocol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol)
}
inline std::string* SiteStatusResponse_RabbitMq::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol)
  return _s;
}
inline const std::string& SiteStatusResponse_RabbitMq::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void SiteStatusResponse_RabbitMq::_internal_set_protocol(const std::string& value) {
  
  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_RabbitMq::_internal_mutable_protocol() {
  
  return _impl_.protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_RabbitMq::release_protocol() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol)
  return _impl_.protocol_.Release();
}
inline void SiteStatusResponse_RabbitMq::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  _impl_.protocol_.SetAllocated(protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.RabbitMq.protocol)
}

// -------------------------------------------------------------------

// SiteStatusResponse_OpenSearch

// string url = 1;
inline void SiteStatusResponse_OpenSearch::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_OpenSearch::url() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_OpenSearch::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url)
}
inline std::string* SiteStatusResponse_OpenSearch::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url)
  return _s;
}
inline const std::string& SiteStatusResponse_OpenSearch::_internal_url() const {
  return _impl_.url_.Get();
}
inline void SiteStatusResponse_OpenSearch::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::release_url() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url)
  return _impl_.url_.Release();
}
inline void SiteStatusResponse_OpenSearch::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.url)
}

// string info = 2;
inline void SiteStatusResponse_OpenSearch::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_OpenSearch::info() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_OpenSearch::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info)
}
inline std::string* SiteStatusResponse_OpenSearch::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info)
  return _s;
}
inline const std::string& SiteStatusResponse_OpenSearch::_internal_info() const {
  return _impl_.info_.Get();
}
inline void SiteStatusResponse_OpenSearch::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::release_info() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info)
  return _impl_.info_.Release();
}
inline void SiteStatusResponse_OpenSearch::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.OpenSearch.info)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Health

// string name = 1;
inline void SiteStatusResponse_Health::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Health::name() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Health.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_Health::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Health.name)
}
inline std::string* SiteStatusResponse_Health::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Health.name)
  return _s;
}
inline const std::string& SiteStatusResponse_Health::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SiteStatusResponse_Health::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::release_name() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.Health.name)
  return _impl_.name_.Release();
}
inline void SiteStatusResponse_Health::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.Health.name)
}

// string status = 2;
inline void SiteStatusResponse_Health::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Health::status() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.Health.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_Health::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.Health.status)
}
inline std::string* SiteStatusResponse_Health::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.Health.status)
  return _s;
}
inline const std::string& SiteStatusResponse_Health::_internal_status() const {
  return _impl_.status_.Get();
}
inline void SiteStatusResponse_Health::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::release_status() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.Health.status)
  return _impl_.status_.Release();
}
inline void SiteStatusResponse_Health::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.Health.status)
}

// -------------------------------------------------------------------

// SiteStatusResponse_System

// string version = 1;
inline void SiteStatusResponse_System::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::version() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.version)
}
inline std::string* SiteStatusResponse_System::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.version)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SiteStatusResponse_System::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_version() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.version)
  return _impl_.version_.Release();
}
inline void SiteStatusResponse_System::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.version)
}

// string cpu = 2;
inline void SiteStatusResponse_System::clear_cpu() {
  _impl_.cpu_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::cpu() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.cpu)
  return _internal_cpu();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_cpu(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cpu_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.cpu)
}
inline std::string* SiteStatusResponse_System::mutable_cpu() {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.cpu)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_cpu() const {
  return _impl_.cpu_.Get();
}
inline void SiteStatusResponse_System::_internal_set_cpu(const std::string& value) {
  
  _impl_.cpu_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_cpu() {
  
  return _impl_.cpu_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_cpu() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.cpu)
  return _impl_.cpu_.Release();
}
inline void SiteStatusResponse_System::set_allocated_cpu(std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  _impl_.cpu_.SetAllocated(cpu, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpu_.IsDefault()) {
    _impl_.cpu_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.cpu)
}

// string memory = 3;
inline void SiteStatusResponse_System::clear_memory() {
  _impl_.memory_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::memory() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.memory)
  return _internal_memory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_memory(ArgT0&& arg0, ArgT... args) {
 
 _impl_.memory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.memory)
}
inline std::string* SiteStatusResponse_System::mutable_memory() {
  std::string* _s = _internal_mutable_memory();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.memory)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_memory() const {
  return _impl_.memory_.Get();
}
inline void SiteStatusResponse_System::_internal_set_memory(const std::string& value) {
  
  _impl_.memory_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_memory() {
  
  return _impl_.memory_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_memory() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.memory)
  return _impl_.memory_.Release();
}
inline void SiteStatusResponse_System::set_allocated_memory(std::string* memory) {
  if (memory != nullptr) {
    
  } else {
    
  }
  _impl_.memory_.SetAllocated(memory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.memory_.IsDefault()) {
    _impl_.memory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.memory)
}

// string boot = 4;
inline void SiteStatusResponse_System::clear_boot() {
  _impl_.boot_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::boot() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.boot)
  return _internal_boot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_boot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.boot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.boot)
}
inline std::string* SiteStatusResponse_System::mutable_boot() {
  std::string* _s = _internal_mutable_boot();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.boot)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_boot() const {
  return _impl_.boot_.Get();
}
inline void SiteStatusResponse_System::_internal_set_boot(const std::string& value) {
  
  _impl_.boot_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_boot() {
  
  return _impl_.boot_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_boot() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.boot)
  return _impl_.boot_.Release();
}
inline void SiteStatusResponse_System::set_allocated_boot(std::string* boot) {
  if (boot != nullptr) {
    
  } else {
    
  }
  _impl_.boot_.SetAllocated(boot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.boot_.IsDefault()) {
    _impl_.boot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.boot)
}

// string disk = 5;
inline void SiteStatusResponse_System::clear_disk() {
  _impl_.disk_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::disk() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.disk)
  return _internal_disk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_disk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.disk_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.disk)
}
inline std::string* SiteStatusResponse_System::mutable_disk() {
  std::string* _s = _internal_mutable_disk();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.disk)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_disk() const {
  return _impl_.disk_.Get();
}
inline void SiteStatusResponse_System::_internal_set_disk(const std::string& value) {
  
  _impl_.disk_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_disk() {
  
  return _impl_.disk_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_disk() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.disk)
  return _impl_.disk_.Release();
}
inline void SiteStatusResponse_System::set_allocated_disk(std::string* disk) {
  if (disk != nullptr) {
    
  } else {
    
  }
  _impl_.disk_.SetAllocated(disk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.disk_.IsDefault()) {
    _impl_.disk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.disk)
}

// string load = 6;
inline void SiteStatusResponse_System::clear_load() {
  _impl_.load_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::load() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.load)
  return _internal_load();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_load(ArgT0&& arg0, ArgT... args) {
 
 _impl_.load_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.load)
}
inline std::string* SiteStatusResponse_System::mutable_load() {
  std::string* _s = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.load)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_load() const {
  return _impl_.load_.Get();
}
inline void SiteStatusResponse_System::_internal_set_load(const std::string& value) {
  
  _impl_.load_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_load() {
  
  return _impl_.load_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_load() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.load)
  return _impl_.load_.Release();
}
inline void SiteStatusResponse_System::set_allocated_load(std::string* load) {
  if (load != nullptr) {
    
  } else {
    
  }
  _impl_.load_.SetAllocated(load, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.load_.IsDefault()) {
    _impl_.load_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.load)
}

// string fs = 7;
inline void SiteStatusResponse_System::clear_fs() {
  _impl_.fs_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::fs() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.fs)
  return _internal_fs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_fs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.fs)
}
inline std::string* SiteStatusResponse_System::mutable_fs() {
  std::string* _s = _internal_mutable_fs();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.fs)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_fs() const {
  return _impl_.fs_.Get();
}
inline void SiteStatusResponse_System::_internal_set_fs(const std::string& value) {
  
  _impl_.fs_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_fs() {
  
  return _impl_.fs_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_fs() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.fs)
  return _impl_.fs_.Release();
}
inline void SiteStatusResponse_System::set_allocated_fs(std::string* fs) {
  if (fs != nullptr) {
    
  } else {
    
  }
  _impl_.fs_.SetAllocated(fs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fs_.IsDefault()) {
    _impl_.fs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.fs)
}

// string swap = 8;
inline void SiteStatusResponse_System::clear_swap() {
  _impl_.swap_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::swap() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.swap)
  return _internal_swap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_swap(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swap_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.swap)
}
inline std::string* SiteStatusResponse_System::mutable_swap() {
  std::string* _s = _internal_mutable_swap();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.swap)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_swap() const {
  return _impl_.swap_.Get();
}
inline void SiteStatusResponse_System::_internal_set_swap(const std::string& value) {
  
  _impl_.swap_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_swap() {
  
  return _impl_.swap_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_swap() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.swap)
  return _impl_.swap_.Release();
}
inline void SiteStatusResponse_System::set_allocated_swap(std::string* swap) {
  if (swap != nullptr) {
    
  } else {
    
  }
  _impl_.swap_.SetAllocated(swap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swap_.IsDefault()) {
    _impl_.swap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.swap)
}

// string uptime = 9;
inline void SiteStatusResponse_System::clear_uptime() {
  _impl_.uptime_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::uptime() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.uptime)
  return _internal_uptime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_uptime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uptime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.uptime)
}
inline std::string* SiteStatusResponse_System::mutable_uptime() {
  std::string* _s = _internal_mutable_uptime();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.uptime)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_uptime() const {
  return _impl_.uptime_.Get();
}
inline void SiteStatusResponse_System::_internal_set_uptime(const std::string& value) {
  
  _impl_.uptime_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_uptime() {
  
  return _impl_.uptime_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_uptime() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.uptime)
  return _impl_.uptime_.Release();
}
inline void SiteStatusResponse_System::set_allocated_uptime(std::string* uptime) {
  if (uptime != nullptr) {
    
  } else {
    
  }
  _impl_.uptime_.SetAllocated(uptime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uptime_.IsDefault()) {
    _impl_.uptime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.uptime)
}

// string network = 10;
inline void SiteStatusResponse_System::clear_network() {
  _impl_.network_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::network() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.System.network)
  return _internal_network();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteStatusResponse_System::set_network(ArgT0&& arg0, ArgT... args) {
 
 _impl_.network_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.plugins.nut.v1.SiteStatusResponse.System.network)
}
inline std::string* SiteStatusResponse_System::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.System.network)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_network() const {
  return _impl_.network_.Get();
}
inline void SiteStatusResponse_System::_internal_set_network(const std::string& value) {
  
  _impl_.network_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_network() {
  
  return _impl_.network_.Mutable(GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_network() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.System.network)
  return _impl_.network_.Release();
}
inline void SiteStatusResponse_System::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  _impl_.network_.SetAllocated(network, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.network_.IsDefault()) {
    _impl_.network_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.System.network)
}

// -------------------------------------------------------------------

// SiteStatusResponse

// .palm.plugins.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
inline bool SiteStatusResponse::_internal_has_postgresql() const {
  return this != internal_default_instance() && _impl_.postgresql_ != nullptr;
}
inline bool SiteStatusResponse::has_postgresql() const {
  return _internal_has_postgresql();
}
inline void SiteStatusResponse::clear_postgresql() {
  if (GetArenaForAllocation() == nullptr && _impl_.postgresql_ != nullptr) {
    delete _impl_.postgresql_;
  }
  _impl_.postgresql_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql& SiteStatusResponse::_internal_postgresql() const {
  const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* p = _impl_.postgresql_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql&>(
      ::palm::plugins::nut::v1::_SiteStatusResponse_PostgreSql_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql& SiteStatusResponse::postgresql() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.postgresql)
  return _internal_postgresql();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_postgresql(
    ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* postgresql) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postgresql_);
  }
  _impl_.postgresql_ = postgresql;
  if (postgresql) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.postgresql)
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::release_postgresql() {
  
  ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* temp = _impl_.postgresql_;
  _impl_.postgresql_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::unsafe_arena_release_postgresql() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.postgresql)
  
  ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* temp = _impl_.postgresql_;
  _impl_.postgresql_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::_internal_mutable_postgresql() {
  
  if (_impl_.postgresql_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql>(GetArenaForAllocation());
    _impl_.postgresql_ = p;
  }
  return _impl_.postgresql_;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::mutable_postgresql() {
  ::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* _msg = _internal_mutable_postgresql();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.postgresql)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_postgresql(::palm::plugins::nut::v1::SiteStatusResponse_PostgreSql* postgresql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.postgresql_;
  }
  if (postgresql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(postgresql);
    if (message_arena != submessage_arena) {
      postgresql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postgresql, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.postgresql_ = postgresql;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.postgresql)
}

// .palm.plugins.nut.v1.SiteStatusResponse.MySql mysql = 2;
inline bool SiteStatusResponse::_internal_has_mysql() const {
  return this != internal_default_instance() && _impl_.mysql_ != nullptr;
}
inline bool SiteStatusResponse::has_mysql() const {
  return _internal_has_mysql();
}
inline void SiteStatusResponse::clear_mysql() {
  if (GetArenaForAllocation() == nullptr && _impl_.mysql_ != nullptr) {
    delete _impl_.mysql_;
  }
  _impl_.mysql_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_MySql& SiteStatusResponse::_internal_mysql() const {
  const ::palm::plugins::nut::v1::SiteStatusResponse_MySql* p = _impl_.mysql_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteStatusResponse_MySql&>(
      ::palm::plugins::nut::v1::_SiteStatusResponse_MySql_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_MySql& SiteStatusResponse::mysql() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.mysql)
  return _internal_mysql();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_mysql(
    ::palm::plugins::nut::v1::SiteStatusResponse_MySql* mysql) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mysql_);
  }
  _impl_.mysql_ = mysql;
  if (mysql) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.mysql)
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::release_mysql() {
  
  ::palm::plugins::nut::v1::SiteStatusResponse_MySql* temp = _impl_.mysql_;
  _impl_.mysql_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::unsafe_arena_release_mysql() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.mysql)
  
  ::palm::plugins::nut::v1::SiteStatusResponse_MySql* temp = _impl_.mysql_;
  _impl_.mysql_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::_internal_mutable_mysql() {
  
  if (_impl_.mysql_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_MySql>(GetArenaForAllocation());
    _impl_.mysql_ = p;
  }
  return _impl_.mysql_;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::mutable_mysql() {
  ::palm::plugins::nut::v1::SiteStatusResponse_MySql* _msg = _internal_mutable_mysql();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.mysql)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_mysql(::palm::plugins::nut::v1::SiteStatusResponse_MySql* mysql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mysql_;
  }
  if (mysql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mysql);
    if (message_arena != submessage_arena) {
      mysql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.mysql)
}

// .palm.plugins.nut.v1.SiteStatusResponse.Redis redis = 3;
inline bool SiteStatusResponse::_internal_has_redis() const {
  return this != internal_default_instance() && _impl_.redis_ != nullptr;
}
inline bool SiteStatusResponse::has_redis() const {
  return _internal_has_redis();
}
inline void SiteStatusResponse::clear_redis() {
  if (GetArenaForAllocation() == nullptr && _impl_.redis_ != nullptr) {
    delete _impl_.redis_;
  }
  _impl_.redis_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Redis& SiteStatusResponse::_internal_redis() const {
  const ::palm::plugins::nut::v1::SiteStatusResponse_Redis* p = _impl_.redis_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteStatusResponse_Redis&>(
      ::palm::plugins::nut::v1::_SiteStatusResponse_Redis_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Redis& SiteStatusResponse::redis() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.redis)
  return _internal_redis();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_redis(
    ::palm::plugins::nut::v1::SiteStatusResponse_Redis* redis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redis_);
  }
  _impl_.redis_ = redis;
  if (redis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.redis)
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::release_redis() {
  
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis* temp = _impl_.redis_;
  _impl_.redis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::unsafe_arena_release_redis() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.redis)
  
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis* temp = _impl_.redis_;
  _impl_.redis_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::_internal_mutable_redis() {
  
  if (_impl_.redis_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_Redis>(GetArenaForAllocation());
    _impl_.redis_ = p;
  }
  return _impl_.redis_;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::mutable_redis() {
  ::palm::plugins::nut::v1::SiteStatusResponse_Redis* _msg = _internal_mutable_redis();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.redis)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_redis(::palm::plugins::nut::v1::SiteStatusResponse_Redis* redis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.redis_;
  }
  if (redis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(redis);
    if (message_arena != submessage_arena) {
      redis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.redis_ = redis;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.redis)
}

// .palm.plugins.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
inline bool SiteStatusResponse::_internal_has_rabbitmq() const {
  return this != internal_default_instance() && _impl_.rabbitmq_ != nullptr;
}
inline bool SiteStatusResponse::has_rabbitmq() const {
  return _internal_has_rabbitmq();
}
inline void SiteStatusResponse::clear_rabbitmq() {
  if (GetArenaForAllocation() == nullptr && _impl_.rabbitmq_ != nullptr) {
    delete _impl_.rabbitmq_;
  }
  _impl_.rabbitmq_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq& SiteStatusResponse::_internal_rabbitmq() const {
  const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* p = _impl_.rabbitmq_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq&>(
      ::palm::plugins::nut::v1::_SiteStatusResponse_RabbitMq_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq& SiteStatusResponse::rabbitmq() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.rabbitmq)
  return _internal_rabbitmq();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_rabbitmq(
    ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rabbitmq_);
  }
  _impl_.rabbitmq_ = rabbitmq;
  if (rabbitmq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.rabbitmq)
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::release_rabbitmq() {
  
  ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* temp = _impl_.rabbitmq_;
  _impl_.rabbitmq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::unsafe_arena_release_rabbitmq() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.rabbitmq)
  
  ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* temp = _impl_.rabbitmq_;
  _impl_.rabbitmq_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::_internal_mutable_rabbitmq() {
  
  if (_impl_.rabbitmq_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq>(GetArenaForAllocation());
    _impl_.rabbitmq_ = p;
  }
  return _impl_.rabbitmq_;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::mutable_rabbitmq() {
  ::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* _msg = _internal_mutable_rabbitmq();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.rabbitmq)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_rabbitmq(::palm::plugins::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rabbitmq_;
  }
  if (rabbitmq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rabbitmq);
    if (message_arena != submessage_arena) {
      rabbitmq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rabbitmq, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rabbitmq_ = rabbitmq;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.rabbitmq)
}

// .palm.plugins.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
inline bool SiteStatusResponse::_internal_has_opensearch() const {
  return this != internal_default_instance() && _impl_.opensearch_ != nullptr;
}
inline bool SiteStatusResponse::has_opensearch() const {
  return _internal_has_opensearch();
}
inline void SiteStatusResponse::clear_opensearch() {
  if (GetArenaForAllocation() == nullptr && _impl_.opensearch_ != nullptr) {
    delete _impl_.opensearch_;
  }
  _impl_.opensearch_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch& SiteStatusResponse::_internal_opensearch() const {
  const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* p = _impl_.opensearch_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch&>(
      ::palm::plugins::nut::v1::_SiteStatusResponse_OpenSearch_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch& SiteStatusResponse::opensearch() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.opensearch)
  return _internal_opensearch();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_opensearch(
    ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* opensearch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.opensearch_);
  }
  _impl_.opensearch_ = opensearch;
  if (opensearch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.opensearch)
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::release_opensearch() {
  
  ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* temp = _impl_.opensearch_;
  _impl_.opensearch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::unsafe_arena_release_opensearch() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.opensearch)
  
  ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* temp = _impl_.opensearch_;
  _impl_.opensearch_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::_internal_mutable_opensearch() {
  
  if (_impl_.opensearch_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch>(GetArenaForAllocation());
    _impl_.opensearch_ = p;
  }
  return _impl_.opensearch_;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::mutable_opensearch() {
  ::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* _msg = _internal_mutable_opensearch();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.opensearch)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_opensearch(::palm::plugins::nut::v1::SiteStatusResponse_OpenSearch* opensearch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.opensearch_;
  }
  if (opensearch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(opensearch);
    if (message_arena != submessage_arena) {
      opensearch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opensearch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.opensearch_ = opensearch;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.opensearch)
}

// .palm.plugins.nut.v1.SiteStatusResponse.System system = 11;
inline bool SiteStatusResponse::_internal_has_system() const {
  return this != internal_default_instance() && _impl_.system_ != nullptr;
}
inline bool SiteStatusResponse::has_system() const {
  return _internal_has_system();
}
inline void SiteStatusResponse::clear_system() {
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_System& SiteStatusResponse::_internal_system() const {
  const ::palm::plugins::nut::v1::SiteStatusResponse_System* p = _impl_.system_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::plugins::nut::v1::SiteStatusResponse_System&>(
      ::palm::plugins::nut::v1::_SiteStatusResponse_System_default_instance_);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_System& SiteStatusResponse::system() const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.system)
  return _internal_system();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_system(
    ::palm::plugins::nut::v1::SiteStatusResponse_System* system) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_);
  }
  _impl_.system_ = system;
  if (system) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.system)
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_System* SiteStatusResponse::release_system() {
  
  ::palm::plugins::nut::v1::SiteStatusResponse_System* temp = _impl_.system_;
  _impl_.system_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_System* SiteStatusResponse::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_release:palm.plugins.nut.v1.SiteStatusResponse.system)
  
  ::palm::plugins::nut::v1::SiteStatusResponse_System* temp = _impl_.system_;
  _impl_.system_ = nullptr;
  return temp;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_System* SiteStatusResponse::_internal_mutable_system() {
  
  if (_impl_.system_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::plugins::nut::v1::SiteStatusResponse_System>(GetArenaForAllocation());
    _impl_.system_ = p;
  }
  return _impl_.system_;
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_System* SiteStatusResponse::mutable_system() {
  ::palm::plugins::nut::v1::SiteStatusResponse_System* _msg = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.system)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_system(::palm::plugins::nut::v1::SiteStatusResponse_System* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.system_;
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(system);
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.system_ = system;
  // @@protoc_insertion_point(field_set_allocated:palm.plugins.nut.v1.SiteStatusResponse.system)
}

// repeated .palm.plugins.nut.v1.SiteStatusResponse.Health healthes = 21;
inline int SiteStatusResponse::_internal_healthes_size() const {
  return _impl_.healthes_.size();
}
inline int SiteStatusResponse::healthes_size() const {
  return _internal_healthes_size();
}
inline void SiteStatusResponse::clear_healthes() {
  _impl_.healthes_.Clear();
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Health* SiteStatusResponse::mutable_healthes(int index) {
  // @@protoc_insertion_point(field_mutable:palm.plugins.nut.v1.SiteStatusResponse.healthes)
  return _impl_.healthes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Health >*
SiteStatusResponse::mutable_healthes() {
  // @@protoc_insertion_point(field_mutable_list:palm.plugins.nut.v1.SiteStatusResponse.healthes)
  return &_impl_.healthes_;
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Health& SiteStatusResponse::_internal_healthes(int index) const {
  return _impl_.healthes_.Get(index);
}
inline const ::palm::plugins::nut::v1::SiteStatusResponse_Health& SiteStatusResponse::healthes(int index) const {
  // @@protoc_insertion_point(field_get:palm.plugins.nut.v1.SiteStatusResponse.healthes)
  return _internal_healthes(index);
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Health* SiteStatusResponse::_internal_add_healthes() {
  return _impl_.healthes_.Add();
}
inline ::palm::plugins::nut::v1::SiteStatusResponse_Health* SiteStatusResponse::add_healthes() {
  ::palm::plugins::nut::v1::SiteStatusResponse_Health* _add = _internal_add_healthes();
  // @@protoc_insertion_point(field_add:palm.plugins.nut.v1.SiteStatusResponse.healthes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::plugins::nut::v1::SiteStatusResponse_Health >&
SiteStatusResponse::healthes() const {
  // @@protoc_insertion_point(field_list:palm.plugins.nut.v1.SiteStatusResponse.healthes)
  return _impl_.healthes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace nut
}  // namespace plugins
}  // namespace palm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::palm::plugins::nut::v1::EmailTask_ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palm::plugins::nut::v1::EmailTask_ContentType>() {
  return ::palm::plugins::nut::v1::EmailTask_ContentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
