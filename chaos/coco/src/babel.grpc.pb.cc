// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: babel.proto

#include "babel.pb.h"
#include "babel.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace palm {
namespace plugins {
namespace babel {
namespace v1 {

std::unique_ptr< Pali::Stub> Pali::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Pali::Stub> stub(new Pali::Stub(channel, options));
  return stub;
}

Pali::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

Pali::Service::Service() {
}

Pali::Service::~Service() {
}


std::unique_ptr< Tibetan::Stub> Tibetan::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tibetan::Stub> stub(new Tibetan::Stub(channel, options));
  return stub;
}

Tibetan::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

Tibetan::Service::Service() {
}

Tibetan::Service::~Service() {
}


std::unique_ptr< Sanskrit::Stub> Sanskrit::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sanskrit::Stub> stub(new Sanskrit::Stub(channel, options));
  return stub;
}

Sanskrit::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

Sanskrit::Service::Service() {
}

Sanskrit::Service::~Service() {
}


}  // namespace palm
}  // namespace plugins
}  // namespace babel
}  // namespace v1

