// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nut.proto

#include "nut.pb.h"
#include "nut.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace palm {
namespace plugins {
namespace nut {
namespace v1 {

static const char* Locale_method_names[] = {
  "/palm.plugins.nut.v1.Locale/Set",
  "/palm.plugins.nut.v1.Locale/Get",
  "/palm.plugins.nut.v1.Locale/Index",
  "/palm.plugins.nut.v1.Locale/Destroy",
};

std::unique_ptr< Locale::Stub> Locale::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Locale::Stub> stub(new Locale::Stub(channel, options));
  return stub;
}

Locale::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Set_(Locale_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Locale_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Locale_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Locale_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Locale::Stub::Set(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::LocaleSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Get(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleGetRequest& request, ::palm::plugins::nut::v1::LocaleIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::LocaleGetRequest, ::palm::plugins::nut::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Locale::Stub::async::Get(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleGetRequest* request, ::palm::plugins::nut::v1::LocaleIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::LocaleGetRequest, ::palm::plugins::nut::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Locale::Stub::async::Get(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleGetRequest* request, ::palm::plugins::nut::v1::LocaleIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::LocaleIndexResponse_Item>* Locale::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::LocaleIndexResponse_Item, ::palm::plugins::nut::v1::LocaleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::LocaleIndexResponse_Item>* Locale::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::LocaleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Index(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager& request, ::palm::plugins::nut::v1::LocaleIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::Pager, ::palm::plugins::nut::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Locale::Stub::async::Index(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager* request, ::palm::plugins::nut::v1::LocaleIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::Pager, ::palm::plugins::nut::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Locale::Stub::async::Index(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager* request, ::palm::plugins::nut::v1::LocaleIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::LocaleIndexResponse>* Locale::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::LocaleIndexResponse, ::palm::plugins::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::LocaleIndexResponse>* Locale::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Destroy(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Locale::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Locale::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

Locale::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::plugins::nut::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::LocaleSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::plugins::nut::v1::LocaleGetRequest, ::palm::plugins::nut::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::LocaleGetRequest* req,
             ::palm::plugins::nut::v1::LocaleIndexResponse_Item* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::plugins::nut::v1::Pager, ::palm::plugins::nut::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::Pager* req,
             ::palm::plugins::nut::v1::LocaleIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::plugins::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
}

Locale::Service::~Service() {
}

::grpc::Status Locale::Service::Set(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Get(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::LocaleGetRequest* request, ::palm::plugins::nut::v1::LocaleIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Index(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::Pager* request, ::palm::plugins::nut::v1::LocaleIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Destroy(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Site_method_names[] = {
  "/palm.plugins.nut.v1.Site/ClearCache",
  "/palm.plugins.nut.v1.Site/Layout",
  "/palm.plugins.nut.v1.Site/SetAuthor",
  "/palm.plugins.nut.v1.Site/SetCopyright",
  "/palm.plugins.nut.v1.Site/SetKeywords",
  "/palm.plugins.nut.v1.Site/SetInfo",
  "/palm.plugins.nut.v1.Site/SetLogo",
  "/palm.plugins.nut.v1.Site/SetAws",
  "/palm.plugins.nut.v1.Site/GetAws",
  "/palm.plugins.nut.v1.Site/TestAwsS3",
  "/palm.plugins.nut.v1.Site/SetSmtp",
  "/palm.plugins.nut.v1.Site/GetSmtp",
  "/palm.plugins.nut.v1.Site/TestSmtp",
  "/palm.plugins.nut.v1.Site/SetBing",
  "/palm.plugins.nut.v1.Site/GetBing",
  "/palm.plugins.nut.v1.Site/SetGoogle",
  "/palm.plugins.nut.v1.Site/GetGoogle",
  "/palm.plugins.nut.v1.Site/SetBaidu",
  "/palm.plugins.nut.v1.Site/GetBaidu",
  "/palm.plugins.nut.v1.Site/Status",
  "/palm.plugins.nut.v1.Site/NewLeaveWord",
  "/palm.plugins.nut.v1.Site/IndexLeaveWord",
  "/palm.plugins.nut.v1.Site/DestroyLeaveWord",
};

std::unique_ptr< Site::Stub> Site::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Site::Stub> stub(new Site::Stub(channel, options));
  return stub;
}

Site::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ClearCache_(Site_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Layout_(Site_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAuthor_(Site_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCopyright_(Site_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetKeywords_(Site_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInfo_(Site_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLogo_(Site_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAws_(Site_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAws_(Site_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestAwsS3_(Site_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSmtp_(Site_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSmtp_(Site_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestSmtp_(Site_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBing_(Site_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBing_(Site_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGoogle_(Site_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGoogle_(Site_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBaidu_(Site_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBaidu_(Site_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Site_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewLeaveWord_(Site_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IndexLeaveWord_(Site_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyLeaveWord_(Site_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Site::Stub::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearCache_, context, request, response);
}

void Site::Stub::async::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearCache_, context, request, response, std::move(f));
}

void Site::Stub::async::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncClearCacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncClearCacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::SiteLayoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Layout_, context, request, response);
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteLayoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, std::move(f));
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteLayoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteLayoutResponse>* Site::Stub::PrepareAsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::SiteLayoutResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Layout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteLayoutResponse>* Site::Stub::AsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLayoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetAuthor(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAuthor_, context, request, response);
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, std::move(f));
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteLayoutResponse_Author, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAuthor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAuthorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetCopyright(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetCopyrightRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCopyright_, context, request, response);
}

void Site::Stub::async::SetCopyright(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCopyright_, context, request, response, std::move(f));
}

void Site::Stub::async::SetCopyright(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCopyright_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetCopyrightRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetCopyrightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteSetCopyrightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCopyright_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetCopyrightRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetCopyrightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCopyrightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetKeywords(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetKeywordsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetKeywords_, context, request, response);
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, std::move(f));
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteSetKeywordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetKeywords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetKeywordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetInfo(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetInfoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInfo_, context, request, response);
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteSetInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetLogo(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetLogoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLogo_, context, request, response);
}

void Site::Stub::async::SetLogo(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLogo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetLogo(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLogo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetLogoRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetLogoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteSetLogoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLogo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetLogoRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSetLogoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLogoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetAws(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::AwsProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::AwsProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAws_, context, request, response);
}

void Site::Stub::async::SetAws(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::AwsProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::AwsProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAws_, context, request, response, std::move(f));
}

void Site::Stub::async::SetAws(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::AwsProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAws_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetAwsRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::AwsProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::AwsProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAws_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetAwsRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::AwsProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAwsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetAws(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::AwsProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::AwsProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAws_, context, request, response);
}

void Site::Stub::async::GetAws(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::AwsProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::AwsProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAws_, context, request, response, std::move(f));
}

void Site::Stub::async::GetAws(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::AwsProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAws_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::AwsProfile>* Site::Stub::PrepareAsyncGetAwsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::AwsProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAws_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::AwsProfile>* Site::Stub::AsyncGetAwsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAwsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::TestAwsS3(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::SiteAwsS3TestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteAwsS3TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestAwsS3_, context, request, response);
}

void Site::Stub::async::TestAwsS3(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteAwsS3TestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteAwsS3TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestAwsS3_, context, request, response, std::move(f));
}

void Site::Stub::async::TestAwsS3(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteAwsS3TestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestAwsS3_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteAwsS3TestResponse>* Site::Stub::PrepareAsyncTestAwsS3Raw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::SiteAwsS3TestResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestAwsS3_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteAwsS3TestResponse>* Site::Stub::AsyncTestAwsS3Raw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestAwsS3Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetSmtp(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SmtpProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSmtp_, context, request, response);
}

void Site::Stub::async::SetSmtp(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SmtpProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::SetSmtp(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SmtpProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetSmtpRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SmtpProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetSmtpRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SmtpProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::SmtpProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSmtp_, context, request, response);
}

void Site::Stub::async::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SmtpProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SmtpProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SmtpProfile>* Site::Stub::PrepareAsyncGetSmtpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SmtpProfile>* Site::Stub::AsyncGetSmtpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::TestSmtp(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSmtpTestRequst& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteSmtpTestRequst, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestSmtp_, context, request, response);
}

void Site::Stub::async::TestSmtp(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSmtpTestRequst* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteSmtpTestRequst, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::TestSmtp(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSmtpTestRequst* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncTestSmtpRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSmtpTestRequst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteSmtpTestRequst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncTestSmtpRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteSmtpTestRequst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetBing(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BingProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::BingProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBing_, context, request, response);
}

void Site::Stub::async::SetBing(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BingProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::BingProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBing_, context, request, response, std::move(f));
}

void Site::Stub::async::SetBing(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BingProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetBingRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BingProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::BingProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetBingRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BingProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetBing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::BingProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::BingProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBing_, context, request, response);
}

void Site::Stub::async::GetBing(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::BingProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::BingProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBing_, context, request, response, std::move(f));
}

void Site::Stub::async::GetBing(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::BingProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::BingProfile>* Site::Stub::PrepareAsyncGetBingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::BingProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::BingProfile>* Site::Stub::AsyncGetBingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetGoogle(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::GoogleProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGoogle_, context, request, response);
}

void Site::Stub::async::SetGoogle(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::GoogleProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::SetGoogle(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::GoogleProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetGoogleRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::GoogleProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetGoogleRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::GoogleProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::GoogleProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGoogle_, context, request, response);
}

void Site::Stub::async::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::GoogleProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::GoogleProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::GoogleProfile>* Site::Stub::PrepareAsyncGetGoogleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::GoogleProfile>* Site::Stub::AsyncGetGoogleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetBaidu(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BaiduProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBaidu_, context, request, response);
}

void Site::Stub::async::SetBaidu(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BaiduProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::SetBaidu(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BaiduProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetBaiduRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BaiduProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetBaiduRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::BaiduProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::BaiduProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBaidu_, context, request, response);
}

void Site::Stub::async::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::BaiduProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::BaiduProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::BaiduProfile>* Site::Stub::PrepareAsyncGetBaiduRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::BaiduProfile>* Site::Stub::AsyncGetBaiduRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::nut::v1::SiteStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteStatusResponse>* Site::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::SiteStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteStatusResponse>* Site::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::NewLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::SiteNewLeaveWordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewLeaveWord_, context, request, response);
}

void Site::Stub::async::NewLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::SiteNewLeaveWordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewLeaveWord_, context, request, response, std::move(f));
}

void Site::Stub::async::NewLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewLeaveWord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncNewLeaveWordRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteNewLeaveWordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewLeaveWord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncNewLeaveWordRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewLeaveWordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::IndexLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager& request, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::Pager, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IndexLeaveWord_, context, request, response);
}

void Site::Stub::async::IndexLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager* request, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::Pager, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexLeaveWord_, context, request, response, std::move(f));
}

void Site::Stub::async::IndexLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager* request, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexLeaveWord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse>* Site::Stub::PrepareAsyncIndexLeaveWordRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, ::palm::plugins::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IndexLeaveWord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse>* Site::Stub::AsyncIndexLeaveWordRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexLeaveWordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::DestroyLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::plugins::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyLeaveWord_, context, request, response);
}

void Site::Stub::async::DestroyLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::plugins::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyLeaveWord_, context, request, response, std::move(f));
}

void Site::Stub::async::DestroyLeaveWord(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyLeaveWord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncDestroyLeaveWordRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::plugins::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyLeaveWord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncDestroyLeaveWordRaw(::grpc::ClientContext* context, const ::palm::plugins::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyLeaveWordRaw(context, request, cq);
  result->StartCall();
  return result;
}

Site::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->ClearCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::SiteLayoutResponse* resp) {
               return service->Layout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteLayoutResponse_Author* req,
             ::google::protobuf::Empty* resp) {
               return service->SetAuthor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteSetCopyrightRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCopyright(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteSetKeywordsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetKeywords(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteSetInfoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteSetLogoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetLogo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::AwsProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::AwsProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetAws(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::AwsProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::AwsProfile* resp) {
               return service->GetAws(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteAwsS3TestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::SiteAwsS3TestResponse* resp) {
               return service->TestAwsS3(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SmtpProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::SmtpProfile* resp) {
               return service->GetSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteSmtpTestRequst, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteSmtpTestRequst* req,
             ::google::protobuf::Empty* resp) {
               return service->TestSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::BingProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::BingProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::BingProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::BingProfile* resp) {
               return service->GetBing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::GoogleProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::GoogleProfile* resp) {
               return service->GetGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::BaiduProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::BaiduProfile* resp) {
               return service->GetBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::plugins::nut::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::plugins::nut::v1::SiteStatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::SiteNewLeaveWordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->NewLeaveWord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::Pager, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::Pager* req,
             ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* resp) {
               return service->IndexLeaveWord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::plugins::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::plugins::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DestroyLeaveWord(ctx, req, resp);
             }, this)));
}

Site::Service::~Service() {
}

::grpc::Status Site::Service::ClearCache(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Layout(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteLayoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetAuthor(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetCopyright(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetKeywords(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetInfo(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetLogo(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetAws(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::AwsProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetAws(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::AwsProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::TestAwsS3(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteAwsS3TestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetSmtp(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SmtpProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetSmtp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SmtpProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::TestSmtp(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteSmtpTestRequst* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetBing(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::BingProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetBing(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::BingProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetGoogle(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::GoogleProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetGoogle(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::GoogleProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetBaidu(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::BaiduProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetBaidu(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::BaiduProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::nut::v1::SiteStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::NewLeaveWord(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::SiteNewLeaveWordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::IndexLeaveWord(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::Pager* request, ::palm::plugins::nut::v1::SiteIndexLeaveWordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::DestroyLeaveWord(::grpc::ServerContext* context, const ::palm::plugins::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace plugins
}  // namespace nut
}  // namespace v1

