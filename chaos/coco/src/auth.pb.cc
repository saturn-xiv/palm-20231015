// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace palm {
namespace plugins {
namespace auth {
namespace v1 {
constexpr UserQueryRequest::UserQueryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct UserQueryRequestDefaultTypeInternal {
  constexpr UserQueryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserQueryRequestDefaultTypeInternal() {}
  union {
    UserQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserQueryRequestDefaultTypeInternal _UserQueryRequest_default_instance_;
constexpr UserSignInRequest::UserSignInRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(nullptr)
  , ttl_(nullptr){}
struct UserSignInRequestDefaultTypeInternal {
  constexpr UserSignInRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserSignInRequestDefaultTypeInternal() {}
  union {
    UserSignInRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserSignInRequestDefaultTypeInternal _UserSignInRequest_default_instance_;
constexpr UserSignInResponse::UserSignInResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserSignInResponseDefaultTypeInternal {
  constexpr UserSignInResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserSignInResponseDefaultTypeInternal() {}
  union {
    UserSignInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
constexpr UserSignUpRequest::UserSignUpRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , home_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserSignUpRequestDefaultTypeInternal {
  constexpr UserSignUpRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserSignUpRequestDefaultTypeInternal() {}
  union {
    UserSignUpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserSignUpRequestDefaultTypeInternal _UserSignUpRequest_default_instance_;
constexpr UserEmailRequest::UserEmailRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : home_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(nullptr){}
struct UserEmailRequestDefaultTypeInternal {
  constexpr UserEmailRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserEmailRequestDefaultTypeInternal() {}
  union {
    UserEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserEmailRequestDefaultTypeInternal _UserEmailRequest_default_instance_;
constexpr UserTokenRequest::UserTokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserTokenRequestDefaultTypeInternal {
  constexpr UserTokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserTokenRequestDefaultTypeInternal() {}
  union {
    UserTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserTokenRequestDefaultTypeInternal _UserTokenRequest_default_instance_;
constexpr UserResetPasswordRequest::UserResetPasswordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserResetPasswordRequestDefaultTypeInternal {
  constexpr UserResetPasswordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserResetPasswordRequestDefaultTypeInternal() {}
  union {
    UserResetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserResetPasswordRequestDefaultTypeInternal _UserResetPasswordRequest_default_instance_;
constexpr UserSetProfileRequest::UserSetProfileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wechat_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserSetProfileRequestDefaultTypeInternal {
  constexpr UserSetProfileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserSetProfileRequestDefaultTypeInternal() {}
  union {
    UserSetProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserSetProfileRequestDefaultTypeInternal _UserSetProfileRequest_default_instance_;
constexpr UserGetProfileResponse::UserGetProfileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wechat_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserGetProfileResponseDefaultTypeInternal {
  constexpr UserGetProfileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserGetProfileResponseDefaultTypeInternal() {}
  union {
    UserGetProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserGetProfileResponseDefaultTypeInternal _UserGetProfileResponse_default_instance_;
constexpr UserLogsRequest::UserLogsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pager_(nullptr){}
struct UserLogsRequestDefaultTypeInternal {
  constexpr UserLogsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserLogsRequestDefaultTypeInternal() {}
  union {
    UserLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserLogsRequestDefaultTypeInternal _UserLogsRequest_default_instance_;
constexpr UserLogsResponse_Item::UserLogsResponse_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resource_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(nullptr)
  , id_(0)
  , user_id_(0)
  , resource_id_(0){}
struct UserLogsResponse_ItemDefaultTypeInternal {
  constexpr UserLogsResponse_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserLogsResponse_ItemDefaultTypeInternal() {}
  union {
    UserLogsResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserLogsResponse_ItemDefaultTypeInternal _UserLogsResponse_Item_default_instance_;
constexpr UserLogsResponse::UserLogsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , pagination_(nullptr){}
struct UserLogsResponseDefaultTypeInternal {
  constexpr UserLogsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserLogsResponseDefaultTypeInternal() {}
  union {
    UserLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserLogsResponseDefaultTypeInternal _UserLogsResponse_default_instance_;
constexpr UserChangePasswordRequest::UserChangePasswordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserChangePasswordRequestDefaultTypeInternal {
  constexpr UserChangePasswordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserChangePasswordRequestDefaultTypeInternal() {}
  union {
    UserChangePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserChangePasswordRequestDefaultTypeInternal _UserChangePasswordRequest_default_instance_;
constexpr UserSetPasswordRequest::UserSetPasswordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(nullptr){}
struct UserSetPasswordRequestDefaultTypeInternal {
  constexpr UserSetPasswordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserSetPasswordRequestDefaultTypeInternal() {}
  union {
    UserSetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserSetPasswordRequestDefaultTypeInternal _UserSetPasswordRequest_default_instance_;
constexpr UserIndexResponse_Item::UserIndexResponse_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_sign_in_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , current_sign_in_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(nullptr)
  , last_sign_in_at_(nullptr)
  , current_sign_in_at_(nullptr)
  , confirmed_at_(nullptr)
  , locked_at_(nullptr)
  , deleted_at_(nullptr)
  , id_(0)
  , sign_in_count_(0){}
struct UserIndexResponse_ItemDefaultTypeInternal {
  constexpr UserIndexResponse_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    UserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserIndexResponse_ItemDefaultTypeInternal _UserIndexResponse_Item_default_instance_;
constexpr UserIndexResponse::UserIndexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , pagination_(nullptr){}
struct UserIndexResponseDefaultTypeInternal {
  constexpr UserIndexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserIndexResponseDefaultTypeInternal() {}
  union {
    UserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserIndexResponseDefaultTypeInternal _UserIndexResponse_default_instance_;
}  // namespace v1
}  // namespace auth
}  // namespace plugins
}  // namespace palm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_auth_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_auth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_auth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_auth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserQueryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserQueryRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignInRequest, query_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignInRequest, password_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignInRequest, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignInResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, nick_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, email_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, password_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, time_zone_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSignUpRequest, home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserEmailRequest, query_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserEmailRequest, home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserTokenRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserResetPasswordRequest, token_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserResetPasswordRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, time_zone_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, wechat_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetProfileRequest, phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, nick_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, email_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, time_zone_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, wechat_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserGetProfileResponse, phone_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsRequest, pager_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsRequest, level_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsRequest, ip_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, ip_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, level_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, message_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, resource_type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, resource_id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse_Item, created_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse, pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserLogsResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserChangePasswordRequest, current_password_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserChangePasswordRequest, new_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetPasswordRequest, user_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserSetPasswordRequest, password_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, id_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, uid_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, email_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, nick_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, provider_type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, updated_at_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, sign_in_count_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, time_zone_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, confirmed_at_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, locked_at_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse_Item, deleted_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  3,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse, pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::auth::v1::UserIndexResponse, items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::plugins::auth::v1::UserQueryRequest)},
  { 9, -1, -1, sizeof(::palm::plugins::auth::v1::UserSignInRequest)},
  { 18, -1, -1, sizeof(::palm::plugins::auth::v1::UserSignInResponse)},
  { 25, -1, -1, sizeof(::palm::plugins::auth::v1::UserSignUpRequest)},
  { 38, -1, -1, sizeof(::palm::plugins::auth::v1::UserEmailRequest)},
  { 46, -1, -1, sizeof(::palm::plugins::auth::v1::UserTokenRequest)},
  { 53, -1, -1, sizeof(::palm::plugins::auth::v1::UserResetPasswordRequest)},
  { 61, -1, -1, sizeof(::palm::plugins::auth::v1::UserSetProfileRequest)},
  { 73, -1, -1, sizeof(::palm::plugins::auth::v1::UserGetProfileResponse)},
  { 87, 96, -1, sizeof(::palm::plugins::auth::v1::UserLogsRequest)},
  { 99, 113, -1, sizeof(::palm::plugins::auth::v1::UserLogsResponse_Item)},
  { 121, -1, -1, sizeof(::palm::plugins::auth::v1::UserLogsResponse)},
  { 129, -1, -1, sizeof(::palm::plugins::auth::v1::UserChangePasswordRequest)},
  { 137, -1, -1, sizeof(::palm::plugins::auth::v1::UserSetPasswordRequest)},
  { 145, 169, -1, sizeof(::palm::plugins::auth::v1::UserIndexResponse_Item)},
  { 187, -1, -1, sizeof(::palm::plugins::auth::v1::UserIndexResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserSignInRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserSignInResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserSignUpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserEmailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserResetPasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserSetProfileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserGetProfileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserLogsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserLogsResponse_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserLogsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserChangePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserSetPasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserIndexResponse_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::plugins::auth::v1::_UserIndexResponse_default_instance_),
};

const char descriptor_table_protodef_auth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nauth.proto\022\024palm.plugins.auth.v1\032\033goog"
  "le/protobuf/empty.proto\032\037google/protobuf"
  "/timestamp.proto\032\036google/protobuf/durati"
  "on.proto\032\tnut.proto\">\n\020UserQueryRequest\022"
  "\017\n\005email\030\001 \001(\tH\000\022\023\n\tnick_name\030\002 \001(\tH\000B\004\n"
  "\002id\"\204\001\n\021UserSignInRequest\0225\n\005query\030\001 \001(\013"
  "2&.palm.plugins.auth.v1.UserQueryRequest"
  "\022\020\n\010password\030\002 \001(\t\022&\n\003ttl\030\013 \001(\0132\031.google"
  ".protobuf.Duration\"#\n\022UserSignInResponse"
  "\022\r\n\005token\030\001 \001(\t\"\211\001\n\021UserSignUpRequest\022\021\n"
  "\treal_name\030\001 \001(\t\022\021\n\tnick_name\030\002 \001(\t\022\r\n\005e"
  "mail\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\014\n\004lang\030\013 \001"
  "(\t\022\021\n\ttime_zone\030\014 \001(\t\022\014\n\004home\030\025 \001(\t\"W\n\020U"
  "serEmailRequest\0225\n\005query\030\001 \001(\0132&.palm.pl"
  "ugins.auth.v1.UserQueryRequest\022\014\n\004home\030\t"
  " \001(\t\"!\n\020UserTokenRequest\022\r\n\005token\030\001 \001(\t\""
  ";\n\030UserResetPasswordRequest\022\r\n\005token\030\001 \001"
  "(\t\022\020\n\010password\030\002 \001(\t\"z\n\025UserSetProfileRe"
  "quest\022\021\n\treal_name\030\001 \001(\t\022\016\n\006avatar\030\002 \001(\t"
  "\022\021\n\ttime_zone\030\010 \001(\t\022\014\n\004lang\030\t \001(\t\022\016\n\006wec"
  "hat\030\013 \001(\t\022\r\n\005phone\030\014 \001(\t\"\235\001\n\026UserGetProf"
  "ileResponse\022\021\n\treal_name\030\001 \001(\t\022\016\n\006avatar"
  "\030\002 \001(\t\022\021\n\tnick_name\030\003 \001(\t\022\r\n\005email\030\004 \001(\t"
  "\022\021\n\ttime_zone\030\010 \001(\t\022\014\n\004lang\030\t \001(\t\022\016\n\006wec"
  "hat\030\013 \001(\t\022\r\n\005phone\030\014 \001(\t\"r\n\017UserLogsRequ"
  "est\022)\n\005pager\030\001 \001(\0132\032.palm.plugins.nut.v1"
  ".Pager\022\022\n\005level\030\013 \001(\tH\000\210\001\001\022\017\n\002ip\030\014 \001(\tH\001"
  "\210\001\001B\010\n\006_levelB\005\n\003_ip\"\306\002\n\020UserLogsRespons"
  "e\0223\n\npagination\030\001 \001(\0132\037.palm.plugins.nut"
  ".v1.Pagination\022:\n\005items\030\013 \003(\0132+.palm.plu"
  "gins.auth.v1.UserLogsResponse.Item\032\300\001\n\004I"
  "tem\022\n\n\002id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\n\n\002ip\030\003"
  " \001(\t\022\r\n\005level\030\004 \001(\t\022\017\n\007message\030\005 \001(\t\022\025\n\r"
  "resource_type\030\006 \001(\t\022\030\n\013resource_id\030\007 \001(\005"
  "H\000\210\001\001\022.\n\ncreated_at\030\013 \001(\0132\032.google.proto"
  "buf.TimestampB\016\n\014_resource_id\"K\n\031UserCha"
  "ngePasswordRequest\022\030\n\020current_password\030\001"
  " \001(\t\022\024\n\014new_password\030\002 \001(\t\"`\n\026UserSetPas"
  "swordRequest\0224\n\004user\030\001 \001(\0132&.palm.plugin"
  "s.auth.v1.UserQueryRequest\022\020\n\010password\030\002"
  " \001(\t\"\305\006\n\021UserIndexResponse\0223\n\npagination"
  "\030\001 \001(\0132\037.palm.plugins.nut.v1.Pagination\022"
  ";\n\005items\030\013 \003(\0132,.palm.plugins.auth.v1.Us"
  "erIndexResponse.Item\032\275\005\n\004Item\022\n\n\002id\030\001 \001("
  "\005\022\013\n\003uid\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\021\n\tnick_na"
  "me\030\004 \001(\t\022\021\n\treal_name\030\005 \001(\t\022\025\n\rprovider_"
  "type\030\006 \001(\t\022.\n\nupdated_at\030\t \001(\0132\032.google."
  "protobuf.Timestamp\0228\n\017last_sign_in_at\030\013 "
  "\001(\0132\032.google.protobuf.TimestampH\000\210\001\001\022\034\n\017"
  "last_sign_in_ip\030\014 \001(\tH\001\210\001\001\022;\n\022current_si"
  "gn_in_at\030\r \001(\0132\032.google.protobuf.Timesta"
  "mpH\002\210\001\001\022\037\n\022current_sign_in_ip\030\016 \001(\tH\003\210\001\001"
  "\022\025\n\rsign_in_count\030\023 \001(\005\022\014\n\004lang\030\025 \001(\t\022\021\n"
  "\ttime_zone\030\026 \001(\t\022\016\n\006avatar\030\027 \001(\t\0225\n\014conf"
  "irmed_at\030\033 \001(\0132\032.google.protobuf.Timesta"
  "mpH\004\210\001\001\0222\n\tlocked_at\030\034 \001(\0132\032.google.prot"
  "obuf.TimestampH\005\210\001\001\0223\n\ndeleted_at\030\035 \001(\0132"
  "\032.google.protobuf.TimestampH\006\210\001\001B\022\n\020_las"
  "t_sign_in_atB\022\n\020_last_sign_in_ipB\025\n\023_cur"
  "rent_sign_in_atB\025\n\023_current_sign_in_ipB\017"
  "\n\r_confirmed_atB\014\n\n_locked_atB\r\n\013_delete"
  "d_at2\320\r\n\004User\022]\n\006SignIn\022\'.palm.plugins.a"
  "uth.v1.UserSignInRequest\032(.palm.plugins."
  "auth.v1.UserSignInResponse\"\000\022K\n\006SignUp\022\'"
  ".palm.plugins.auth.v1.UserSignUpRequest\032"
  "\026.google.protobuf.Empty\"\000\022R\n\016ConfirmByEm"
  "ail\022&.palm.plugins.auth.v1.UserEmailRequ"
  "est\032\026.google.protobuf.Empty\"\000\022R\n\016Confirm"
  "ByToken\022&.palm.plugins.auth.v1.UserToken"
  "Request\032\026.google.protobuf.Empty\"\000\022Q\n\rUnl"
  "ockByEmail\022&.palm.plugins.auth.v1.UserEm"
  "ailRequest\032\026.google.protobuf.Empty\"\000\022Q\n\r"
  "UnlockByToken\022&.palm.plugins.auth.v1.Use"
  "rTokenRequest\032\026.google.protobuf.Empty\"\000\022"
  "R\n\016ForgotPassword\022&.palm.plugins.auth.v1"
  ".UserEmailRequest\032\026.google.protobuf.Empt"
  "y\"\000\022Y\n\rResetPassword\022..palm.plugins.auth"
  ".v1.UserResetPasswordRequest\032\026.google.pr"
  "otobuf.Empty\"\000\022P\n\007Refresh\022\031.google.proto"
  "buf.Duration\032(.palm.plugins.auth.v1.User"
  "SignInResponse\"\000\022W\n\004Logs\022%.palm.plugins."
  "auth.v1.UserLogsRequest\032&.palm.plugins.a"
  "uth.v1.UserLogsResponse\"\000\022S\n\nSetProfile\022"
  "+.palm.plugins.auth.v1.UserSetProfileReq"
  "uest\032\026.google.protobuf.Empty\"\000\022[\n\016Change"
  "Password\022/.palm.plugins.auth.v1.UserChan"
  "gePasswordRequest\032\026.google.protobuf.Empt"
  "y\"\000\022;\n\007SignOut\022\026.google.protobuf.Empty\032\026"
  ".google.protobuf.Empty\"\000\022R\n\tIndexUser\022\032."
  "palm.plugins.nut.v1.Pager\032\'.palm.plugins"
  ".auth.v1.UserIndexResponse\"\000\022^\n\004Show\022&.p"
  "alm.plugins.auth.v1.UserQueryRequest\032,.p"
  "alm.plugins.auth.v1.UserIndexResponse.It"
  "em\"\000\022K\n\007Disable\022&.palm.plugins.auth.v1.U"
  "serQueryRequest\032\026.google.protobuf.Empty\""
  "\000\022J\n\006Enable\022&.palm.plugins.auth.v1.UserQ"
  "ueryRequest\032\026.google.protobuf.Empty\"\000\022H\n"
  "\004Lock\022&.palm.plugins.auth.v1.UserQueryRe"
  "quest\032\026.google.protobuf.Empty\"\000\022J\n\006Unloc"
  "k\022&.palm.plugins.auth.v1.UserQueryReques"
  "t\032\026.google.protobuf.Empty\"\000\022K\n\007Confirm\022&"
  ".palm.plugins.auth.v1.UserQueryRequest\032\026"
  ".google.protobuf.Empty\"\000\022U\n\013SetPassword\022"
  ",.palm.plugins.auth.v1.UserSetPasswordRe"
  "quest\032\026.google.protobuf.Empty\"\000B\002P\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_auth_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_nut_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_auth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto = {
  false, false, 4203, descriptor_table_protodef_auth_2eproto, "auth.proto", 
  &descriptor_table_auth_2eproto_once, descriptor_table_auth_2eproto_deps, 4, 16,
  schemas, file_default_instances, TableStruct_auth_2eproto::offsets,
  file_level_metadata_auth_2eproto, file_level_enum_descriptors_auth_2eproto, file_level_service_descriptors_auth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_auth_2eproto_getter() {
  return &descriptor_table_auth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_auth_2eproto(&descriptor_table_auth_2eproto);
namespace palm {
namespace plugins {
namespace auth {
namespace v1 {

// ===================================================================

class UserQueryRequest::_Internal {
 public:
};

UserQueryRequest::UserQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserQueryRequest)
}
UserQueryRequest::UserQueryRequest(const UserQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_id();
  switch (from.id_case()) {
    case kEmail: {
      _internal_set_email(from._internal_email());
      break;
    }
    case kNickName: {
      _internal_set_nick_name(from._internal_nick_name());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserQueryRequest)
}

void UserQueryRequest::SharedCtor() {
clear_has_id();
}

UserQueryRequest::~UserQueryRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserQueryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_id()) {
    clear_id();
  }
}

void UserQueryRequest::ArenaDtor(void* object) {
  UserQueryRequest* _this = reinterpret_cast< UserQueryRequest* >(object);
  (void)_this;
}
void UserQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserQueryRequest::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:palm.plugins.auth.v1.UserQueryRequest)
  switch (id_case()) {
    case kEmail: {
      id_.email_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kNickName: {
      id_.nick_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void UserQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserQueryRequest.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserQueryRequest.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserQueryRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string nick_name = 2;
  if (_internal_has_nick_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserQueryRequest.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserQueryRequest)
  return target;
}

size_t UserQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (id_case()) {
    // string email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    // string nick_name = 2;
    case kNickName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nick_name());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserQueryRequest::GetClassData() const { return &_class_data_; }

void UserQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserQueryRequest *>(to)->MergeFrom(
      static_cast<const UserQueryRequest &>(from));
}


void UserQueryRequest::MergeFrom(const UserQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.id_case()) {
    case kEmail: {
      _internal_set_email(from._internal_email());
      break;
    }
    case kNickName: {
      _internal_set_nick_name(from._internal_nick_name());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserQueryRequest::CopyFrom(const UserQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQueryRequest::IsInitialized() const {
  return true;
}

void UserQueryRequest::InternalSwap(UserQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQueryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[0]);
}

// ===================================================================

class UserSignInRequest::_Internal {
 public:
  static const ::palm::plugins::auth::v1::UserQueryRequest& query(const UserSignInRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UserSignInRequest* msg);
};

const ::palm::plugins::auth::v1::UserQueryRequest&
UserSignInRequest::_Internal::query(const UserSignInRequest* msg) {
  return *msg->query_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
UserSignInRequest::_Internal::ttl(const UserSignInRequest* msg) {
  return *msg->ttl_;
}
void UserSignInRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
}
UserSignInRequest::UserSignInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserSignInRequest)
}
UserSignInRequest::UserSignInRequest(const UserSignInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_query()) {
    query_ = new ::palm::plugins::auth::v1::UserQueryRequest(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_ttl()) {
    ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.ttl_);
  } else {
    ttl_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserSignInRequest)
}

void UserSignInRequest::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&query_)) + sizeof(ttl_));
}

UserSignInRequest::~UserSignInRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserSignInRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserSignInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete ttl_;
}

void UserSignInRequest::ArenaDtor(void* object) {
  UserSignInRequest* _this = reinterpret_cast< UserSignInRequest* >(object);
  (void)_this;
}
void UserSignInRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSignInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserSignInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserSignInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.auth.v1.UserQueryRequest query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignInRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSignInRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserSignInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.auth.v1.UserQueryRequest query = 1;
  if (this->_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query(this), target, stream);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignInRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ttl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserSignInRequest)
  return target;
}

size_t UserSignInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserSignInRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .palm.plugins.auth.v1.UserQueryRequest query = 1;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserSignInRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInRequest::GetClassData() const { return &_class_data_; }

void UserSignInRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserSignInRequest *>(to)->MergeFrom(
      static_cast<const UserSignInRequest &>(from));
}


void UserSignInRequest::MergeFrom(const UserSignInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserSignInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_has_query()) {
    _internal_mutable_query()->::palm::plugins::auth::v1::UserQueryRequest::MergeFrom(from._internal_query());
  }
  if (from._internal_has_ttl()) {
    _internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_ttl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInRequest::CopyFrom(const UserSignInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserSignInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInRequest::IsInitialized() const {
  return true;
}

void UserSignInRequest::InternalSwap(UserSignInRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSignInRequest, ttl_)
      + sizeof(UserSignInRequest::ttl_)
      - PROTOBUF_FIELD_OFFSET(UserSignInRequest, query_)>(
          reinterpret_cast<char*>(&query_),
          reinterpret_cast<char*>(&other->query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[1]);
}

// ===================================================================

class UserSignInResponse::_Internal {
 public:
};

UserSignInResponse::UserSignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserSignInResponse)
}
UserSignInResponse::UserSignInResponse(const UserSignInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserSignInResponse)
}

void UserSignInResponse::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserSignInResponse::~UserSignInResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserSignInResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserSignInResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSignInResponse::ArenaDtor(void* object) {
  UserSignInResponse* _this = reinterpret_cast< UserSignInResponse* >(object);
  (void)_this;
}
void UserSignInResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSignInResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserSignInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserSignInResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignInResponse.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSignInResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserSignInResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignInResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserSignInResponse)
  return target;
}

size_t UserSignInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserSignInResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserSignInResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse::GetClassData() const { return &_class_data_; }

void UserSignInResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserSignInResponse *>(to)->MergeFrom(
      static_cast<const UserSignInResponse &>(from));
}


void UserSignInResponse::MergeFrom(const UserSignInResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserSignInResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse::CopyFrom(const UserSignInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserSignInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse::IsInitialized() const {
  return true;
}

void UserSignInResponse::InternalSwap(UserSignInResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[2]);
}

// ===================================================================

class UserSignUpRequest::_Internal {
 public:
};

UserSignUpRequest::UserSignUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserSignUpRequest)
}
UserSignUpRequest::UserSignUpRequest(const UserSignUpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_real_name().empty()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArenaForAllocation());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArenaForAllocation());
  }
  home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_home().empty()) {
    home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_home(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserSignUpRequest)
}

void UserSignUpRequest::SharedCtor() {
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserSignUpRequest::~UserSignUpRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserSignUpRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserSignUpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSignUpRequest::ArenaDtor(void* object) {
  UserSignUpRequest* _this = reinterpret_cast< UserSignUpRequest* >(object);
  (void)_this;
}
void UserSignUpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSignUpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserSignUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserSignUpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real_name_.ClearToEmpty();
  nick_name_.ClearToEmpty();
  email_.ClearToEmpty();
  password_.ClearToEmpty();
  lang_.ClearToEmpty();
  time_zone_.ClearToEmpty();
  home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignUpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.real_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_zone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.time_zone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string home = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_home();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSignUpRequest.home"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSignUpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserSignUpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string lang = 11;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.lang");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_lang(), target);
  }

  // string time_zone = 12;
  if (!this->_internal_time_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.time_zone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_time_zone(), target);
  }

  // string home = 21;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSignUpRequest.home");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserSignUpRequest)
  return target;
}

size_t UserSignUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserSignUpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string lang = 11;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string time_zone = 12;
  if (!this->_internal_time_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  // string home = 21;
  if (!this->_internal_home().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignUpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserSignUpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignUpRequest::GetClassData() const { return &_class_data_; }

void UserSignUpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserSignUpRequest *>(to)->MergeFrom(
      static_cast<const UserSignUpRequest &>(from));
}


void UserSignUpRequest::MergeFrom(const UserSignUpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserSignUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_time_zone().empty()) {
    _internal_set_time_zone(from._internal_time_zone());
  }
  if (!from._internal_home().empty()) {
    _internal_set_home(from._internal_home());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignUpRequest::CopyFrom(const UserSignUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserSignUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignUpRequest::IsInitialized() const {
  return true;
}

void UserSignUpRequest::InternalSwap(UserSignUpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &real_name_, lhs_arena,
      &other->real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_zone_, lhs_arena,
      &other->time_zone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &home_, lhs_arena,
      &other->home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignUpRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[3]);
}

// ===================================================================

class UserEmailRequest::_Internal {
 public:
  static const ::palm::plugins::auth::v1::UserQueryRequest& query(const UserEmailRequest* msg);
};

const ::palm::plugins::auth::v1::UserQueryRequest&
UserEmailRequest::_Internal::query(const UserEmailRequest* msg) {
  return *msg->query_;
}
UserEmailRequest::UserEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserEmailRequest)
}
UserEmailRequest::UserEmailRequest(const UserEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_home().empty()) {
    home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_home(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_query()) {
    query_ = new ::palm::plugins::auth::v1::UserQueryRequest(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserEmailRequest)
}

void UserEmailRequest::SharedCtor() {
home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
query_ = nullptr;
}

UserEmailRequest::~UserEmailRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserEmailRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  home_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_;
}

void UserEmailRequest::ArenaDtor(void* object) {
  UserEmailRequest* _this = reinterpret_cast< UserEmailRequest* >(object);
  (void)_this;
}
void UserEmailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserEmailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.auth.v1.UserQueryRequest query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string home = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_home();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserEmailRequest.home"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserEmailRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserEmailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.auth.v1.UserQueryRequest query = 1;
  if (this->_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query(this), target, stream);
  }

  // string home = 9;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserEmailRequest.home");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserEmailRequest)
  return target;
}

size_t UserEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserEmailRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string home = 9;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  // .palm.plugins.auth.v1.UserQueryRequest query = 1;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserEmailRequest::GetClassData() const { return &_class_data_; }

void UserEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserEmailRequest *>(to)->MergeFrom(
      static_cast<const UserEmailRequest &>(from));
}


void UserEmailRequest::MergeFrom(const UserEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home().empty()) {
    _internal_set_home(from._internal_home());
  }
  if (from._internal_has_query()) {
    _internal_mutable_query()->::palm::plugins::auth::v1::UserQueryRequest::MergeFrom(from._internal_query());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserEmailRequest::CopyFrom(const UserEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEmailRequest::IsInitialized() const {
  return true;
}

void UserEmailRequest::InternalSwap(UserEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &home_, lhs_arena,
      &other->home_, rhs_arena
  );
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEmailRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[4]);
}

// ===================================================================

class UserTokenRequest::_Internal {
 public:
};

UserTokenRequest::UserTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserTokenRequest)
}
UserTokenRequest::UserTokenRequest(const UserTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserTokenRequest)
}

void UserTokenRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserTokenRequest::~UserTokenRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserTokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserTokenRequest::ArenaDtor(void* object) {
  UserTokenRequest* _this = reinterpret_cast< UserTokenRequest* >(object);
  (void)_this;
}
void UserTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserTokenRequest.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserTokenRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserTokenRequest)
  return target;
}

size_t UserTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserTokenRequest::GetClassData() const { return &_class_data_; }

void UserTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserTokenRequest *>(to)->MergeFrom(
      static_cast<const UserTokenRequest &>(from));
}


void UserTokenRequest::MergeFrom(const UserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserTokenRequest::CopyFrom(const UserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenRequest::IsInitialized() const {
  return true;
}

void UserTokenRequest::InternalSwap(UserTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[5]);
}

// ===================================================================

class UserResetPasswordRequest::_Internal {
 public:
};

UserResetPasswordRequest::UserResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserResetPasswordRequest)
}
UserResetPasswordRequest::UserResetPasswordRequest(const UserResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserResetPasswordRequest)
}

void UserResetPasswordRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserResetPasswordRequest::~UserResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserResetPasswordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserResetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserResetPasswordRequest::ArenaDtor(void* object) {
  UserResetPasswordRequest* _this = reinterpret_cast< UserResetPasswordRequest* >(object);
  (void)_this;
}
void UserResetPasswordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserResetPasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserResetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResetPasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserResetPasswordRequest.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserResetPasswordRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserResetPasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserResetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserResetPasswordRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserResetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserResetPasswordRequest)
  return target;
}

size_t UserResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserResetPasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserResetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserResetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserResetPasswordRequest::GetClassData() const { return &_class_data_; }

void UserResetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserResetPasswordRequest *>(to)->MergeFrom(
      static_cast<const UserResetPasswordRequest &>(from));
}


void UserResetPasswordRequest::MergeFrom(const UserResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserResetPasswordRequest::CopyFrom(const UserResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResetPasswordRequest::IsInitialized() const {
  return true;
}

void UserResetPasswordRequest::InternalSwap(UserResetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResetPasswordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[6]);
}

// ===================================================================

class UserSetProfileRequest::_Internal {
 public:
};

UserSetProfileRequest::UserSetProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserSetProfileRequest)
}
UserSetProfileRequest::UserSetProfileRequest(const UserSetProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_real_name().empty()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wechat().empty()) {
    wechat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wechat(), 
      GetArenaForAllocation());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserSetProfileRequest)
}

void UserSetProfileRequest::SharedCtor() {
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserSetProfileRequest::~UserSetProfileRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserSetProfileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserSetProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSetProfileRequest::ArenaDtor(void* object) {
  UserSetProfileRequest* _this = reinterpret_cast< UserSetProfileRequest* >(object);
  (void)_this;
}
void UserSetProfileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSetProfileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserSetProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserSetProfileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real_name_.ClearToEmpty();
  avatar_.ClearToEmpty();
  time_zone_.ClearToEmpty();
  lang_.ClearToEmpty();
  wechat_.ClearToEmpty();
  phone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSetProfileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetProfileRequest.real_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetProfileRequest.avatar"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_zone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetProfileRequest.time_zone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetProfileRequest.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wechat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_wechat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetProfileRequest.wechat"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetProfileRequest.phone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSetProfileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserSetProfileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetProfileRequest.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetProfileRequest.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  // string time_zone = 8;
  if (!this->_internal_time_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetProfileRequest.time_zone");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_time_zone(), target);
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetProfileRequest.lang");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lang(), target);
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wechat().data(), static_cast<int>(this->_internal_wechat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetProfileRequest.wechat");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_wechat(), target);
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetProfileRequest.phone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserSetProfileRequest)
  return target;
}

size_t UserSetProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserSetProfileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string time_zone = 8;
  if (!this->_internal_time_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wechat());
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSetProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserSetProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSetProfileRequest::GetClassData() const { return &_class_data_; }

void UserSetProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserSetProfileRequest *>(to)->MergeFrom(
      static_cast<const UserSetProfileRequest &>(from));
}


void UserSetProfileRequest::MergeFrom(const UserSetProfileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserSetProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from._internal_time_zone().empty()) {
    _internal_set_time_zone(from._internal_time_zone());
  }
  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_wechat().empty()) {
    _internal_set_wechat(from._internal_wechat());
  }
  if (!from._internal_phone().empty()) {
    _internal_set_phone(from._internal_phone());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSetProfileRequest::CopyFrom(const UserSetProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserSetProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSetProfileRequest::IsInitialized() const {
  return true;
}

void UserSetProfileRequest::InternalSwap(UserSetProfileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &real_name_, lhs_arena,
      &other->real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, lhs_arena,
      &other->avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_zone_, lhs_arena,
      &other->time_zone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wechat_, lhs_arena,
      &other->wechat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_, lhs_arena,
      &other->phone_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSetProfileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[7]);
}

// ===================================================================

class UserGetProfileResponse::_Internal {
 public:
};

UserGetProfileResponse::UserGetProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserGetProfileResponse)
}
UserGetProfileResponse::UserGetProfileResponse(const UserGetProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_real_name().empty()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wechat().empty()) {
    wechat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wechat(), 
      GetArenaForAllocation());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserGetProfileResponse)
}

void UserGetProfileResponse::SharedCtor() {
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserGetProfileResponse::~UserGetProfileResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserGetProfileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserGetProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wechat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserGetProfileResponse::ArenaDtor(void* object) {
  UserGetProfileResponse* _this = reinterpret_cast< UserGetProfileResponse* >(object);
  (void)_this;
}
void UserGetProfileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserGetProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserGetProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserGetProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real_name_.ClearToEmpty();
  avatar_.ClearToEmpty();
  nick_name_.ClearToEmpty();
  email_.ClearToEmpty();
  time_zone_.ClearToEmpty();
  lang_.ClearToEmpty();
  wechat_.ClearToEmpty();
  phone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserGetProfileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.real_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.avatar"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_zone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.time_zone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wechat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_wechat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.wechat"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserGetProfileResponse.phone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserGetProfileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserGetProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  // string nick_name = 3;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.nick_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick_name(), target);
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // string time_zone = 8;
  if (!this->_internal_time_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.time_zone");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_time_zone(), target);
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.lang");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lang(), target);
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wechat().data(), static_cast<int>(this->_internal_wechat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.wechat");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_wechat(), target);
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserGetProfileResponse.phone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserGetProfileResponse)
  return target;
}

size_t UserGetProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserGetProfileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string nick_name = 3;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string time_zone = 8;
  if (!this->_internal_time_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wechat());
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserGetProfileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserGetProfileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserGetProfileResponse::GetClassData() const { return &_class_data_; }

void UserGetProfileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserGetProfileResponse *>(to)->MergeFrom(
      static_cast<const UserGetProfileResponse &>(from));
}


void UserGetProfileResponse::MergeFrom(const UserGetProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserGetProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from._internal_nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_time_zone().empty()) {
    _internal_set_time_zone(from._internal_time_zone());
  }
  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_wechat().empty()) {
    _internal_set_wechat(from._internal_wechat());
  }
  if (!from._internal_phone().empty()) {
    _internal_set_phone(from._internal_phone());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserGetProfileResponse::CopyFrom(const UserGetProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserGetProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGetProfileResponse::IsInitialized() const {
  return true;
}

void UserGetProfileResponse::InternalSwap(UserGetProfileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &real_name_, lhs_arena,
      &other->real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, lhs_arena,
      &other->avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_zone_, lhs_arena,
      &other->time_zone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wechat_, lhs_arena,
      &other->wechat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phone_, lhs_arena,
      &other->phone_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserGetProfileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[8]);
}

// ===================================================================

class UserLogsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLogsRequest>()._has_bits_);
  static const ::palm::plugins::nut::v1::Pager& pager(const UserLogsRequest* msg);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::plugins::nut::v1::Pager&
UserLogsRequest::_Internal::pager(const UserLogsRequest* msg) {
  return *msg->pager_;
}
void UserLogsRequest::clear_pager() {
  if (GetArenaForAllocation() == nullptr && pager_ != nullptr) {
    delete pager_;
  }
  pager_ = nullptr;
}
UserLogsRequest::UserLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserLogsRequest)
}
UserLogsRequest::UserLogsRequest(const UserLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_level()) {
    level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pager()) {
    pager_ = new ::palm::plugins::nut::v1::Pager(*from.pager_);
  } else {
    pager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserLogsRequest)
}

void UserLogsRequest::SharedCtor() {
level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pager_ = nullptr;
}

UserLogsRequest::~UserLogsRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserLogsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pager_;
}

void UserLogsRequest::ArenaDtor(void* object) {
  UserLogsRequest* _this = reinterpret_cast< UserLogsRequest* >(object);
  (void)_this;
}
void UserLogsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      level_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && pager_ != nullptr) {
    delete pager_;
  }
  pager_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.nut.v1.Pager pager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserLogsRequest.level"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserLogsRequest.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLogsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserLogsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.nut.v1.Pager pager = 1;
  if (this->_internal_has_pager()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pager(this), target, stream);
  }

  // optional string level = 11;
  if (_internal_has_level()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserLogsRequest.level");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_level(), target);
  }

  // optional string ip = 12;
  if (_internal_has_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserLogsRequest.ip");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserLogsRequest)
  return target;
}

size_t UserLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserLogsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string level = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_level());
    }

    // optional string ip = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

  }
  // .palm.plugins.nut.v1.Pager pager = 1;
  if (this->_internal_has_pager()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pager_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserLogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsRequest::GetClassData() const { return &_class_data_; }

void UserLogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserLogsRequest *>(to)->MergeFrom(
      static_cast<const UserLogsRequest &>(from));
}


void UserLogsRequest::MergeFrom(const UserLogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_level(from._internal_level());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
  }
  if (from._internal_has_pager()) {
    _internal_mutable_pager()->::palm::plugins::nut::v1::Pager::MergeFrom(from._internal_pager());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsRequest::CopyFrom(const UserLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsRequest::IsInitialized() const {
  return true;
}

void UserLogsRequest::InternalSwap(UserLogsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &level_, lhs_arena,
      &other->level_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  swap(pager_, other->pager_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[9]);
}

// ===================================================================

class UserLogsResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLogsResponse_Item>()._has_bits_);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const UserLogsResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserLogsResponse_Item::_Internal::created_at(const UserLogsResponse_Item* msg) {
  return *msg->created_at_;
}
void UserLogsResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
UserLogsResponse_Item::UserLogsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserLogsResponse.Item)
}
UserLogsResponse_Item::UserLogsResponse_Item(const UserLogsResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  resource_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_type().empty()) {
    resource_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(resource_id_));
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserLogsResponse.Item)
}

void UserLogsResponse_Item::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resource_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resource_id_) -
    reinterpret_cast<char*>(&created_at_)) + sizeof(resource_id_));
}

UserLogsResponse_Item::~UserLogsResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserLogsResponse.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserLogsResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
}

void UserLogsResponse_Item::ArenaDtor(void* object) {
  UserLogsResponse_Item* _this = reinterpret_cast< UserLogsResponse_Item* >(object);
  (void)_this;
}
void UserLogsResponse_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLogsResponse_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserLogsResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserLogsResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  level_.ClearToEmpty();
  message_.ClearToEmpty();
  resource_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  resource_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserLogsResponse.Item.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserLogsResponse.Item.level"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserLogsResponse.Item.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_resource_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserLogsResponse.Item.resource_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 resource_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_resource_id(&has_bits);
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLogsResponse_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserLogsResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserLogsResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // string level = 4;
  if (!this->_internal_level().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserLogsResponse.Item.level");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_level(), target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserLogsResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // string resource_type = 6;
  if (!this->_internal_resource_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_type().data(), static_cast<int>(this->_internal_resource_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserLogsResponse.Item.resource_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resource_type(), target);
  }

  // optional int32 resource_id = 7;
  if (_internal_has_resource_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_resource_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::created_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserLogsResponse.Item)
  return target;
}

size_t UserLogsResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserLogsResponse.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string level = 4;
  if (!this->_internal_level().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string resource_type = 6;
  if (!this->_internal_resource_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_type());
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // optional int32 resource_id = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_resource_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserLogsResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse_Item::GetClassData() const { return &_class_data_; }

void UserLogsResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserLogsResponse_Item *>(to)->MergeFrom(
      static_cast<const UserLogsResponse_Item &>(from));
}


void UserLogsResponse_Item::MergeFrom(const UserLogsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserLogsResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_level().empty()) {
    _internal_set_level(from._internal_level());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_resource_type().empty()) {
    _internal_set_resource_type(from._internal_resource_type());
  }
  if (from._internal_has_created_at()) {
    _internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_resource_id()) {
    _internal_set_resource_id(from._internal_resource_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse_Item::CopyFrom(const UserLogsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserLogsResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse_Item::IsInitialized() const {
  return true;
}

void UserLogsResponse_Item::InternalSwap(UserLogsResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &level_, lhs_arena,
      &other->level_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resource_type_, lhs_arena,
      &other->resource_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, resource_id_)
      + sizeof(UserLogsResponse_Item::resource_id_)
      - PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[10]);
}

// ===================================================================

class UserLogsResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::Pagination& pagination(const UserLogsResponse* msg);
};

const ::palm::plugins::nut::v1::Pagination&
UserLogsResponse::_Internal::pagination(const UserLogsResponse* msg) {
  return *msg->pagination_;
}
void UserLogsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
UserLogsResponse::UserLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserLogsResponse)
}
UserLogsResponse::UserLogsResponse(const UserLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    pagination_ = new ::palm::plugins::nut::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserLogsResponse)
}

void UserLogsResponse::SharedCtor() {
pagination_ = nullptr;
}

UserLogsResponse::~UserLogsResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserLogsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pagination_;
}

void UserLogsResponse::ArenaDtor(void* object) {
  UserLogsResponse* _this = reinterpret_cast< UserLogsResponse* >(object);
  (void)_this;
}
void UserLogsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.nut.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.auth.v1.UserLogsResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLogsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserLogsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pagination(this), target, stream);
  }

  // repeated .palm.plugins.auth.v1.UserLogsResponse.Item items = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserLogsResponse)
  return target;
}

size_t UserLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserLogsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.auth.v1.UserLogsResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse::GetClassData() const { return &_class_data_; }

void UserLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserLogsResponse *>(to)->MergeFrom(
      static_cast<const UserLogsResponse &>(from));
}


void UserLogsResponse::MergeFrom(const UserLogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::palm::plugins::nut::v1::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse::CopyFrom(const UserLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse::IsInitialized() const {
  return true;
}

void UserLogsResponse::InternalSwap(UserLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[11]);
}

// ===================================================================

class UserChangePasswordRequest::_Internal {
 public:
};

UserChangePasswordRequest::UserChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserChangePasswordRequest)
}
UserChangePasswordRequest::UserChangePasswordRequest(const UserChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_password().empty()) {
    current_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_password(), 
      GetArenaForAllocation());
  }
  new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_password().empty()) {
    new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserChangePasswordRequest)
}

void UserChangePasswordRequest::SharedCtor() {
current_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserChangePasswordRequest::~UserChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserChangePasswordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserChangePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserChangePasswordRequest::ArenaDtor(void* object) {
  UserChangePasswordRequest* _this = reinterpret_cast< UserChangePasswordRequest* >(object);
  (void)_this;
}
void UserChangePasswordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserChangePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserChangePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_password_.ClearToEmpty();
  new_password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserChangePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserChangePasswordRequest.current_password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserChangePasswordRequest.new_password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserChangePasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserChangePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_password().data(), static_cast<int>(this->_internal_current_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserChangePasswordRequest.current_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_password(), target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserChangePasswordRequest.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserChangePasswordRequest)
  return target;
}

size_t UserChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserChangePasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_password());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserChangePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserChangePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserChangePasswordRequest::GetClassData() const { return &_class_data_; }

void UserChangePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserChangePasswordRequest *>(to)->MergeFrom(
      static_cast<const UserChangePasswordRequest &>(from));
}


void UserChangePasswordRequest::MergeFrom(const UserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_password().empty()) {
    _internal_set_current_password(from._internal_current_password());
  }
  if (!from._internal_new_password().empty()) {
    _internal_set_new_password(from._internal_new_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserChangePasswordRequest::CopyFrom(const UserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangePasswordRequest::IsInitialized() const {
  return true;
}

void UserChangePasswordRequest::InternalSwap(UserChangePasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_password_, lhs_arena,
      &other->current_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_password_, lhs_arena,
      &other->new_password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserChangePasswordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[12]);
}

// ===================================================================

class UserSetPasswordRequest::_Internal {
 public:
  static const ::palm::plugins::auth::v1::UserQueryRequest& user(const UserSetPasswordRequest* msg);
};

const ::palm::plugins::auth::v1::UserQueryRequest&
UserSetPasswordRequest::_Internal::user(const UserSetPasswordRequest* msg) {
  return *msg->user_;
}
UserSetPasswordRequest::UserSetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserSetPasswordRequest)
}
UserSetPasswordRequest::UserSetPasswordRequest(const UserSetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    user_ = new ::palm::plugins::auth::v1::UserQueryRequest(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserSetPasswordRequest)
}

void UserSetPasswordRequest::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_ = nullptr;
}

UserSetPasswordRequest::~UserSetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserSetPasswordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserSetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void UserSetPasswordRequest::ArenaDtor(void* object) {
  UserSetPasswordRequest* _this = reinterpret_cast< UserSetPasswordRequest* >(object);
  (void)_this;
}
void UserSetPasswordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSetPasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserSetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserSetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSetPasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.auth.v1.UserQueryRequest user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserSetPasswordRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSetPasswordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserSetPasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.auth.v1.UserQueryRequest user = 1;
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserSetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserSetPasswordRequest)
  return target;
}

size_t UserSetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserSetPasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .palm.plugins.auth.v1.UserQueryRequest user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserSetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSetPasswordRequest::GetClassData() const { return &_class_data_; }

void UserSetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserSetPasswordRequest *>(to)->MergeFrom(
      static_cast<const UserSetPasswordRequest &>(from));
}


void UserSetPasswordRequest::MergeFrom(const UserSetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserSetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_has_user()) {
    _internal_mutable_user()->::palm::plugins::auth::v1::UserQueryRequest::MergeFrom(from._internal_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSetPasswordRequest::CopyFrom(const UserSetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserSetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSetPasswordRequest::IsInitialized() const {
  return true;
}

void UserSetPasswordRequest::InternalSwap(UserSetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSetPasswordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[13]);
}

// ===================================================================

class UserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<UserIndexResponse_Item>()._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const UserIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_sign_in_at(const UserIndexResponse_Item* msg);
  static void set_has_last_sign_in_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_sign_in_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& current_sign_in_at(const UserIndexResponse_Item* msg);
  static void set_has_current_sign_in_at(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_current_sign_in_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& confirmed_at(const UserIndexResponse_Item* msg);
  static void set_has_confirmed_at(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& locked_at(const UserIndexResponse_Item* msg);
  static void set_has_locked_at(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const UserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::updated_at(const UserIndexResponse_Item* msg) {
  return *msg->updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::last_sign_in_at(const UserIndexResponse_Item* msg) {
  return *msg->last_sign_in_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::current_sign_in_at(const UserIndexResponse_Item* msg) {
  return *msg->current_sign_in_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::confirmed_at(const UserIndexResponse_Item* msg) {
  return *msg->confirmed_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::locked_at(const UserIndexResponse_Item* msg) {
  return *msg->locked_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::deleted_at(const UserIndexResponse_Item* msg) {
  return *msg->deleted_at_;
}
void UserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void UserIndexResponse_Item::clear_last_sign_in_at() {
  if (last_sign_in_at_ != nullptr) last_sign_in_at_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void UserIndexResponse_Item::clear_current_sign_in_at() {
  if (current_sign_in_at_ != nullptr) current_sign_in_at_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void UserIndexResponse_Item::clear_confirmed_at() {
  if (confirmed_at_ != nullptr) confirmed_at_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void UserIndexResponse_Item::clear_locked_at() {
  if (locked_at_ != nullptr) locked_at_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void UserIndexResponse_Item::clear_deleted_at() {
  if (deleted_at_ != nullptr) deleted_at_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
UserIndexResponse_Item::UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserIndexResponse.Item)
}
UserIndexResponse_Item::UserIndexResponse_Item(const UserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_real_name().empty()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArenaForAllocation());
  }
  provider_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_type().empty()) {
    provider_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_type(), 
      GetArenaForAllocation());
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_sign_in_ip()) {
    last_sign_in_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_sign_in_ip(), 
      GetArenaForAllocation());
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_sign_in_ip()) {
    current_sign_in_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_sign_in_ip(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_last_sign_in_at()) {
    last_sign_in_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_sign_in_at_);
  } else {
    last_sign_in_at_ = nullptr;
  }
  if (from._internal_has_current_sign_in_at()) {
    current_sign_in_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.current_sign_in_at_);
  } else {
    current_sign_in_at_ = nullptr;
  }
  if (from._internal_has_confirmed_at()) {
    confirmed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.confirmed_at_);
  } else {
    confirmed_at_ = nullptr;
  }
  if (from._internal_has_locked_at()) {
    locked_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.locked_at_);
  } else {
    locked_at_ = nullptr;
  }
  if (from._internal_has_deleted_at()) {
    deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_at_);
  } else {
    deleted_at_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sign_in_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sign_in_count_));
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserIndexResponse.Item)
}

void UserIndexResponse_Item::SharedCtor() {
uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
provider_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&updated_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sign_in_count_) -
    reinterpret_cast<char*>(&updated_at_)) + sizeof(sign_in_count_));
}

UserIndexResponse_Item::~UserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserIndexResponse.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete last_sign_in_at_;
  if (this != internal_default_instance()) delete current_sign_in_at_;
  if (this != internal_default_instance()) delete confirmed_at_;
  if (this != internal_default_instance()) delete locked_at_;
  if (this != internal_default_instance()) delete deleted_at_;
}

void UserIndexResponse_Item::ArenaDtor(void* object) {
  UserIndexResponse_Item* _this = reinterpret_cast< UserIndexResponse_Item* >(object);
  (void)_this;
}
void UserIndexResponse_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserIndexResponse_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserIndexResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmpty();
  email_.ClearToEmpty();
  nick_name_.ClearToEmpty();
  real_name_.ClearToEmpty();
  provider_type_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_sign_in_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      current_sign_in_ip_.ClearNonDefaultToEmpty();
    }
  }
  lang_.ClearToEmpty();
  time_zone_.ClearToEmpty();
  avatar_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (cached_has_bits & 0x0000007cu) {
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(last_sign_in_at_ != nullptr);
      last_sign_in_at_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(current_sign_in_at_ != nullptr);
      current_sign_in_at_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(confirmed_at_ != nullptr);
      confirmed_at_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(locked_at_ != nullptr);
      locked_at_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(deleted_at_ != nullptr);
      deleted_at_->Clear();
    }
  }
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sign_in_count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sign_in_count_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.uid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string real_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.real_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string provider_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_provider_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.provider_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp last_sign_in_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_sign_in_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_sign_in_ip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.last_sign_in_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp current_sign_in_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_sign_in_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string current_sign_in_ip = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.current_sign_in_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sign_in_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          sign_in_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_zone = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.time_zone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string avatar = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.plugins.auth.v1.UserIndexResponse.Item.avatar"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp confirmed_at = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp locked_at = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_locked_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserIndexResponse_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserIndexResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string uid = 2;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string nick_name = 4;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.nick_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nick_name(), target);
  }

  // string real_name = 5;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.real_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_real_name(), target);
  }

  // string provider_type = 6;
  if (!this->_internal_provider_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_type().data(), static_cast<int>(this->_internal_provider_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.provider_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_provider_type(), target);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::updated_at(this), target, stream);
  }

  // optional .google.protobuf.Timestamp last_sign_in_at = 11;
  if (_internal_has_last_sign_in_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::last_sign_in_at(this), target, stream);
  }

  // optional string last_sign_in_ip = 12;
  if (_internal_has_last_sign_in_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_last_sign_in_ip(), target);
  }

  // optional .google.protobuf.Timestamp current_sign_in_at = 13;
  if (_internal_has_current_sign_in_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::current_sign_in_at(this), target, stream);
  }

  // optional string current_sign_in_ip = 14;
  if (_internal_has_current_sign_in_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_current_sign_in_ip(), target);
  }

  // int32 sign_in_count = 19;
  if (this->_internal_sign_in_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_sign_in_count(), target);
  }

  // string lang = 21;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_lang(), target);
  }

  // string time_zone = 22;
  if (!this->_internal_time_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_zone().data(), static_cast<int>(this->_internal_time_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.time_zone");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_time_zone(), target);
  }

  // string avatar = 23;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.auth.v1.UserIndexResponse.Item.avatar");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_avatar(), target);
  }

  // optional .google.protobuf.Timestamp confirmed_at = 27;
  if (_internal_has_confirmed_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::confirmed_at(this), target, stream);
  }

  // optional .google.protobuf.Timestamp locked_at = 28;
  if (_internal_has_locked_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::locked_at(this), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 29;
  if (_internal_has_deleted_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::deleted_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserIndexResponse.Item)
  return target;
}

size_t UserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserIndexResponse.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 2;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string nick_name = 4;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string real_name = 5;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string provider_type = 6;
  if (!this->_internal_provider_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_type());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string last_sign_in_ip = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_sign_in_ip());
    }

    // optional string current_sign_in_ip = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_sign_in_ip());
    }

  }
  // string lang = 21;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string time_zone = 22;
  if (!this->_internal_time_zone().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_zone());
  }

  // string avatar = 23;
  if (!this->_internal_avatar().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  if (cached_has_bits & 0x0000007cu) {
    // optional .google.protobuf.Timestamp last_sign_in_at = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_sign_in_at_);
    }

    // optional .google.protobuf.Timestamp current_sign_in_at = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_sign_in_at_);
    }

    // optional .google.protobuf.Timestamp confirmed_at = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *confirmed_at_);
    }

    // optional .google.protobuf.Timestamp locked_at = 28;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *locked_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deleted_at_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 sign_in_count = 19;
  if (this->_internal_sign_in_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sign_in_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse_Item::GetClassData() const { return &_class_data_; }

void UserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserIndexResponse_Item *>(to)->MergeFrom(
      static_cast<const UserIndexResponse_Item &>(from));
}


void UserIndexResponse_Item::MergeFrom(const UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _internal_set_uid(from._internal_uid());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (!from._internal_real_name().empty()) {
    _internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_provider_type().empty()) {
    _internal_set_provider_type(from._internal_provider_type());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_last_sign_in_ip(from._internal_last_sign_in_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_current_sign_in_ip(from._internal_current_sign_in_ip());
    }
  }
  if (!from._internal_lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from._internal_time_zone().empty()) {
    _internal_set_time_zone(from._internal_time_zone());
  }
  if (!from._internal_avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from._internal_has_updated_at()) {
    _internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (cached_has_bits & 0x0000007cu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_last_sign_in_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_sign_in_at());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_current_sign_in_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_current_sign_in_at());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_confirmed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_confirmed_at());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_locked_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_locked_at());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted_at());
    }
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_sign_in_count() != 0) {
    _internal_set_sign_in_count(from._internal_sign_in_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse_Item::CopyFrom(const UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse_Item::IsInitialized() const {
  return true;
}

void UserIndexResponse_Item::InternalSwap(UserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uid_, lhs_arena,
      &other->uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &real_name_, lhs_arena,
      &other->real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_type_, lhs_arena,
      &other->provider_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_sign_in_ip_, lhs_arena,
      &other->last_sign_in_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_sign_in_ip_, lhs_arena,
      &other->current_sign_in_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_zone_, lhs_arena,
      &other->time_zone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, lhs_arena,
      &other->avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, sign_in_count_)
      + sizeof(UserIndexResponse_Item::sign_in_count_)
      - PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, updated_at_)>(
          reinterpret_cast<char*>(&updated_at_),
          reinterpret_cast<char*>(&other->updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[14]);
}

// ===================================================================

class UserIndexResponse::_Internal {
 public:
  static const ::palm::plugins::nut::v1::Pagination& pagination(const UserIndexResponse* msg);
};

const ::palm::plugins::nut::v1::Pagination&
UserIndexResponse::_Internal::pagination(const UserIndexResponse* msg) {
  return *msg->pagination_;
}
void UserIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
UserIndexResponse::UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palm.plugins.auth.v1.UserIndexResponse)
}
UserIndexResponse::UserIndexResponse(const UserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    pagination_ = new ::palm::plugins::nut::v1::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.auth.v1.UserIndexResponse)
}

void UserIndexResponse::SharedCtor() {
pagination_ = nullptr;
}

UserIndexResponse::~UserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.auth.v1.UserIndexResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pagination_;
}

void UserIndexResponse::ArenaDtor(void* object) {
  UserIndexResponse* _this = reinterpret_cast< UserIndexResponse* >(object);
  (void)_this;
}
void UserIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.auth.v1.UserIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.plugins.nut.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.plugins.auth.v1.UserIndexResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.auth.v1.UserIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.plugins.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pagination(this), target, stream);
  }

  // repeated .palm.plugins.auth.v1.UserIndexResponse.Item items = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.auth.v1.UserIndexResponse)
  return target;
}

size_t UserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.auth.v1.UserIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.auth.v1.UserIndexResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.plugins.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse::GetClassData() const { return &_class_data_; }

void UserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserIndexResponse *>(to)->MergeFrom(
      static_cast<const UserIndexResponse &>(from));
}


void UserIndexResponse::MergeFrom(const UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.auth.v1.UserIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::palm::plugins::nut::v1::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse::CopyFrom(const UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.auth.v1.UserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse::IsInitialized() const {
  return true;
}

void UserIndexResponse::InternalSwap(UserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace auth
}  // namespace plugins
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserQueryRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserSignInRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserSignInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserSignInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserSignInResponse* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserSignInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserSignInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserSignUpRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserSignUpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserSignUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserEmailRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserTokenRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserResetPasswordRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserResetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserSetProfileRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserSetProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserSetProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserGetProfileResponse* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserGetProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserGetProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserLogsRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserLogsResponse_Item* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserLogsResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserLogsResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserLogsResponse* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserLogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserChangePasswordRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserChangePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserSetPasswordRequest* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserSetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserSetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserIndexResponse_Item* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::auth::v1::UserIndexResponse* Arena::CreateMaybeMessage< ::palm::plugins::auth::v1::UserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::auth::v1::UserIndexResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
