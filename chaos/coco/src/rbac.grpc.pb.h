// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rbac.proto
#ifndef GRPC_rbac_2eproto__INCLUDED
#define GRPC_rbac_2eproto__INCLUDED

#include "rbac.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace palm {
namespace plugins {
namespace rbac {
namespace v1 {

class Policy final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.plugins.rbac.v1.Policy";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::rbac::v1::RoleListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetAllRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetAllRolesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::rbac::v1::UserListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>> AsyncGetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>>(AsyncGetAllUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>> PrepareAsyncGetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>>(PrepareAsyncGetAllUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::RoleListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::UserListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>> AsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>>(AsyncGetUsersForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>> PrepareAsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>>(PrepareAsyncGetUsersForRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status AddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::RoleListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::RoleListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetImplicitUsersForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetImplicitUsersForRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetPermissionsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetPermissionsForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetPermissionsForRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetImplicitPermissionsForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetImplicitPermissionsForRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::ResourceListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>> AsyncGetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>>(AsyncGetImplicitResourcesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>> PrepareAsyncGetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>>(PrepareAsyncGetImplicitResourcesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::ResourceListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>> AsyncGetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>>(AsyncGetImplicitResourcesForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>> PrepareAsyncGetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>>(PrepareAsyncGetImplicitResourcesForRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddPermissionsRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeletePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeletePermissionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::UserListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::UserListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::UserListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::UserListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>* AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>* PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>* AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::UserListResponse>* PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetImplicitPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetImplicitPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>* AsyncGetImplicitResourcesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>* PrepareAsyncGetImplicitResourcesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>* AsyncGetImplicitResourcesForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::plugins::rbac::v1::ResourceListResponse>* PrepareAsyncGetImplicitResourcesForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::rbac::v1::RoleListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetAllRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetAllRolesRaw(context, request, cq));
    }
    ::grpc::Status GetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::plugins::rbac::v1::UserListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>> AsyncGetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>>(AsyncGetAllUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>> PrepareAsyncGetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>>(PrepareAsyncGetAllUsersRaw(context, request, cq));
    }
    ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status GetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::RoleListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status GetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::UserListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>> AsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>>(AsyncGetUsersForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>> PrepareAsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>>(PrepareAsyncGetUsersForRoleRaw(context, request, cq));
    }
    ::grpc::Status AddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::RoleListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::RoleListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> AsyncGetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(AsyncGetImplicitUsersForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>> PrepareAsyncGetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>>(PrepareAsyncGetImplicitUsersForRoleRaw(context, request, cq));
    }
    ::grpc::Status GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetPermissionsForUserRaw(context, request, cq));
    }
    ::grpc::Status GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetPermissionsForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetPermissionsForRoleRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::PermissionListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> AsyncGetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(AsyncGetImplicitPermissionsForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>> PrepareAsyncGetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>>(PrepareAsyncGetImplicitPermissionsForRoleRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::palm::plugins::rbac::v1::ResourceListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>> AsyncGetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>>(AsyncGetImplicitResourcesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>> PrepareAsyncGetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>>(PrepareAsyncGetImplicitResourcesForUserRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::palm::plugins::rbac::v1::ResourceListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>> AsyncGetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>>(AsyncGetImplicitResourcesForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>> PrepareAsyncGetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>>(PrepareAsyncGetImplicitResourcesForRoleRaw(context, request, cq));
    }
    ::grpc::Status AddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddPermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeletePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeletePermissionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllRoles(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::UserListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllUsers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::UserListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::UserListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::UserListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitUsersForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitPermissionsForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitResourcesForUser(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitResourcesForRole(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddPermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeletePermissions(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>* AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>* PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>* AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::UserListResponse>* PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* AsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::RoleListResponse>* PrepareAsyncGetImplicitUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* AsyncGetImplicitPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::PermissionListResponse>* PrepareAsyncGetImplicitPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>* AsyncGetImplicitResourcesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>* PrepareAsyncGetImplicitResourcesForUserRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>* AsyncGetImplicitResourcesForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::plugins::rbac::v1::ResourceListResponse>* PrepareAsyncGetImplicitResourcesForRoleRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::RoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddPermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsersForRole_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitUsersForRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissionsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissionsForRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitPermissionsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitPermissionsForRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitResourcesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitResourcesForRole_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAllRoles(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::RoleListResponse* response);
    virtual ::grpc::Status GetAllUsers(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::UserListResponse* response);
    virtual ::grpc::Status DeleteUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetRolesForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response);
    virtual ::grpc::Status GetUsersForRole(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::UserListResponse* response);
    virtual ::grpc::Status AddRolesForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response);
    virtual ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response);
    virtual ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response);
    virtual ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response);
    virtual ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response);
    virtual ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response);
    virtual ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response);
    virtual ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response);
    virtual ::grpc::Status AddPermissions(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status DeletePermissions(::grpc::ServerContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRoles(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::RoleListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllUsers(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::UserListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRole() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::RoleListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsersForRole(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::UserListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRolesForUser() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AddRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRolesForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolesForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitRolesForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::RoleListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitUsersForRole() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetImplicitUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitUsersForRole(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::RoleListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissionsForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::PermissionListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissionsForRole() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissionsForRole(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::PermissionListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitPermissionsForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::PermissionListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitPermissionsForRole() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetImplicitPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitPermissionsForRole(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::PermissionListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitResourcesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitResourcesForUser() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetImplicitResourcesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitResourcesForUser(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::ResourceListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitResourcesForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitResourcesForRole() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetImplicitResourcesForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitResourcesForRole(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::RoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::plugins::rbac::v1::ResourceListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPermissions() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPermissions(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::PermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissions(::grpc::ServerContext* context, ::palm::plugins::rbac::v1::PermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllRoles<WithAsyncMethod_GetAllUsers<WithAsyncMethod_DeleteUser<WithAsyncMethod_DeleteRole<WithAsyncMethod_GetRolesForUser<WithAsyncMethod_GetUsersForRole<WithAsyncMethod_AddRolesForUser<WithAsyncMethod_DeleteRolesForUser<WithAsyncMethod_GetImplicitRolesForUser<WithAsyncMethod_GetImplicitUsersForRole<WithAsyncMethod_GetPermissionsForUser<WithAsyncMethod_GetPermissionsForRole<WithAsyncMethod_GetImplicitPermissionsForUser<WithAsyncMethod_GetImplicitPermissionsForRole<WithAsyncMethod_GetImplicitResourcesForUser<WithAsyncMethod_GetImplicitResourcesForRole<WithAsyncMethod_AddPermissions<WithAsyncMethod_DeletePermissions<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::RoleListResponse* response) { return this->GetAllRoles(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllRoles(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::palm::plugins::rbac::v1::RoleListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::palm::plugins::rbac::v1::RoleListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRoles(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::palm::plugins::rbac::v1::UserListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::palm::plugins::rbac::v1::UserListResponse* response) { return this->GetAllUsers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllUsers(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::palm::plugins::rbac::v1::UserListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::palm::plugins::rbac::v1::UserListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::google::protobuf::Empty* response) { return this->DeleteUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::UserRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRole() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::google::protobuf::Empty* response) { return this->DeleteRole(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRole(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RoleRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response) { return this->GetRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetRolesForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::UserListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::UserListResponse* response) { return this->GetUsersForRole(context, request, response); }));}
    void SetMessageAllocatorFor_GetUsersForRole(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::UserListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::UserListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsersForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddRolesForUser() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response) { return this->AddRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_AddRolesForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RolesForUserRequest* request, ::google::protobuf::Empty* response) { return this->DeleteRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRolesForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response) { return this->GetImplicitRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitRolesForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitUsersForRole() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::RoleListResponse* response) { return this->GetImplicitUsersForRole(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitUsersForRole(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::RoleListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::RoleListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitUsersForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response) { return this->GetPermissionsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissionsForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPermissionsForRole() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response) { return this->GetPermissionsForRole(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissionsForRole(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissionsForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response) { return this->GetImplicitPermissionsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitPermissionsForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitPermissionsForRole() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::PermissionListResponse* response) { return this->GetImplicitPermissionsForRole(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitPermissionsForRole(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitPermissionsForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitResourcesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitResourcesForUser() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::ResourceListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::UserRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response) { return this->GetImplicitResourcesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitResourcesForUser(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::ResourceListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::ResourceListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitResourcesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitResourcesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitResourcesForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitResourcesForRole() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::ResourceListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::RoleRequest* request, ::palm::plugins::rbac::v1::ResourceListResponse* response) { return this->GetImplicitResourcesForRole(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitResourcesForRole(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::ResourceListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::ResourceListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitResourcesForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitResourcesForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddPermissions() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response) { return this->AddPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_AddPermissions(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::plugins::rbac::v1::PermissionsRequest* request, ::google::protobuf::Empty* response) { return this->DeletePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePermissions(
        ::grpc::MessageAllocator< ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAllRoles<WithCallbackMethod_GetAllUsers<WithCallbackMethod_DeleteUser<WithCallbackMethod_DeleteRole<WithCallbackMethod_GetRolesForUser<WithCallbackMethod_GetUsersForRole<WithCallbackMethod_AddRolesForUser<WithCallbackMethod_DeleteRolesForUser<WithCallbackMethod_GetImplicitRolesForUser<WithCallbackMethod_GetImplicitUsersForRole<WithCallbackMethod_GetPermissionsForUser<WithCallbackMethod_GetPermissionsForRole<WithCallbackMethod_GetImplicitPermissionsForUser<WithCallbackMethod_GetImplicitPermissionsForRole<WithCallbackMethod_GetImplicitResourcesForUser<WithCallbackMethod_GetImplicitResourcesForRole<WithCallbackMethod_AddPermissions<WithCallbackMethod_DeletePermissions<Service > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRole() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AddRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitUsersForRole() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetImplicitUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissionsForRole() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitPermissionsForRole() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetImplicitPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitResourcesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitResourcesForUser() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetImplicitResourcesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitResourcesForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitResourcesForRole() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetImplicitResourcesForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPermissions() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRoles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsersForRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRolesForUser() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_AddRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitUsersForRole() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetImplicitUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitUsersForRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissionsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissionsForRole() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissionsForRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitPermissionsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitPermissionsForRole() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetImplicitPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitPermissionsForRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitResourcesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitResourcesForUser() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetImplicitResourcesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitResourcesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitResourcesForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitResourcesForRole() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetImplicitResourcesForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitResourcesForRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPermissions() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllRoles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRoles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUsersForRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsersForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitUsersForRole() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitUsersForRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitUsersForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissionsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPermissionsForRole() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissionsForRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissionsForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitPermissionsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitPermissionsForRole() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitPermissionsForRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitPermissionsForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitResourcesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitResourcesForUser() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitResourcesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitResourcesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitResourcesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitResourcesForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitResourcesForRole() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitResourcesForRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitResourcesForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitResourcesForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddPermissions() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPermissions(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePermissions(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::palm::plugins::rbac::v1::RoleListResponse>* streamer) {
                       return this->StreamedGetAllRoles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::palm::plugins::rbac::v1::RoleListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::palm::plugins::rbac::v1::UserListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::palm::plugins::rbac::v1::UserListResponse>* streamer) {
                       return this->StreamedGetAllUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::palm::plugins::rbac::v1::UserListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::UserRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::UserRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::UserRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRole() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RoleRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RoleRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RoleRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>* streamer) {
                       return this->StreamedGetRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::UserRequest,::palm::plugins::rbac::v1::RoleListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::UserListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::UserListResponse>* streamer) {
                       return this->StreamedGetUsersForRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::UserListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUsersForRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RoleRequest,::palm::plugins::rbac::v1::UserListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAddRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RolesForUserRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RolesForUserRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RolesForUserRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RolesForUserRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::RoleListResponse>* streamer) {
                       return this->StreamedGetImplicitRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::UserRequest,::palm::plugins::rbac::v1::RoleListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitUsersForRole() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::RoleListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::RoleListResponse>* streamer) {
                       return this->StreamedGetImplicitUsersForRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::RoleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitUsersForRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RoleRequest,::palm::plugins::rbac::v1::RoleListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* streamer) {
                       return this->StreamedGetPermissionsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissionsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::UserRequest,::palm::plugins::rbac::v1::PermissionListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissionsForRole() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* streamer) {
                       return this->StreamedGetPermissionsForRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissionsForRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RoleRequest,::palm::plugins::rbac::v1::PermissionListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* streamer) {
                       return this->StreamedGetImplicitPermissionsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitPermissionsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::UserRequest,::palm::plugins::rbac::v1::PermissionListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitPermissionsForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitPermissionsForRole() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::PermissionListResponse>* streamer) {
                       return this->StreamedGetImplicitPermissionsForRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitPermissionsForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitPermissionsForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::PermissionListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitPermissionsForRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RoleRequest,::palm::plugins::rbac::v1::PermissionListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitResourcesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitResourcesForUser() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::ResourceListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::UserRequest, ::palm::plugins::rbac::v1::ResourceListResponse>* streamer) {
                       return this->StreamedGetImplicitResourcesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitResourcesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitResourcesForUser(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::UserRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitResourcesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::UserRequest,::palm::plugins::rbac::v1::ResourceListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitResourcesForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitResourcesForRole() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::ResourceListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::RoleRequest, ::palm::plugins::rbac::v1::ResourceListResponse>* streamer) {
                       return this->StreamedGetImplicitResourcesForRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitResourcesForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitResourcesForRole(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::RoleRequest* /*request*/, ::palm::plugins::rbac::v1::ResourceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitResourcesForRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::RoleRequest,::palm::plugins::rbac::v1::ResourceListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPermissions() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAddPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::PermissionsRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::plugins::rbac::v1::PermissionsRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeletePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::palm::plugins::rbac::v1::PermissionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::plugins::rbac::v1::PermissionsRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllRoles<WithStreamedUnaryMethod_GetAllUsers<WithStreamedUnaryMethod_DeleteUser<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_GetRolesForUser<WithStreamedUnaryMethod_GetUsersForRole<WithStreamedUnaryMethod_AddRolesForUser<WithStreamedUnaryMethod_DeleteRolesForUser<WithStreamedUnaryMethod_GetImplicitRolesForUser<WithStreamedUnaryMethod_GetImplicitUsersForRole<WithStreamedUnaryMethod_GetPermissionsForUser<WithStreamedUnaryMethod_GetPermissionsForRole<WithStreamedUnaryMethod_GetImplicitPermissionsForUser<WithStreamedUnaryMethod_GetImplicitPermissionsForRole<WithStreamedUnaryMethod_GetImplicitResourcesForUser<WithStreamedUnaryMethod_GetImplicitResourcesForRole<WithStreamedUnaryMethod_AddPermissions<WithStreamedUnaryMethod_DeletePermissions<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllRoles<WithStreamedUnaryMethod_GetAllUsers<WithStreamedUnaryMethod_DeleteUser<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_GetRolesForUser<WithStreamedUnaryMethod_GetUsersForRole<WithStreamedUnaryMethod_AddRolesForUser<WithStreamedUnaryMethod_DeleteRolesForUser<WithStreamedUnaryMethod_GetImplicitRolesForUser<WithStreamedUnaryMethod_GetImplicitUsersForRole<WithStreamedUnaryMethod_GetPermissionsForUser<WithStreamedUnaryMethod_GetPermissionsForRole<WithStreamedUnaryMethod_GetImplicitPermissionsForUser<WithStreamedUnaryMethod_GetImplicitPermissionsForRole<WithStreamedUnaryMethod_GetImplicitResourcesForUser<WithStreamedUnaryMethod_GetImplicitResourcesForRole<WithStreamedUnaryMethod_AddPermissions<WithStreamedUnaryMethod_DeletePermissions<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace rbac
}  // namespace plugins
}  // namespace palm


#endif  // GRPC_rbac_2eproto__INCLUDED
