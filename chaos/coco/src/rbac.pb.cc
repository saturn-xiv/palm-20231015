// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#include "rbac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace plugins {
namespace rbac {
namespace v1 {
PROTOBUF_CONSTEXPR UserRequest::UserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRequestDefaultTypeInternal() {}
  union {
    UserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRequestDefaultTypeInternal _UserRequest_default_instance_;
PROTOBUF_CONSTEXPR UserListResponse_Item::UserListResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserListResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserListResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserListResponse_ItemDefaultTypeInternal() {}
  union {
    UserListResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserListResponse_ItemDefaultTypeInternal _UserListResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserListResponse::UserListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserListResponseDefaultTypeInternal() {}
  union {
    UserListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserListResponseDefaultTypeInternal _UserListResponse_default_instance_;
PROTOBUF_CONSTEXPR RoleRequest::RoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleRequestDefaultTypeInternal() {}
  union {
    RoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleRequestDefaultTypeInternal _RoleRequest_default_instance_;
PROTOBUF_CONSTEXPR RoleListResponse_Item::RoleListResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleListResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleListResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleListResponse_ItemDefaultTypeInternal() {}
  union {
    RoleListResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleListResponse_ItemDefaultTypeInternal _RoleListResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR RoleListResponse::RoleListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleListResponseDefaultTypeInternal() {}
  union {
    RoleListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleListResponseDefaultTypeInternal _RoleListResponse_default_instance_;
PROTOBUF_CONSTEXPR RolesForUserRequest::RolesForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolesForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolesForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolesForUserRequestDefaultTypeInternal() {}
  union {
    RolesForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolesForUserRequestDefaultTypeInternal _RolesForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR PermissionListResponse_Item::PermissionListResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionListResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionListResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionListResponse_ItemDefaultTypeInternal() {}
  union {
    PermissionListResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionListResponse_ItemDefaultTypeInternal _PermissionListResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR PermissionListResponse::PermissionListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionListResponseDefaultTypeInternal() {}
  union {
    PermissionListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionListResponseDefaultTypeInternal _PermissionListResponse_default_instance_;
PROTOBUF_CONSTEXPR PermissionsRequest::PermissionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.who_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PermissionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionsRequestDefaultTypeInternal() {}
  union {
    PermissionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionsRequestDefaultTypeInternal _PermissionsRequest_default_instance_;
PROTOBUF_CONSTEXPR ResourceListResponse_Item::ResourceListResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0} {}
struct ResourceListResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceListResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceListResponse_ItemDefaultTypeInternal() {}
  union {
    ResourceListResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceListResponse_ItemDefaultTypeInternal _ResourceListResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR ResourceListResponse::ResourceListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceListResponseDefaultTypeInternal() {}
  union {
    ResourceListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceListResponseDefaultTypeInternal _ResourceListResponse_default_instance_;
}  // namespace v1
}  // namespace rbac
}  // namespace plugins
}  // namespace palm
static ::_pb::Metadata file_level_metadata_rbac_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rbac_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rbac_2eproto = nullptr;

const uint32_t TableStruct_rbac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserRequest, _impl_.nick_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserListResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserListResponse_Item, _impl_.nick_name_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserListResponse_Item, _impl_.real_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::UserListResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleListResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleListResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleListResponse_Item, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RoleListResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RolesForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RolesForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::RolesForUserRequest, _impl_.roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionListResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionListResponse_Item, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionListResponse_Item, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionListResponse_Item, _impl_.resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionListResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionsRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionsRequest, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionsRequest, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::PermissionsRequest, _impl_.who_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::ResourceListResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::ResourceListResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::ResourceListResponse_Item, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::ResourceListResponse_Item, _impl_.id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::ResourceListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::plugins::rbac::v1::ResourceListResponse, _impl_.item_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::plugins::rbac::v1::UserRequest)},
  { 7, -1, -1, sizeof(::palm::plugins::rbac::v1::UserListResponse_Item)},
  { 15, -1, -1, sizeof(::palm::plugins::rbac::v1::UserListResponse)},
  { 22, -1, -1, sizeof(::palm::plugins::rbac::v1::RoleRequest)},
  { 29, -1, -1, sizeof(::palm::plugins::rbac::v1::RoleListResponse_Item)},
  { 37, -1, -1, sizeof(::palm::plugins::rbac::v1::RoleListResponse)},
  { 44, -1, -1, sizeof(::palm::plugins::rbac::v1::RolesForUserRequest)},
  { 52, -1, -1, sizeof(::palm::plugins::rbac::v1::PermissionListResponse_Item)},
  { 61, -1, -1, sizeof(::palm::plugins::rbac::v1::PermissionListResponse)},
  { 68, -1, -1, sizeof(::palm::plugins::rbac::v1::PermissionsRequest)},
  { 79, 87, -1, sizeof(::palm::plugins::rbac::v1::ResourceListResponse_Item)},
  { 89, -1, -1, sizeof(::palm::plugins::rbac::v1::ResourceListResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::plugins::rbac::v1::_UserRequest_default_instance_._instance,
  &::palm::plugins::rbac::v1::_UserListResponse_Item_default_instance_._instance,
  &::palm::plugins::rbac::v1::_UserListResponse_default_instance_._instance,
  &::palm::plugins::rbac::v1::_RoleRequest_default_instance_._instance,
  &::palm::plugins::rbac::v1::_RoleListResponse_Item_default_instance_._instance,
  &::palm::plugins::rbac::v1::_RoleListResponse_default_instance_._instance,
  &::palm::plugins::rbac::v1::_RolesForUserRequest_default_instance_._instance,
  &::palm::plugins::rbac::v1::_PermissionListResponse_Item_default_instance_._instance,
  &::palm::plugins::rbac::v1::_PermissionListResponse_default_instance_._instance,
  &::palm::plugins::rbac::v1::_PermissionsRequest_default_instance_._instance,
  &::palm::plugins::rbac::v1::_ResourceListResponse_Item_default_instance_._instance,
  &::palm::plugins::rbac::v1::_ResourceListResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rbac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrbac.proto\022\024palm.plugins.rbac.v1\032\033goog"
  "le/protobuf/empty.proto\" \n\013UserRequest\022\021"
  "\n\tnick_name\030\001 \001(\t\"|\n\020UserListResponse\022:\n"
  "\005items\030\001 \003(\0132+.palm.plugins.rbac.v1.User"
  "ListResponse.Item\032,\n\004Item\022\021\n\tnick_name\030\001"
  " \001(\t\022\021\n\treal_name\030\002 \001(\t\"\033\n\013RoleRequest\022\014"
  "\n\004code\030\001 \001(\t\"r\n\020RoleListResponse\022:\n\005item"
  "s\030\001 \003(\0132+.palm.plugins.rbac.v1.RoleListR"
  "esponse.Item\032\"\n\004Item\022\014\n\004code\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\"2\n\023RolesForUserRequest\022\014\n\004user\030"
  "\001 \001(\t\022\r\n\005roles\030\002 \003(\t\"\311\001\n\026PermissionListR"
  "esponse\022@\n\005items\030\001 \003(\01321.palm.plugins.rb"
  "ac.v1.PermissionListResponse.Item\032m\n\004Ite"
  "m\022\017\n\007subject\030\001 \001(\t\022\021\n\toperation\030\002 \001(\t\022A\n"
  "\010resource\030\003 \001(\0132/.palm.plugins.rbac.v1.R"
  "esourceListResponse.Item\"\221\001\n\022Permissions"
  "Request\022\016\n\004user\030\001 \001(\tH\000\022\016\n\004role\030\002 \001(\tH\000\022"
  "\021\n\toperation\030\003 \001(\t\022A\n\010resource\030\004 \001(\0132/.p"
  "alm.plugins.rbac.v1.ResourceListResponse"
  ".ItemB\005\n\003who\"\203\001\n\024ResourceListResponse\022=\n"
  "\004item\030\001 \003(\0132/.palm.plugins.rbac.v1.Resou"
  "rceListResponse.Item\032,\n\004Item\022\014\n\004type\030\001 \001"
  "(\t\022\017\n\002id\030\002 \001(\005H\000\210\001\001B\005\n\003_id*#\n\004Role\022\010\n\004RO"
  "OT\020\000\022\021\n\rADMINISTRATOR\020\0012\322\r\n\006Policy\022O\n\013Ge"
  "tAllRoles\022\026.google.protobuf.Empty\032&.palm"
  ".plugins.rbac.v1.RoleListResponse\"\000\022O\n\013G"
  "etAllUsers\022\026.google.protobuf.Empty\032&.pal"
  "m.plugins.rbac.v1.UserListResponse\"\000\022I\n\n"
  "DeleteUser\022!.palm.plugins.rbac.v1.UserRe"
  "quest\032\026.google.protobuf.Empty\"\000\022I\n\nDelet"
  "eRole\022!.palm.plugins.rbac.v1.RoleRequest"
  "\032\026.google.protobuf.Empty\"\000\022^\n\017GetRolesFo"
  "rUser\022!.palm.plugins.rbac.v1.UserRequest"
  "\032&.palm.plugins.rbac.v1.RoleListResponse"
  "\"\000\022^\n\017GetUsersForRole\022!.palm.plugins.rba"
  "c.v1.RoleRequest\032&.palm.plugins.rbac.v1."
  "UserListResponse\"\000\022V\n\017AddRolesForUser\022)."
  "palm.plugins.rbac.v1.RolesForUserRequest"
  "\032\026.google.protobuf.Empty\"\000\022Y\n\022DeleteRole"
  "sForUser\022).palm.plugins.rbac.v1.RolesFor"
  "UserRequest\032\026.google.protobuf.Empty\"\000\022f\n"
  "\027GetImplicitRolesForUser\022!.palm.plugins."
  "rbac.v1.UserRequest\032&.palm.plugins.rbac."
  "v1.RoleListResponse\"\000\022f\n\027GetImplicitUser"
  "sForRole\022!.palm.plugins.rbac.v1.RoleRequ"
  "est\032&.palm.plugins.rbac.v1.RoleListRespo"
  "nse\"\000\022j\n\025GetPermissionsForUser\022!.palm.pl"
  "ugins.rbac.v1.UserRequest\032,.palm.plugins"
  ".rbac.v1.PermissionListResponse\"\000\022j\n\025Get"
  "PermissionsForRole\022!.palm.plugins.rbac.v"
  "1.RoleRequest\032,.palm.plugins.rbac.v1.Per"
  "missionListResponse\"\000\022r\n\035GetImplicitPerm"
  "issionsForUser\022!.palm.plugins.rbac.v1.Us"
  "erRequest\032,.palm.plugins.rbac.v1.Permiss"
  "ionListResponse\"\000\022r\n\035GetImplicitPermissi"
  "onsForRole\022!.palm.plugins.rbac.v1.RoleRe"
  "quest\032,.palm.plugins.rbac.v1.PermissionL"
  "istResponse\"\000\022n\n\033GetImplicitResourcesFor"
  "User\022!.palm.plugins.rbac.v1.UserRequest\032"
  "*.palm.plugins.rbac.v1.ResourceListRespo"
  "nse\"\000\022n\n\033GetImplicitResourcesForRole\022!.p"
  "alm.plugins.rbac.v1.RoleRequest\032*.palm.p"
  "lugins.rbac.v1.ResourceListResponse\"\000\022T\n"
  "\016AddPermissions\022(.palm.plugins.rbac.v1.P"
  "ermissionsRequest\032\026.google.protobuf.Empt"
  "y\"\000\022W\n\021DeletePermissions\022(.palm.plugins."
  "rbac.v1.PermissionsRequest\032\026.google.prot"
  "obuf.Empty\"\000B\002P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rbac_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_rbac_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rbac_2eproto = {
    false, false, 2704, descriptor_table_protodef_rbac_2eproto,
    "rbac.proto",
    &descriptor_table_rbac_2eproto_once, descriptor_table_rbac_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_rbac_2eproto::offsets,
    file_level_metadata_rbac_2eproto, file_level_enum_descriptors_rbac_2eproto,
    file_level_service_descriptors_rbac_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rbac_2eproto_getter() {
  return &descriptor_table_rbac_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rbac_2eproto(&descriptor_table_rbac_2eproto);
namespace palm {
namespace plugins {
namespace rbac {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rbac_2eproto);
  return file_level_enum_descriptors_rbac_2eproto[0];
}
bool Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UserRequest::_Internal {
 public:
};

UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    _this->_impl_.nick_name_.Set(from._internal_nick_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.UserRequest)
}

inline void UserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.UserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_.Destroy();
}

void UserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.UserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nick_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.UserRequest.nick_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.UserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.UserRequest.nick_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nick_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.UserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRequest::GetClassData() const { return &_class_data_; }


void UserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRequest*>(&to_msg);
  auto& from = static_cast<const UserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.UserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _this->_internal_set_nick_name(from._internal_nick_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[0]);
}

// ===================================================================

class UserListResponse_Item::_Internal {
 public:
};

UserListResponse_Item::UserListResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.UserListResponse.Item)
}
UserListResponse_Item::UserListResponse_Item(const UserListResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserListResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.real_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    _this->_impl_.nick_name_.Set(from._internal_nick_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.UserListResponse.Item)
}

inline void UserListResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.real_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserListResponse_Item::~UserListResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.UserListResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserListResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_.Destroy();
  _impl_.real_name_.Destroy();
}

void UserListResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserListResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.UserListResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserListResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nick_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.UserListResponse.Item.nick_name"));
        } else
          goto handle_unusual;
        continue;
      // string real_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.UserListResponse.Item.real_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserListResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.UserListResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.UserListResponse.Item.nick_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nick_name(), target);
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.UserListResponse.Item.real_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.UserListResponse.Item)
  return target;
}

size_t UserListResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.UserListResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserListResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserListResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserListResponse_Item::GetClassData() const { return &_class_data_; }


void UserListResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserListResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserListResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.UserListResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _this->_internal_set_nick_name(from._internal_nick_name());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserListResponse_Item::CopyFrom(const UserListResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.UserListResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListResponse_Item::IsInitialized() const {
  return true;
}

void UserListResponse_Item::InternalSwap(UserListResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserListResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[1]);
}

// ===================================================================

class UserListResponse::_Internal {
 public:
};

UserListResponse::UserListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.UserListResponse)
}
UserListResponse::UserListResponse(const UserListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.UserListResponse)
}

inline void UserListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserListResponse::~UserListResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.UserListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UserListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.UserListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.rbac.v1.UserListResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.UserListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.UserListResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.UserListResponse)
  return target;
}

size_t UserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.UserListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.UserListResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserListResponse::GetClassData() const { return &_class_data_; }


void UserListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserListResponse*>(&to_msg);
  auto& from = static_cast<const UserListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.UserListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserListResponse::CopyFrom(const UserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.UserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListResponse::IsInitialized() const {
  return true;
}

void UserListResponse::InternalSwap(UserListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[2]);
}

// ===================================================================

class RoleRequest::_Internal {
 public:
};

RoleRequest::RoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.RoleRequest)
}
RoleRequest::RoleRequest(const RoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.RoleRequest)
}

inline void RoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleRequest::~RoleRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.RoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void RoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.RoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.RoleRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.RoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.RoleRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.RoleRequest)
  return target;
}

size_t RoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.RoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleRequest::GetClassData() const { return &_class_data_; }


void RoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleRequest*>(&to_msg);
  auto& from = static_cast<const RoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.RoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleRequest::CopyFrom(const RoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.RoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRequest::IsInitialized() const {
  return true;
}

void RoleRequest::InternalSwap(RoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[3]);
}

// ===================================================================

class RoleListResponse_Item::_Internal {
 public:
};

RoleListResponse_Item::RoleListResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.RoleListResponse.Item)
}
RoleListResponse_Item::RoleListResponse_Item(const RoleListResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleListResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.RoleListResponse.Item)
}

inline void RoleListResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleListResponse_Item::~RoleListResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.RoleListResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleListResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.name_.Destroy();
}

void RoleListResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleListResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.RoleListResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleListResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.RoleListResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.RoleListResponse.Item.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleListResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.RoleListResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.RoleListResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.RoleListResponse.Item.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.RoleListResponse.Item)
  return target;
}

size_t RoleListResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.RoleListResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleListResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleListResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleListResponse_Item::GetClassData() const { return &_class_data_; }


void RoleListResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleListResponse_Item*>(&to_msg);
  auto& from = static_cast<const RoleListResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.RoleListResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleListResponse_Item::CopyFrom(const RoleListResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.RoleListResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListResponse_Item::IsInitialized() const {
  return true;
}

void RoleListResponse_Item::InternalSwap(RoleListResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleListResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[4]);
}

// ===================================================================

class RoleListResponse::_Internal {
 public:
};

RoleListResponse::RoleListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.RoleListResponse)
}
RoleListResponse::RoleListResponse(const RoleListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.RoleListResponse)
}

inline void RoleListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleListResponse::~RoleListResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.RoleListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoleListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.RoleListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.rbac.v1.RoleListResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.RoleListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.RoleListResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.RoleListResponse)
  return target;
}

size_t RoleListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.RoleListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.RoleListResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleListResponse::GetClassData() const { return &_class_data_; }


void RoleListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleListResponse*>(&to_msg);
  auto& from = static_cast<const RoleListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.RoleListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleListResponse::CopyFrom(const RoleListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.RoleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListResponse::IsInitialized() const {
  return true;
}

void RoleListResponse::InternalSwap(RoleListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[5]);
}

// ===================================================================

class RolesForUserRequest::_Internal {
 public:
};

RolesForUserRequest::RolesForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.RolesForUserRequest)
}
RolesForUserRequest::RolesForUserRequest(const RolesForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolesForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.RolesForUserRequest)
}

inline void RolesForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RolesForUserRequest::~RolesForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.RolesForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolesForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
  _impl_.user_.Destroy();
}

void RolesForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolesForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.RolesForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolesForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.RolesForUserRequest.user"));
        } else
          goto handle_unusual;
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.RolesForUserRequest.roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RolesForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.RolesForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.RolesForUserRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.RolesForUserRequest.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.RolesForUserRequest)
  return target;
}

size_t RolesForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.RolesForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.roles_.size());
  for (int i = 0, n = _impl_.roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.roles_.Get(i));
  }

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolesForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolesForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolesForUserRequest::GetClassData() const { return &_class_data_; }


void RolesForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolesForUserRequest*>(&to_msg);
  auto& from = static_cast<const RolesForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.RolesForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolesForUserRequest::CopyFrom(const RolesForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.RolesForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolesForUserRequest::IsInitialized() const {
  return true;
}

void RolesForUserRequest::InternalSwap(RolesForUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RolesForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[6]);
}

// ===================================================================

class PermissionListResponse_Item::_Internal {
 public:
  static const ::palm::plugins::rbac::v1::ResourceListResponse_Item& resource(const PermissionListResponse_Item* msg);
};

const ::palm::plugins::rbac::v1::ResourceListResponse_Item&
PermissionListResponse_Item::_Internal::resource(const PermissionListResponse_Item* msg) {
  return *msg->_impl_.resource_;
}
PermissionListResponse_Item::PermissionListResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.PermissionListResponse.Item)
}
PermissionListResponse_Item::PermissionListResponse_Item(const PermissionListResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionListResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::palm::plugins::rbac::v1::ResourceListResponse_Item(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.PermissionListResponse.Item)
}

inline void PermissionListResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PermissionListResponse_Item::~PermissionListResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.PermissionListResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionListResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_.Destroy();
  _impl_.operation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void PermissionListResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionListResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.PermissionListResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_.ClearToEmpty();
  _impl_.operation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionListResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.PermissionListResponse.Item.subject"));
        } else
          goto handle_unusual;
        continue;
      // string operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.PermissionListResponse.Item.operation"));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.rbac.v1.ResourceListResponse.Item resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermissionListResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.PermissionListResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.PermissionListResponse.Item.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // string operation = 2;
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.PermissionListResponse.Item.operation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operation(), target);
  }

  // .palm.plugins.rbac.v1.ResourceListResponse.Item resource = 3;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.PermissionListResponse.Item)
  return target;
}

size_t PermissionListResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.PermissionListResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string operation = 2;
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // .palm.plugins.rbac.v1.ResourceListResponse.Item resource = 3;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionListResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionListResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionListResponse_Item::GetClassData() const { return &_class_data_; }


void PermissionListResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionListResponse_Item*>(&to_msg);
  auto& from = static_cast<const PermissionListResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.PermissionListResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::palm::plugins::rbac::v1::ResourceListResponse_Item::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionListResponse_Item::CopyFrom(const PermissionListResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.PermissionListResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionListResponse_Item::IsInitialized() const {
  return true;
}

void PermissionListResponse_Item::InternalSwap(PermissionListResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  swap(_impl_.resource_, other->_impl_.resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionListResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[7]);
}

// ===================================================================

class PermissionListResponse::_Internal {
 public:
};

PermissionListResponse::PermissionListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.PermissionListResponse)
}
PermissionListResponse::PermissionListResponse(const PermissionListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.PermissionListResponse)
}

inline void PermissionListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PermissionListResponse::~PermissionListResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.PermissionListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void PermissionListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.PermissionListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.rbac.v1.PermissionListResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermissionListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.PermissionListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.PermissionListResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.PermissionListResponse)
  return target;
}

size_t PermissionListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.PermissionListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.PermissionListResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionListResponse::GetClassData() const { return &_class_data_; }


void PermissionListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionListResponse*>(&to_msg);
  auto& from = static_cast<const PermissionListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.PermissionListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionListResponse::CopyFrom(const PermissionListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.PermissionListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionListResponse::IsInitialized() const {
  return true;
}

void PermissionListResponse::InternalSwap(PermissionListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[8]);
}

// ===================================================================

class PermissionsRequest::_Internal {
 public:
  static const ::palm::plugins::rbac::v1::ResourceListResponse_Item& resource(const PermissionsRequest* msg);
};

const ::palm::plugins::rbac::v1::ResourceListResponse_Item&
PermissionsRequest::_Internal::resource(const PermissionsRequest* msg) {
  return *msg->_impl_.resource_;
}
PermissionsRequest::PermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.PermissionsRequest)
}
PermissionsRequest::PermissionsRequest(const PermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.who_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::palm::plugins::rbac::v1::ResourceListResponse_Item(*from._impl_.resource_);
  }
  clear_has_who();
  switch (from.who_case()) {
    case kUser: {
      _this->_internal_set_user(from._internal_user());
      break;
    }
    case kRole: {
      _this->_internal_set_role(from._internal_role());
      break;
    }
    case WHO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.PermissionsRequest)
}

inline void PermissionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.who_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_who();
}

PermissionsRequest::~PermissionsRequest() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.PermissionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (has_who()) {
    clear_who();
  }
}

void PermissionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionsRequest::clear_who() {
// @@protoc_insertion_point(one_of_clear_start:palm.plugins.rbac.v1.PermissionsRequest)
  switch (who_case()) {
    case kUser: {
      _impl_.who_.user_.Destroy();
      break;
    }
    case kRole: {
      _impl_.who_.role_.Destroy();
      break;
    }
    case WHO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WHO_NOT_SET;
}


void PermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.PermissionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  clear_who();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.PermissionsRequest.user"));
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.PermissionsRequest.role"));
        } else
          goto handle_unusual;
        continue;
      // string operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.PermissionsRequest.operation"));
        } else
          goto handle_unusual;
        continue;
      // .palm.plugins.rbac.v1.ResourceListResponse.Item resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermissionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.PermissionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (_internal_has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.PermissionsRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string role = 2;
  if (_internal_has_role()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.PermissionsRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  // string operation = 3;
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.PermissionsRequest.operation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_operation(), target);
  }

  // .palm.plugins.rbac.v1.ResourceListResponse.Item resource = 4;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.PermissionsRequest)
  return target;
}

size_t PermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.PermissionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 3;
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // .palm.plugins.rbac.v1.ResourceListResponse.Item resource = 4;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  switch (who_case()) {
    // string user = 1;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user());
      break;
    }
    // string role = 2;
    case kRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_role());
      break;
    }
    case WHO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsRequest::GetClassData() const { return &_class_data_; }


void PermissionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionsRequest*>(&to_msg);
  auto& from = static_cast<const PermissionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.PermissionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::palm::plugins::rbac::v1::ResourceListResponse_Item::MergeFrom(
        from._internal_resource());
  }
  switch (from.who_case()) {
    case kUser: {
      _this->_internal_set_user(from._internal_user());
      break;
    }
    case kRole: {
      _this->_internal_set_role(from._internal_role());
      break;
    }
    case WHO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsRequest::CopyFrom(const PermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.PermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsRequest::IsInitialized() const {
  return true;
}

void PermissionsRequest::InternalSwap(PermissionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  swap(_impl_.resource_, other->_impl_.resource_);
  swap(_impl_.who_, other->_impl_.who_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[9]);
}

// ===================================================================

class ResourceListResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceListResponse_Item>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceListResponse_Item::ResourceListResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.ResourceListResponse.Item)
}
ResourceListResponse_Item::ResourceListResponse_Item(const ResourceListResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceListResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.ResourceListResponse.Item)
}

inline void ResourceListResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){0}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceListResponse_Item::~ResourceListResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.ResourceListResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceListResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void ResourceListResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceListResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.ResourceListResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceListResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.plugins.rbac.v1.ResourceListResponse.Item.type"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceListResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.ResourceListResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.plugins.rbac.v1.ResourceListResponse.Item.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional int32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.ResourceListResponse.Item)
  return target;
}

size_t ResourceListResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.ResourceListResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // optional int32 id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceListResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceListResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceListResponse_Item::GetClassData() const { return &_class_data_; }


void ResourceListResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceListResponse_Item*>(&to_msg);
  auto& from = static_cast<const ResourceListResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.ResourceListResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceListResponse_Item::CopyFrom(const ResourceListResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.ResourceListResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceListResponse_Item::IsInitialized() const {
  return true;
}

void ResourceListResponse_Item::InternalSwap(ResourceListResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceListResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[10]);
}

// ===================================================================

class ResourceListResponse::_Internal {
 public:
};

ResourceListResponse::ResourceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.plugins.rbac.v1.ResourceListResponse)
}
ResourceListResponse::ResourceListResponse(const ResourceListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.plugins.rbac.v1.ResourceListResponse)
}

inline void ResourceListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourceListResponse::~ResourceListResponse() {
  // @@protoc_insertion_point(destructor:palm.plugins.rbac.v1.ResourceListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
}

void ResourceListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.plugins.rbac.v1.ResourceListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.plugins.rbac.v1.ResourceListResponse.Item item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.plugins.rbac.v1.ResourceListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.ResourceListResponse.Item item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.plugins.rbac.v1.ResourceListResponse)
  return target;
}

size_t ResourceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.plugins.rbac.v1.ResourceListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.plugins.rbac.v1.ResourceListResponse.Item item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceListResponse::GetClassData() const { return &_class_data_; }


void ResourceListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceListResponse*>(&to_msg);
  auto& from = static_cast<const ResourceListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.plugins.rbac.v1.ResourceListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceListResponse::CopyFrom(const ResourceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.plugins.rbac.v1.ResourceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceListResponse::IsInitialized() const {
  return true;
}

void ResourceListResponse::InternalSwap(ResourceListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rbac
}  // namespace plugins
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::UserRequest*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::UserListResponse_Item*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::UserListResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::UserListResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::UserListResponse*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::UserListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::UserListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::RoleRequest*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::RoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::RoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::RoleListResponse_Item*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::RoleListResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::RoleListResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::RoleListResponse*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::RoleListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::RoleListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::RolesForUserRequest*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::RolesForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::RolesForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::PermissionListResponse_Item*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::PermissionListResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::PermissionListResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::PermissionListResponse*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::PermissionListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::PermissionListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::PermissionsRequest*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::PermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::PermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::ResourceListResponse_Item*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::ResourceListResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::ResourceListResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::plugins::rbac::v1::ResourceListResponse*
Arena::CreateMaybeMessage< ::palm::plugins::rbac::v1::ResourceListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::plugins::rbac::v1::ResourceListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
