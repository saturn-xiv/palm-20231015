// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#include "nut.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace nut {
namespace v1 {
PROTOBUF_CONSTEXPR IdRequest::IdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdRequestDefaultTypeInternal() {}
  union {
    IdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdRequestDefaultTypeInternal _IdRequest_default_instance_;
PROTOBUF_CONSTEXPR Pager::Pager(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagerDefaultTypeInternal() {}
  union {
    Pager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagerDefaultTypeInternal _Pager_default_instance_;
PROTOBUF_CONSTEXPR Pagination::Pagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.total_)*/int64_t{0}
  , /*decltype(_impl_.has_next_)*/false
  , /*decltype(_impl_.has_previous_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationDefaultTypeInternal _Pagination_default_instance_;
PROTOBUF_CONSTEXPR MediaContent::MediaContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.published_at_)*/nullptr
  , /*decltype(_impl_.editor_)*/0
  , /*decltype(_impl_.status_)*/0} {}
struct MediaContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaContentDefaultTypeInternal() {}
  union {
    MediaContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaContentDefaultTypeInternal _MediaContent_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
static ::_pb::Metadata file_level_metadata_nut_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nut_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_nut_2eproto = nullptr;

const uint32_t TableStruct_nut_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::IdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::IdRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pager, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pager, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pagination, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pagination, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pagination, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pagination, _impl_.has_next_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::Pagination, _impl_.has_previous_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::MediaContent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::MediaContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::MediaContent, _impl_.editor_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::MediaContent, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::MediaContent, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::MediaContent, _impl_.published_at_),
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::nut::v1::IdRequest)},
  { 7, -1, -1, sizeof(::palm::nut::v1::Pager)},
  { 15, -1, -1, sizeof(::palm::nut::v1::Pagination)},
  { 26, 36, -1, sizeof(::palm::nut::v1::MediaContent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::nut::v1::_IdRequest_default_instance_._instance,
  &::palm::nut::v1::_Pager_default_instance_._instance,
  &::palm::nut::v1::_Pagination_default_instance_._instance,
  &::palm::nut::v1::_MediaContent_default_instance_._instance,
};

const char descriptor_table_protodef_nut_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnut.proto\022\013palm.nut.v1\032\037google/protobu"
  "f/timestamp.proto\"\027\n\tIdRequest\022\n\n\002id\030\001 \001"
  "(\005\"#\n\005Pager\022\014\n\004page\030\001 \001(\003\022\014\n\004size\030\002 \001(\003\""
  "_\n\nPagination\022\014\n\004page\030\001 \001(\003\022\014\n\004size\030\002 \001("
  "\003\022\r\n\005total\030\003 \001(\003\022\020\n\010has_next\030\013 \001(\010\022\024\n\014ha"
  "s_previous\030\014 \001(\010\"\300\002\n\014MediaContent\0220\n\006edi"
  "tor\030\001 \001(\0162 .palm.nut.v1.MediaContent.Edi"
  "tor\022\014\n\004body\030\002 \001(\t\0220\n\006status\030\003 \001(\0162 .palm"
  ".nut.v1.MediaContent.Status\0225\n\014published"
  "_at\030\013 \001(\0132\032.google.protobuf.TimestampH\000\210"
  "\001\001\"!\n\006Editor\022\014\n\010TEXTAREA\020\000\022\t\n\005QUILL\020\001\"S\n"
  "\006Status\022\r\n\tPublished\020\000\022\t\n\005Draft\020\001\022\013\n\007Pen"
  "ding\020\002\022\013\n\007Private\020\003\022\n\n\006Future\020\004\022\t\n\005Trash"
  "\020cB\017\n\r_published_atB-\n)com.github.saturn"
  "_xiv.palm.plugins.nut.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_nut_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_nut_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nut_2eproto = {
    false, false, 594, descriptor_table_protodef_nut_2eproto,
    "nut.proto",
    &descriptor_table_nut_2eproto_once, descriptor_table_nut_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_nut_2eproto::offsets,
    file_level_metadata_nut_2eproto, file_level_enum_descriptors_nut_2eproto,
    file_level_service_descriptors_nut_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nut_2eproto_getter() {
  return &descriptor_table_nut_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_nut_2eproto(&descriptor_table_nut_2eproto);
namespace palm {
namespace nut {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaContent_Editor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nut_2eproto);
  return file_level_enum_descriptors_nut_2eproto[0];
}
bool MediaContent_Editor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MediaContent_Editor MediaContent::TEXTAREA;
constexpr MediaContent_Editor MediaContent::QUILL;
constexpr MediaContent_Editor MediaContent::Editor_MIN;
constexpr MediaContent_Editor MediaContent::Editor_MAX;
constexpr int MediaContent::Editor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaContent_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nut_2eproto);
  return file_level_enum_descriptors_nut_2eproto[1];
}
bool MediaContent_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MediaContent_Status MediaContent::Published;
constexpr MediaContent_Status MediaContent::Draft;
constexpr MediaContent_Status MediaContent::Pending;
constexpr MediaContent_Status MediaContent::Private;
constexpr MediaContent_Status MediaContent::Future;
constexpr MediaContent_Status MediaContent::Trash;
constexpr MediaContent_Status MediaContent::Status_MIN;
constexpr MediaContent_Status MediaContent::Status_MAX;
constexpr int MediaContent::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class IdRequest::_Internal {
 public:
};

IdRequest::IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.IdRequest)
}
IdRequest::IdRequest(const IdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.IdRequest)
}

inline void IdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdRequest::~IdRequest() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.IdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.IdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.IdRequest)
  return target;
}

size_t IdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.IdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdRequest::GetClassData() const { return &_class_data_; }


void IdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdRequest*>(&to_msg);
  auto& from = static_cast<const IdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.IdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdRequest::CopyFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdRequest::IsInitialized() const {
  return true;
}

void IdRequest::InternalSwap(IdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[0]);
}

// ===================================================================

class Pager::_Internal {
 public:
};

Pager::Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.Pager)
}
Pager::Pager(const Pager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pager* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.Pager)
}

inline void Pager::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pager::~Pager() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.Pager)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pager::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pager::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.Pager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pager::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.Pager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.Pager)
  return target;
}

size_t Pager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.Pager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pager::GetClassData() const { return &_class_data_; }


void Pager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pager*>(&to_msg);
  auto& from = static_cast<const Pager&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.Pager)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pager::CopyFrom(const Pager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.Pager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pager::IsInitialized() const {
  return true;
}

void Pager::InternalSwap(Pager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pager, _impl_.size_)
      + sizeof(Pager::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Pager, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pager::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[1]);
}

// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.total_){}
    , decltype(_impl_.has_next_){}
    , decltype(_impl_.has_previous_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_previous_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.has_previous_));
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.Pagination)
}

inline void Pagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.total_){int64_t{0}}
    , decltype(_impl_.has_next_){false}
    , decltype(_impl_.has_previous_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.Pagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.Pagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_previous_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.has_previous_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_next = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.has_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_previous = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.has_previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.Pagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total(), target);
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_has_next(), target);
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_has_previous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.Pagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 total = 3;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total());
  }

  // bool has_next = 11;
  if (this->_internal_has_next() != 0) {
    total_size += 1 + 1;
  }

  // bool has_previous = 12;
  if (this->_internal_has_previous() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }


void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pagination*>(&to_msg);
  auto& from = static_cast<const Pagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.Pagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_has_next() != 0) {
    _this->_internal_set_has_next(from._internal_has_next());
  }
  if (from._internal_has_previous() != 0) {
    _this->_internal_set_has_previous(from._internal_has_previous());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, _impl_.has_previous_)
      + sizeof(Pagination::_impl_.has_previous_)
      - PROTOBUF_FIELD_OFFSET(Pagination, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[2]);
}

// ===================================================================

class MediaContent::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaContent>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at(const MediaContent* msg);
  static void set_has_published_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MediaContent::_Internal::published_at(const MediaContent* msg) {
  return *msg->_impl_.published_at_;
}
void MediaContent::clear_published_at() {
  if (_impl_.published_at_ != nullptr) _impl_.published_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MediaContent::MediaContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.MediaContent)
}
MediaContent::MediaContent(const MediaContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.editor_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_published_at()) {
    _this->_impl_.published_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.published_at_);
  }
  ::memcpy(&_impl_.editor_, &from._impl_.editor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.editor_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.MediaContent)
}

inline void MediaContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_){}
    , decltype(_impl_.published_at_){nullptr}
    , decltype(_impl_.editor_){0}
    , decltype(_impl_.status_){0}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaContent::~MediaContent() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.MediaContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.published_at_;
}

void MediaContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaContent::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.MediaContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.published_at_ != nullptr);
    _impl_.published_at_->Clear();
  }
  ::memset(&_impl_.editor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.editor_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.nut.v1.MediaContent.Editor editor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_editor(static_cast<::palm::nut::v1::MediaContent_Editor>(val));
        } else
          goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.nut.v1.MediaContent.body"));
        } else
          goto handle_unusual;
        continue;
      // .palm.nut.v1.MediaContent.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::palm::nut::v1::MediaContent_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp published_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_published_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.MediaContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.nut.v1.MediaContent.Editor editor = 1;
  if (this->_internal_editor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_editor(), target);
  }

  // string body = 2;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.MediaContent.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // .palm.nut.v1.MediaContent.Status status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional .google.protobuf.Timestamp published_at = 11;
  if (_internal_has_published_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::published_at(this),
        _Internal::published_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.MediaContent)
  return target;
}

size_t MediaContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.MediaContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // optional .google.protobuf.Timestamp published_at = 11;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.published_at_);
  }

  // .palm.nut.v1.MediaContent.Editor editor = 1;
  if (this->_internal_editor() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_editor());
  }

  // .palm.nut.v1.MediaContent.Status status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaContent::GetClassData() const { return &_class_data_; }


void MediaContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaContent*>(&to_msg);
  auto& from = static_cast<const MediaContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.MediaContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_published_at()) {
    _this->_internal_mutable_published_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_published_at());
  }
  if (from._internal_editor() != 0) {
    _this->_internal_set_editor(from._internal_editor());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaContent::CopyFrom(const MediaContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.MediaContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaContent::IsInitialized() const {
  return true;
}

void MediaContent::InternalSwap(MediaContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaContent, _impl_.status_)
      + sizeof(MediaContent::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(MediaContent, _impl_.published_at_)>(
          reinterpret_cast<char*>(&_impl_.published_at_),
          reinterpret_cast<char*>(&other->_impl_.published_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::nut::v1::IdRequest*
Arena::CreateMaybeMessage< ::palm::nut::v1::IdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::IdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::Pager*
Arena::CreateMaybeMessage< ::palm::nut::v1::Pager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::Pager >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::Pagination*
Arena::CreateMaybeMessage< ::palm::nut::v1::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::MediaContent*
Arena::CreateMaybeMessage< ::palm::nut::v1::MediaContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::MediaContent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
