// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metasequoia.proto

#include "metasequoia.pb.h"
#include "metasequoia.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace metasequoia {
namespace v1 {

static const char* User_method_names[] = {
  "/palm.metasequoia.v1.User/SignInByPassword",
  "/palm.metasequoia.v1.User/SignUpByEmail",
  "/palm.metasequoia.v1.User/ConfirmByEmail",
  "/palm.metasequoia.v1.User/ConfirmByToken",
  "/palm.metasequoia.v1.User/UnlockByEmail",
  "/palm.metasequoia.v1.User/UnlockByToken",
  "/palm.metasequoia.v1.User/ForgotPassword",
  "/palm.metasequoia.v1.User/ResetPassword",
  "/palm.metasequoia.v1.User/Refresh",
  "/palm.metasequoia.v1.User/Logs",
  "/palm.metasequoia.v1.User/SetProfile",
  "/palm.metasequoia.v1.User/GetProfile",
  "/palm.metasequoia.v1.User/ChangePassword",
  "/palm.metasequoia.v1.User/SignOut",
  "/palm.metasequoia.v1.User/Index",
  "/palm.metasequoia.v1.User/Show",
  "/palm.metasequoia.v1.User/Disable",
  "/palm.metasequoia.v1.User/Enable",
  "/palm.metasequoia.v1.User/Lock",
  "/palm.metasequoia.v1.User/Unlock",
  "/palm.metasequoia.v1.User/Confirm",
  "/palm.metasequoia.v1.User/Delete",
  "/palm.metasequoia.v1.User/SetPassword",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignInByPassword_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUpByEmail_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByEmail_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByToken_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByEmail_(User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByToken_(User_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgotPassword_(User_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(User_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Refresh_(User_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logs_(User_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfile_(User_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfile_(User_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(User_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignOut_(User_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(User_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(User_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(User_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(User_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Lock_(User_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unlock_(User_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Confirm_(User_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(User_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPassword_(User_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::SignInByPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest& request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignInByPassword_, context, request, response);
}

void User::Stub::async::SignInByPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByPassword_, context, request, response, std::move(f));
}

void User::Stub::async::SignInByPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::PrepareAsyncSignInByPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserSignInResponse, ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignInByPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::AsyncSignInByPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInByPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignUpByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignUpByEmail_, context, request, response);
}

void User::Stub::async::SignUpByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUpByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::SignUpByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUpByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignUpByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignUpByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignUpByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignUpByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByEmail_, context, request, response);
}

void User::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ConfirmByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByToken_, context, request, response);
}

void User::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, std::move(f));
}

void User::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UnlockByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByEmail_, context, request, response);
}

void User::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UnlockByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByToken_, context, request, response);
}

void User::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, std::move(f));
}

void User::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ForgotPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForgotPassword_, context, request, response);
}

void User::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, std::move(f));
}

void User::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForgotPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForgotPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ResetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void User::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void User::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserResetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Duration, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Refresh_, context, request, response);
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::metasequoia::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Duration, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, std::move(f));
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::metasequoia::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::PrepareAsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserSignInResponse, ::google::protobuf::Duration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Refresh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::AsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Logs(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest& request, ::palm::metasequoia::v1::UserLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserLogsRequest, ::palm::metasequoia::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logs_, context, request, response);
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest* request, ::palm::metasequoia::v1::UserLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserLogsRequest, ::palm::metasequoia::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, std::move(f));
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest* request, ::palm::metasequoia::v1::UserLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserLogsResponse>* User::Stub::PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserLogsResponse, ::palm::metasequoia::v1::UserLogsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserLogsResponse>* User::Stub::AsyncLogsRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SetProfile(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfile_, context, request, response);
}

void User::Stub::async::SetProfile(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfile_, context, request, response, std::move(f));
}

void User::Stub::async::SetProfile(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSetProfileRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSetProfileRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::GetProfile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::UserProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProfile_, context, request, response);
}

void User::Stub::async::GetProfile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfile_, context, request, response, std::move(f));
}

void User::Stub::async::GetProfile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserProfile>* User::Stub::PrepareAsyncGetProfileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserProfile>* User::Stub::AsyncGetProfileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ChangePassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void User::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void User::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignOut_, context, request, response);
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, std::move(f));
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::UserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse>* User::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserIndexResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse>* User::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void User::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void User::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse_Item>* User::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserIndexResponse_Item, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse_Item>* User::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Disable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Enable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Lock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Lock_, context, request, response);
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, std::move(f));
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Lock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncLockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Unlock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unlock_, context, request, response);
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, std::move(f));
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Confirm(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Confirm_, context, request, response);
}

void User::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, std::move(f));
}

void User::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Confirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Delete(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void User::Stub::async::Delete(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void User::Stub::async::Delete(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPassword_, context, request, response);
}

void User::Stub::async::SetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPassword_, context, request, response, std::move(f));
}

void User::Stub::async::SetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserSetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserSignInByPasswordRequest* req,
             ::palm::metasequoia::v1::UserSignInResponse* resp) {
               return service->SignInByPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserSignUpByEmailRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SignUpByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ForgotPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserResetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Duration, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Duration* req,
             ::palm::metasequoia::v1::UserSignInResponse* resp) {
               return service->Refresh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserLogsRequest, ::palm::metasequoia::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserLogsRequest* req,
             ::palm::metasequoia::v1::UserLogsResponse* resp) {
               return service->Logs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::UserProfile* resp) {
               return service->GetProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserChangePasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SignOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::UserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::UserIndexResponse_Item* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Lock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Unlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Confirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserSetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetPassword(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::SignInByPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignUpByEmail(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ConfirmByEmail(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ConfirmByToken(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UnlockByEmail(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UnlockByToken(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ForgotPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ResetPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Refresh(::grpc::ServerContext* context, const ::google::protobuf::Duration* request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Logs(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserLogsRequest* request, ::palm::metasequoia::v1::UserLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SetProfile(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::GetProfile(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ChangePassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignOut(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Index(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Show(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Disable(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Enable(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Lock(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Unlock(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Confirm(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Delete(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SetPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Rbac_method_names[] = {
  "/palm.metasequoia.v1.Rbac/Can",
  "/palm.metasequoia.v1.Rbac/Has",
  "/palm.metasequoia.v1.Rbac/GetRolesForUser",
  "/palm.metasequoia.v1.Rbac/GetImplicitRolesForUser",
  "/palm.metasequoia.v1.Rbac/AddRolesForUser",
  "/palm.metasequoia.v1.Rbac/DeleteRolesForUser",
  "/palm.metasequoia.v1.Rbac/AddPermissionsForRole",
  "/palm.metasequoia.v1.Rbac/DeletePermissionsForRole",
  "/palm.metasequoia.v1.Rbac/GetPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/GetImplicitPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/AddPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/DeletePermissionsForUser",
};

std::unique_ptr< Rbac::Stub> Rbac::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rbac::Stub> stub(new Rbac::Stub(channel, options));
  return stub;
}

Rbac::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Can_(Rbac_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Has_(Rbac_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesForUser_(Rbac_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitRolesForUser_(Rbac_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRolesForUser_(Rbac_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRolesForUser_(Rbac_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForRole_(Rbac_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForRole_(Rbac_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionsForUser_(Rbac_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitPermissionsForUser_(Rbac_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForUser_(Rbac_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForUser_(Rbac_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rbac::Stub::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Can_, context, request, response);
}

void Rbac::Stub::async::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, std::move(f));
}

void Rbac::Stub::async::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncCanRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacCanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Can_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncCanRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Has_, context, request, response);
}

void Rbac::Stub::async::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, std::move(f));
}

void Rbac::Stub::async::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncHasRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacHasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Has_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncHasRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRolesForUser_, context, request, response);
}

void Rbac::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacRolesResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitRolesForUser_, context, request, response);
}

void Rbac::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacRolesResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRolesForUser_, context, request, response);
}

void Rbac::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRolesForUser_, context, request, response);
}

void Rbac::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForRole_, context, request, response);
}

void Rbac::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForRole_, context, request, response);
}

void Rbac::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacPermissionsResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacPermissionsResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Rbac::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacCanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Can(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacHasRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Has(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacRolesResponse* resp) {
               return service->GetRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacRolesResponse* resp) {
               return service->GetImplicitRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacPermissionsResponse* resp) {
               return service->GetPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacPermissionsResponse* resp) {
               return service->GetImplicitPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForUser(ctx, req, resp);
             }, this)));
}

Rbac::Service::~Service() {
}

::grpc::Status Rbac::Service::Can(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::Has(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddPermissionsForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeletePermissionsForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeletePermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Setting_method_names[] = {
  "/palm.metasequoia.v1.Setting/Set",
  "/palm.metasequoia.v1.Setting/Get",
  "/palm.metasequoia.v1.Setting/ByUser",
  "/palm.metasequoia.v1.Setting/My",
  "/palm.metasequoia.v1.Setting/Global",
};

std::unique_ptr< Setting::Stub> Setting::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Setting::Stub> stub(new Setting::Stub(channel, options));
  return stub;
}

Setting::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Set_(Setting_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Setting_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUser_(Setting_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_My_(Setting_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Global_(Setting_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Setting::Stub::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SettingSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Setting::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SettingSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void Setting::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Setting::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Setting::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest& request, ::palm::metasequoia::v1::SettingsResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SettingGetRequest, ::palm::metasequoia::v1::SettingsResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Setting::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest* request, ::palm::metasequoia::v1::SettingsResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SettingGetRequest, ::palm::metasequoia::v1::SettingsResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Setting::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest* request, ::palm::metasequoia::v1::SettingsResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse_Item>* Setting::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse_Item, ::palm::metasequoia::v1::SettingGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse_Item>* Setting::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::ByUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest& request, ::palm::metasequoia::v1::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SettingByUserRequest, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUser_, context, request, response);
}

void Setting::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest* request, ::palm::metasequoia::v1::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SettingByUserRequest, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, std::move(f));
}

void Setting::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest* request, ::palm::metasequoia::v1::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::PrepareAsyncByUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse, ::palm::metasequoia::v1::SettingByUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::AsyncByUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::My(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_My_, context, request, response);
}

void Setting::Stub::async::My(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_My_, context, request, response, std::move(f));
}

void Setting::Stub::async::My(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_My_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::PrepareAsyncMyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_My_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::AsyncMyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::Global(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Global_, context, request, response);
}

void Setting::Stub::async::Global(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Global_, context, request, response, std::move(f));
}

void Setting::Stub::async::Global(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Global_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::PrepareAsyncGlobalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Global_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::AsyncGlobalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGlobalRaw(context, request, cq);
  result->StartCall();
  return result;
}

Setting::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::palm::metasequoia::v1::SettingSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SettingSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::palm::metasequoia::v1::SettingGetRequest, ::palm::metasequoia::v1::SettingsResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SettingGetRequest* req,
             ::palm::metasequoia::v1::SettingsResponse_Item* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::palm::metasequoia::v1::SettingByUserRequest, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SettingByUserRequest* req,
             ::palm::metasequoia::v1::SettingsResponse* resp) {
               return service->ByUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SettingsResponse* resp) {
               return service->My(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SettingsResponse* resp) {
               return service->Global(ctx, req, resp);
             }, this)));
}

Setting::Service::~Service() {
}

::grpc::Status Setting::Service::Set(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SettingSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::Get(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SettingGetRequest* request, ::palm::metasequoia::v1::SettingsResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::ByUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SettingByUserRequest* request, ::palm::metasequoia::v1::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::My(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::Global(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Locale_method_names[] = {
  "/palm.metasequoia.v1.Locale/Set",
  "/palm.metasequoia.v1.Locale/Get",
  "/palm.metasequoia.v1.Locale/ByLang",
};

std::unique_ptr< Locale::Stub> Locale::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Locale::Stub> stub(new Locale::Stub(channel, options));
  return stub;
}

Locale::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Set_(Locale_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Locale_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByLang_(Locale_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Locale::Stub::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::LocaleSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest& request, ::palm::metasequoia::v1::LocalesResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::LocaleGetRequest, ::palm::metasequoia::v1::LocalesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Locale::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest* request, ::palm::metasequoia::v1::LocalesResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::LocaleGetRequest, ::palm::metasequoia::v1::LocalesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Locale::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest* request, ::palm::metasequoia::v1::LocalesResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse_Item>* Locale::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::LocalesResponse_Item, ::palm::metasequoia::v1::LocaleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse_Item>* Locale::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ByLang(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest& request, ::palm::metasequoia::v1::LocalesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::LocaleByLangRequest, ::palm::metasequoia::v1::LocalesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByLang_, context, request, response);
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest* request, ::palm::metasequoia::v1::LocalesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::LocaleByLangRequest, ::palm::metasequoia::v1::LocalesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, std::move(f));
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest* request, ::palm::metasequoia::v1::LocalesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse>* Locale::Stub::PrepareAsyncByLangRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::LocalesResponse, ::palm::metasequoia::v1::LocaleByLangRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByLang_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse>* Locale::Stub::AsyncByLangRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByLangRaw(context, request, cq);
  result->StartCall();
  return result;
}

Locale::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::metasequoia::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::LocaleSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::metasequoia::v1::LocaleGetRequest, ::palm::metasequoia::v1::LocalesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::LocaleGetRequest* req,
             ::palm::metasequoia::v1::LocalesResponse_Item* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::metasequoia::v1::LocaleByLangRequest, ::palm::metasequoia::v1::LocalesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::LocaleByLangRequest* req,
             ::palm::metasequoia::v1::LocalesResponse* resp) {
               return service->ByLang(ctx, req, resp);
             }, this)));
}

Locale::Service::~Service() {
}

::grpc::Status Locale::Service::Set(::grpc::ServerContext* context, const ::palm::metasequoia::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Get(::grpc::ServerContext* context, const ::palm::metasequoia::v1::LocaleGetRequest* request, ::palm::metasequoia::v1::LocalesResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ByLang(::grpc::ServerContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest* request, ::palm::metasequoia::v1::LocalesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Site_method_names[] = {
  "/palm.metasequoia.v1.Site/SetMaintenanceMode",
  "/palm.metasequoia.v1.Site/Install",
  "/palm.metasequoia.v1.Site/ClearCache",
  "/palm.metasequoia.v1.Site/Layout",
  "/palm.metasequoia.v1.Site/SetAuthor",
  "/palm.metasequoia.v1.Site/SetCopyright",
  "/palm.metasequoia.v1.Site/SetKeywords",
  "/palm.metasequoia.v1.Site/SetInfo",
  "/palm.metasequoia.v1.Site/SetLogo",
  "/palm.metasequoia.v1.Site/SetTwilio",
  "/palm.metasequoia.v1.Site/GetTwilio",
  "/palm.metasequoia.v1.Site/PingTwilio",
  "/palm.metasequoia.v1.Site/SetSmtp",
  "/palm.metasequoia.v1.Site/GetSmtp",
  "/palm.metasequoia.v1.Site/PingSmtp",
  "/palm.metasequoia.v1.Site/SetIndexNow",
  "/palm.metasequoia.v1.Site/GetIndexNow",
  "/palm.metasequoia.v1.Site/PingIndexNow",
  "/palm.metasequoia.v1.Site/SetGoogle",
  "/palm.metasequoia.v1.Site/GetGoogle",
  "/palm.metasequoia.v1.Site/PingGoogle",
  "/palm.metasequoia.v1.Site/SetBaidu",
  "/palm.metasequoia.v1.Site/GetBaidu",
  "/palm.metasequoia.v1.Site/PingBaidu",
  "/palm.metasequoia.v1.Site/Status",
};

std::unique_ptr< Site::Stub> Site::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Site::Stub> stub(new Site::Stub(channel, options));
  return stub;
}

Site::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetMaintenanceMode_(Site_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Install_(Site_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearCache_(Site_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Layout_(Site_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAuthor_(Site_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCopyright_(Site_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetKeywords_(Site_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInfo_(Site_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLogo_(Site_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTwilio_(Site_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTwilio_(Site_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingTwilio_(Site_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSmtp_(Site_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSmtp_(Site_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingSmtp_(Site_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIndexNow_(Site_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexNow_(Site_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingIndexNow_(Site_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGoogle_(Site_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGoogle_(Site_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingGoogle_(Site_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBaidu_(Site_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBaidu_(Site_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingBaidu_(Site_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Site_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Site::Stub::SetMaintenanceMode(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteMaintenanceModeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteMaintenanceModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMaintenanceMode_, context, request, response);
}

void Site::Stub::async::SetMaintenanceMode(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteMaintenanceModeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteMaintenanceModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaintenanceMode_, context, request, response, std::move(f));
}

void Site::Stub::async::SetMaintenanceMode(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteMaintenanceModeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaintenanceMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetMaintenanceModeRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteMaintenanceModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteMaintenanceModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMaintenanceMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetMaintenanceModeRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteMaintenanceModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMaintenanceModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Install(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteInstallRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteInstallRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Install_, context, request, response);
}

void Site::Stub::async::Install(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteInstallRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteInstallRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Install_, context, request, response, std::move(f));
}

void Site::Stub::async::Install(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteInstallRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Install_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncInstallRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteInstallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteInstallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Install_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncInstallRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteInstallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearCache_, context, request, response);
}

void Site::Stub::async::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearCache_, context, request, response, std::move(f));
}

void Site::Stub::async::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncClearCacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncClearCacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SiteLayoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Layout_, context, request, response);
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SiteLayoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, std::move(f));
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SiteLayoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SiteLayoutResponse>* Site::Stub::PrepareAsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SiteLayoutResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Layout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SiteLayoutResponse>* Site::Stub::AsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLayoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetAuthor(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteLayoutResponse_Author& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAuthor_, context, request, response);
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, std::move(f));
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteLayoutResponse_Author, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAuthor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAuthorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetCopyright(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetCopyrightRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCopyright_, context, request, response);
}

void Site::Stub::async::SetCopyright(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCopyright_, context, request, response, std::move(f));
}

void Site::Stub::async::SetCopyright(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCopyright_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetCopyrightRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetCopyrightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteSetCopyrightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCopyright_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetCopyrightRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetCopyrightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCopyrightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetKeywords(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetKeywordsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetKeywords_, context, request, response);
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, std::move(f));
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteSetKeywordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetKeywords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetKeywordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetInfo(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetInfoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInfo_, context, request, response);
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteSetInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetLogo(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetLogoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLogo_, context, request, response);
}

void Site::Stub::async::SetLogo(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLogo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetLogo(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLogo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetLogoRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetLogoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteSetLogoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLogo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetLogoRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSetLogoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLogoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetTwilio(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TwilioProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTwilio_, context, request, response);
}

void Site::Stub::async::SetTwilio(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TwilioProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTwilio_, context, request, response, std::move(f));
}

void Site::Stub::async::SetTwilio(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TwilioProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTwilio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetTwilioRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TwilioProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTwilio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetTwilioRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TwilioProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTwilioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetTwilio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::TwilioProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTwilio_, context, request, response);
}

void Site::Stub::async::GetTwilio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::TwilioProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTwilio_, context, request, response, std::move(f));
}

void Site::Stub::async::GetTwilio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::TwilioProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTwilio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::TwilioProfile>* Site::Stub::PrepareAsyncGetTwilioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTwilio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::TwilioProfile>* Site::Stub::AsyncGetTwilioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTwilioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingTwilio(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteTwilioPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteTwilioPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingTwilio_, context, request, response);
}

void Site::Stub::async::PingTwilio(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteTwilioPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteTwilioPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingTwilio_, context, request, response, std::move(f));
}

void Site::Stub::async::PingTwilio(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteTwilioPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingTwilio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingTwilioRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteTwilioPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteTwilioPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingTwilio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingTwilioRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteTwilioPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingTwilioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetSmtp(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SmtpProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSmtp_, context, request, response);
}

void Site::Stub::async::SetSmtp(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SmtpProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::SetSmtp(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SmtpProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetSmtpRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SmtpProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetSmtpRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SmtpProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SmtpProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSmtp_, context, request, response);
}

void Site::Stub::async::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SmtpProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SmtpProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SmtpProfile>* Site::Stub::PrepareAsyncGetSmtpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SmtpProfile>* Site::Stub::AsyncGetSmtpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingSmtp(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSmtpPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SiteSmtpPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingSmtp_, context, request, response);
}

void Site::Stub::async::PingSmtp(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSmtpPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SiteSmtpPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::PingSmtp(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSmtpPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingSmtpRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSmtpPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteSmtpPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingSmtpRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SiteSmtpPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetIndexNow(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetIndexNow_, context, request, response);
}

void Site::Stub::async::SetIndexNow(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIndexNow_, context, request, response, std::move(f));
}

void Site::Stub::async::SetIndexNow(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIndexNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetIndexNowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetIndexNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetIndexNowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetIndexNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetIndexNow(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::IndexNowProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIndexNow_, context, request, response);
}

void Site::Stub::async::GetIndexNow(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::IndexNowProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexNow_, context, request, response, std::move(f));
}

void Site::Stub::async::GetIndexNow(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::IndexNowProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::IndexNowProfile>* Site::Stub::PrepareAsyncGetIndexNowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIndexNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::IndexNowProfile>* Site::Stub::AsyncGetIndexNowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIndexNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingIndexNow(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IndexNowPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingIndexNow_, context, request, response);
}

void Site::Stub::async::PingIndexNow(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IndexNowPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingIndexNow_, context, request, response, std::move(f));
}

void Site::Stub::async::PingIndexNow(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingIndexNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingIndexNowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IndexNowPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingIndexNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingIndexNowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IndexNowPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingIndexNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetGoogle(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGoogle_, context, request, response);
}

void Site::Stub::async::SetGoogle(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::SetGoogle(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetGoogleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetGoogleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::GoogleProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGoogle_, context, request, response);
}

void Site::Stub::async::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::GoogleProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::GoogleProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::GoogleProfile>* Site::Stub::PrepareAsyncGetGoogleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::GoogleProfile>* Site::Stub::AsyncGetGoogleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingGoogle(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingGoogle_, context, request, response);
}

void Site::Stub::async::PingGoogle(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::PingGoogle(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingGoogleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SitemapPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingGoogleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetBaidu(::grpc::ClientContext* context, const ::palm::metasequoia::v1::BaiduProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBaidu_, context, request, response);
}

void Site::Stub::async::SetBaidu(::grpc::ClientContext* context, const ::palm::metasequoia::v1::BaiduProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::SetBaidu(::grpc::ClientContext* context, const ::palm::metasequoia::v1::BaiduProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetBaiduRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::BaiduProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetBaiduRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::BaiduProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::BaiduProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBaidu_, context, request, response);
}

void Site::Stub::async::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::BaiduProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::BaiduProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::BaiduProfile>* Site::Stub::PrepareAsyncGetBaiduRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::BaiduProfile>* Site::Stub::AsyncGetBaiduRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingBaidu(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingBaidu_, context, request, response);
}

void Site::Stub::async::PingBaidu(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::PingBaidu(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingBaiduRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SitemapPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingBaiduRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SiteStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SiteStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SiteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SiteStatusResponse>* Site::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SiteStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SiteStatusResponse>* Site::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

Site::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteMaintenanceModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteMaintenanceModeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetMaintenanceMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteInstallRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteInstallRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Install(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->ClearCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SiteLayoutResponse* resp) {
               return service->Layout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteLayoutResponse_Author* req,
             ::google::protobuf::Empty* resp) {
               return service->SetAuthor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteSetCopyrightRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCopyright(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteSetKeywordsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetKeywords(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteSetInfoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteSetLogoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetLogo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::TwilioProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTwilio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::TwilioProfile* resp) {
               return service->GetTwilio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteTwilioPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteTwilioPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingTwilio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SmtpProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SmtpProfile* resp) {
               return service->GetSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SiteSmtpPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SiteSmtpPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IndexNowProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetIndexNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::IndexNowProfile* resp) {
               return service->GetIndexNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::IndexNowPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IndexNowPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingIndexNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::GoogleProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::GoogleProfile* resp) {
               return service->GetGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SitemapPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::BaiduProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::BaiduProfile* resp) {
               return service->GetBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::metasequoia::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SitemapPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SiteStatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
}

Site::Service::~Service() {
}

::grpc::Status Site::Service::SetMaintenanceMode(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteMaintenanceModeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Install(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteInstallRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::ClearCache(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Layout(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SiteLayoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetAuthor(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetCopyright(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetKeywords(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetInfo(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetLogo(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetTwilio(::grpc::ServerContext* context, const ::palm::metasequoia::v1::TwilioProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetTwilio(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::TwilioProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingTwilio(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteTwilioPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetSmtp(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SmtpProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetSmtp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SmtpProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingSmtp(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SiteSmtpPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetIndexNow(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IndexNowProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetIndexNow(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::IndexNowProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingIndexNow(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IndexNowPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetGoogle(::grpc::ServerContext* context, const ::palm::metasequoia::v1::GoogleProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetGoogle(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::GoogleProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingGoogle(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetBaidu(::grpc::ServerContext* context, const ::palm::metasequoia::v1::BaiduProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetBaidu(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::BaiduProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingBaidu(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SiteStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ShorterLink_method_names[] = {
  "/palm.metasequoia.v1.ShorterLink/Create",
  "/palm.metasequoia.v1.ShorterLink/Update",
  "/palm.metasequoia.v1.ShorterLink/Destroy",
  "/palm.metasequoia.v1.ShorterLink/Index",
};

std::unique_ptr< ShorterLink::Stub> ShorterLink::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShorterLink::Stub> stub(new ShorterLink::Stub(channel, options));
  return stub;
}

ShorterLink::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(ShorterLink_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(ShorterLink_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(ShorterLink_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(ShorterLink_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ShorterLink::Stub::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::ShorterLinkCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ShorterLink::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::ShorterLinkCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::ShorterLinkCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShorterLink::Stub::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::ShorterLinkUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void ShorterLink::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::ShorterLinkUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::ShorterLinkUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::ShorterLinkUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShorterLink::Stub::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void ShorterLink::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShorterLink::Stub::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::palm::metasequoia::v1::ShorterLinkIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::ShorterLinkIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void ShorterLink::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::ShorterLinkIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::ShorterLinkIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::ShorterLinkIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::ShorterLinkIndexResponse>* ShorterLink::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::ShorterLinkIndexResponse, ::palm::metasequoia::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::ShorterLinkIndexResponse>* ShorterLink::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

ShorterLink::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::metasequoia::v1::ShorterLinkCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::ShorterLinkCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::metasequoia::v1::ShorterLinkUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::ShorterLinkUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::ShorterLinkIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Pager* req,
             ::palm::metasequoia::v1::ShorterLinkIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

ShorterLink::Service::~Service() {
}

::grpc::Status ShorterLink::Service::Create(::grpc::ServerContext* context, const ::palm::metasequoia::v1::ShorterLinkCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShorterLink::Service::Update(::grpc::ServerContext* context, const ::palm::metasequoia::v1::ShorterLinkUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShorterLink::Service::Destroy(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShorterLink::Service::Index(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::ShorterLinkIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Tag_method_names[] = {
  "/palm.metasequoia.v1.Tag/Create",
  "/palm.metasequoia.v1.Tag/Update",
  "/palm.metasequoia.v1.Tag/Destroy",
  "/palm.metasequoia.v1.Tag/Index",
};

std::unique_ptr< Tag::Stub> Tag::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tag::Stub> stub(new Tag::Stub(channel, options));
  return stub;
}

Tag::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Tag_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Tag_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Tag_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Tag_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tag::Stub::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::TagCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Tag::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::TagCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Tag::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::TagCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tag::Stub::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::TagUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Tag::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::TagUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Tag::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::TagUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::TagUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tag::Stub::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Tag::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Tag::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tag::Stub::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::TagIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::TagIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Tag::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::TagIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::TagIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Tag::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::TagIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::TagIndexResponse>* Tag::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::TagIndexResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::TagIndexResponse>* Tag::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

Tag::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::palm::metasequoia::v1::TagCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::TagCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::palm::metasequoia::v1::TagUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::TagUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::TagIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::TagIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

Tag::Service::~Service() {
}

::grpc::Status Tag::Service::Create(::grpc::ServerContext* context, const ::palm::metasequoia::v1::TagCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tag::Service::Update(::grpc::ServerContext* context, const ::palm::metasequoia::v1::TagUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tag::Service::Destroy(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tag::Service::Index(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::TagIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Category_method_names[] = {
  "/palm.metasequoia.v1.Category/Create",
  "/palm.metasequoia.v1.Category/Update",
  "/palm.metasequoia.v1.Category/Destroy",
  "/palm.metasequoia.v1.Category/Index",
};

std::unique_ptr< Category::Stub> Category::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Category::Stub> stub(new Category::Stub(channel, options));
  return stub;
}

Category::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Category_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Category_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Category_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Category_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Category::Stub::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::CategoryCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Category::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::CategoryCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Category::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::CategoryCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Category::Stub::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::CategoryUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Category::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::CategoryUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Category::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::CategoryUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::CategoryUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Category::Stub::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Category::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Category::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Category::Stub::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::CategoryIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::CategoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Category::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::CategoryIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::CategoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Category::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::CategoryIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::CategoryIndexResponse>* Category::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::CategoryIndexResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::CategoryIndexResponse>* Category::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

Category::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::palm::metasequoia::v1::CategoryCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::CategoryCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::palm::metasequoia::v1::CategoryUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::CategoryUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::CategoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::CategoryIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

Category::Service::~Service() {
}

::grpc::Status Category::Service::Create(::grpc::ServerContext* context, const ::palm::metasequoia::v1::CategoryCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Category::Service::Update(::grpc::ServerContext* context, const ::palm::metasequoia::v1::CategoryUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Category::Service::Destroy(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Category::Service::Index(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::CategoryIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Notification_method_names[] = {
  "/palm.metasequoia.v1.Notification/Create",
  "/palm.metasequoia.v1.Notification/Update",
  "/palm.metasequoia.v1.Notification/Index",
  "/palm.metasequoia.v1.Notification/Show",
  "/palm.metasequoia.v1.Notification/Destory",
};

std::unique_ptr< Notification::Stub> Notification::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Notification::Stub> stub(new Notification::Stub(channel, options));
  return stub;
}

Notification::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Notification_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Notification_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Notification_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(Notification_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destory_(Notification_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Notification::Stub::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::NotificationCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Notification::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::NotificationCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Notification::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Notification::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::NotificationCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Notification::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Notification::Stub::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::NotificationUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Notification::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::NotificationUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Notification::Stub::async::Update(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Notification::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::NotificationUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Notification::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::NotificationUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Notification::Stub::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::palm::metasequoia::v1::NotificationIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::NotificationIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Notification::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::NotificationIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::NotificationIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Notification::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::NotificationIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::NotificationIndexResponse>* Notification::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::NotificationIndexResponse, ::palm::metasequoia::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::NotificationIndexResponse>* Notification::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Notification::Stub::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::palm::metasequoia::v1::NotificationIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::NotificationIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void Notification::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::NotificationIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::NotificationIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void Notification::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::NotificationIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::NotificationIndexResponse_Item>* Notification::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::NotificationIndexResponse_Item, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::NotificationIndexResponse_Item>* Notification::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Notification::Stub::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destory_, context, request, response);
}

void Notification::Stub::async::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destory_, context, request, response, std::move(f));
}

void Notification::Stub::async::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Notification::Stub::PrepareAsyncDestoryRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Notification::Stub::AsyncDestoryRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

Notification::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Notification_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Notification::Service, ::palm::metasequoia::v1::NotificationCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Notification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::NotificationCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Notification_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Notification::Service, ::palm::metasequoia::v1::NotificationUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Notification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::NotificationUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Notification_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Notification::Service, ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::NotificationIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Notification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Pager* req,
             ::palm::metasequoia::v1::NotificationIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Notification_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Notification::Service, ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::NotificationIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Notification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::palm::metasequoia::v1::NotificationIndexResponse_Item* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Notification_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Notification::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Notification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destory(ctx, req, resp);
             }, this)));
}

Notification::Service::~Service() {
}

::grpc::Status Notification::Service::Create(::grpc::ServerContext* context, const ::palm::metasequoia::v1::NotificationCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Notification::Service::Update(::grpc::ServerContext* context, const ::palm::metasequoia::v1::NotificationUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Notification::Service::Index(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::NotificationIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Notification::Service::Show(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::NotificationIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Notification::Service::Destory(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Attachment_method_names[] = {
  "/palm.metasequoia.v1.Attachment/Index",
  "/palm.metasequoia.v1.Attachment/Destroy",
  "/palm.metasequoia.v1.Attachment/Show",
};

std::unique_ptr< Attachment::Stub> Attachment::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Attachment::Stub> stub(new Attachment::Stub(channel, options));
  return stub;
}

Attachment::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Index_(Attachment_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Attachment_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(Attachment_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Attachment::Stub::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::palm::metasequoia::v1::AttachmentIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Attachment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::AttachmentIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::AttachmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::AttachmentIndexResponse>* Attachment::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::AttachmentIndexResponse, ::palm::metasequoia::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::AttachmentIndexResponse>* Attachment::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Attachment::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::AttachmentShowRequest& request, ::palm::metasequoia::v1::AttachmentShowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::AttachmentShowRequest, ::palm::metasequoia::v1::AttachmentShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void Attachment::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::AttachmentShowRequest* request, ::palm::metasequoia::v1::AttachmentShowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::AttachmentShowRequest, ::palm::metasequoia::v1::AttachmentShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::AttachmentShowRequest* request, ::palm::metasequoia::v1::AttachmentShowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::AttachmentShowResponse>* Attachment::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::AttachmentShowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::AttachmentShowResponse, ::palm::metasequoia::v1::AttachmentShowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::AttachmentShowResponse>* Attachment::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::AttachmentShowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

Attachment::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Pager* req,
             ::palm::metasequoia::v1::AttachmentIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::metasequoia::v1::AttachmentShowRequest, ::palm::metasequoia::v1::AttachmentShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::AttachmentShowRequest* req,
             ::palm::metasequoia::v1::AttachmentShowResponse* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
}

Attachment::Service::~Service() {
}

::grpc::Status Attachment::Service::Index(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::AttachmentIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Destroy(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Show(::grpc::ServerContext* context, const ::palm::metasequoia::v1::AttachmentShowRequest* request, ::palm::metasequoia::v1::AttachmentShowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LeaveWord_method_names[] = {
  "/palm.metasequoia.v1.LeaveWord/Create",
  "/palm.metasequoia.v1.LeaveWord/Index",
  "/palm.metasequoia.v1.LeaveWord/Show",
  "/palm.metasequoia.v1.LeaveWord/Destroy",
};

std::unique_ptr< LeaveWord::Stub> LeaveWord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LeaveWord::Stub> stub(new LeaveWord::Stub(channel, options));
  return stub;
}

LeaveWord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(LeaveWord_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(LeaveWord_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(LeaveWord_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(LeaveWord_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LeaveWord::Stub::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::MediaContent& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::MediaContent, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void LeaveWord::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::MediaContent* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::MediaContent, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Create(::grpc::ClientContext* context, const ::palm::metasequoia::v1::MediaContent* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::MediaContent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::MediaContent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::MediaContent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::palm::metasequoia::v1::LeaveWordIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void LeaveWord::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::LeaveWordIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::LeaveWordIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LeaveWordIndexResponse>* LeaveWord::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::LeaveWordIndexResponse, ::palm::metasequoia::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LeaveWordIndexResponse>* LeaveWord::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void LeaveWord::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LeaveWordIndexResponse_Item>* LeaveWord::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::LeaveWordIndexResponse_Item, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LeaveWordIndexResponse_Item>* LeaveWord::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void LeaveWord::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

LeaveWord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::metasequoia::v1::MediaContent, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::MediaContent* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::metasequoia::v1::Pager, ::palm::metasequoia::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Pager* req,
             ::palm::metasequoia::v1::LeaveWordIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::palm::metasequoia::v1::LeaveWordIndexResponse_Item* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
}

LeaveWord::Service::~Service() {
}

::grpc::Status LeaveWord::Service::Create(::grpc::ServerContext* context, const ::palm::metasequoia::v1::MediaContent* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Index(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::metasequoia::v1::LeaveWordIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Show(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::LeaveWordIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Destroy(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Google_method_names[] = {
  "/palm.metasequoia.v1.Google/SignInUrl",
  "/palm.metasequoia.v1.Google/SignIn",
};

std::unique_ptr< Google::Stub> Google::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Google::Stub> stub(new Google::Stub(channel, options));
  return stub;
}

Google::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignInUrl_(Google_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignIn_(Google_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Google::Stub::SignInUrl(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleSignInUrlRequest& request, ::palm::metasequoia::v1::GoogleSignInUrlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::GoogleSignInUrlRequest, ::palm::metasequoia::v1::GoogleSignInUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignInUrl_, context, request, response);
}

void Google::Stub::async::SignInUrl(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleSignInUrlRequest* request, ::palm::metasequoia::v1::GoogleSignInUrlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::GoogleSignInUrlRequest, ::palm::metasequoia::v1::GoogleSignInUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInUrl_, context, request, response, std::move(f));
}

void Google::Stub::async::SignInUrl(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleSignInUrlRequest* request, ::palm::metasequoia::v1::GoogleSignInUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::GoogleSignInUrlResponse>* Google::Stub::PrepareAsyncSignInUrlRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleSignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::GoogleSignInUrlResponse, ::palm::metasequoia::v1::GoogleSignInUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignInUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::GoogleSignInUrlResponse>* Google::Stub::AsyncSignInUrlRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::GoogleSignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Google::Stub::SignIn(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByGoogleRequest& request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SignInByGoogleRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void Google::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByGoogleRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SignInByGoogleRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

void Google::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByGoogleRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* Google::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByGoogleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserSignInResponse, ::palm::metasequoia::v1::SignInByGoogleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* Google::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByGoogleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

Google::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Google_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Google::Service, ::palm::metasequoia::v1::GoogleSignInUrlRequest, ::palm::metasequoia::v1::GoogleSignInUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Google::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::GoogleSignInUrlRequest* req,
             ::palm::metasequoia::v1::GoogleSignInUrlResponse* resp) {
               return service->SignInUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Google_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Google::Service, ::palm::metasequoia::v1::SignInByGoogleRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Google::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SignInByGoogleRequest* req,
             ::palm::metasequoia::v1::UserSignInResponse* resp) {
               return service->SignIn(ctx, req, resp);
             }, this)));
}

Google::Service::~Service() {
}

::grpc::Status Google::Service::SignInUrl(::grpc::ServerContext* context, const ::palm::metasequoia::v1::GoogleSignInUrlRequest* request, ::palm::metasequoia::v1::GoogleSignInUrlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Google::Service::SignIn(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SignInByGoogleRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Wechat_method_names[] = {
  "/palm.metasequoia.v1.Wechat/Oauth2SignInState",
  "/palm.metasequoia.v1.Wechat/Oauth2SignInUrl",
  "/palm.metasequoia.v1.Wechat/SignInByOauth2",
  "/palm.metasequoia.v1.Wechat/AllOauth2User",
  "/palm.metasequoia.v1.Wechat/DestroyOauth2User",
  "/palm.metasequoia.v1.Wechat/BindOauth2UserById",
  "/palm.metasequoia.v1.Wechat/BindOauth2UserByAccount",
  "/palm.metasequoia.v1.Wechat/GetOauth2UserById",
  "/palm.metasequoia.v1.Wechat/GetOauth2UserByOpenId",
  "/palm.metasequoia.v1.Wechat/GetOauth2UserByUnionId",
  "/palm.metasequoia.v1.Wechat/AllMiniProgramUser",
  "/palm.metasequoia.v1.Wechat/DestroyMiniProgramUser",
  "/palm.metasequoia.v1.Wechat/BindMiniProgramUserById",
  "/palm.metasequoia.v1.Wechat/GetMiniProgramUserById",
  "/palm.metasequoia.v1.Wechat/GetMiniProgramUserByOpenId",
  "/palm.metasequoia.v1.Wechat/GetMiniProgramUserByUnionId",
};

std::unique_ptr< Wechat::Stub> Wechat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Wechat::Stub> stub(new Wechat::Stub(channel, options));
  return stub;
}

Wechat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Oauth2SignInState_(Wechat_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Oauth2SignInUrl_(Wechat_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignInByOauth2_(Wechat_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllOauth2User_(Wechat_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyOauth2User_(Wechat_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindOauth2UserById_(Wechat_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindOauth2UserByAccount_(Wechat_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOauth2UserById_(Wechat_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOauth2UserByOpenId_(Wechat_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOauth2UserByUnionId_(Wechat_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllMiniProgramUser_(Wechat_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyMiniProgramUser_(Wechat_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindMiniProgramUserById_(Wechat_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMiniProgramUserById_(Wechat_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMiniProgramUserByOpenId_(Wechat_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMiniProgramUserByUnionId_(Wechat_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Wechat::Stub::Oauth2SignInState(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Oauth2SignInState_, context, request, response);
}

void Wechat::Stub::async::Oauth2SignInState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInState_, context, request, response, std::move(f));
}

void Wechat::Stub::async::Oauth2SignInState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatOauth2SignInStateResponse>* Wechat::Stub::PrepareAsyncOauth2SignInStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatOauth2SignInStateResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Oauth2SignInState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatOauth2SignInStateResponse>* Wechat::Stub::AsyncOauth2SignInStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOauth2SignInStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::Oauth2SignInUrl(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest& request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Oauth2SignInUrl_, context, request, response);
}

void Wechat::Stub::async::Oauth2SignInUrl(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInUrl_, context, request, response, std::move(f));
}

void Wechat::Stub::async::Oauth2SignInUrl(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* Wechat::Stub::PrepareAsyncOauth2SignInUrlRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Oauth2SignInUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* Wechat::Stub::AsyncOauth2SignInUrlRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOauth2SignInUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::SignInByOauth2(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByWechatOauth2Request& request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SignInByWechatOauth2Request, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignInByOauth2_, context, request, response);
}

void Wechat::Stub::async::SignInByOauth2(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByWechatOauth2Request* request, ::palm::metasequoia::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SignInByWechatOauth2Request, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByOauth2_, context, request, response, std::move(f));
}

void Wechat::Stub::async::SignInByOauth2(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByWechatOauth2Request* request, ::palm::metasequoia::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByOauth2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* Wechat::Stub::PrepareAsyncSignInByOauth2Raw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByWechatOauth2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserSignInResponse, ::palm::metasequoia::v1::SignInByWechatOauth2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignInByOauth2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* Wechat::Stub::AsyncSignInByOauth2Raw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SignInByWechatOauth2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInByOauth2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::AllOauth2User(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllOauth2User_, context, request, response);
}

void Wechat::Stub::async::AllOauth2User(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllOauth2User_, context, request, response, std::move(f));
}

void Wechat::Stub::async::AllOauth2User(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllOauth2User_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse>* Wechat::Stub::PrepareAsyncAllOauth2UserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllOauth2User_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse>* Wechat::Stub::AsyncAllOauth2UserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllOauth2UserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::DestroyOauth2User(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyOauth2User_, context, request, response);
}

void Wechat::Stub::async::DestroyOauth2User(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyOauth2User_, context, request, response, std::move(f));
}

void Wechat::Stub::async::DestroyOauth2User(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyOauth2User_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncDestroyOauth2UserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyOauth2User_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncDestroyOauth2UserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyOauth2UserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::BindOauth2UserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindOauth2UserById_, context, request, response);
}

void Wechat::Stub::async::BindOauth2UserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::BindOauth2UserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncBindOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindOauth2UserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncBindOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindOauth2UserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::BindOauth2UserByAccount(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByAccountRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserBindByAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindOauth2UserByAccount_, context, request, response);
}

void Wechat::Stub::async::BindOauth2UserByAccount(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByAccountRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserBindByAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserByAccount_, context, request, response, std::move(f));
}

void Wechat::Stub::async::BindOauth2UserByAccount(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserByAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncBindOauth2UserByAccountRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatUserBindByAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindOauth2UserByAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncBindOauth2UserByAccountRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindOauth2UserByAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetOauth2UserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOauth2UserById_, context, request, response);
}

void Wechat::Stub::async::GetOauth2UserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetOauth2UserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::PrepareAsyncGetOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOauth2UserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::AsyncGetOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOauth2UserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetOauth2UserByOpenId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest& request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOauth2UserByOpenId_, context, request, response);
}

void Wechat::Stub::async::GetOauth2UserByOpenId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByOpenId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetOauth2UserByOpenId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByOpenId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::PrepareAsyncGetOauth2UserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOauth2UserByOpenId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::AsyncGetOauth2UserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOauth2UserByOpenIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetOauth2UserByUnionId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest& request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOauth2UserByUnionId_, context, request, response);
}

void Wechat::Stub::async::GetOauth2UserByUnionId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByUnionId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetOauth2UserByUnionId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse>* Wechat::Stub::PrepareAsyncGetOauth2UserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOauth2UserByUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllOauth2UserResponse>* Wechat::Stub::AsyncGetOauth2UserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOauth2UserByUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::AllMiniProgramUser(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllMiniProgramUser_, context, request, response);
}

void Wechat::Stub::async::AllMiniProgramUser(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllMiniProgramUser_, context, request, response, std::move(f));
}

void Wechat::Stub::async::AllMiniProgramUser(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllMiniProgramUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::PrepareAsyncAllMiniProgramUserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllMiniProgramUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::AsyncAllMiniProgramUserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllMiniProgramUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::DestroyMiniProgramUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyMiniProgramUser_, context, request, response);
}

void Wechat::Stub::async::DestroyMiniProgramUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyMiniProgramUser_, context, request, response, std::move(f));
}

void Wechat::Stub::async::DestroyMiniProgramUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyMiniProgramUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncDestroyMiniProgramUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyMiniProgramUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncDestroyMiniProgramUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyMiniProgramUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::BindMiniProgramUserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindMiniProgramUserById_, context, request, response);
}

void Wechat::Stub::async::BindMiniProgramUserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindMiniProgramUserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::BindMiniProgramUserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindMiniProgramUserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncBindMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindMiniProgramUserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncBindMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindMiniProgramUserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetMiniProgramUserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMiniProgramUserById_, context, request, response);
}

void Wechat::Stub::async::GetMiniProgramUserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetMiniProgramUserById(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::PrepareAsyncGetMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMiniProgramUserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::AsyncGetMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMiniProgramUserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetMiniProgramUserByOpenId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest& request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMiniProgramUserByOpenId_, context, request, response);
}

void Wechat::Stub::async::GetMiniProgramUserByOpenId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByOpenId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetMiniProgramUserByOpenId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByOpenId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::PrepareAsyncGetMiniProgramUserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMiniProgramUserByOpenId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::AsyncGetMiniProgramUserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMiniProgramUserByOpenIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetMiniProgramUserByUnionId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest& request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMiniProgramUserByUnionId_, context, request, response);
}

void Wechat::Stub::async::GetMiniProgramUserByUnionId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByUnionId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetMiniProgramUserByUnionId(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::PrepareAsyncGetMiniProgramUserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMiniProgramUserByUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::AsyncGetMiniProgramUserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMiniProgramUserByUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

Wechat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::WechatOauth2SignInStateResponse* resp) {
               return service->Oauth2SignInState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest* req,
             ::palm::orchid::v1::WechatOauth2QrConnectResponse* resp) {
               return service->Oauth2SignInUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::SignInByWechatOauth2Request, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SignInByWechatOauth2Request* req,
             ::palm::metasequoia::v1::UserSignInResponse* resp) {
               return service->SignInByOauth2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::WechatAllOauth2UserResponse* resp) {
               return service->AllOauth2User(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DestroyOauth2User(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserBindByIdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BindOauth2UserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserBindByAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserBindByAccountRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BindOauth2UserByAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* resp) {
               return service->GetOauth2UserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* req,
             ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* resp) {
               return service->GetOauth2UserByOpenId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::palm::metasequoia::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* req,
             ::palm::metasequoia::v1::WechatAllOauth2UserResponse* resp) {
               return service->GetOauth2UserByUnionId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* resp) {
               return service->AllMiniProgramUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DestroyMiniProgramUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserBindByIdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BindMiniProgramUserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::IdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* resp) {
               return service->GetMiniProgramUserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* req,
             ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* resp) {
               return service->GetMiniProgramUserByOpenId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* req,
             ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* resp) {
               return service->GetMiniProgramUserByUnionId(ctx, req, resp);
             }, this)));
}

Wechat::Service::~Service() {
}

::grpc::Status Wechat::Service::Oauth2SignInState(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatOauth2SignInStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::Oauth2SignInUrl(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatOauth2SignInUrlRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::SignInByOauth2(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SignInByWechatOauth2Request* request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::AllOauth2User(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::DestroyOauth2User(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::BindOauth2UserById(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::BindOauth2UserByAccount(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserBindByAccountRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetOauth2UserById(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetOauth2UserByOpenId(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetOauth2UserByUnionId(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* request, ::palm::metasequoia::v1::WechatAllOauth2UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::AllMiniProgramUser(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::DestroyMiniProgramUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::BindMiniProgramUserById(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetMiniProgramUserById(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetMiniProgramUserByOpenId(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserQueryByOpenIdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetMiniProgramUserByUnionId(::grpc::ServerContext* context, const ::palm::metasequoia::v1::WechatUserQueryByUnionIdRequest* request, ::palm::metasequoia::v1::WechatAllMiniProgramUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace metasequoia
}  // namespace v1

