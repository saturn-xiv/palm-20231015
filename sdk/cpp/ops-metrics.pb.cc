// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ops-metrics.proto

#include "ops-metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace ops {
namespace metrics {
namespace v1 {
PROTOBUF_CONSTEXPR ReportHeartbeatRequest::ReportHeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportHeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportHeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportHeartbeatRequestDefaultTypeInternal() {}
  union {
    ReportHeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportHeartbeatRequestDefaultTypeInternal _ReportHeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR ReportJournalRequest::ReportJournalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportJournalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportJournalRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportJournalRequestDefaultTypeInternal() {}
  union {
    ReportJournalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportJournalRequestDefaultTypeInternal _ReportJournalRequest_default_instance_;
PROTOBUF_CONSTEXPR ReportNginxRequest_Access::ReportNginxRequest_Access(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.http_referer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_.body_bytes_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.request_time_)*/0} {}
struct ReportNginxRequest_AccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportNginxRequest_AccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportNginxRequest_AccessDefaultTypeInternal() {}
  union {
    ReportNginxRequest_Access _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportNginxRequest_AccessDefaultTypeInternal _ReportNginxRequest_Access_default_instance_;
PROTOBUF_CONSTEXPR ReportNginxRequest::ReportNginxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReportNginxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportNginxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportNginxRequestDefaultTypeInternal() {}
  union {
    ReportNginxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportNginxRequestDefaultTypeInternal _ReportNginxRequest_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace ops
}  // namespace palm
static ::_pb::Metadata file_level_metadata_ops_2dmetrics_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ops_2dmetrics_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ops_2dmetrics_2eproto = nullptr;

const uint32_t TableStruct_ops_2dmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportHeartbeatRequest, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.client_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.body_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.request_time_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.http_referer_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::ops::metrics::v1::ReportHeartbeatRequest)},
  { 7, -1, -1, sizeof(::palm::ops::metrics::v1::ReportJournalRequest)},
  { 19, 33, -1, sizeof(::palm::ops::metrics::v1::ReportNginxRequest_Access)},
  { 41, -1, -1, sizeof(::palm::ops::metrics::v1::ReportNginxRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::ops::metrics::v1::_ReportHeartbeatRequest_default_instance_._instance,
  &::palm::ops::metrics::v1::_ReportJournalRequest_default_instance_._instance,
  &::palm::ops::metrics::v1::_ReportNginxRequest_Access_default_instance_._instance,
  &::palm::ops::metrics::v1::_ReportNginxRequest_default_instance_._instance,
};

const char descriptor_table_protodef_ops_2dmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ops-metrics.proto\022\023palm.ops.metrics.v1"
  "\032\033google/protobuf/empty.proto\032\037google/pr"
  "otobuf/timestamp.proto\"H\n\026ReportHeartbea"
  "tRequest\022.\n\ncreated_at\030\013 \001(\0132\032.google.pr"
  "otobuf.Timestamp\"\227\001\n\024ReportJournalReques"
  "t\022\020\n\010hostname\030\001 \001(\t\022\014\n\004user\030\002 \001(\t\022\r\n\005gro"
  "up\030\003 \001(\t\022\017\n\007command\030\004 \001(\t\022\017\n\007message\030\t \001"
  "(\t\022.\n\ncreated_at\030\013 \001(\0132\032.google.protobuf"
  ".Timestamp\"\332\002\n\022ReportNginxRequest\022@\n\006acc"
  "ess\030\001 \001(\0132..palm.ops.metrics.v1.ReportNg"
  "inxRequest.AccessH\000\022\017\n\005error\030\002 \001(\tH\000\022.\n\n"
  "created_at\030\t \001(\0132\032.google.protobuf.Times"
  "tamp\032\265\001\n\006Access\022\021\n\tclient_ip\030\001 \001(\t\022\016\n\006me"
  "thod\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\017\n\007version\030\004 \001("
  "\002\022\016\n\006status\030\005 \001(\r\022\027\n\017body_bytes_sent\030\006 \001"
  "(\004\022\024\n\014request_time\030\007 \001(\002\022\031\n\014http_referer"
  "\030\010 \001(\tH\000\210\001\001B\017\n\r_http_refererB\t\n\007payload2"
  "\370\001\n\006Report\022R\n\tHeartbeat\022+.palm.ops.metri"
  "cs.v1.ReportHeartbeatRequest\032\026.google.pr"
  "otobuf.Empty\"\000\022N\n\007Journal\022).palm.ops.met"
  "rics.v1.ReportJournalRequest\032\026.google.pr"
  "otobuf.Empty\"\000\022J\n\005Nginx\022\'.palm.ops.metri"
  "cs.v1.ReportNginxRequest\032\026.google.protob"
  "uf.Empty\"\000B5\n1com.github.saturn_xiv.palm"
  ".plugins.ops.metrics.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ops_2dmetrics_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_ops_2dmetrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ops_2dmetrics_2eproto = {
    false, false, 993, descriptor_table_protodef_ops_2dmetrics_2eproto,
    "ops-metrics.proto",
    &descriptor_table_ops_2dmetrics_2eproto_once, descriptor_table_ops_2dmetrics_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_ops_2dmetrics_2eproto::offsets,
    file_level_metadata_ops_2dmetrics_2eproto, file_level_enum_descriptors_ops_2dmetrics_2eproto,
    file_level_service_descriptors_ops_2dmetrics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ops_2dmetrics_2eproto_getter() {
  return &descriptor_table_ops_2dmetrics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ops_2dmetrics_2eproto(&descriptor_table_ops_2dmetrics_2eproto);
namespace palm {
namespace ops {
namespace metrics {
namespace v1 {

// ===================================================================

class ReportHeartbeatRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ReportHeartbeatRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ReportHeartbeatRequest::_Internal::created_at(const ReportHeartbeatRequest* msg) {
  return *msg->_impl_.created_at_;
}
void ReportHeartbeatRequest::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
ReportHeartbeatRequest::ReportHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportHeartbeatRequest)
}
ReportHeartbeatRequest::ReportHeartbeatRequest(const ReportHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportHeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportHeartbeatRequest)
}

inline void ReportHeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReportHeartbeatRequest::~ReportHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportHeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void ReportHeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportHeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp created_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportHeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportHeartbeatRequest)
  return target;
}

size_t ReportHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportHeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportHeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportHeartbeatRequest::GetClassData() const { return &_class_data_; }


void ReportHeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportHeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const ReportHeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportHeartbeatRequest::CopyFrom(const ReportHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportHeartbeatRequest::IsInitialized() const {
  return true;
}

void ReportHeartbeatRequest::InternalSwap(ReportHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.created_at_, other->_impl_.created_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportHeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[0]);
}

// ===================================================================

class ReportJournalRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ReportJournalRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ReportJournalRequest::_Internal::created_at(const ReportJournalRequest* msg) {
  return *msg->_impl_.created_at_;
}
void ReportJournalRequest::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
ReportJournalRequest::ReportJournalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportJournalRequest)
}
ReportJournalRequest::ReportJournalRequest(const ReportJournalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportJournalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hostname_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportJournalRequest)
}

inline void ReportJournalRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hostname_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReportJournalRequest::~ReportJournalRequest() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportJournalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportJournalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostname_.Destroy();
  _impl_.user_.Destroy();
  _impl_.group_.Destroy();
  _impl_.command_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void ReportJournalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportJournalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportJournalRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hostname_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  _impl_.group_.ClearToEmpty();
  _impl_.command_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportJournalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportJournalRequest.hostname"));
        } else
          goto handle_unusual;
        continue;
      // string user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportJournalRequest.user"));
        } else
          goto handle_unusual;
        continue;
      // string group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportJournalRequest.group"));
        } else
          goto handle_unusual;
        continue;
      // string command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportJournalRequest.command"));
        } else
          goto handle_unusual;
        continue;
      // string message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportJournalRequest.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportJournalRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportJournalRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportJournalRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportJournalRequest.user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user(), target);
  }

  // string group = 3;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportJournalRequest.group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group(), target);
  }

  // string command = 4;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportJournalRequest.command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command(), target);
  }

  // string message = 9;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportJournalRequest.message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportJournalRequest)
  return target;
}

size_t ReportJournalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportJournalRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string group = 3;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // string command = 4;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string message = 9;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportJournalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportJournalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportJournalRequest::GetClassData() const { return &_class_data_; }


void ReportJournalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportJournalRequest*>(&to_msg);
  auto& from = static_cast<const ReportJournalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportJournalRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportJournalRequest::CopyFrom(const ReportJournalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportJournalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportJournalRequest::IsInitialized() const {
  return true;
}

void ReportJournalRequest::InternalSwap(ReportJournalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.created_at_, other->_impl_.created_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportJournalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[1]);
}

// ===================================================================

class ReportNginxRequest_Access::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportNginxRequest_Access>()._impl_._has_bits_);
  static void set_has_http_referer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReportNginxRequest_Access::ReportNginxRequest_Access(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportNginxRequest.Access)
}
ReportNginxRequest_Access::ReportNginxRequest_Access(const ReportNginxRequest_Access& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportNginxRequest_Access* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_ip_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.http_referer_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.body_bytes_sent_){}
    , decltype(_impl_.request_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ip().empty()) {
    _this->_impl_.client_ip_.Set(from._internal_client_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.http_referer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.http_referer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_http_referer()) {
    _this->_impl_.http_referer_.Set(from._internal_http_referer(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_time_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.request_time_));
  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportNginxRequest.Access)
}

inline void ReportNginxRequest_Access::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_ip_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.http_referer_){}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.status_){0u}
    , decltype(_impl_.body_bytes_sent_){uint64_t{0u}}
    , decltype(_impl_.request_time_){0}
  };
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.http_referer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.http_referer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReportNginxRequest_Access::~ReportNginxRequest_Access() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportNginxRequest.Access)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportNginxRequest_Access::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_ip_.Destroy();
  _impl_.method_.Destroy();
  _impl_.path_.Destroy();
  _impl_.http_referer_.Destroy();
}

void ReportNginxRequest_Access::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportNginxRequest_Access::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_ip_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.http_referer_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.request_time_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.request_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportNginxRequest_Access::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip"));
        } else
          goto handle_unusual;
        continue;
      // string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportNginxRequest.Access.method"));
        } else
          goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportNginxRequest.Access.path"));
        } else
          goto handle_unusual;
        continue;
      // float version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_bytes_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.body_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float request_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string http_referer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_http_referer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportNginxRequest_Access::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_ip = 1;
  if (!this->_internal_client_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ip().data(), static_cast<int>(this->_internal_client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_ip(), target);
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportNginxRequest.Access.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportNginxRequest.Access.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // float version = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_version = this->_internal_version();
  uint32_t raw_version;
  memcpy(&raw_version, &tmp_version, sizeof(tmp_version));
  if (raw_version != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_version(), target);
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  // uint64 body_bytes_sent = 6;
  if (this->_internal_body_bytes_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_body_bytes_sent(), target);
  }

  // float request_time = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_request_time = this->_internal_request_time();
  uint32_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_request_time(), target);
  }

  // optional string http_referer = 8;
  if (_internal_has_http_referer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_http_referer().data(), static_cast<int>(this->_internal_http_referer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_http_referer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportNginxRequest.Access)
  return target;
}

size_t ReportNginxRequest_Access::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 1;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ip());
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // optional string http_referer = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_http_referer());
  }

  // float version = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_version = this->_internal_version();
  uint32_t raw_version;
  memcpy(&raw_version, &tmp_version, sizeof(tmp_version));
  if (raw_version != 0) {
    total_size += 1 + 4;
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  // uint64 body_bytes_sent = 6;
  if (this->_internal_body_bytes_sent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_bytes_sent());
  }

  // float request_time = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_request_time = this->_internal_request_time();
  uint32_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportNginxRequest_Access::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportNginxRequest_Access::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportNginxRequest_Access::GetClassData() const { return &_class_data_; }


void ReportNginxRequest_Access::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportNginxRequest_Access*>(&to_msg);
  auto& from = static_cast<const ReportNginxRequest_Access&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_has_http_referer()) {
    _this->_internal_set_http_referer(from._internal_http_referer());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_version = from._internal_version();
  uint32_t raw_version;
  memcpy(&raw_version, &tmp_version, sizeof(tmp_version));
  if (raw_version != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_body_bytes_sent() != 0) {
    _this->_internal_set_body_bytes_sent(from._internal_body_bytes_sent());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_request_time = from._internal_request_time();
  uint32_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    _this->_internal_set_request_time(from._internal_request_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportNginxRequest_Access::CopyFrom(const ReportNginxRequest_Access& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportNginxRequest_Access::IsInitialized() const {
  return true;
}

void ReportNginxRequest_Access::InternalSwap(ReportNginxRequest_Access* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_ip_, lhs_arena,
      &other->_impl_.client_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.http_referer_, lhs_arena,
      &other->_impl_.http_referer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.request_time_)
      + sizeof(ReportNginxRequest_Access::_impl_.request_time_)
      - PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportNginxRequest_Access::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[2]);
}

// ===================================================================

class ReportNginxRequest::_Internal {
 public:
  static const ::palm::ops::metrics::v1::ReportNginxRequest_Access& access(const ReportNginxRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ReportNginxRequest* msg);
};

const ::palm::ops::metrics::v1::ReportNginxRequest_Access&
ReportNginxRequest::_Internal::access(const ReportNginxRequest* msg) {
  return *msg->_impl_.payload_.access_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ReportNginxRequest::_Internal::created_at(const ReportNginxRequest* msg) {
  return *msg->_impl_.created_at_;
}
void ReportNginxRequest::set_allocated_access(::palm::ops::metrics::v1::ReportNginxRequest_Access* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(access);
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    set_has_access();
    _impl_.payload_.access_ = access;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.access)
}
void ReportNginxRequest::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
ReportNginxRequest::ReportNginxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportNginxRequest)
}
ReportNginxRequest::ReportNginxRequest(const ReportNginxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportNginxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kAccess: {
      _this->_internal_mutable_access()->::palm::ops::metrics::v1::ReportNginxRequest_Access::MergeFrom(
          from._internal_access());
      break;
    }
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportNginxRequest)
}

inline void ReportNginxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

ReportNginxRequest::~ReportNginxRequest() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportNginxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportNginxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (has_payload()) {
    clear_payload();
  }
}

void ReportNginxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportNginxRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:palm.ops.metrics.v1.ReportNginxRequest)
  switch (payload_case()) {
    case kAccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.access_;
      }
      break;
    }
    case kError: {
      _impl_.payload_.error_.Destroy();
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ReportNginxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportNginxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportNginxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.metrics.v1.ReportNginxRequest.error"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportNginxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportNginxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
  if (_internal_has_access()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::access(this),
        _Internal::access(this).GetCachedSize(), target, stream);
  }

  // string error = 2;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.metrics.v1.ReportNginxRequest.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportNginxRequest)
  return target;
}

size_t ReportNginxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportNginxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  switch (payload_case()) {
    // .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
    case kAccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.access_);
      break;
    }
    // string error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportNginxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportNginxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportNginxRequest::GetClassData() const { return &_class_data_; }


void ReportNginxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportNginxRequest*>(&to_msg);
  auto& from = static_cast<const ReportNginxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportNginxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  switch (from.payload_case()) {
    case kAccess: {
      _this->_internal_mutable_access()->::palm::ops::metrics::v1::ReportNginxRequest_Access::MergeFrom(
          from._internal_access());
      break;
    }
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportNginxRequest::CopyFrom(const ReportNginxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportNginxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportNginxRequest::IsInitialized() const {
  return true;
}

void ReportNginxRequest::InternalSwap(ReportNginxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.created_at_, other->_impl_.created_at_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportNginxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace ops
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::ops::metrics::v1::ReportHeartbeatRequest*
Arena::CreateMaybeMessage< ::palm::ops::metrics::v1::ReportHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::metrics::v1::ReportHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::metrics::v1::ReportJournalRequest*
Arena::CreateMaybeMessage< ::palm::ops::metrics::v1::ReportJournalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::metrics::v1::ReportJournalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::metrics::v1::ReportNginxRequest_Access*
Arena::CreateMaybeMessage< ::palm::ops::metrics::v1::ReportNginxRequest_Access >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::metrics::v1::ReportNginxRequest_Access >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::metrics::v1::ReportNginxRequest*
Arena::CreateMaybeMessage< ::palm::ops::metrics::v1::ReportNginxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::metrics::v1::ReportNginxRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
