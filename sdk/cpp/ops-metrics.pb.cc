// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ops-metrics.proto

#include "ops-metrics.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace palm {
namespace ops {
namespace metrics {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR ReportHeartbeatRequest::ReportHeartbeatRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.created_at_)*/ nullptr,
    } {}
struct ReportHeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportHeartbeatRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportHeartbeatRequestDefaultTypeInternal() {}
  union {
    ReportHeartbeatRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportHeartbeatRequestDefaultTypeInternal _ReportHeartbeatRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ReportJournalRequest::ReportJournalRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.hostname_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.user_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.group_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.command_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.message_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.created_at_)*/ nullptr,
    } {}
struct ReportJournalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportJournalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportJournalRequestDefaultTypeInternal() {}
  union {
    ReportJournalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportJournalRequestDefaultTypeInternal _ReportJournalRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ReportNginxRequest_Access::ReportNginxRequest_Access(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.client_ip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.method_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.http_referer_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.version_)*/ 0,
      /*decltype(_impl_.status_)*/ 0u,
      /*decltype(_impl_.body_bytes_sent_)*/ ::uint64_t{0u},
      /*decltype(_impl_.request_time_)*/ 0,
    } {}
struct ReportNginxRequest_AccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportNginxRequest_AccessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportNginxRequest_AccessDefaultTypeInternal() {}
  union {
    ReportNginxRequest_Access _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportNginxRequest_AccessDefaultTypeInternal _ReportNginxRequest_Access_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ReportNginxRequest::ReportNginxRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.created_at_)*/ nullptr,
      /*decltype(_impl_.payload_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct ReportNginxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportNginxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportNginxRequestDefaultTypeInternal() {}
  union {
    ReportNginxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportNginxRequestDefaultTypeInternal _ReportNginxRequest_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace ops
}  // namespace palm
static ::_pb::Metadata file_level_metadata_ops_2dmetrics_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ops_2dmetrics_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ops_2dmetrics_2eproto = nullptr;
const ::uint32_t TableStruct_ops_2dmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportHeartbeatRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportHeartbeatRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportHeartbeatRequest, _impl_.created_at_),
    0,
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.hostname_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportJournalRequest, _impl_.created_at_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.client_ip_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.body_bytes_sent_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.request_time_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest_Access, _impl_.http_referer_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_.payload_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::palm::ops::metrics::v1::ReportHeartbeatRequest)},
        {10, 24, -1, sizeof(::palm::ops::metrics::v1::ReportJournalRequest)},
        {30, 46, -1, sizeof(::palm::ops::metrics::v1::ReportNginxRequest_Access)},
        {54, 66, -1, sizeof(::palm::ops::metrics::v1::ReportNginxRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::ops::metrics::v1::_ReportHeartbeatRequest_default_instance_._instance,
    &::palm::ops::metrics::v1::_ReportJournalRequest_default_instance_._instance,
    &::palm::ops::metrics::v1::_ReportNginxRequest_Access_default_instance_._instance,
    &::palm::ops::metrics::v1::_ReportNginxRequest_default_instance_._instance,
};
const char descriptor_table_protodef_ops_2dmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021ops-metrics.proto\022\023palm.ops.metrics.v1"
    "\032\033google/protobuf/empty.proto\032\037google/pr"
    "otobuf/timestamp.proto\"H\n\026ReportHeartbea"
    "tRequest\022.\n\ncreated_at\030\013 \001(\0132\032.google.pr"
    "otobuf.Timestamp\"\227\001\n\024ReportJournalReques"
    "t\022\020\n\010hostname\030\001 \001(\t\022\014\n\004user\030\002 \001(\t\022\r\n\005gro"
    "up\030\003 \001(\t\022\017\n\007command\030\004 \001(\t\022\017\n\007message\030\t \001"
    "(\t\022.\n\ncreated_at\030\013 \001(\0132\032.google.protobuf"
    ".Timestamp\"\332\002\n\022ReportNginxRequest\022@\n\006acc"
    "ess\030\001 \001(\0132..palm.ops.metrics.v1.ReportNg"
    "inxRequest.AccessH\000\022\017\n\005error\030\002 \001(\tH\000\022.\n\n"
    "created_at\030\t \001(\0132\032.google.protobuf.Times"
    "tamp\032\265\001\n\006Access\022\021\n\tclient_ip\030\001 \001(\t\022\016\n\006me"
    "thod\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\022\017\n\007version\030\004 \001("
    "\002\022\016\n\006status\030\005 \001(\r\022\027\n\017body_bytes_sent\030\006 \001"
    "(\004\022\024\n\014request_time\030\007 \001(\002\022\031\n\014http_referer"
    "\030\010 \001(\tH\000\210\001\001B\017\n\r_http_refererB\t\n\007payload2"
    "\370\001\n\006Report\022R\n\tHeartbeat\022+.palm.ops.metri"
    "cs.v1.ReportHeartbeatRequest\032\026.google.pr"
    "otobuf.Empty\"\000\022N\n\007Journal\022).palm.ops.met"
    "rics.v1.ReportJournalRequest\032\026.google.pr"
    "otobuf.Empty\"\000\022J\n\005Nginx\022\'.palm.ops.metri"
    "cs.v1.ReportNginxRequest\032\026.google.protob"
    "uf.Empty\"\000B`\n1com.github.saturn_xiv.palm"
    ".plugins.ops.metrics.v1P\001Z)github.com/sa"
    "turn_xiv/palm/ops/metrics/v2b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ops_2dmetrics_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ops_2dmetrics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ops_2dmetrics_2eproto = {
    false,
    false,
    1036,
    descriptor_table_protodef_ops_2dmetrics_2eproto,
    "ops-metrics.proto",
    &descriptor_table_ops_2dmetrics_2eproto_once,
    descriptor_table_ops_2dmetrics_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_ops_2dmetrics_2eproto::offsets,
    file_level_metadata_ops_2dmetrics_2eproto,
    file_level_enum_descriptors_ops_2dmetrics_2eproto,
    file_level_service_descriptors_ops_2dmetrics_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ops_2dmetrics_2eproto_getter() {
  return &descriptor_table_ops_2dmetrics_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ops_2dmetrics_2eproto(&descriptor_table_ops_2dmetrics_2eproto);
namespace palm {
namespace ops {
namespace metrics {
namespace v1 {
// ===================================================================

class ReportHeartbeatRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportHeartbeatRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReportHeartbeatRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& created_at(const ReportHeartbeatRequest* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& ReportHeartbeatRequest::_Internal::created_at(const ReportHeartbeatRequest* msg) {
  return *msg->_impl_.created_at_;
}
void ReportHeartbeatRequest::clear_created_at() {
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReportHeartbeatRequest::ReportHeartbeatRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportHeartbeatRequest)
}
ReportHeartbeatRequest::ReportHeartbeatRequest(const ReportHeartbeatRequest& from) : ::google::protobuf::Message() {
  ReportHeartbeatRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.created_at_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.created_at_ = new ::google::protobuf::Timestamp(*from._impl_.created_at_);
  }

  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportHeartbeatRequest)
}
inline void ReportHeartbeatRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.created_at_){nullptr},
  };
}
ReportHeartbeatRequest::~ReportHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportHeartbeatRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportHeartbeatRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.created_at_;
}
void ReportHeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ReportHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.created_at_ != nullptr);
    _impl_.created_at_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportHeartbeatRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ReportHeartbeatRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReportHeartbeatRequest, _impl_._has_bits_),
    0, // no _extensions_
    11, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966271,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ReportHeartbeatRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp created_at = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(ReportHeartbeatRequest, _impl_.created_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp created_at = 11;
    {PROTOBUF_FIELD_OFFSET(ReportHeartbeatRequest, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* ReportHeartbeatRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportHeartbeatRequest)
  return target;
}

::size_t ReportHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 11;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReportHeartbeatRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ReportHeartbeatRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*ReportHeartbeatRequest::GetClassData() const { return &_class_data_; }


void ReportHeartbeatRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReportHeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const ReportHeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportHeartbeatRequest::CopyFrom(const ReportHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportHeartbeatRequest::IsInitialized() const {
  return true;
}

void ReportHeartbeatRequest::InternalSwap(ReportHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.created_at_, other->_impl_.created_at_);
}

::google::protobuf::Metadata ReportHeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[0]);
}
// ===================================================================

class ReportJournalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportJournalRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& created_at(const ReportJournalRequest* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& ReportJournalRequest::_Internal::created_at(const ReportJournalRequest* msg) {
  return *msg->_impl_.created_at_;
}
void ReportJournalRequest::clear_created_at() {
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReportJournalRequest::ReportJournalRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportJournalRequest)
}
ReportJournalRequest::ReportJournalRequest(const ReportJournalRequest& from) : ::google::protobuf::Message() {
  ReportJournalRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.hostname_){},
      decltype(_impl_.user_){},
      decltype(_impl_.group_){},
      decltype(_impl_.command_){},
      decltype(_impl_.message_){},
      decltype(_impl_.created_at_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), _this->GetArenaForAllocation());
  }
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.group_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), _this->GetArenaForAllocation());
  }
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.command_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.created_at_ = new ::google::protobuf::Timestamp(*from._impl_.created_at_);
  }

  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportJournalRequest)
}
inline void ReportJournalRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.hostname_){},
      decltype(_impl_.user_){},
      decltype(_impl_.group_){},
      decltype(_impl_.command_){},
      decltype(_impl_.message_){},
      decltype(_impl_.created_at_){nullptr},
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.group_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.command_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ReportJournalRequest::~ReportJournalRequest() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportJournalRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportJournalRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostname_.Destroy();
  _impl_.user_.Destroy();
  _impl_.group_.Destroy();
  _impl_.command_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}
void ReportJournalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ReportJournalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportJournalRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hostname_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  _impl_.group_.ClearToEmpty();
  _impl_.command_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.created_at_ != nullptr);
    _impl_.created_at_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportJournalRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 6, 1, 80, 2> ReportJournalRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_._has_bits_),
    0, // no _extensions_
    11, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966000,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ReportJournalRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string command = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.command_)}},
    // string hostname = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.hostname_)}},
    // string user = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.user_)}},
    // string group = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.group_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string hostname = 1;
    {PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.hostname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user = 2;
    {PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.user_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string group = 3;
    {PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.group_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string command = 4;
    {PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.command_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 9;
    {PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 11;
    {PROTOBUF_FIELD_OFFSET(ReportJournalRequest, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\50\10\4\5\7\7\0\0"
    "palm.ops.metrics.v1.ReportJournalRequest"
    "hostname"
    "user"
    "group"
    "command"
    "message"
  }},
};

::uint8_t* ReportJournalRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportJournalRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    const std::string& _s = this->_internal_hostname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportJournalRequest.hostname");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    const std::string& _s = this->_internal_user();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportJournalRequest.user");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string group = 3;
  if (!this->_internal_group().empty()) {
    const std::string& _s = this->_internal_group();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportJournalRequest.group");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string command = 4;
  if (!this->_internal_command().empty()) {
    const std::string& _s = this->_internal_command();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportJournalRequest.command");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string message = 9;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportJournalRequest.message");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportJournalRequest)
  return target;
}

::size_t ReportJournalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportJournalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_hostname());
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user());
  }

  // string group = 3;
  if (!this->_internal_group().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_group());
  }

  // string command = 4;
  if (!this->_internal_command().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_command());
  }

  // string message = 9;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .google.protobuf.Timestamp created_at = 11;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReportJournalRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ReportJournalRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*ReportJournalRequest::GetClassData() const { return &_class_data_; }


void ReportJournalRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReportJournalRequest*>(&to_msg);
  auto& from = static_cast<const ReportJournalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportJournalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportJournalRequest::CopyFrom(const ReportJournalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportJournalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportJournalRequest::IsInitialized() const {
  return true;
}

void ReportJournalRequest::InternalSwap(ReportJournalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hostname_, lhs_arena,
                                       &other->_impl_.hostname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, lhs_arena,
                                       &other->_impl_.user_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_, lhs_arena,
                                       &other->_impl_.group_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.command_, lhs_arena,
                                       &other->_impl_.command_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  swap(_impl_.created_at_, other->_impl_.created_at_);
}

::google::protobuf::Metadata ReportJournalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[1]);
}
// ===================================================================

class ReportNginxRequest_Access::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportNginxRequest_Access>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_._has_bits_);
  static void set_has_http_referer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReportNginxRequest_Access::ReportNginxRequest_Access(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportNginxRequest.Access)
}
ReportNginxRequest_Access::ReportNginxRequest_Access(const ReportNginxRequest_Access& from) : ::google::protobuf::Message() {
  ReportNginxRequest_Access* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.client_ip_){},
      decltype(_impl_.method_){},
      decltype(_impl_.path_){},
      decltype(_impl_.http_referer_){},
      decltype(_impl_.version_){},
      decltype(_impl_.status_){},
      decltype(_impl_.body_bytes_sent_){},
      decltype(_impl_.request_time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ip().empty()) {
    _this->_impl_.client_ip_.Set(from._internal_client_ip(), _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.http_referer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.http_referer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.http_referer_.Set(from._internal_http_referer(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.request_time_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.request_time_));

  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportNginxRequest.Access)
}
inline void ReportNginxRequest_Access::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.client_ip_){},
      decltype(_impl_.method_){},
      decltype(_impl_.path_){},
      decltype(_impl_.http_referer_){},
      decltype(_impl_.version_){0},
      decltype(_impl_.status_){0u},
      decltype(_impl_.body_bytes_sent_){::uint64_t{0u}},
      decltype(_impl_.request_time_){0},
  };
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.http_referer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.http_referer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ReportNginxRequest_Access::~ReportNginxRequest_Access() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportNginxRequest.Access)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportNginxRequest_Access::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_ip_.Destroy();
  _impl_.method_.Destroy();
  _impl_.path_.Destroy();
  _impl_.http_referer_.Destroy();
}
void ReportNginxRequest_Access::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ReportNginxRequest_Access::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_ip_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.http_referer_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.request_time_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.request_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportNginxRequest_Access::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 93, 2> ReportNginxRequest_Access::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ReportNginxRequest_Access_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string http_referer = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.http_referer_)}},
    // string client_ip = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.client_ip_)}},
    // string method = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.method_)}},
    // string path = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.path_)}},
    // float version = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.version_)}},
    // uint32 status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReportNginxRequest_Access, _impl_.status_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.status_)}},
    // uint64 body_bytes_sent = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ReportNginxRequest_Access, _impl_.body_bytes_sent_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.body_bytes_sent_)}},
    // float request_time = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.request_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string client_ip = 1;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.client_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string method = 2;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.method_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string path = 3;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.path_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float version = 4;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 status = 5;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 body_bytes_sent = 6;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.body_bytes_sent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // float request_time = 7;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.request_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // optional string http_referer = 8;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.http_referer_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\11\6\4\0\0\0\0\14\0\0\0\0\0\0\0"
    "palm.ops.metrics.v1.ReportNginxRequest.Access"
    "client_ip"
    "method"
    "path"
    "http_referer"
  }},
};

::uint8_t* ReportNginxRequest_Access::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string client_ip = 1;
  if (!this->_internal_client_ip().empty()) {
    const std::string& _s = this->_internal_client_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    const std::string& _s = this->_internal_method();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportNginxRequest.Access.method");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportNginxRequest.Access.path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // float version = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_version = this->_internal_version();
  ::uint32_t raw_version;
  memcpy(&raw_version, &tmp_version, sizeof(tmp_version));
  if (raw_version != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_version(), target);
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_status(), target);
  }

  // uint64 body_bytes_sent = 6;
  if (this->_internal_body_bytes_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_body_bytes_sent(), target);
  }

  // float request_time = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_request_time = this->_internal_request_time();
  ::uint32_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_request_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string http_referer = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_http_referer();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportNginxRequest.Access)
  return target;
}

::size_t ReportNginxRequest_Access::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 1;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_client_ip());
  }

  // string method = 2;
  if (!this->_internal_method().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_method());
  }

  // string path = 3;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // optional string http_referer = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_http_referer());
  }

  // float version = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_version = this->_internal_version();
  ::uint32_t raw_version;
  memcpy(&raw_version, &tmp_version, sizeof(tmp_version));
  if (raw_version != 0) {
    total_size += 5;
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_status());
  }

  // uint64 body_bytes_sent = 6;
  if (this->_internal_body_bytes_sent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_body_bytes_sent());
  }

  // float request_time = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_request_time = this->_internal_request_time();
  ::uint32_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReportNginxRequest_Access::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ReportNginxRequest_Access::MergeImpl
};
const ::google::protobuf::Message::ClassData*ReportNginxRequest_Access::GetClassData() const { return &_class_data_; }


void ReportNginxRequest_Access::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReportNginxRequest_Access*>(&to_msg);
  auto& from = static_cast<const ReportNginxRequest_Access&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_http_referer(from._internal_http_referer());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_version = from._internal_version();
  ::uint32_t raw_version;
  memcpy(&raw_version, &tmp_version, sizeof(tmp_version));
  if (raw_version != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_body_bytes_sent() != 0) {
    _this->_internal_set_body_bytes_sent(from._internal_body_bytes_sent());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_request_time = from._internal_request_time();
  ::uint32_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    _this->_internal_set_request_time(from._internal_request_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportNginxRequest_Access::CopyFrom(const ReportNginxRequest_Access& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportNginxRequest.Access)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportNginxRequest_Access::IsInitialized() const {
  return true;
}

void ReportNginxRequest_Access::InternalSwap(ReportNginxRequest_Access* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_ip_, lhs_arena,
                                       &other->_impl_.client_ip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, lhs_arena,
                                       &other->_impl_.method_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.http_referer_, lhs_arena,
                                       &other->_impl_.http_referer_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.request_time_)
      + sizeof(ReportNginxRequest_Access::_impl_.request_time_)
      - PROTOBUF_FIELD_OFFSET(ReportNginxRequest_Access, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata ReportNginxRequest_Access::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[2]);
}
// ===================================================================

class ReportNginxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportNginxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReportNginxRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::palm::ops::metrics::v1::ReportNginxRequest, _impl_._oneof_case_);
  static const ::palm::ops::metrics::v1::ReportNginxRequest_Access& access(const ReportNginxRequest* msg);
  static const ::google::protobuf::Timestamp& created_at(const ReportNginxRequest* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::ops::metrics::v1::ReportNginxRequest_Access& ReportNginxRequest::_Internal::access(const ReportNginxRequest* msg) {
  return *msg->_impl_.payload_.access_;
}
const ::google::protobuf::Timestamp& ReportNginxRequest::_Internal::created_at(const ReportNginxRequest* msg) {
  return *msg->_impl_.created_at_;
}
void ReportNginxRequest::set_allocated_access(::palm::ops::metrics::v1::ReportNginxRequest_Access* access) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (access) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::InternalGetOwningArena(access);
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    set_has_access();
    _impl_.payload_.access_ = access;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.access)
}
void ReportNginxRequest::clear_created_at() {
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReportNginxRequest::ReportNginxRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.ops.metrics.v1.ReportNginxRequest)
}
ReportNginxRequest::ReportNginxRequest(const ReportNginxRequest& from) : ::google::protobuf::Message() {
  ReportNginxRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.created_at_){nullptr},
      decltype(_impl_.payload_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.created_at_ = new ::google::protobuf::Timestamp(*from._impl_.created_at_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kAccess: {
      _this->_internal_mutable_access()->::palm::ops::metrics::v1::ReportNginxRequest_Access::MergeFrom(
          from._internal_access());
      break;
    }
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:palm.ops.metrics.v1.ReportNginxRequest)
}
inline void ReportNginxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.created_at_){nullptr},
      decltype(_impl_.payload_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_payload();
}
ReportNginxRequest::~ReportNginxRequest() {
  // @@protoc_insertion_point(destructor:palm.ops.metrics.v1.ReportNginxRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportNginxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (has_payload()) {
    clear_payload();
  }
}
void ReportNginxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportNginxRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:palm.ops.metrics.v1.ReportNginxRequest)
  switch (payload_case()) {
    case kAccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.access_;
      }
      break;
    }
    case kError: {
      _impl_.payload_.error_.Destroy();
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


PROTOBUF_NOINLINE void ReportNginxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.metrics.v1.ReportNginxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.created_at_ != nullptr);
    _impl_.created_at_->Clear();
  }
  clear_payload();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportNginxRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 2, 52, 2> ReportNginxRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReportNginxRequest, _impl_._has_bits_),
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967036,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ReportNginxRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp created_at = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 0, 1, PROTOBUF_FIELD_OFFSET(ReportNginxRequest, _impl_.created_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest, _impl_.payload_.access_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string error = 2;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest, _impl_.payload_.error_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 9;
    {PROTOBUF_FIELD_OFFSET(ReportNginxRequest, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::palm::ops::metrics::v1::ReportNginxRequest_Access>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\46\0\5\0\0\0\0\0"
    "palm.ops.metrics.v1.ReportNginxRequest"
    "error"
  }},
};

::uint8_t* ReportNginxRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.metrics.v1.ReportNginxRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (payload_case()) {
    case kAccess: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::access(this),
          _Internal::access(this).GetCachedSize(), target, stream);
      break;
    }
    case kError: {
      const std::string& _s = this->_internal_error();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "palm.ops.metrics.v1.ReportNginxRequest.error");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.metrics.v1.ReportNginxRequest)
  return target;
}

::size_t ReportNginxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.metrics.v1.ReportNginxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  switch (payload_case()) {
    // .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
    case kAccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.access_);
      break;
    }
    // string error = 2;
    case kError: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReportNginxRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ReportNginxRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*ReportNginxRequest::GetClassData() const { return &_class_data_; }


void ReportNginxRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReportNginxRequest*>(&to_msg);
  auto& from = static_cast<const ReportNginxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.metrics.v1.ReportNginxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  switch (from.payload_case()) {
    case kAccess: {
      _this->_internal_mutable_access()->::palm::ops::metrics::v1::ReportNginxRequest_Access::MergeFrom(
          from._internal_access());
      break;
    }
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportNginxRequest::CopyFrom(const ReportNginxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.metrics.v1.ReportNginxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportNginxRequest::IsInitialized() const {
  return true;
}

void ReportNginxRequest::InternalSwap(ReportNginxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.created_at_, other->_impl_.created_at_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ReportNginxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2dmetrics_2eproto_getter, &descriptor_table_ops_2dmetrics_2eproto_once,
      file_level_metadata_ops_2dmetrics_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace ops
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
