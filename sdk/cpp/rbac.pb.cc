// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#include "rbac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace rbac {
namespace v1 {
PROTOBUF_CONSTEXPR UserRequest::UserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRequestDefaultTypeInternal() {}
  union {
    UserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRequestDefaultTypeInternal _UserRequest_default_instance_;
PROTOBUF_CONSTEXPR RolesResponse::RolesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolesResponseDefaultTypeInternal() {}
  union {
    RolesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolesResponseDefaultTypeInternal _RolesResponse_default_instance_;
PROTOBUF_CONSTEXPR RoleRequest::RoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleRequestDefaultTypeInternal() {}
  union {
    RoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleRequestDefaultTypeInternal _RoleRequest_default_instance_;
PROTOBUF_CONSTEXPR UsersResponse::UsersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UsersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsersResponseDefaultTypeInternal() {}
  union {
    UsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsersResponseDefaultTypeInternal _UsersResponse_default_instance_;
PROTOBUF_CONSTEXPR HasRoleForUserRequest::HasRoleForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasRoleForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasRoleForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasRoleForUserRequestDefaultTypeInternal() {}
  union {
    HasRoleForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasRoleForUserRequestDefaultTypeInternal _HasRoleForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR HasPermissionForUserRequest::HasPermissionForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasPermissionForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasPermissionForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasPermissionForUserRequestDefaultTypeInternal() {}
  union {
    HasPermissionForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasPermissionForUserRequestDefaultTypeInternal _HasPermissionForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR RolesForUserRequest::RolesForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolesForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolesForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolesForUserRequestDefaultTypeInternal() {}
  union {
    RolesForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolesForUserRequestDefaultTypeInternal _RolesForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR Resource::Resource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDefaultTypeInternal _Resource_default_instance_;
PROTOBUF_CONSTEXPR Permission::Permission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.subject_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionDefaultTypeInternal _Permission_default_instance_;
PROTOBUF_CONSTEXPR PermissionsResponse::PermissionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionsResponseDefaultTypeInternal() {}
  union {
    PermissionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionsResponseDefaultTypeInternal _PermissionsResponse_default_instance_;
PROTOBUF_CONSTEXPR PermissionsForUserRequest::PermissionsForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionsForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionsForUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionsForUserRequestDefaultTypeInternal() {}
  union {
    PermissionsForUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionsForUserRequestDefaultTypeInternal _PermissionsForUserRequest_default_instance_;
PROTOBUF_CONSTEXPR PermissionsForRoleRequest::PermissionsForRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.role_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionsForRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionsForRoleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionsForRoleRequestDefaultTypeInternal() {}
  union {
    PermissionsForRoleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionsForRoleRequestDefaultTypeInternal _PermissionsForRoleRequest_default_instance_;
}  // namespace v1
}  // namespace rbac
}  // namespace palm
static ::_pb::Metadata file_level_metadata_rbac_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rbac_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rbac_2eproto = nullptr;

const uint32_t TableStruct_rbac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RoleRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasRoleForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasRoleForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasRoleForUserRequest, _impl_.role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _impl_.role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesForUserRequest, _impl_.roles_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Resource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Resource, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Resource, _impl_.id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Permission, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Permission, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Permission, _impl_.action_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::Permission, _impl_.subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsForUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsForUserRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsForUserRequest, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsForRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsForRoleRequest, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsForRoleRequest, _impl_.items_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::rbac::v1::UserRequest)},
  { 7, -1, -1, sizeof(::palm::rbac::v1::RolesResponse)},
  { 14, -1, -1, sizeof(::palm::rbac::v1::RoleRequest)},
  { 21, -1, -1, sizeof(::palm::rbac::v1::UsersResponse)},
  { 28, -1, -1, sizeof(::palm::rbac::v1::HasRoleForUserRequest)},
  { 36, -1, -1, sizeof(::palm::rbac::v1::HasPermissionForUserRequest)},
  { 44, -1, -1, sizeof(::palm::rbac::v1::RolesForUserRequest)},
  { 52, 60, -1, sizeof(::palm::rbac::v1::Resource)},
  { 62, -1, -1, sizeof(::palm::rbac::v1::Permission)},
  { 73, -1, -1, sizeof(::palm::rbac::v1::PermissionsResponse)},
  { 80, -1, -1, sizeof(::palm::rbac::v1::PermissionsForUserRequest)},
  { 88, -1, -1, sizeof(::palm::rbac::v1::PermissionsForRoleRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::rbac::v1::_UserRequest_default_instance_._instance,
  &::palm::rbac::v1::_RolesResponse_default_instance_._instance,
  &::palm::rbac::v1::_RoleRequest_default_instance_._instance,
  &::palm::rbac::v1::_UsersResponse_default_instance_._instance,
  &::palm::rbac::v1::_HasRoleForUserRequest_default_instance_._instance,
  &::palm::rbac::v1::_HasPermissionForUserRequest_default_instance_._instance,
  &::palm::rbac::v1::_RolesForUserRequest_default_instance_._instance,
  &::palm::rbac::v1::_Resource_default_instance_._instance,
  &::palm::rbac::v1::_Permission_default_instance_._instance,
  &::palm::rbac::v1::_PermissionsResponse_default_instance_._instance,
  &::palm::rbac::v1::_PermissionsForUserRequest_default_instance_._instance,
  &::palm::rbac::v1::_PermissionsForRoleRequest_default_instance_._instance,
};

const char descriptor_table_protodef_rbac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrbac.proto\022\014palm.rbac.v1\032\033google/proto"
  "buf/empty.proto\"\031\n\013UserRequest\022\n\n\002id\030\001 \001"
  "(\005\"\036\n\rRolesResponse\022\r\n\005items\030\001 \003(\t\"\033\n\013Ro"
  "leRequest\022\014\n\004name\030\001 \001(\t\"\036\n\rUsersResponse"
  "\022\r\n\005items\030\001 \003(\t\"3\n\025HasRoleForUserRequest"
  "\022\014\n\004user\030\001 \001(\005\022\014\n\004role\030\002 \001(\t\"9\n\033HasPermi"
  "ssionForUserRequest\022\014\n\004user\030\001 \001(\005\022\014\n\004rol"
  "e\030\002 \001(\t\"2\n\023RolesForUserRequest\022\014\n\004user\030\001"
  " \001(\005\022\r\n\005roles\030\002 \003(\t\"0\n\010Resource\022\014\n\004type\030"
  "\001 \001(\t\022\017\n\002id\030\002 \001(\tH\000\210\001\001B\005\n\003_id\"o\n\nPermiss"
  "ion\022&\n\006object\030\001 \001(\0132\026.palm.rbac.v1.Resou"
  "rce\022\016\n\006action\030\002 \001(\t\022\016\n\004user\030\013 \001(\005H\000\022\016\n\004r"
  "ole\030\014 \001(\tH\000B\t\n\007subject\">\n\023PermissionsRes"
  "ponse\022\'\n\005items\030\001 \003(\0132\030.palm.rbac.v1.Perm"
  "ission\"R\n\031PermissionsForUserRequest\022\014\n\004u"
  "ser\030\001 \001(\005\022\'\n\005items\030\002 \003(\0132\030.palm.rbac.v1."
  "Permission\"R\n\031PermissionsForRoleRequest\022"
  "\014\n\004role\030\001 \001(\t\022\'\n\005items\030\002 \003(\0132\030.palm.rbac"
  ".v1.Permission2\266\013\n\004Rbac\022K\n\017GetRolesForUs"
  "er\022\031.palm.rbac.v1.UserRequest\032\033.palm.rba"
  "c.v1.RolesResponse\"\000\022S\n\027GetImplicitRoles"
  "ForUser\022\031.palm.rbac.v1.UserRequest\032\033.pal"
  "m.rbac.v1.RolesResponse\"\000\022N\n\017AddRolesFor"
  "User\022!.palm.rbac.v1.RolesForUserRequest\032"
  "\026.google.protobuf.Empty\"\000\022Q\n\022DeleteRoles"
  "ForUser\022!.palm.rbac.v1.RolesForUserReque"
  "st\032\026.google.protobuf.Empty\"\000\022W\n\026HasImpli"
  "citRoleForUser\022#.palm.rbac.v1.HasRoleFor"
  "UserRequest\032\026.google.protobuf.Empty\"\000\022A\n"
  "\nDeleteUser\022\031.palm.rbac.v1.UserRequest\032\026"
  ".google.protobuf.Empty\"\000\022Z\n\025AddPermissio"
  "nsForUser\022\'.palm.rbac.v1.PermissionsForU"
  "serRequest\032\026.google.protobuf.Empty\"\000\022]\n\030"
  "DeletePermissionsForUser\022\'.palm.rbac.v1."
  "PermissionsForUserRequest\032\026.google.proto"
  "buf.Empty\"\000\022W\n\025GetPermissionsForUser\022\031.p"
  "alm.rbac.v1.UserRequest\032!.palm.rbac.v1.P"
  "ermissionsResponse\"\000\022_\n\035GetImplicitPermi"
  "ssionsForUser\022\031.palm.rbac.v1.UserRequest"
  "\032!.palm.rbac.v1.PermissionsResponse\"\000\022_\n"
  "\035HasImplicitPermissionsForUser\022\031.palm.rb"
  "ac.v1.UserRequest\032!.palm.rbac.v1.Permiss"
  "ionsResponse\"\000\022K\n\017GetUsersForRole\022\031.palm"
  ".rbac.v1.RoleRequest\032\033.palm.rbac.v1.User"
  "sResponse\"\000\022S\n\027GetImplicitUsersForRole\022\031"
  ".palm.rbac.v1.RoleRequest\032\033.palm.rbac.v1"
  ".UsersResponse\"\000\022A\n\nDeleteRole\022\031.palm.rb"
  "ac.v1.RoleRequest\032\026.google.protobuf.Empt"
  "y\"\000\022Z\n\025AddPermissionsForRole\022\'.palm.rbac"
  ".v1.PermissionsForRoleRequest\032\026.google.p"
  "rotobuf.Empty\"\000\022]\n\030DeletePermissionsForR"
  "ole\022\'.palm.rbac.v1.PermissionsForRoleReq"
  "uest\032\026.google.protobuf.Empty\"\000\022W\n\025GetPer"
  "missionsForRole\022\031.palm.rbac.v1.RoleReque"
  "st\032!.palm.rbac.v1.PermissionsResponse\"\000B"
  ".\n*com.github.saturn_xiv.palm.plugins.rb"
  "ac.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_rbac_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_rbac_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rbac_2eproto = {
    false, false, 2255, descriptor_table_protodef_rbac_2eproto,
    "rbac.proto",
    &descriptor_table_rbac_2eproto_once, descriptor_table_rbac_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_rbac_2eproto::offsets,
    file_level_metadata_rbac_2eproto, file_level_enum_descriptors_rbac_2eproto,
    file_level_service_descriptors_rbac_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rbac_2eproto_getter() {
  return &descriptor_table_rbac_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rbac_2eproto(&descriptor_table_rbac_2eproto);
namespace palm {
namespace rbac {
namespace v1 {

// ===================================================================

class UserRequest::_Internal {
 public:
};

UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UserRequest)
}

inline void UserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRequest::GetClassData() const { return &_class_data_; }


void UserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRequest*>(&to_msg);
  auto& from = static_cast<const UserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[0]);
}

// ===================================================================

class RolesResponse::_Internal {
 public:
};

RolesResponse::RolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.RolesResponse)
}
RolesResponse::RolesResponse(const RolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.RolesResponse)
}

inline void RolesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RolesResponse::~RolesResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.RolesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RolesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.RolesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.RolesResponse.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RolesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.RolesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.RolesResponse.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.RolesResponse)
  return target;
}

size_t RolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.RolesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolesResponse::GetClassData() const { return &_class_data_; }


void RolesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolesResponse*>(&to_msg);
  auto& from = static_cast<const RolesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.RolesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolesResponse::CopyFrom(const RolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.RolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolesResponse::IsInitialized() const {
  return true;
}

void RolesResponse::InternalSwap(RolesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RolesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[1]);
}

// ===================================================================

class RoleRequest::_Internal {
 public:
};

RoleRequest::RoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.RoleRequest)
}
RoleRequest::RoleRequest(const RoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.RoleRequest)
}

inline void RoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleRequest::~RoleRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.RoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.RoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.RoleRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.RoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.RoleRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.RoleRequest)
  return target;
}

size_t RoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.RoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleRequest::GetClassData() const { return &_class_data_; }


void RoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleRequest*>(&to_msg);
  auto& from = static_cast<const RoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.RoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleRequest::CopyFrom(const RoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.RoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRequest::IsInitialized() const {
  return true;
}

void RoleRequest::InternalSwap(RoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[2]);
}

// ===================================================================

class UsersResponse::_Internal {
 public:
};

UsersResponse::UsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UsersResponse)
}
UsersResponse::UsersResponse(const UsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UsersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UsersResponse)
}

inline void UsersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UsersResponse::~UsersResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UsersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UsersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.UsersResponse.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.UsersResponse.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UsersResponse)
  return target;
}

size_t UsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersResponse::GetClassData() const { return &_class_data_; }


void UsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UsersResponse*>(&to_msg);
  auto& from = static_cast<const UsersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UsersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersResponse::CopyFrom(const UsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersResponse::IsInitialized() const {
  return true;
}

void UsersResponse::InternalSwap(UsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[3]);
}

// ===================================================================

class HasRoleForUserRequest::_Internal {
 public:
};

HasRoleForUserRequest::HasRoleForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.HasRoleForUserRequest)
}
HasRoleForUserRequest::HasRoleForUserRequest(const HasRoleForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasRoleForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.HasRoleForUserRequest)
}

inline void HasRoleForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HasRoleForUserRequest::~HasRoleForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.HasRoleForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasRoleForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_.Destroy();
}

void HasRoleForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasRoleForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.HasRoleForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_.ClearToEmpty();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasRoleForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.HasRoleForUserRequest.role"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HasRoleForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.HasRoleForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.HasRoleForUserRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.HasRoleForUserRequest)
  return target;
}

size_t HasRoleForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.HasRoleForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasRoleForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasRoleForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasRoleForUserRequest::GetClassData() const { return &_class_data_; }


void HasRoleForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasRoleForUserRequest*>(&to_msg);
  auto& from = static_cast<const HasRoleForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.HasRoleForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasRoleForUserRequest::CopyFrom(const HasRoleForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.HasRoleForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasRoleForUserRequest::IsInitialized() const {
  return true;
}

void HasRoleForUserRequest::InternalSwap(HasRoleForUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasRoleForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[4]);
}

// ===================================================================

class HasPermissionForUserRequest::_Internal {
 public:
};

HasPermissionForUserRequest::HasPermissionForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.HasPermissionForUserRequest)
}
HasPermissionForUserRequest::HasPermissionForUserRequest(const HasPermissionForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasPermissionForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.HasPermissionForUserRequest)
}

inline void HasPermissionForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_){}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HasPermissionForUserRequest::~HasPermissionForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.HasPermissionForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasPermissionForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_.Destroy();
}

void HasPermissionForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasPermissionForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.HasPermissionForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_.ClearToEmpty();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasPermissionForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.HasPermissionForUserRequest.role"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HasPermissionForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.HasPermissionForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.HasPermissionForUserRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.HasPermissionForUserRequest)
  return target;
}

size_t HasPermissionForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.HasPermissionForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasPermissionForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasPermissionForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasPermissionForUserRequest::GetClassData() const { return &_class_data_; }


void HasPermissionForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasPermissionForUserRequest*>(&to_msg);
  auto& from = static_cast<const HasPermissionForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.HasPermissionForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasPermissionForUserRequest::CopyFrom(const HasPermissionForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.HasPermissionForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasPermissionForUserRequest::IsInitialized() const {
  return true;
}

void HasPermissionForUserRequest::InternalSwap(HasPermissionForUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasPermissionForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[5]);
}

// ===================================================================

class RolesForUserRequest::_Internal {
 public:
};

RolesForUserRequest::RolesForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.RolesForUserRequest)
}
RolesForUserRequest::RolesForUserRequest(const RolesForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolesForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.RolesForUserRequest)
}

inline void RolesForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RolesForUserRequest::~RolesForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.RolesForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolesForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
}

void RolesForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolesForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.RolesForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolesForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.RolesForUserRequest.roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RolesForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.RolesForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.RolesForUserRequest.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.RolesForUserRequest)
  return target;
}

size_t RolesForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.RolesForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.roles_.size());
  for (int i = 0, n = _impl_.roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.roles_.Get(i));
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolesForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolesForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolesForUserRequest::GetClassData() const { return &_class_data_; }


void RolesForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolesForUserRequest*>(&to_msg);
  auto& from = static_cast<const RolesForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.RolesForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolesForUserRequest::CopyFrom(const RolesForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.RolesForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolesForUserRequest::IsInitialized() const {
  return true;
}

void RolesForUserRequest::InternalSwap(RolesForUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RolesForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[6]);
}

// ===================================================================

class Resource::_Internal {
 public:
  using HasBits = decltype(std::declval<Resource>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Resource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.Resource)
}

inline void Resource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.id_.Destroy();
}

void Resource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.Resource.type"));
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.Resource.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.Resource.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string id = 2;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.Resource.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // optional string id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }


void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Resource*>(&to_msg);
  auto& from = static_cast<const Resource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.Resource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[7]);
}

// ===================================================================

class Permission::_Internal {
 public:
  static const ::palm::rbac::v1::Resource& object(const Permission* msg);
};

const ::palm::rbac::v1::Resource&
Permission::_Internal::object(const Permission* msg) {
  return *msg->_impl_.object_;
}
Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Permission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::palm::rbac::v1::Resource(*from._impl_.object_);
  }
  clear_has_subject();
  switch (from.subject_case()) {
    case kUser: {
      _this->_internal_set_user(from._internal_user());
      break;
    }
    case kRole: {
      _this->_internal_set_role(from._internal_role());
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.Permission)
}

inline void Permission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.subject_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_subject();
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.Permission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
  if (has_subject()) {
    clear_subject();
  }
}

void Permission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Permission::clear_subject() {
// @@protoc_insertion_point(one_of_clear_start:palm.rbac.v1.Permission)
  switch (subject_case()) {
    case kUser: {
      // No need to clear
      break;
    }
    case kRole: {
      _impl_.subject_.role_.Destroy();
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUBJECT_NOT_SET;
}


void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.Permission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  clear_subject();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.rbac.v1.Resource object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.Permission.action"));
        } else
          goto handle_unusual;
        continue;
      // int32 user = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_user(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.Permission.role"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Permission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.Permission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.rbac.v1.Resource object = 1;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.Permission.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // int32 user = 11;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_user(), target);
  }

  // string role = 12;
  if (_internal_has_role()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.Permission.role");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.Permission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 2;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .palm.rbac.v1.Resource object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  switch (subject_case()) {
    // int32 user = 11;
    case kUser: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
      break;
    }
    // string role = 12;
    case kRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_role());
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Permission::GetClassData() const { return &_class_data_; }


void Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Permission*>(&to_msg);
  auto& from = static_cast<const Permission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.Permission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::palm::rbac::v1::Resource::MergeFrom(
        from._internal_object());
  }
  switch (from.subject_case()) {
    case kUser: {
      _this->_internal_set_user(from._internal_user());
      break;
    }
    case kRole: {
      _this->_internal_set_role(from._internal_role());
      break;
    }
    case SUBJECT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.object_, other->_impl_.object_);
  swap(_impl_.subject_, other->_impl_.subject_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[8]);
}

// ===================================================================

class PermissionsResponse::_Internal {
 public:
};

PermissionsResponse::PermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.PermissionsResponse)
}
PermissionsResponse::PermissionsResponse(const PermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.PermissionsResponse)
}

inline void PermissionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PermissionsResponse::~PermissionsResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.PermissionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void PermissionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.PermissionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.rbac.v1.Permission items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermissionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.PermissionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.Permission items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.PermissionsResponse)
  return target;
}

size_t PermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.PermissionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.Permission items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsResponse::GetClassData() const { return &_class_data_; }


void PermissionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionsResponse*>(&to_msg);
  auto& from = static_cast<const PermissionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.PermissionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsResponse::CopyFrom(const PermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.PermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsResponse::IsInitialized() const {
  return true;
}

void PermissionsResponse::InternalSwap(PermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[9]);
}

// ===================================================================

class PermissionsForUserRequest::_Internal {
 public:
};

PermissionsForUserRequest::PermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.PermissionsForUserRequest)
}
PermissionsForUserRequest::PermissionsForUserRequest(const PermissionsForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionsForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.PermissionsForUserRequest)
}

inline void PermissionsForUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PermissionsForUserRequest::~PermissionsForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.PermissionsForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionsForUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void PermissionsForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionsForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.PermissionsForUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.rbac.v1.Permission items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermissionsForUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.PermissionsForUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // repeated .palm.rbac.v1.Permission items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.PermissionsForUserRequest)
  return target;
}

size_t PermissionsForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.PermissionsForUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.Permission items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionsForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsForUserRequest::GetClassData() const { return &_class_data_; }


void PermissionsForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionsForUserRequest*>(&to_msg);
  auto& from = static_cast<const PermissionsForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.PermissionsForUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsForUserRequest::CopyFrom(const PermissionsForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.PermissionsForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsForUserRequest::IsInitialized() const {
  return true;
}

void PermissionsForUserRequest::InternalSwap(PermissionsForUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[10]);
}

// ===================================================================

class PermissionsForRoleRequest::_Internal {
 public:
};

PermissionsForRoleRequest::PermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.PermissionsForRoleRequest)
}
PermissionsForRoleRequest::PermissionsForRoleRequest(const PermissionsForRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionsForRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.PermissionsForRoleRequest)
}

inline void PermissionsForRoleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PermissionsForRoleRequest::~PermissionsForRoleRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.PermissionsForRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionsForRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.role_.Destroy();
}

void PermissionsForRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionsForRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.PermissionsForRoleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsForRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.PermissionsForRoleRequest.role"));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.rbac.v1.Permission items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PermissionsForRoleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.PermissionsForRoleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.rbac.v1.PermissionsForRoleRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  // repeated .palm.rbac.v1.Permission items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.PermissionsForRoleRequest)
  return target;
}

size_t PermissionsForRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.PermissionsForRoleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.Permission items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role = 1;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsForRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionsForRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsForRoleRequest::GetClassData() const { return &_class_data_; }


void PermissionsForRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionsForRoleRequest*>(&to_msg);
  auto& from = static_cast<const PermissionsForRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.PermissionsForRoleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsForRoleRequest::CopyFrom(const PermissionsForRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.PermissionsForRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsForRoleRequest::IsInitialized() const {
  return true;
}

void PermissionsForRoleRequest::InternalSwap(PermissionsForRoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_, lhs_arena,
      &other->_impl_.role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsForRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rbac
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::RolesResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::RolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::RolesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::RoleRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::RoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::RoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UsersResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::HasRoleForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::HasRoleForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::HasRoleForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::HasPermissionForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::HasPermissionForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::HasPermissionForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::RolesForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::RolesForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::RolesForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::Resource*
Arena::CreateMaybeMessage< ::palm::rbac::v1::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::Permission*
Arena::CreateMaybeMessage< ::palm::rbac::v1::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::PermissionsResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::PermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::PermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::PermissionsForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::PermissionsForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::PermissionsForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::PermissionsForRoleRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::PermissionsForRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::PermissionsForRoleRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
