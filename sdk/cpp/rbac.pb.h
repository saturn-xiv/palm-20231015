// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rbac_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rbac_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rbac_2eproto;
namespace palm {
namespace rbac {
namespace v1 {
class HasPermissionForUserRequest;
struct HasPermissionForUserRequestDefaultTypeInternal;
extern HasPermissionForUserRequestDefaultTypeInternal _HasPermissionForUserRequest_default_instance_;
class HasRoleForUserRequest;
struct HasRoleForUserRequestDefaultTypeInternal;
extern HasRoleForUserRequestDefaultTypeInternal _HasRoleForUserRequest_default_instance_;
class Permission;
struct PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class PermissionsForRoleRequest;
struct PermissionsForRoleRequestDefaultTypeInternal;
extern PermissionsForRoleRequestDefaultTypeInternal _PermissionsForRoleRequest_default_instance_;
class PermissionsForUserRequest;
struct PermissionsForUserRequestDefaultTypeInternal;
extern PermissionsForUserRequestDefaultTypeInternal _PermissionsForUserRequest_default_instance_;
class PermissionsResponse;
struct PermissionsResponseDefaultTypeInternal;
extern PermissionsResponseDefaultTypeInternal _PermissionsResponse_default_instance_;
class Resource;
struct ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class RoleRequest;
struct RoleRequestDefaultTypeInternal;
extern RoleRequestDefaultTypeInternal _RoleRequest_default_instance_;
class RolesForUserRequest;
struct RolesForUserRequestDefaultTypeInternal;
extern RolesForUserRequestDefaultTypeInternal _RolesForUserRequest_default_instance_;
class RolesResponse;
struct RolesResponseDefaultTypeInternal;
extern RolesResponseDefaultTypeInternal _RolesResponse_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UsersResponse;
struct UsersResponseDefaultTypeInternal;
extern UsersResponseDefaultTypeInternal _UsersResponse_default_instance_;
}  // namespace v1
}  // namespace rbac
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::rbac::v1::HasPermissionForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::HasPermissionForUserRequest>(Arena*);
template<> ::palm::rbac::v1::HasRoleForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::HasRoleForUserRequest>(Arena*);
template<> ::palm::rbac::v1::Permission* Arena::CreateMaybeMessage<::palm::rbac::v1::Permission>(Arena*);
template<> ::palm::rbac::v1::PermissionsForRoleRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::PermissionsForRoleRequest>(Arena*);
template<> ::palm::rbac::v1::PermissionsForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::PermissionsForUserRequest>(Arena*);
template<> ::palm::rbac::v1::PermissionsResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::PermissionsResponse>(Arena*);
template<> ::palm::rbac::v1::Resource* Arena::CreateMaybeMessage<::palm::rbac::v1::Resource>(Arena*);
template<> ::palm::rbac::v1::RoleRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::RoleRequest>(Arena*);
template<> ::palm::rbac::v1::RolesForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::RolesForUserRequest>(Arena*);
template<> ::palm::rbac::v1::RolesResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::RolesResponse>(Arena*);
template<> ::palm::rbac::v1::UserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::UserRequest>(Arena*);
template<> ::palm::rbac::v1::UsersResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::UsersResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace rbac {
namespace v1 {

// ===================================================================

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRequest& from) {
    UserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class RolesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.RolesResponse) */ {
 public:
  inline RolesResponse() : RolesResponse(nullptr) {}
  ~RolesResponse() override;
  explicit PROTOBUF_CONSTEXPR RolesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RolesResponse(const RolesResponse& from);
  RolesResponse(RolesResponse&& from) noexcept
    : RolesResponse() {
    *this = ::std::move(from);
  }

  inline RolesResponse& operator=(const RolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RolesResponse& operator=(RolesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RolesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RolesResponse* internal_default_instance() {
    return reinterpret_cast<const RolesResponse*>(
               &_RolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RolesResponse& a, RolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RolesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RolesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RolesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RolesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RolesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RolesResponse& from) {
    RolesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RolesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.RolesResponse";
  }
  protected:
  explicit RolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.RolesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class RoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.RoleRequest) */ {
 public:
  inline RoleRequest() : RoleRequest(nullptr) {}
  ~RoleRequest() override;
  explicit PROTOBUF_CONSTEXPR RoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleRequest(const RoleRequest& from);
  RoleRequest(RoleRequest&& from) noexcept
    : RoleRequest() {
    *this = ::std::move(from);
  }

  inline RoleRequest& operator=(const RoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleRequest& operator=(RoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleRequest* internal_default_instance() {
    return reinterpret_cast<const RoleRequest*>(
               &_RoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoleRequest& a, RoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleRequest& from) {
    RoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.RoleRequest";
  }
  protected:
  explicit RoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.RoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class UsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UsersResponse) */ {
 public:
  inline UsersResponse() : UsersResponse(nullptr) {}
  ~UsersResponse() override;
  explicit PROTOBUF_CONSTEXPR UsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersResponse(const UsersResponse& from);
  UsersResponse(UsersResponse&& from) noexcept
    : UsersResponse() {
    *this = ::std::move(from);
  }

  inline UsersResponse& operator=(const UsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersResponse& operator=(UsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersResponse* internal_default_instance() {
    return reinterpret_cast<const UsersResponse*>(
               &_UsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UsersResponse& a, UsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UsersResponse& from) {
    UsersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.UsersResponse";
  }
  protected:
  explicit UsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class HasRoleForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.HasRoleForUserRequest) */ {
 public:
  inline HasRoleForUserRequest() : HasRoleForUserRequest(nullptr) {}
  ~HasRoleForUserRequest() override;
  explicit PROTOBUF_CONSTEXPR HasRoleForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasRoleForUserRequest(const HasRoleForUserRequest& from);
  HasRoleForUserRequest(HasRoleForUserRequest&& from) noexcept
    : HasRoleForUserRequest() {
    *this = ::std::move(from);
  }

  inline HasRoleForUserRequest& operator=(const HasRoleForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasRoleForUserRequest& operator=(HasRoleForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasRoleForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasRoleForUserRequest* internal_default_instance() {
    return reinterpret_cast<const HasRoleForUserRequest*>(
               &_HasRoleForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HasRoleForUserRequest& a, HasRoleForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasRoleForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasRoleForUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasRoleForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasRoleForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasRoleForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HasRoleForUserRequest& from) {
    HasRoleForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasRoleForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.HasRoleForUserRequest";
  }
  protected:
  explicit HasRoleForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string role = 2;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // int32 user = 1;
  void clear_user();
  int32_t user() const;
  void set_user(int32_t value);
  private:
  int32_t _internal_user() const;
  void _internal_set_user(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.HasRoleForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class HasPermissionForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.HasPermissionForUserRequest) */ {
 public:
  inline HasPermissionForUserRequest() : HasPermissionForUserRequest(nullptr) {}
  ~HasPermissionForUserRequest() override;
  explicit PROTOBUF_CONSTEXPR HasPermissionForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasPermissionForUserRequest(const HasPermissionForUserRequest& from);
  HasPermissionForUserRequest(HasPermissionForUserRequest&& from) noexcept
    : HasPermissionForUserRequest() {
    *this = ::std::move(from);
  }

  inline HasPermissionForUserRequest& operator=(const HasPermissionForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasPermissionForUserRequest& operator=(HasPermissionForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasPermissionForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasPermissionForUserRequest* internal_default_instance() {
    return reinterpret_cast<const HasPermissionForUserRequest*>(
               &_HasPermissionForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HasPermissionForUserRequest& a, HasPermissionForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasPermissionForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasPermissionForUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasPermissionForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasPermissionForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasPermissionForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HasPermissionForUserRequest& from) {
    HasPermissionForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasPermissionForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.HasPermissionForUserRequest";
  }
  protected:
  explicit HasPermissionForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string role = 2;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // int32 user = 1;
  void clear_user();
  int32_t user() const;
  void set_user(int32_t value);
  private:
  int32_t _internal_user() const;
  void _internal_set_user(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.HasPermissionForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class RolesForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.RolesForUserRequest) */ {
 public:
  inline RolesForUserRequest() : RolesForUserRequest(nullptr) {}
  ~RolesForUserRequest() override;
  explicit PROTOBUF_CONSTEXPR RolesForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RolesForUserRequest(const RolesForUserRequest& from);
  RolesForUserRequest(RolesForUserRequest&& from) noexcept
    : RolesForUserRequest() {
    *this = ::std::move(from);
  }

  inline RolesForUserRequest& operator=(const RolesForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RolesForUserRequest& operator=(RolesForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RolesForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RolesForUserRequest* internal_default_instance() {
    return reinterpret_cast<const RolesForUserRequest*>(
               &_RolesForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RolesForUserRequest& a, RolesForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RolesForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RolesForUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RolesForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RolesForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RolesForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RolesForUserRequest& from) {
    RolesForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RolesForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.RolesForUserRequest";
  }
  protected:
  explicit RolesForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated string roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();
  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  public:

  // int32 user = 1;
  void clear_user();
  int32_t user() const;
  void set_user(int32_t value);
  private:
  int32_t _internal_user() const;
  void _internal_set_user(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.RolesForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
    int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class Resource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  ~Resource() override;
  explicit PROTOBUF_CONSTEXPR Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Resource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Resource& from) {
    Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.Resource";
  }
  protected:
  explicit Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class Permission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.Permission) */ {
 public:
  inline Permission() : Permission(nullptr) {}
  ~Permission() override;
  explicit PROTOBUF_CONSTEXPR Permission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Permission& default_instance() {
    return *internal_default_instance();
  }
  enum SubjectCase {
    kUser = 11,
    kRole = 12,
    SUBJECT_NOT_SET = 0,
  };

  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Permission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Permission& from) {
    Permission::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.Permission";
  }
  protected:
  explicit Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kObjectFieldNumber = 1,
    kUserFieldNumber = 11,
    kRoleFieldNumber = 12,
  };
  // string action = 2;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .palm.rbac.v1.Resource object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::palm::rbac::v1::Resource& object() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::Resource* release_object();
  ::palm::rbac::v1::Resource* mutable_object();
  void set_allocated_object(::palm::rbac::v1::Resource* object);
  private:
  const ::palm::rbac::v1::Resource& _internal_object() const;
  ::palm::rbac::v1::Resource* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::palm::rbac::v1::Resource* object);
  ::palm::rbac::v1::Resource* unsafe_arena_release_object();

  // int32 user = 11;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  int32_t user() const;
  void set_user(int32_t value);
  private:
  int32_t _internal_user() const;
  void _internal_set_user(int32_t value);
  public:

  // string role = 12;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  void clear_subject();
  SubjectCase subject_case() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.Permission)
 private:
  class _Internal;
  void set_has_user();
  void set_has_role();

  inline bool has_subject() const;
  inline void clear_has_subject();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::palm::rbac::v1::Resource* object_;
    union SubjectUnion {
      constexpr SubjectUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t user_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    } subject_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class PermissionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PermissionsResponse) */ {
 public:
  inline PermissionsResponse() : PermissionsResponse(nullptr) {}
  ~PermissionsResponse() override;
  explicit PROTOBUF_CONSTEXPR PermissionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionsResponse(const PermissionsResponse& from);
  PermissionsResponse(PermissionsResponse&& from) noexcept
    : PermissionsResponse() {
    *this = ::std::move(from);
  }

  inline PermissionsResponse& operator=(const PermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionsResponse& operator=(PermissionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const PermissionsResponse*>(
               &_PermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PermissionsResponse& a, PermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionsResponse& from) {
    PermissionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.PermissionsResponse";
  }
  protected:
  explicit PermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.Permission items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::rbac::v1::Permission* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >*
      mutable_items();
  private:
  const ::palm::rbac::v1::Permission& _internal_items(int index) const;
  ::palm::rbac::v1::Permission* _internal_add_items();
  public:
  const ::palm::rbac::v1::Permission& items(int index) const;
  ::palm::rbac::v1::Permission* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >&
      items() const;

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PermissionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class PermissionsForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PermissionsForUserRequest) */ {
 public:
  inline PermissionsForUserRequest() : PermissionsForUserRequest(nullptr) {}
  ~PermissionsForUserRequest() override;
  explicit PROTOBUF_CONSTEXPR PermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionsForUserRequest(const PermissionsForUserRequest& from);
  PermissionsForUserRequest(PermissionsForUserRequest&& from) noexcept
    : PermissionsForUserRequest() {
    *this = ::std::move(from);
  }

  inline PermissionsForUserRequest& operator=(const PermissionsForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionsForUserRequest& operator=(PermissionsForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionsForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionsForUserRequest* internal_default_instance() {
    return reinterpret_cast<const PermissionsForUserRequest*>(
               &_PermissionsForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PermissionsForUserRequest& a, PermissionsForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionsForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionsForUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionsForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionsForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionsForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionsForUserRequest& from) {
    PermissionsForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionsForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.PermissionsForUserRequest";
  }
  protected:
  explicit PermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.Permission items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::rbac::v1::Permission* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >*
      mutable_items();
  private:
  const ::palm::rbac::v1::Permission& _internal_items(int index) const;
  ::palm::rbac::v1::Permission* _internal_add_items();
  public:
  const ::palm::rbac::v1::Permission& items(int index) const;
  ::palm::rbac::v1::Permission* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >&
      items() const;

  // int32 user = 1;
  void clear_user();
  int32_t user() const;
  void set_user(int32_t value);
  private:
  int32_t _internal_user() const;
  void _internal_set_user(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PermissionsForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission > items_;
    int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// -------------------------------------------------------------------

class PermissionsForRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PermissionsForRoleRequest) */ {
 public:
  inline PermissionsForRoleRequest() : PermissionsForRoleRequest(nullptr) {}
  ~PermissionsForRoleRequest() override;
  explicit PROTOBUF_CONSTEXPR PermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionsForRoleRequest(const PermissionsForRoleRequest& from);
  PermissionsForRoleRequest(PermissionsForRoleRequest&& from) noexcept
    : PermissionsForRoleRequest() {
    *this = ::std::move(from);
  }

  inline PermissionsForRoleRequest& operator=(const PermissionsForRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionsForRoleRequest& operator=(PermissionsForRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionsForRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionsForRoleRequest* internal_default_instance() {
    return reinterpret_cast<const PermissionsForRoleRequest*>(
               &_PermissionsForRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PermissionsForRoleRequest& a, PermissionsForRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionsForRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionsForRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionsForRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionsForRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionsForRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionsForRoleRequest& from) {
    PermissionsForRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionsForRoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.rbac.v1.PermissionsForRoleRequest";
  }
  protected:
  explicit PermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.Permission items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::rbac::v1::Permission* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >*
      mutable_items();
  private:
  const ::palm::rbac::v1::Permission& _internal_items(int index) const;
  ::palm::rbac::v1::Permission* _internal_add_items();
  public:
  const ::palm::rbac::v1::Permission& items(int index) const;
  ::palm::rbac::v1::Permission* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >&
      items() const;

  // string role = 1;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PermissionsForRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRequest

// int32 id = 1;
inline void UserRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UserRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UserRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UserRequest.id)
  return _internal_id();
}
inline void UserRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UserRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UserRequest.id)
}

// -------------------------------------------------------------------

// RolesResponse

// repeated string items = 1;
inline int RolesResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RolesResponse::items_size() const {
  return _internal_items_size();
}
inline void RolesResponse::clear_items() {
  _impl_.items_.Clear();
}
inline std::string* RolesResponse::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.rbac.v1.RolesResponse.items)
  return _s;
}
inline const std::string& RolesResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const std::string& RolesResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RolesResponse.items)
  return _internal_items(index);
}
inline std::string* RolesResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RolesResponse.items)
  return _impl_.items_.Mutable(index);
}
inline void RolesResponse::set_items(int index, const std::string& value) {
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, std::string&& value) {
  _impl_.items_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, const char* value, size_t size) {
  _impl_.items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.rbac.v1.RolesResponse.items)
}
inline std::string* RolesResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline void RolesResponse::add_items(const std::string& value) {
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(std::string&& value) {
  _impl_.items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(const char* value, size_t size) {
  _impl_.items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.rbac.v1.RolesResponse.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RolesResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.RolesResponse.items)
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RolesResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.RolesResponse.items)
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// RoleRequest

// string name = 1;
inline void RoleRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoleRequest::name() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RoleRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RoleRequest.name)
}
inline std::string* RoleRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RoleRequest.name)
  return _s;
}
inline const std::string& RoleRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RoleRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.RoleRequest.name)
  return _impl_.name_.Release();
}
inline void RoleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.RoleRequest.name)
}

// -------------------------------------------------------------------

// UsersResponse

// repeated string items = 1;
inline int UsersResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UsersResponse::items_size() const {
  return _internal_items_size();
}
inline void UsersResponse::clear_items() {
  _impl_.items_.Clear();
}
inline std::string* UsersResponse::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.rbac.v1.UsersResponse.items)
  return _s;
}
inline const std::string& UsersResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const std::string& UsersResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UsersResponse.items)
  return _internal_items(index);
}
inline std::string* UsersResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UsersResponse.items)
  return _impl_.items_.Mutable(index);
}
inline void UsersResponse::set_items(int index, const std::string& value) {
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UsersResponse.items)
}
inline void UsersResponse::set_items(int index, std::string&& value) {
  _impl_.items_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UsersResponse.items)
}
inline void UsersResponse::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.rbac.v1.UsersResponse.items)
}
inline void UsersResponse::set_items(int index, const char* value, size_t size) {
  _impl_.items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.rbac.v1.UsersResponse.items)
}
inline std::string* UsersResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline void UsersResponse::add_items(const std::string& value) {
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UsersResponse.items)
}
inline void UsersResponse::add_items(std::string&& value) {
  _impl_.items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UsersResponse.items)
}
inline void UsersResponse::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.rbac.v1.UsersResponse.items)
}
inline void UsersResponse::add_items(const char* value, size_t size) {
  _impl_.items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.rbac.v1.UsersResponse.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UsersResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UsersResponse.items)
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UsersResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UsersResponse.items)
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// HasRoleForUserRequest

// int32 user = 1;
inline void HasRoleForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline int32_t HasRoleForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline int32_t HasRoleForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasRoleForUserRequest.user)
  return _internal_user();
}
inline void HasRoleForUserRequest::_internal_set_user(int32_t value) {
  
  _impl_.user_ = value;
}
inline void HasRoleForUserRequest::set_user(int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasRoleForUserRequest.user)
}

// string role = 2;
inline void HasRoleForUserRequest::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& HasRoleForUserRequest::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasRoleForUserRequest.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasRoleForUserRequest::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasRoleForUserRequest.role)
}
inline std::string* HasRoleForUserRequest::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.HasRoleForUserRequest.role)
  return _s;
}
inline const std::string& HasRoleForUserRequest::_internal_role() const {
  return _impl_.role_.Get();
}
inline void HasRoleForUserRequest::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* HasRoleForUserRequest::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* HasRoleForUserRequest::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.HasRoleForUserRequest.role)
  return _impl_.role_.Release();
}
inline void HasRoleForUserRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.HasRoleForUserRequest.role)
}

// -------------------------------------------------------------------

// HasPermissionForUserRequest

// int32 user = 1;
inline void HasPermissionForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline int32_t HasPermissionForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline int32_t HasPermissionForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasPermissionForUserRequest.user)
  return _internal_user();
}
inline void HasPermissionForUserRequest::_internal_set_user(int32_t value) {
  
  _impl_.user_ = value;
}
inline void HasPermissionForUserRequest::set_user(int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasPermissionForUserRequest.user)
}

// string role = 2;
inline void HasPermissionForUserRequest::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& HasPermissionForUserRequest::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasPermissionForUserRequest.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HasPermissionForUserRequest::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasPermissionForUserRequest.role)
}
inline std::string* HasPermissionForUserRequest::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.HasPermissionForUserRequest.role)
  return _s;
}
inline const std::string& HasPermissionForUserRequest::_internal_role() const {
  return _impl_.role_.Get();
}
inline void HasPermissionForUserRequest::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* HasPermissionForUserRequest::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* HasPermissionForUserRequest::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.HasPermissionForUserRequest.role)
  return _impl_.role_.Release();
}
inline void HasPermissionForUserRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.HasPermissionForUserRequest.role)
}

// -------------------------------------------------------------------

// RolesForUserRequest

// int32 user = 1;
inline void RolesForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline int32_t RolesForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline int32_t RolesForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RolesForUserRequest.user)
  return _internal_user();
}
inline void RolesForUserRequest::_internal_set_user(int32_t value) {
  
  _impl_.user_ = value;
}
inline void RolesForUserRequest::set_user(int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesForUserRequest.user)
}

// repeated string roles = 2;
inline int RolesForUserRequest::_internal_roles_size() const {
  return _impl_.roles_.size();
}
inline int RolesForUserRequest::roles_size() const {
  return _internal_roles_size();
}
inline void RolesForUserRequest::clear_roles() {
  _impl_.roles_.Clear();
}
inline std::string* RolesForUserRequest::add_roles() {
  std::string* _s = _internal_add_roles();
  // @@protoc_insertion_point(field_add_mutable:palm.rbac.v1.RolesForUserRequest.roles)
  return _s;
}
inline const std::string& RolesForUserRequest::_internal_roles(int index) const {
  return _impl_.roles_.Get(index);
}
inline const std::string& RolesForUserRequest::roles(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RolesForUserRequest.roles)
  return _internal_roles(index);
}
inline std::string* RolesForUserRequest::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RolesForUserRequest.roles)
  return _impl_.roles_.Mutable(index);
}
inline void RolesForUserRequest::set_roles(int index, const std::string& value) {
  _impl_.roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesForUserRequest.roles)
}
inline void RolesForUserRequest::set_roles(int index, std::string&& value) {
  _impl_.roles_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesForUserRequest.roles)
}
inline void RolesForUserRequest::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.rbac.v1.RolesForUserRequest.roles)
}
inline void RolesForUserRequest::set_roles(int index, const char* value, size_t size) {
  _impl_.roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.rbac.v1.RolesForUserRequest.roles)
}
inline std::string* RolesForUserRequest::_internal_add_roles() {
  return _impl_.roles_.Add();
}
inline void RolesForUserRequest::add_roles(const std::string& value) {
  _impl_.roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolesForUserRequest.roles)
}
inline void RolesForUserRequest::add_roles(std::string&& value) {
  _impl_.roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolesForUserRequest.roles)
}
inline void RolesForUserRequest::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.rbac.v1.RolesForUserRequest.roles)
}
inline void RolesForUserRequest::add_roles(const char* value, size_t size) {
  _impl_.roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.rbac.v1.RolesForUserRequest.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RolesForUserRequest::roles() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.RolesForUserRequest.roles)
  return _impl_.roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RolesForUserRequest::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.RolesForUserRequest.roles)
  return &_impl_.roles_;
}

// -------------------------------------------------------------------

// Resource

// string type = 1;
inline void Resource::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Resource::type() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.Resource.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.Resource.type)
}
inline std::string* Resource::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.Resource.type)
  return _s;
}
inline const std::string& Resource::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Resource::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_type() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.Resource.type)
  return _impl_.type_.Release();
}
inline void Resource::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.Resource.type)
}

// optional string id = 2;
inline bool Resource::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Resource::has_id() const {
  return _internal_has_id();
}
inline void Resource::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Resource::id() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.Resource.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.Resource.id)
}
inline std::string* Resource::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.Resource.id)
  return _s;
}
inline const std::string& Resource::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Resource::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_id() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.Resource.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Resource::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.Resource.id)
}

// -------------------------------------------------------------------

// Permission

// .palm.rbac.v1.Resource object = 1;
inline bool Permission::_internal_has_object() const {
  return this != internal_default_instance() && _impl_.object_ != nullptr;
}
inline bool Permission::has_object() const {
  return _internal_has_object();
}
inline void Permission::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
inline const ::palm::rbac::v1::Resource& Permission::_internal_object() const {
  const ::palm::rbac::v1::Resource* p = _impl_.object_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::Resource&>(
      ::palm::rbac::v1::_Resource_default_instance_);
}
inline const ::palm::rbac::v1::Resource& Permission::object() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.Permission.object)
  return _internal_object();
}
inline void Permission::unsafe_arena_set_allocated_object(
    ::palm::rbac::v1::Resource* object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_);
  }
  _impl_.object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.Permission.object)
}
inline ::palm::rbac::v1::Resource* Permission::release_object() {
  
  ::palm::rbac::v1::Resource* temp = _impl_.object_;
  _impl_.object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::rbac::v1::Resource* Permission::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.Permission.object)
  
  ::palm::rbac::v1::Resource* temp = _impl_.object_;
  _impl_.object_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::Resource* Permission::_internal_mutable_object() {
  
  if (_impl_.object_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::Resource>(GetArenaForAllocation());
    _impl_.object_ = p;
  }
  return _impl_.object_;
}
inline ::palm::rbac::v1::Resource* Permission::mutable_object() {
  ::palm::rbac::v1::Resource* _msg = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.Permission.object)
  return _msg;
}
inline void Permission::set_allocated_object(::palm::rbac::v1::Resource* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_ = object;
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.Permission.object)
}

// string action = 2;
inline void Permission::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& Permission::action() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.Permission.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Permission::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.Permission.action)
}
inline std::string* Permission::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.Permission.action)
  return _s;
}
inline const std::string& Permission::_internal_action() const {
  return _impl_.action_.Get();
}
inline void Permission::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* Permission::release_action() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.Permission.action)
  return _impl_.action_.Release();
}
inline void Permission::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.Permission.action)
}

// int32 user = 11;
inline bool Permission::_internal_has_user() const {
  return subject_case() == kUser;
}
inline bool Permission::has_user() const {
  return _internal_has_user();
}
inline void Permission::set_has_user() {
  _impl_._oneof_case_[0] = kUser;
}
inline void Permission::clear_user() {
  if (_internal_has_user()) {
    _impl_.subject_.user_ = 0;
    clear_has_subject();
  }
}
inline int32_t Permission::_internal_user() const {
  if (_internal_has_user()) {
    return _impl_.subject_.user_;
  }
  return 0;
}
inline void Permission::_internal_set_user(int32_t value) {
  if (!_internal_has_user()) {
    clear_subject();
    set_has_user();
  }
  _impl_.subject_.user_ = value;
}
inline int32_t Permission::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.Permission.user)
  return _internal_user();
}
inline void Permission::set_user(int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.Permission.user)
}

// string role = 12;
inline bool Permission::_internal_has_role() const {
  return subject_case() == kRole;
}
inline bool Permission::has_role() const {
  return _internal_has_role();
}
inline void Permission::set_has_role() {
  _impl_._oneof_case_[0] = kRole;
}
inline void Permission::clear_role() {
  if (_internal_has_role()) {
    _impl_.subject_.role_.Destroy();
    clear_has_subject();
  }
}
inline const std::string& Permission::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.Permission.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline void Permission::set_role(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_role()) {
    clear_subject();
    set_has_role();
    _impl_.subject_.role_.InitDefault();
  }
  _impl_.subject_.role_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.Permission.role)
}
inline std::string* Permission::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.Permission.role)
  return _s;
}
inline const std::string& Permission::_internal_role() const {
  if (_internal_has_role()) {
    return _impl_.subject_.role_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Permission::_internal_set_role(const std::string& value) {
  if (!_internal_has_role()) {
    clear_subject();
    set_has_role();
    _impl_.subject_.role_.InitDefault();
  }
  _impl_.subject_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* Permission::_internal_mutable_role() {
  if (!_internal_has_role()) {
    clear_subject();
    set_has_role();
    _impl_.subject_.role_.InitDefault();
  }
  return _impl_.subject_.role_.Mutable(      GetArenaForAllocation());
}
inline std::string* Permission::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.Permission.role)
  if (_internal_has_role()) {
    clear_has_subject();
    return _impl_.subject_.role_.Release();
  } else {
    return nullptr;
  }
}
inline void Permission::set_allocated_role(std::string* role) {
  if (has_subject()) {
    clear_subject();
  }
  if (role != nullptr) {
    set_has_role();
    _impl_.subject_.role_.InitAllocated(role, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.Permission.role)
}

inline bool Permission::has_subject() const {
  return subject_case() != SUBJECT_NOT_SET;
}
inline void Permission::clear_has_subject() {
  _impl_._oneof_case_[0] = SUBJECT_NOT_SET;
}
inline Permission::SubjectCase Permission::subject_case() const {
  return Permission::SubjectCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PermissionsResponse

// repeated .palm.rbac.v1.Permission items = 1;
inline int PermissionsResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int PermissionsResponse::items_size() const {
  return _internal_items_size();
}
inline void PermissionsResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::palm::rbac::v1::Permission* PermissionsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >*
PermissionsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PermissionsResponse.items)
  return &_impl_.items_;
}
inline const ::palm::rbac::v1::Permission& PermissionsResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::palm::rbac::v1::Permission& PermissionsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsResponse.items)
  return _internal_items(index);
}
inline ::palm::rbac::v1::Permission* PermissionsResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::palm::rbac::v1::Permission* PermissionsResponse::add_items() {
  ::palm::rbac::v1::Permission* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PermissionsResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >&
PermissionsResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PermissionsResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// PermissionsForUserRequest

// int32 user = 1;
inline void PermissionsForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline int32_t PermissionsForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline int32_t PermissionsForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsForUserRequest.user)
  return _internal_user();
}
inline void PermissionsForUserRequest::_internal_set_user(int32_t value) {
  
  _impl_.user_ = value;
}
inline void PermissionsForUserRequest::set_user(int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PermissionsForUserRequest.user)
}

// repeated .palm.rbac.v1.Permission items = 2;
inline int PermissionsForUserRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int PermissionsForUserRequest::items_size() const {
  return _internal_items_size();
}
inline void PermissionsForUserRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::palm::rbac::v1::Permission* PermissionsForUserRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsForUserRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >*
PermissionsForUserRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PermissionsForUserRequest.items)
  return &_impl_.items_;
}
inline const ::palm::rbac::v1::Permission& PermissionsForUserRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::palm::rbac::v1::Permission& PermissionsForUserRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsForUserRequest.items)
  return _internal_items(index);
}
inline ::palm::rbac::v1::Permission* PermissionsForUserRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::palm::rbac::v1::Permission* PermissionsForUserRequest::add_items() {
  ::palm::rbac::v1::Permission* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PermissionsForUserRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >&
PermissionsForUserRequest::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PermissionsForUserRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// PermissionsForRoleRequest

// string role = 1;
inline void PermissionsForRoleRequest::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& PermissionsForRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsForRoleRequest.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionsForRoleRequest::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PermissionsForRoleRequest.role)
}
inline std::string* PermissionsForRoleRequest::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsForRoleRequest.role)
  return _s;
}
inline const std::string& PermissionsForRoleRequest::_internal_role() const {
  return _impl_.role_.Get();
}
inline void PermissionsForRoleRequest::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionsForRoleRequest::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* PermissionsForRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PermissionsForRoleRequest.role)
  return _impl_.role_.Release();
}
inline void PermissionsForRoleRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PermissionsForRoleRequest.role)
}

// repeated .palm.rbac.v1.Permission items = 2;
inline int PermissionsForRoleRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int PermissionsForRoleRequest::items_size() const {
  return _internal_items_size();
}
inline void PermissionsForRoleRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::palm::rbac::v1::Permission* PermissionsForRoleRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsForRoleRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >*
PermissionsForRoleRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PermissionsForRoleRequest.items)
  return &_impl_.items_;
}
inline const ::palm::rbac::v1::Permission& PermissionsForRoleRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::palm::rbac::v1::Permission& PermissionsForRoleRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsForRoleRequest.items)
  return _internal_items(index);
}
inline ::palm::rbac::v1::Permission* PermissionsForRoleRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::palm::rbac::v1::Permission* PermissionsForRoleRequest::add_items() {
  ::palm::rbac::v1::Permission* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PermissionsForRoleRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::Permission >&
PermissionsForRoleRequest::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PermissionsForRoleRequest.items)
  return _impl_.items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace rbac
}  // namespace palm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto
