// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: forum.proto

#include "forum.pb.h"
#include "forum.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace forum {
namespace v1 {

std::unique_ptr< Topic::Stub> Topic::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Topic::Stub> stub(new Topic::Stub(channel, options));
  return stub;
}

Topic::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

Topic::Service::Service() {
}

Topic::Service::~Service() {
}


std::unique_ptr< Post::Stub> Post::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Post::Stub> stub(new Post::Stub(channel, options));
  return stub;
}

Post::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

Post::Service::Service() {
}

Post::Service::~Service() {
}


}  // namespace palm
}  // namespace forum
}  // namespace v1

