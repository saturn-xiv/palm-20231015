// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orchid.proto

#include "orchid.pb.h"
#include "orchid.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace orchid {
namespace v1 {

static const char* WechatMiniProgram_method_names[] = {
  "/palm.orchid.v1.WechatMiniProgram/Login",
  "/palm.orchid.v1.WechatMiniProgram/PhoneNumber",
};

std::unique_ptr< WechatMiniProgram::Stub> WechatMiniProgram::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatMiniProgram::Stub> stub(new WechatMiniProgram::Stub(channel, options));
  return stub;
}

WechatMiniProgram::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(WechatMiniProgram_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PhoneNumber_(WechatMiniProgram_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatMiniProgram::Stub::Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void WechatMiniProgram::Stub::async::Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void WechatMiniProgram::Stub::async::Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* WechatMiniProgram::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::orchid::v1::WechatMiniProgramLoginResponse, ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* WechatMiniProgram::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatMiniProgram::Stub::PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PhoneNumber_, context, request, response);
}

void WechatMiniProgram::Stub::async::PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PhoneNumber_, context, request, response, std::move(f));
}

void WechatMiniProgram::Stub::async::PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PhoneNumber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* WechatMiniProgram::Stub::PrepareAsyncPhoneNumberRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PhoneNumber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* WechatMiniProgram::Stub::AsyncPhoneNumberRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPhoneNumberRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatMiniProgram::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgram_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgram::Service, ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::orchid::v1::WechatMiniProgramLoginRequest* req,
             ::palm::orchid::v1::WechatMiniProgramLoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatMiniProgram_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatMiniProgram::Service, ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatMiniProgram::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* req,
             ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* resp) {
               return service->PhoneNumber(ctx, req, resp);
             }, this)));
}

WechatMiniProgram::Service::~Service() {
}

::grpc::Status WechatMiniProgram::Service::Login(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatMiniProgram::Service::PhoneNumber(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatOauth2_method_names[] = {
  "/palm.orchid.v1.WechatOauth2/QrConnect",
  "/palm.orchid.v1.WechatOauth2/Login",
};

std::unique_ptr< WechatOauth2::Stub> WechatOauth2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatOauth2::Stub> stub(new WechatOauth2::Stub(channel, options));
  return stub;
}

WechatOauth2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QrConnect_(WechatOauth2_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(WechatOauth2_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatOauth2::Stub::QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QrConnect_, context, request, response);
}

void WechatOauth2::Stub::async::QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QrConnect_, context, request, response, std::move(f));
}

void WechatOauth2::Stub::async::QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QrConnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* WechatOauth2::Stub::PrepareAsyncQrConnectRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QrConnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* WechatOauth2::Stub::AsyncQrConnectRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQrConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatOauth2::Stub::Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::palm::orchid::v1::WechatOauth2LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void WechatOauth2::Stub::async::Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void WechatOauth2::Stub::async::Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>* WechatOauth2::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::orchid::v1::WechatOauth2LoginResponse, ::palm::orchid::v1::WechatOauth2LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>* WechatOauth2::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatOauth2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2::Service, ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::orchid::v1::WechatOauth2QrConnectRequest* req,
             ::palm::orchid::v1::WechatOauth2QrConnectResponse* resp) {
               return service->QrConnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatOauth2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatOauth2::Service, ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatOauth2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::orchid::v1::WechatOauth2LoginRequest* req,
             ::palm::orchid::v1::WechatOauth2LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

WechatOauth2::Service::~Service() {
}

::grpc::Status WechatOauth2::Service::QrConnect(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatOauth2::Service::Login(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace orchid
}  // namespace v1

