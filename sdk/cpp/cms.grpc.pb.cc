// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cms.proto

#include "cms.pb.h"
#include "cms.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace cms {
namespace v1 {

static const char* Article_method_names[] = {
  "/palm.cms.v1.Article/Create",
  "/palm.cms.v1.Article/Update",
  "/palm.cms.v1.Article/Index",
  "/palm.cms.v1.Article/Show",
  "/palm.cms.v1.Article/Destory",
};

std::unique_ptr< Article::Stub> Article::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Article::Stub> stub(new Article::Stub(channel, options));
  return stub;
}

Article::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Article_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Article_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Article_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(Article_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destory_(Article_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Article::Stub::Create(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::cms::v1::ArticleCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Article::Stub::async::Create(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::cms::v1::ArticleCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Article::Stub::async::Create(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Article::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::cms::v1::ArticleCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Article::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Article::Stub::Update(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::cms::v1::ArticleUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Article::Stub::async::Update(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::cms::v1::ArticleUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Article::Stub::async::Update(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Article::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::cms::v1::ArticleUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Article::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::ArticleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Article::Stub::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::palm::cms::v1::ArticleIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::cms::v1::ArticleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Article::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::cms::v1::ArticleIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::cms::v1::ArticleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Article::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::cms::v1::ArticleIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::cms::v1::ArticleIndexResponse>* Article::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::cms::v1::ArticleIndexResponse, ::palm::metasequoia::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::cms::v1::ArticleIndexResponse>* Article::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Article::Stub::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::palm::cms::v1::ArticleShowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::cms::v1::ArticleShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void Article::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::cms::v1::ArticleShowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::palm::cms::v1::ArticleShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void Article::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::cms::v1::ArticleShowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::cms::v1::ArticleShowResponse>* Article::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::cms::v1::ArticleShowResponse, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::cms::v1::ArticleShowResponse>* Article::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Article::Stub::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destory_, context, request, response);
}

void Article::Stub::async::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destory_, context, request, response, std::move(f));
}

void Article::Stub::async::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Article::Stub::PrepareAsyncDestoryRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Article::Stub::AsyncDestoryRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

Article::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Article_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Article::Service, ::palm::cms::v1::ArticleCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Article::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::cms::v1::ArticleCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Article_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Article::Service, ::palm::cms::v1::ArticleUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Article::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::cms::v1::ArticleUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Article_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Article::Service, ::palm::metasequoia::v1::Pager, ::palm::cms::v1::ArticleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Article::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Pager* req,
             ::palm::cms::v1::ArticleIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Article_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Article::Service, ::palm::metasequoia::v1::IdRequest, ::palm::cms::v1::ArticleShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Article::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::palm::cms::v1::ArticleShowResponse* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Article_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Article::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Article::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destory(ctx, req, resp);
             }, this)));
}

Article::Service::~Service() {
}

::grpc::Status Article::Service::Create(::grpc::ServerContext* context, const ::palm::cms::v1::ArticleCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Article::Service::Update(::grpc::ServerContext* context, const ::palm::cms::v1::ArticleUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Article::Service::Index(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::cms::v1::ArticleIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Article::Service::Show(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::palm::cms::v1::ArticleShowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Article::Service::Destory(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Comment_method_names[] = {
  "/palm.cms.v1.Comment/Create",
  "/palm.cms.v1.Comment/Update",
  "/palm.cms.v1.Comment/Index",
  "/palm.cms.v1.Comment/Destory",
};

std::unique_ptr< Comment::Stub> Comment::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Comment::Stub> stub(new Comment::Stub(channel, options));
  return stub;
}

Comment::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Comment_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Comment_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Comment_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destory_(Comment_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Comment::Stub::Create(::grpc::ClientContext* context, const ::palm::cms::v1::CommentCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::cms::v1::CommentCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Comment::Stub::async::Create(::grpc::ClientContext* context, const ::palm::cms::v1::CommentCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::cms::v1::CommentCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Comment::Stub::async::Create(::grpc::ClientContext* context, const ::palm::cms::v1::CommentCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Comment::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::CommentCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::cms::v1::CommentCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Comment::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::CommentCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Comment::Stub::Update(::grpc::ClientContext* context, const ::palm::cms::v1::CommentUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::cms::v1::CommentUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Comment::Stub::async::Update(::grpc::ClientContext* context, const ::palm::cms::v1::CommentUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::cms::v1::CommentUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Comment::Stub::async::Update(::grpc::ClientContext* context, const ::palm::cms::v1::CommentUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Comment::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::CommentUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::cms::v1::CommentUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Comment::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::cms::v1::CommentUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Comment::Stub::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::palm::cms::v1::CommentIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::cms::v1::CommentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Comment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::cms::v1::CommentIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::Pager, ::palm::cms::v1::CommentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Comment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::cms::v1::CommentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::cms::v1::CommentIndexResponse>* Comment::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::cms::v1::CommentIndexResponse, ::palm::metasequoia::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::cms::v1::CommentIndexResponse>* Comment::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Comment::Stub::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destory_, context, request, response);
}

void Comment::Stub::async::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destory_, context, request, response, std::move(f));
}

void Comment::Stub::async::Destory(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Comment::Stub::PrepareAsyncDestoryRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Comment::Stub::AsyncDestoryRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

Comment::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comment_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comment::Service, ::palm::cms::v1::CommentCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::cms::v1::CommentCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comment_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comment::Service, ::palm::cms::v1::CommentUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::cms::v1::CommentUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comment_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comment::Service, ::palm::metasequoia::v1::Pager, ::palm::cms::v1::CommentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::Pager* req,
             ::palm::cms::v1::CommentIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comment_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comment::Service, ::palm::metasequoia::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destory(ctx, req, resp);
             }, this)));
}

Comment::Service::~Service() {
}

::grpc::Status Comment::Service::Create(::grpc::ServerContext* context, const ::palm::cms::v1::CommentCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comment::Service::Update(::grpc::ServerContext* context, const ::palm::cms::v1::CommentUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comment::Service::Index(::grpc::ServerContext* context, const ::palm::metasequoia::v1::Pager* request, ::palm::cms::v1::CommentIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comment::Service::Destory(::grpc::ServerContext* context, const ::palm::metasequoia::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace cms
}  // namespace v1

