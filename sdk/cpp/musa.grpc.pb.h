// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: musa.proto
#ifndef GRPC_musa_2eproto__INCLUDED
#define GRPC_musa_2eproto__INCLUDED

#include "musa.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace musa {
namespace v1 {

class WechatPayNative final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.musa.v1.WechatPayNative";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response, std::function<void(::grpc::Status)>) override;
      void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Prepay_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Prepay(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prepay() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayPrepayRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Prepay<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response) { return this->Prepay(context, request, response); }));}
    void SetMessageAllocatorFor_Prepay(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Prepay<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prepay() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prepay() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Prepay(context, request, response); }));
    }
    ~WithRawCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Prepay() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* streamer) {
                       return this->StreamedPrepay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayPrepayRequest,::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Prepay<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Prepay<Service > StreamedService;
};

// ----------------------------------------------------------------------------
//
class WechatPayJsapi final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.musa.v1.WechatPayJsapi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::palm::musa::v1::WechatPayTradeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>> AsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>>(AsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>> PrepareAsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>>(PrepareAsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::palm::musa::v1::WechatPayTradeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>> AsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>>(AsyncQueryOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>> PrepareAsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>>(PrepareAsyncQueryOrderByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCloseOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCloseOrderRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>* AsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>* PrepareAsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>* AsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTradeResponse>* PrepareAsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>> AsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>>(AsyncPrepayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>> PrepareAsyncPrepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>>(PrepareAsyncPrepayRaw(context, request, cq));
    }
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::palm::musa::v1::WechatPayTradeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>> AsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>>(AsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>> PrepareAsyncQueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>>(PrepareAsyncQueryOrderByOutTradeNoRaw(context, request, cq));
    }
    ::grpc::Status QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::palm::musa::v1::WechatPayTradeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>> AsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>>(AsyncQueryOrderByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>> PrepareAsyncQueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>>(PrepareAsyncQueryOrderByIdRaw(context, request, cq));
    }
    ::grpc::Status CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCloseOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCloseOrderRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response, std::function<void(::grpc::Status)>) override;
      void Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* AsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* PrepareAsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* AsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* PrepareAsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Prepay_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryOrderByOutTradeNo_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryOrderById_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Prepay(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response);
    virtual ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response);
    virtual ::grpc::Status QueryOrderById(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response);
    virtual ::grpc::Status CloseOrder(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prepay() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayPrepayRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderByOutTradeNo(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayTradeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderById(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayTradeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseOrder() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseOrder(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Prepay<WithAsyncMethod_QueryOrderByOutTradeNo<WithAsyncMethod_QueryOrderById<WithAsyncMethod_CloseOrder<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response) { return this->Prepay(context, request, response); }));}
    void SetMessageAllocatorFor_Prepay(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response) { return this->QueryOrderByOutTradeNo(context, request, response); }));}
    void SetMessageAllocatorFor_QueryOrderByOutTradeNo(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderByOutTradeNo(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response) { return this->QueryOrderById(context, request, response); }));}
    void SetMessageAllocatorFor_QueryOrderById(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseOrder() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response) { return this->CloseOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CloseOrder(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Prepay<WithCallbackMethod_QueryOrderByOutTradeNo<WithCallbackMethod_QueryOrderById<WithCallbackMethod_CloseOrder<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prepay() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseOrder() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prepay() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderByOutTradeNo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseOrder() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Prepay() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Prepay(context, request, response); }));
    }
    ~WithRawCallbackMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Prepay(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryOrderByOutTradeNo(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderByOutTradeNo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryOrderById(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryOrderById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseOrder() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prepay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Prepay() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* streamer) {
                       return this->StreamedPrepay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Prepay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prepay(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayPrepayRequest* /*request*/, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayPrepayRequest,::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryOrderByOutTradeNo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryOrderByOutTradeNo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse>* streamer) {
                       return this->StreamedQueryOrderByOutTradeNo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryOrderByOutTradeNo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryOrderByOutTradeNo(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryOrderByOutTradeNo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest,::palm::musa::v1::WechatPayTradeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryOrderById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryOrderById() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse>* streamer) {
                       return this->StreamedQueryOrderById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryOrderById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryOrderById(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* /*request*/, ::palm::musa::v1::WechatPayTradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryOrderById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayQueryOrderByIdRequest,::palm::musa::v1::WechatPayTradeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseOrder() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCloseOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseOrder(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCloseOrderRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayCloseOrderRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Prepay<WithStreamedUnaryMethod_QueryOrderByOutTradeNo<WithStreamedUnaryMethod_QueryOrderById<WithStreamedUnaryMethod_CloseOrder<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Prepay<WithStreamedUnaryMethod_QueryOrderByOutTradeNo<WithStreamedUnaryMethod_QueryOrderById<WithStreamedUnaryMethod_CloseOrder<Service > > > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class WechatPayBill final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.musa.v1.WechatPayBill";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::palm::musa::v1::WechatPayBillResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>> AsyncTrade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>>(AsyncTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>> PrepareAsyncTrade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>>(PrepareAsyncTradeRaw(context, request, cq));
    }
    virtual ::grpc::Status FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::palm::musa::v1::WechatPayBillResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>> AsyncFundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>>(AsyncFundFlowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>> PrepareAsyncFundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>>(PrepareAsyncFundFlowRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>* AsyncTradeRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>* PrepareAsyncTradeRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>* AsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayBillResponse>* PrepareAsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::palm::musa::v1::WechatPayBillResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>> AsyncTrade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>>(AsyncTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>> PrepareAsyncTrade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>>(PrepareAsyncTradeRaw(context, request, cq));
    }
    ::grpc::Status FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::palm::musa::v1::WechatPayBillResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>> AsyncFundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>>(AsyncFundFlowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>> PrepareAsyncFundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>>(PrepareAsyncFundFlowRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, std::function<void(::grpc::Status)>) override;
      void Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, std::function<void(::grpc::Status)>) override;
      void FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* AsyncTradeRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* PrepareAsyncTradeRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* AsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* PrepareAsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Trade_;
    const ::grpc::internal::RpcMethod rpcmethod_FundFlow_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Trade(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response);
    virtual ::grpc::Status FundFlow(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Trade() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrade(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayTradeBillRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayBillResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FundFlow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundFlow(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayBillResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Trade<WithAsyncMethod_FundFlow<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Trade() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response) { return this->Trade(context, request, response); }));}
    void SetMessageAllocatorFor_Trade(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Trade(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FundFlow() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response) { return this->FundFlow(context, request, response); }));}
    void SetMessageAllocatorFor_FundFlow(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Trade<WithCallbackMethod_FundFlow<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Trade() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FundFlow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Trade() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FundFlow() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundFlow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Trade() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Trade(context, request, response); }));
    }
    ~WithRawCallbackMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Trade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FundFlow() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FundFlow(context, request, response); }));
    }
    ~WithRawCallbackMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Trade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Trade() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse>* streamer) {
                       return this->StreamedTrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Trade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Trade(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTradeBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayTradeBillRequest,::palm::musa::v1::WechatPayBillResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FundFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FundFlow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse>* streamer) {
                       return this->StreamedFundFlow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FundFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FundFlow(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayFundFlowBillRequest* /*request*/, ::palm::musa::v1::WechatPayBillResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFundFlow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayFundFlowBillRequest,::palm::musa::v1::WechatPayBillResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Trade<WithStreamedUnaryMethod_FundFlow<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Trade<WithStreamedUnaryMethod_FundFlow<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class WechatPayRefund final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.musa.v1.WechatPayRefund";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::palm::musa::v1::WechatPayRefundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>> AsyncCreate(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::palm::musa::v1::WechatPayRefundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>> AsyncQuery(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayRefundResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::palm::musa::v1::WechatPayRefundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>> AsyncCreate(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::palm::musa::v1::WechatPayRefundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>> AsyncQuery(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* AsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayRefundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayRefundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Query<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Query() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Create<WithCallbackMethod_Query<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Query() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~WithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayCreateRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayCreateRefundRequest,::palm::musa::v1::WechatPayRefundResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryRefundRequest* /*request*/, ::palm::musa::v1::WechatPayRefundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayQueryRefundRequest,::palm::musa::v1::WechatPayRefundResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Query<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Query<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class WechatPayTransfer final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.musa.v1.WechatPayTransfer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>> AsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>>(AsyncExecuteBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>> PrepareAsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>>(PrepareAsyncExecuteBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>> AsyncQueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>>(AsyncQueryBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>> PrepareAsyncQueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>>(PrepareAsyncQueryBatchRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>> AsyncQueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>>(AsyncQueryDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>> PrepareAsyncQueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>>(PrepareAsyncQueryDetailRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> AsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(AsyncGetBillReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> PrepareAsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(PrepareAsyncGetBillReceiptRaw(context, request, cq));
    }
    virtual ::grpc::Status GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> AsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(AsyncGetElectronicReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> PrepareAsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(PrepareAsyncGetElectronicReceiptRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* AsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* PrepareAsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* AsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* PrepareAsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* AsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* PrepareAsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* AsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* PrepareAsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* AsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* PrepareAsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>> AsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>>(AsyncExecuteBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>> PrepareAsyncExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>>(PrepareAsyncExecuteBatchRaw(context, request, cq));
    }
    ::grpc::Status QueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>> AsyncQueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>>(AsyncQueryBatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>> PrepareAsyncQueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>>(PrepareAsyncQueryBatchRaw(context, request, cq));
    }
    ::grpc::Status QueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>> AsyncQueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>>(AsyncQueryDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>> PrepareAsyncQueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>>(PrepareAsyncQueryDetailRaw(context, request, cq));
    }
    ::grpc::Status GetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> AsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(AsyncGetBillReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> PrepareAsyncGetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(PrepareAsyncGetBillReceiptRaw(context, request, cq));
    }
    ::grpc::Status GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> AsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(AsyncGetElectronicReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>> PrepareAsyncGetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>>(PrepareAsyncGetElectronicReceiptRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryBatch(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryDetail(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBillReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, std::function<void(::grpc::Status)>) override;
      void GetElectronicReceipt(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* AsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* PrepareAsyncExecuteBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* AsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* PrepareAsyncQueryBatchRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* AsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* PrepareAsyncQueryDetailRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* AsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* PrepareAsyncGetBillReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* AsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* PrepareAsyncGetElectronicReceiptRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryBatch_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryDetail_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBillReceipt_;
    const ::grpc::internal::RpcMethod rpcmethod_GetElectronicReceipt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ExecuteBatch(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response);
    virtual ::grpc::Status QueryBatch(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response);
    virtual ::grpc::Status QueryDetail(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response);
    virtual ::grpc::Status GetBillReceipt(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response);
    virtual ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteBatch(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryBatch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryBatch(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryDetail() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDetail(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBillReceipt(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElectronicReceipt(::grpc::ServerContext* context, ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteBatch<WithAsyncMethod_QueryBatch<WithAsyncMethod_QueryDetail<WithAsyncMethod_GetBillReceipt<WithAsyncMethod_GetElectronicReceipt<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayExecuteBatchTransferRequest, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* request, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* response) { return this->ExecuteBatch(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteBatch(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayExecuteBatchTransferRequest, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayExecuteBatchTransferRequest, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryBatch() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryBatchTransferRequest, ::palm::musa::v1::WechatPayQueryBatchTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* request, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* response) { return this->QueryBatch(context, request, response); }));}
    void SetMessageAllocatorFor_QueryBatch(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayQueryBatchTransferRequest, ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryBatchTransferRequest, ::palm::musa::v1::WechatPayQueryBatchTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryDetail() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryTransferDetailRequest, ::palm::musa::v1::WechatPayQueryTransferDetailResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* request, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* response) { return this->QueryDetail(context, request, response); }));}
    void SetMessageAllocatorFor_QueryDetail(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayQueryTransferDetailRequest, ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayQueryTransferDetailRequest, ::palm::musa::v1::WechatPayQueryTransferDetailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryDetail(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response) { return this->GetBillReceipt(context, request, response); }));}
    void SetMessageAllocatorFor_GetBillReceipt(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBillReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* request, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* response) { return this->GetElectronicReceipt(context, request, response); }));}
    void SetMessageAllocatorFor_GetElectronicReceipt(
        ::grpc::MessageAllocator< ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetElectronicReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExecuteBatch<WithCallbackMethod_QueryBatch<WithCallbackMethod_QueryDetail<WithCallbackMethod_GetBillReceipt<WithCallbackMethod_GetElectronicReceipt<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryBatch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryDetail() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryBatch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryBatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryDetail() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryDetail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBillReceipt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetElectronicReceipt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryBatch() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryBatch(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryBatch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryDetail() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryDetail(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryDetail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBillReceipt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBillReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetElectronicReceipt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetElectronicReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteBatch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayExecuteBatchTransferRequest, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayExecuteBatchTransferRequest, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* streamer) {
                       return this->StreamedExecuteBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayExecuteBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayExecuteBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayExecuteBatchTransferRequest,::palm::musa::v1::WechatPayExecuteBatchTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryBatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryBatch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayQueryBatchTransferRequest, ::palm::musa::v1::WechatPayQueryBatchTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayQueryBatchTransferRequest, ::palm::musa::v1::WechatPayQueryBatchTransferResponse>* streamer) {
                       return this->StreamedQueryBatch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryBatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryBatch(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryBatchTransferRequest* /*request*/, ::palm::musa::v1::WechatPayQueryBatchTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryBatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayQueryBatchTransferRequest,::palm::musa::v1::WechatPayQueryBatchTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryDetail() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayQueryTransferDetailRequest, ::palm::musa::v1::WechatPayQueryTransferDetailResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayQueryTransferDetailRequest, ::palm::musa::v1::WechatPayQueryTransferDetailResponse>* streamer) {
                       return this->StreamedQueryDetail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryDetail(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayQueryTransferDetailRequest* /*request*/, ::palm::musa::v1::WechatPayQueryTransferDetailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryDetail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayQueryTransferDetailRequest,::palm::musa::v1::WechatPayQueryTransferDetailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBillReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBillReceipt() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* streamer) {
                       return this->StreamedGetBillReceipt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBillReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBillReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBillReceipt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayTransferGetBillReceiptRequest,::palm::musa::v1::WechatPayTransferGetReceiptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetElectronicReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetElectronicReceipt() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest, ::palm::musa::v1::WechatPayTransferGetReceiptResponse>* streamer) {
                       return this->StreamedGetElectronicReceipt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetElectronicReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetElectronicReceipt(::grpc::ServerContext* /*context*/, const ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest* /*request*/, ::palm::musa::v1::WechatPayTransferGetReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetElectronicReceipt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::musa::v1::WechatPayTransferGetElectronicReceiptRequest,::palm::musa::v1::WechatPayTransferGetReceiptResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteBatch<WithStreamedUnaryMethod_QueryBatch<WithStreamedUnaryMethod_QueryDetail<WithStreamedUnaryMethod_GetBillReceipt<WithStreamedUnaryMethod_GetElectronicReceipt<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteBatch<WithStreamedUnaryMethod_QueryBatch<WithStreamedUnaryMethod_QueryDetail<WithStreamedUnaryMethod_GetBillReceipt<WithStreamedUnaryMethod_GetElectronicReceipt<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace musa
}  // namespace palm


#endif  // GRPC_musa_2eproto__INCLUDED
