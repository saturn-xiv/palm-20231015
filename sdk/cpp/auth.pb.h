// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
#include "nut.pb.h"
#include "rbac.pb.h"
#include "orchid.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_auth_2eproto;
namespace palm {
namespace auth {
namespace v1 {
class AttachmentIndexResponse;
struct AttachmentIndexResponseDefaultTypeInternal;
extern AttachmentIndexResponseDefaultTypeInternal _AttachmentIndexResponse_default_instance_;
class AttachmentIndexResponse_Item;
struct AttachmentIndexResponse_ItemDefaultTypeInternal;
extern AttachmentIndexResponse_ItemDefaultTypeInternal _AttachmentIndexResponse_Item_default_instance_;
class AttachmentShowRequest;
struct AttachmentShowRequestDefaultTypeInternal;
extern AttachmentShowRequestDefaultTypeInternal _AttachmentShowRequest_default_instance_;
class AttachmentShowResponse;
struct AttachmentShowResponseDefaultTypeInternal;
extern AttachmentShowResponseDefaultTypeInternal _AttachmentShowResponse_default_instance_;
class GoogleSignInUrlRequest;
struct GoogleSignInUrlRequestDefaultTypeInternal;
extern GoogleSignInUrlRequestDefaultTypeInternal _GoogleSignInUrlRequest_default_instance_;
class GoogleSignInUrlResponse;
struct GoogleSignInUrlResponseDefaultTypeInternal;
extern GoogleSignInUrlResponseDefaultTypeInternal _GoogleSignInUrlResponse_default_instance_;
class LocaleByCodeRequest;
struct LocaleByCodeRequestDefaultTypeInternal;
extern LocaleByCodeRequestDefaultTypeInternal _LocaleByCodeRequest_default_instance_;
class LocaleByLangAndCodeRequest;
struct LocaleByLangAndCodeRequestDefaultTypeInternal;
extern LocaleByLangAndCodeRequestDefaultTypeInternal _LocaleByLangAndCodeRequest_default_instance_;
class LocaleByLangRequest;
struct LocaleByLangRequestDefaultTypeInternal;
extern LocaleByLangRequestDefaultTypeInternal _LocaleByLangRequest_default_instance_;
class LocaleCreateRequest;
struct LocaleCreateRequestDefaultTypeInternal;
extern LocaleCreateRequestDefaultTypeInternal _LocaleCreateRequest_default_instance_;
class LocaleIndexResponse;
struct LocaleIndexResponseDefaultTypeInternal;
extern LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
class LocaleIndexResponse_Item;
struct LocaleIndexResponse_ItemDefaultTypeInternal;
extern LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
class LocaleListResponse;
struct LocaleListResponseDefaultTypeInternal;
extern LocaleListResponseDefaultTypeInternal _LocaleListResponse_default_instance_;
class LocaleUpdateRequest;
struct LocaleUpdateRequestDefaultTypeInternal;
extern LocaleUpdateRequestDefaultTypeInternal _LocaleUpdateRequest_default_instance_;
class Oauth2State;
struct Oauth2StateDefaultTypeInternal;
extern Oauth2StateDefaultTypeInternal _Oauth2State_default_instance_;
class SignInByGoogleRequest;
struct SignInByGoogleRequestDefaultTypeInternal;
extern SignInByGoogleRequestDefaultTypeInternal _SignInByGoogleRequest_default_instance_;
class SignInByWechatOauth2Request;
struct SignInByWechatOauth2RequestDefaultTypeInternal;
extern SignInByWechatOauth2RequestDefaultTypeInternal _SignInByWechatOauth2Request_default_instance_;
class UserChangePasswordRequest;
struct UserChangePasswordRequestDefaultTypeInternal;
extern UserChangePasswordRequestDefaultTypeInternal _UserChangePasswordRequest_default_instance_;
class UserDetail;
struct UserDetailDefaultTypeInternal;
extern UserDetailDefaultTypeInternal _UserDetail_default_instance_;
class UserGetProfileResponse;
struct UserGetProfileResponseDefaultTypeInternal;
extern UserGetProfileResponseDefaultTypeInternal _UserGetProfileResponse_default_instance_;
class UserIndexResponse;
struct UserIndexResponseDefaultTypeInternal;
extern UserIndexResponseDefaultTypeInternal _UserIndexResponse_default_instance_;
class UserIndexResponse_Item;
struct UserIndexResponse_ItemDefaultTypeInternal;
extern UserIndexResponse_ItemDefaultTypeInternal _UserIndexResponse_Item_default_instance_;
class UserLogsResponse;
struct UserLogsResponseDefaultTypeInternal;
extern UserLogsResponseDefaultTypeInternal _UserLogsResponse_default_instance_;
class UserLogsResponse_Item;
struct UserLogsResponse_ItemDefaultTypeInternal;
extern UserLogsResponse_ItemDefaultTypeInternal _UserLogsResponse_Item_default_instance_;
class UserQueryRequest;
struct UserQueryRequestDefaultTypeInternal;
extern UserQueryRequestDefaultTypeInternal _UserQueryRequest_default_instance_;
class UserResetPasswordRequest;
struct UserResetPasswordRequestDefaultTypeInternal;
extern UserResetPasswordRequestDefaultTypeInternal _UserResetPasswordRequest_default_instance_;
class UserSetPasswordRequest;
struct UserSetPasswordRequestDefaultTypeInternal;
extern UserSetPasswordRequestDefaultTypeInternal _UserSetPasswordRequest_default_instance_;
class UserSetProfileRequest;
struct UserSetProfileRequestDefaultTypeInternal;
extern UserSetProfileRequestDefaultTypeInternal _UserSetProfileRequest_default_instance_;
class UserSignInRequest;
struct UserSignInRequestDefaultTypeInternal;
extern UserSignInRequestDefaultTypeInternal _UserSignInRequest_default_instance_;
class UserSignInResponse;
struct UserSignInResponseDefaultTypeInternal;
extern UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
class UserSignUpRequest;
struct UserSignUpRequestDefaultTypeInternal;
extern UserSignUpRequestDefaultTypeInternal _UserSignUpRequest_default_instance_;
class UserTokenRequest;
struct UserTokenRequestDefaultTypeInternal;
extern UserTokenRequestDefaultTypeInternal _UserTokenRequest_default_instance_;
class WechatAllMiniProgramUserResponse;
struct WechatAllMiniProgramUserResponseDefaultTypeInternal;
extern WechatAllMiniProgramUserResponseDefaultTypeInternal _WechatAllMiniProgramUserResponse_default_instance_;
class WechatAllMiniProgramUserResponse_Item;
struct WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal;
extern WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal _WechatAllMiniProgramUserResponse_Item_default_instance_;
class WechatAllOauth2UserResponse;
struct WechatAllOauth2UserResponseDefaultTypeInternal;
extern WechatAllOauth2UserResponseDefaultTypeInternal _WechatAllOauth2UserResponse_default_instance_;
class WechatAllOauth2UserResponse_Item;
struct WechatAllOauth2UserResponse_ItemDefaultTypeInternal;
extern WechatAllOauth2UserResponse_ItemDefaultTypeInternal _WechatAllOauth2UserResponse_Item_default_instance_;
class WechatMiniProgramUser;
struct WechatMiniProgramUserDefaultTypeInternal;
extern WechatMiniProgramUserDefaultTypeInternal _WechatMiniProgramUser_default_instance_;
class WechatOauth2SignInStateResponse;
struct WechatOauth2SignInStateResponseDefaultTypeInternal;
extern WechatOauth2SignInStateResponseDefaultTypeInternal _WechatOauth2SignInStateResponse_default_instance_;
class WechatOauth2SignInUrlRequest;
struct WechatOauth2SignInUrlRequestDefaultTypeInternal;
extern WechatOauth2SignInUrlRequestDefaultTypeInternal _WechatOauth2SignInUrlRequest_default_instance_;
class WechatUserBindByAccountRequest;
struct WechatUserBindByAccountRequestDefaultTypeInternal;
extern WechatUserBindByAccountRequestDefaultTypeInternal _WechatUserBindByAccountRequest_default_instance_;
class WechatUserBindByIdRequest;
struct WechatUserBindByIdRequestDefaultTypeInternal;
extern WechatUserBindByIdRequestDefaultTypeInternal _WechatUserBindByIdRequest_default_instance_;
class WechatUserQueryByOpenIdRequest;
struct WechatUserQueryByOpenIdRequestDefaultTypeInternal;
extern WechatUserQueryByOpenIdRequestDefaultTypeInternal _WechatUserQueryByOpenIdRequest_default_instance_;
class WechatUserQueryByUnionIdRequest;
struct WechatUserQueryByUnionIdRequestDefaultTypeInternal;
extern WechatUserQueryByUnionIdRequestDefaultTypeInternal _WechatUserQueryByUnionIdRequest_default_instance_;
}  // namespace v1
}  // namespace auth
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace auth {
namespace v1 {
enum UserLogsResponse_Item_Level : int {
  UserLogsResponse_Item_Level_DEBUG = 0,
  UserLogsResponse_Item_Level_INFO = 1,
  UserLogsResponse_Item_Level_WARNING = 2,
  UserLogsResponse_Item_Level_ERROR = 3,
  UserLogsResponse_Item_Level_PANIC = 4,
  UserLogsResponse_Item_Level_UserLogsResponse_Item_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserLogsResponse_Item_Level_UserLogsResponse_Item_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserLogsResponse_Item_Level_IsValid(int value);
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item_Level_Level_MIN = static_cast<UserLogsResponse_Item_Level>(0);
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item_Level_Level_MAX = static_cast<UserLogsResponse_Item_Level>(4);
constexpr int UserLogsResponse_Item_Level_Level_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
UserLogsResponse_Item_Level_descriptor();
template <typename T>
const std::string& UserLogsResponse_Item_Level_Name(T value) {
  static_assert(std::is_same<T, UserLogsResponse_Item_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return UserLogsResponse_Item_Level_Name(static_cast<UserLogsResponse_Item_Level>(value));
}
template <>
inline const std::string& UserLogsResponse_Item_Level_Name(UserLogsResponse_Item_Level value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserLogsResponse_Item_Level_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool UserLogsResponse_Item_Level_Parse(absl::string_view name, UserLogsResponse_Item_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserLogsResponse_Item_Level>(
      UserLogsResponse_Item_Level_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserDetail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserDetail) */ {
 public:
  inline UserDetail() : UserDetail(nullptr) {}
  ~UserDetail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserDetail(::google::protobuf::internal::ConstantInitialized);

  UserDetail(const UserDetail& from);
  UserDetail(UserDetail&& from) noexcept
    : UserDetail() {
    *this = ::std::move(from);
  }

  inline UserDetail& operator=(const UserDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDetail& operator=(UserDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDetail* internal_default_instance() {
    return reinterpret_cast<const UserDetail*>(
               &_UserDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserDetail& a, UserDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDetail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserDetail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserDetail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserDetail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserDetail& from) {
    UserDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDetail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserDetail";
  }
  protected:
  explicit UserDetail(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kRealNameFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string real_name = 2;
  void clear_real_name() ;
  const std::string& real_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserDetail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr real_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class Oauth2State final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.Oauth2State) */ {
 public:
  inline Oauth2State() : Oauth2State(nullptr) {}
  ~Oauth2State() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2State(::google::protobuf::internal::ConstantInitialized);

  Oauth2State(const Oauth2State& from);
  Oauth2State(Oauth2State&& from) noexcept
    : Oauth2State() {
    *this = ::std::move(from);
  }

  inline Oauth2State& operator=(const Oauth2State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2State& operator=(Oauth2State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2State* internal_default_instance() {
    return reinterpret_cast<const Oauth2State*>(
               &_Oauth2State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Oauth2State& a, Oauth2State& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2State* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2State* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2State>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Oauth2State& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Oauth2State& from) {
    Oauth2State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2State* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.Oauth2State";
  }
  protected:
  explicit Oauth2State(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGotoFieldNumber = 1,
    kHostFieldNumber = 2,
    kUserFieldNumber = 3,
    kIdFieldNumber = 9,
  };
  // string goto = 1;
  void clear_goto_() ;
  const std::string& goto_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_goto_(Arg_&& arg, Args_... args);
  std::string* mutable_goto_();
  PROTOBUF_NODISCARD std::string* release_goto_();
  void set_allocated_goto_(std::string* ptr);

  private:
  const std::string& _internal_goto_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goto_(
      const std::string& value);
  std::string* _internal_mutable_goto_();

  public:
  // string host = 2;
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // optional string user = 3;
  bool has_user() const;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* ptr);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string id = 9;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.Oauth2State)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr goto__;
    ::google::protobuf::internal::ArenaStringPtr host_;
    ::google::protobuf::internal::ArenaStringPtr user_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserSignInRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserSignInRequest) */ {
 public:
  inline UserSignInRequest() : UserSignInRequest(nullptr) {}
  ~UserSignInRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSignInRequest(::google::protobuf::internal::ConstantInitialized);

  UserSignInRequest(const UserSignInRequest& from);
  UserSignInRequest(UserSignInRequest&& from) noexcept
    : UserSignInRequest() {
    *this = ::std::move(from);
  }

  inline UserSignInRequest& operator=(const UserSignInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignInRequest& operator=(UserSignInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSignInRequest& default_instance() {
    return *internal_default_instance();
  }
  enum UserCase {
    kNickname = 1,
    kEmail = 2,
    USER_NOT_SET = 0,
  };

  static inline const UserSignInRequest* internal_default_instance() {
    return reinterpret_cast<const UserSignInRequest*>(
               &_UserSignInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserSignInRequest& a, UserSignInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignInRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSignInRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSignInRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSignInRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSignInRequest& from) {
    UserSignInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignInRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserSignInRequest";
  }
  protected:
  explicit UserSignInRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 9,
    kTtlFieldNumber = 11,
    kNicknameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string password = 9;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .google.protobuf.Duration ttl = 11;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // string nickname = 1;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 2;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  void clear_user();
  UserCase user_case() const;
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserSignInRequest)
 private:
  class _Internal;
  void set_has_nickname();
  void set_has_email();

  inline bool has_user() const;
  inline void clear_has_user();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::Duration* ttl_;
    union UserUnion {
      constexpr UserUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr nickname_;
      ::google::protobuf::internal::ArenaStringPtr email_;
    } user_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserQueryRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserQueryRequest) */ {
 public:
  inline UserQueryRequest() : UserQueryRequest(nullptr) {}
  ~UserQueryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQueryRequest(::google::protobuf::internal::ConstantInitialized);

  UserQueryRequest(const UserQueryRequest& from);
  UserQueryRequest(UserQueryRequest&& from) noexcept
    : UserQueryRequest() {
    *this = ::std::move(from);
  }

  inline UserQueryRequest& operator=(const UserQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQueryRequest& operator=(UserQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  enum UserCase {
    kNickname = 1,
    kEmail = 2,
    USER_NOT_SET = 0,
  };

  static inline const UserQueryRequest* internal_default_instance() {
    return reinterpret_cast<const UserQueryRequest*>(
               &_UserQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserQueryRequest& a, UserQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQueryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQueryRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQueryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserQueryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserQueryRequest& from) {
    UserQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQueryRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserQueryRequest";
  }
  protected:
  explicit UserQueryRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 9,
    kNicknameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string home = 9;
  void clear_home() ;
  const std::string& home() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // string nickname = 1;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 2;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  void clear_user();
  UserCase user_case() const;
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserQueryRequest)
 private:
  class _Internal;
  void set_has_nickname();
  void set_has_email();

  inline bool has_user() const;
  inline void clear_has_user();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3, 0, 55, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr home_;
    union UserUnion {
      constexpr UserUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr nickname_;
      ::google::protobuf::internal::ArenaStringPtr email_;
    } user_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserSignInResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserSignInResponse) */ {
 public:
  inline UserSignInResponse() : UserSignInResponse(nullptr) {}
  ~UserSignInResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSignInResponse(::google::protobuf::internal::ConstantInitialized);

  UserSignInResponse(const UserSignInResponse& from);
  UserSignInResponse(UserSignInResponse&& from) noexcept
    : UserSignInResponse() {
    *this = ::std::move(from);
  }

  inline UserSignInResponse& operator=(const UserSignInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignInResponse& operator=(UserSignInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSignInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSignInResponse* internal_default_instance() {
    return reinterpret_cast<const UserSignInResponse*>(
               &_UserSignInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserSignInResponse& a, UserSignInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignInResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSignInResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSignInResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSignInResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSignInResponse& from) {
    UserSignInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignInResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserSignInResponse";
  }
  protected:
  explicit UserSignInResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 11,
    kPermissionsFieldNumber = 12,
    kTokenFieldNumber = 1,
    kProviderTypeFieldNumber = 9,
    kUserFieldNumber = 2,
    kHasGoogleFieldNumber = 21,
    kHasWechatMiniProgramFieldNumber = 22,
    kHasWechatOauth2FieldNumber = 23,
  };
  // repeated string roles = 11;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, std::size_t size);
  void set_roles(int index, absl::string_view value);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, std::size_t size);
  void add_roles(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_roles();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_roles() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_roles();

  public:
  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 12;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_permissions(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_permissions();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_permissions();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_permissions();
  const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      permissions() const;
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string provider_type = 9;
  void clear_provider_type() ;
  const std::string& provider_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider_type(Arg_&& arg, Args_... args);
  std::string* mutable_provider_type();
  PROTOBUF_NODISCARD std::string* release_provider_type();
  void set_allocated_provider_type(std::string* ptr);

  private:
  const std::string& _internal_provider_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider_type(
      const std::string& value);
  std::string* _internal_mutable_provider_type();

  public:
  // .palm.auth.v1.UserIndexResponse.Item user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::palm::auth::v1::UserIndexResponse_Item& user() const;
  PROTOBUF_NODISCARD ::palm::auth::v1::UserIndexResponse_Item* release_user();
  ::palm::auth::v1::UserIndexResponse_Item* mutable_user();
  void set_allocated_user(::palm::auth::v1::UserIndexResponse_Item* value);
  void unsafe_arena_set_allocated_user(::palm::auth::v1::UserIndexResponse_Item* value);
  ::palm::auth::v1::UserIndexResponse_Item* unsafe_arena_release_user();

  private:
  const ::palm::auth::v1::UserIndexResponse_Item& _internal_user() const;
  ::palm::auth::v1::UserIndexResponse_Item* _internal_mutable_user();

  public:
  // bool has_google = 21;
  void clear_has_google() ;
  bool has_google() const;
  void set_has_google(bool value);

  private:
  bool _internal_has_google() const;
  void _internal_set_has_google(bool value);

  public:
  // bool has_wechat_mini_program = 22;
  void clear_has_wechat_mini_program() ;
  bool has_wechat_mini_program() const;
  void set_has_wechat_mini_program(bool value);

  private:
  bool _internal_has_wechat_mini_program() const;
  void _internal_set_has_wechat_mini_program(bool value);

  public:
  // bool has_wechat_oauth2 = 23;
  void clear_has_wechat_oauth2() ;
  bool has_wechat_oauth2() const;
  void set_has_wechat_oauth2(bool value);

  private:
  bool _internal_has_wechat_oauth2() const;
  void _internal_set_has_wechat_oauth2(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserSignInResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 8, 2, 71, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> roles_;
    ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > permissions_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr provider_type_;
    ::palm::auth::v1::UserIndexResponse_Item* user_;
    bool has_google_;
    bool has_wechat_mini_program_;
    bool has_wechat_oauth2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserSignUpRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserSignUpRequest) */ {
 public:
  inline UserSignUpRequest() : UserSignUpRequest(nullptr) {}
  ~UserSignUpRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSignUpRequest(::google::protobuf::internal::ConstantInitialized);

  UserSignUpRequest(const UserSignUpRequest& from);
  UserSignUpRequest(UserSignUpRequest&& from) noexcept
    : UserSignUpRequest() {
    *this = ::std::move(from);
  }

  inline UserSignUpRequest& operator=(const UserSignUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignUpRequest& operator=(UserSignUpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSignUpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSignUpRequest* internal_default_instance() {
    return reinterpret_cast<const UserSignUpRequest*>(
               &_UserSignUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserSignUpRequest& a, UserSignUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignUpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignUpRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSignUpRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSignUpRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSignUpRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSignUpRequest& from) {
    UserSignUpRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignUpRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserSignUpRequest";
  }
  protected:
  explicit UserSignUpRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kLangFieldNumber = 11,
    kTimezoneFieldNumber = 12,
    kHomeFieldNumber = 21,
  };
  // string real_name = 1;
  void clear_real_name() ;
  const std::string& real_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string password = 4;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string lang = 11;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string timezone = 12;
  void clear_timezone() ;
  const std::string& timezone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string home = 21;
  void clear_home() ;
  const std::string& home() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserSignUpRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 85, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr real_name_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr timezone_;
    ::google::protobuf::internal::ArenaStringPtr home_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserTokenRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserTokenRequest) */ {
 public:
  inline UserTokenRequest() : UserTokenRequest(nullptr) {}
  ~UserTokenRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserTokenRequest(::google::protobuf::internal::ConstantInitialized);

  UserTokenRequest(const UserTokenRequest& from);
  UserTokenRequest(UserTokenRequest&& from) noexcept
    : UserTokenRequest() {
    *this = ::std::move(from);
  }

  inline UserTokenRequest& operator=(const UserTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTokenRequest& operator=(UserTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserTokenRequest* internal_default_instance() {
    return reinterpret_cast<const UserTokenRequest*>(
               &_UserTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserTokenRequest& a, UserTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserTokenRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserTokenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserTokenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserTokenRequest& from) {
    UserTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTokenRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserTokenRequest";
  }
  protected:
  explicit UserTokenRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserTokenRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserResetPasswordRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserResetPasswordRequest) */ {
 public:
  inline UserResetPasswordRequest() : UserResetPasswordRequest(nullptr) {}
  ~UserResetPasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserResetPasswordRequest(::google::protobuf::internal::ConstantInitialized);

  UserResetPasswordRequest(const UserResetPasswordRequest& from);
  UserResetPasswordRequest(UserResetPasswordRequest&& from) noexcept
    : UserResetPasswordRequest() {
    *this = ::std::move(from);
  }

  inline UserResetPasswordRequest& operator=(const UserResetPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResetPasswordRequest& operator=(UserResetPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserResetPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserResetPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const UserResetPasswordRequest*>(
               &_UserResetPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserResetPasswordRequest& a, UserResetPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResetPasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResetPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserResetPasswordRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserResetPasswordRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserResetPasswordRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserResetPasswordRequest& from) {
    UserResetPasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResetPasswordRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserResetPasswordRequest";
  }
  protected:
  explicit UserResetPasswordRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserResetPasswordRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 59, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserSetPasswordRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserSetPasswordRequest) */ {
 public:
  inline UserSetPasswordRequest() : UserSetPasswordRequest(nullptr) {}
  ~UserSetPasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSetPasswordRequest(::google::protobuf::internal::ConstantInitialized);

  UserSetPasswordRequest(const UserSetPasswordRequest& from);
  UserSetPasswordRequest(UserSetPasswordRequest&& from) noexcept
    : UserSetPasswordRequest() {
    *this = ::std::move(from);
  }

  inline UserSetPasswordRequest& operator=(const UserSetPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSetPasswordRequest& operator=(UserSetPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSetPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSetPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const UserSetPasswordRequest*>(
               &_UserSetPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserSetPasswordRequest& a, UserSetPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSetPasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSetPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSetPasswordRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSetPasswordRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSetPasswordRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSetPasswordRequest& from) {
    UserSetPasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSetPasswordRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserSetPasswordRequest";
  }
  protected:
  explicit UserSetPasswordRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserSetPasswordRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::int32_t user_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserSetProfileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserSetProfileRequest) */ {
 public:
  inline UserSetProfileRequest() : UserSetProfileRequest(nullptr) {}
  ~UserSetProfileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSetProfileRequest(::google::protobuf::internal::ConstantInitialized);

  UserSetProfileRequest(const UserSetProfileRequest& from);
  UserSetProfileRequest(UserSetProfileRequest&& from) noexcept
    : UserSetProfileRequest() {
    *this = ::std::move(from);
  }

  inline UserSetProfileRequest& operator=(const UserSetProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSetProfileRequest& operator=(UserSetProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSetProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSetProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UserSetProfileRequest*>(
               &_UserSetProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserSetProfileRequest& a, UserSetProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSetProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSetProfileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSetProfileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSetProfileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserSetProfileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserSetProfileRequest& from) {
    UserSetProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSetProfileRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserSetProfileRequest";
  }
  protected:
  explicit UserSetProfileRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kTimezoneFieldNumber = 8,
    kLangFieldNumber = 9,
    kWechatFieldNumber = 11,
    kPhoneFieldNumber = 12,
  };
  // string real_name = 1;
  void clear_real_name() ;
  const std::string& real_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string avatar = 2;
  void clear_avatar() ;
  const std::string& avatar() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* ptr);

  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(
      const std::string& value);
  std::string* _internal_mutable_avatar();

  public:
  // string timezone = 8;
  void clear_timezone() ;
  const std::string& timezone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string lang = 9;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string wechat = 11;
  void clear_wechat() ;
  const std::string& wechat() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wechat(Arg_&& arg, Args_... args);
  std::string* mutable_wechat();
  PROTOBUF_NODISCARD std::string* release_wechat();
  void set_allocated_wechat(std::string* ptr);

  private:
  const std::string& _internal_wechat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wechat(
      const std::string& value);
  std::string* _internal_mutable_wechat();

  public:
  // string phone = 12;
  void clear_phone() ;
  const std::string& phone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone(Arg_&& arg, Args_... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* ptr);

  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(
      const std::string& value);
  std::string* _internal_mutable_phone();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserSetProfileRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 81, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr real_name_;
    ::google::protobuf::internal::ArenaStringPtr avatar_;
    ::google::protobuf::internal::ArenaStringPtr timezone_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr wechat_;
    ::google::protobuf::internal::ArenaStringPtr phone_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserGetProfileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserGetProfileResponse) */ {
 public:
  inline UserGetProfileResponse() : UserGetProfileResponse(nullptr) {}
  ~UserGetProfileResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserGetProfileResponse(::google::protobuf::internal::ConstantInitialized);

  UserGetProfileResponse(const UserGetProfileResponse& from);
  UserGetProfileResponse(UserGetProfileResponse&& from) noexcept
    : UserGetProfileResponse() {
    *this = ::std::move(from);
  }

  inline UserGetProfileResponse& operator=(const UserGetProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGetProfileResponse& operator=(UserGetProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserGetProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserGetProfileResponse* internal_default_instance() {
    return reinterpret_cast<const UserGetProfileResponse*>(
               &_UserGetProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserGetProfileResponse& a, UserGetProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGetProfileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGetProfileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserGetProfileResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserGetProfileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserGetProfileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserGetProfileResponse& from) {
    UserGetProfileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGetProfileResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserGetProfileResponse";
  }
  protected:
  explicit UserGetProfileResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kNicknameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kTimezoneFieldNumber = 8,
    kLangFieldNumber = 9,
    kWechatFieldNumber = 11,
    kPhoneFieldNumber = 12,
  };
  // string real_name = 1;
  void clear_real_name() ;
  const std::string& real_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string avatar = 2;
  void clear_avatar() ;
  const std::string& avatar() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* ptr);

  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(
      const std::string& value);
  std::string* _internal_mutable_avatar();

  public:
  // string nickname = 3;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 4;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string timezone = 8;
  void clear_timezone() ;
  const std::string& timezone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string lang = 9;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string wechat = 11;
  void clear_wechat() ;
  const std::string& wechat() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wechat(Arg_&& arg, Args_... args);
  std::string* mutable_wechat();
  PROTOBUF_NODISCARD std::string* release_wechat();
  void set_allocated_wechat(std::string* ptr);

  private:
  const std::string& _internal_wechat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wechat(
      const std::string& value);
  std::string* _internal_mutable_wechat();

  public:
  // string phone = 12;
  void clear_phone() ;
  const std::string& phone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone(Arg_&& arg, Args_... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* ptr);

  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(
      const std::string& value);
  std::string* _internal_mutable_phone();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserGetProfileResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 8, 0, 103, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr real_name_;
    ::google::protobuf::internal::ArenaStringPtr avatar_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr timezone_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr wechat_;
    ::google::protobuf::internal::ArenaStringPtr phone_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserLogsResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserLogsResponse.Item) */ {
 public:
  inline UserLogsResponse_Item() : UserLogsResponse_Item(nullptr) {}
  ~UserLogsResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserLogsResponse_Item(::google::protobuf::internal::ConstantInitialized);

  UserLogsResponse_Item(const UserLogsResponse_Item& from);
  UserLogsResponse_Item(UserLogsResponse_Item&& from) noexcept
    : UserLogsResponse_Item() {
    *this = ::std::move(from);
  }

  inline UserLogsResponse_Item& operator=(const UserLogsResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogsResponse_Item& operator=(UserLogsResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogsResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogsResponse_Item* internal_default_instance() {
    return reinterpret_cast<const UserLogsResponse_Item*>(
               &_UserLogsResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserLogsResponse_Item& a, UserLogsResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogsResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogsResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogsResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogsResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserLogsResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserLogsResponse_Item& from) {
    UserLogsResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogsResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserLogsResponse.Item";
  }
  protected:
  explicit UserLogsResponse_Item(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Level = UserLogsResponse_Item_Level;
  static constexpr Level DEBUG = UserLogsResponse_Item_Level_DEBUG;
  static constexpr Level INFO = UserLogsResponse_Item_Level_INFO;
  static constexpr Level WARNING = UserLogsResponse_Item_Level_WARNING;
  static constexpr Level ERROR = UserLogsResponse_Item_Level_ERROR;
  static constexpr Level PANIC = UserLogsResponse_Item_Level_PANIC;
  static inline bool Level_IsValid(int value) {
    return UserLogsResponse_Item_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = UserLogsResponse_Item_Level_Level_MIN;
  static constexpr Level Level_MAX = UserLogsResponse_Item_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = UserLogsResponse_Item_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Level_descriptor() {
    return UserLogsResponse_Item_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return UserLogsResponse_Item_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return UserLogsResponse_Item_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kMessageFieldNumber = 5,
    kResourceFieldNumber = 6,
    kCreatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // string ip = 3;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .palm.rbac.v1.ResourcesResponse.Item resource = 6;
  bool has_resource() const;
  void clear_resource() ;
  const ::palm::rbac::v1::ResourcesResponse_Item& resource() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::ResourcesResponse_Item* release_resource();
  ::palm::rbac::v1::ResourcesResponse_Item* mutable_resource();
  void set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* value);
  void unsafe_arena_set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* value);
  ::palm::rbac::v1::ResourcesResponse_Item* unsafe_arena_release_resource();

  private:
  const ::palm::rbac::v1::ResourcesResponse_Item& _internal_resource() const;
  ::palm::rbac::v1::ResourcesResponse_Item* _internal_mutable_resource();

  public:
  // .google.protobuf.Timestamp created_at = 11;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_id = 2;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // .palm.auth.v1.UserLogsResponse.Item.Level level = 4;
  void clear_level() ;
  ::palm::auth::v1::UserLogsResponse_Item_Level level() const;
  void set_level(::palm::auth::v1::UserLogsResponse_Item_Level value);

  private:
  ::palm::auth::v1::UserLogsResponse_Item_Level _internal_level() const;
  void _internal_set_level(::palm::auth::v1::UserLogsResponse_Item_Level value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserLogsResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 2, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::palm::rbac::v1::ResourcesResponse_Item* resource_;
    ::google::protobuf::Timestamp* created_at_;
    ::int32_t id_;
    ::int32_t user_id_;
    int level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserLogsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserLogsResponse) */ {
 public:
  inline UserLogsResponse() : UserLogsResponse(nullptr) {}
  ~UserLogsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserLogsResponse(::google::protobuf::internal::ConstantInitialized);

  UserLogsResponse(const UserLogsResponse& from);
  UserLogsResponse(UserLogsResponse&& from) noexcept
    : UserLogsResponse() {
    *this = ::std::move(from);
  }

  inline UserLogsResponse& operator=(const UserLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogsResponse& operator=(UserLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogsResponse* internal_default_instance() {
    return reinterpret_cast<const UserLogsResponse*>(
               &_UserLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserLogsResponse& a, UserLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserLogsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserLogsResponse& from) {
    UserLogsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserLogsResponse";
  }
  protected:
  explicit UserLogsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserLogsResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.auth.v1.UserLogsResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::UserLogsResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserLogsResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserLogsResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserLogsResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::UserLogsResponse_Item& items(int index) const;
  ::palm::auth::v1::UserLogsResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserLogsResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* value);
  void unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();

  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserLogsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserLogsResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserChangePasswordRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserChangePasswordRequest) */ {
 public:
  inline UserChangePasswordRequest() : UserChangePasswordRequest(nullptr) {}
  ~UserChangePasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserChangePasswordRequest(::google::protobuf::internal::ConstantInitialized);

  UserChangePasswordRequest(const UserChangePasswordRequest& from);
  UserChangePasswordRequest(UserChangePasswordRequest&& from) noexcept
    : UserChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline UserChangePasswordRequest& operator=(const UserChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserChangePasswordRequest& operator=(UserChangePasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserChangePasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const UserChangePasswordRequest*>(
               &_UserChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UserChangePasswordRequest& a, UserChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserChangePasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserChangePasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserChangePasswordRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserChangePasswordRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserChangePasswordRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserChangePasswordRequest& from) {
    UserChangePasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChangePasswordRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserChangePasswordRequest";
  }
  protected:
  explicit UserChangePasswordRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPasswordFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
  };
  // string current_password = 1;
  void clear_current_password() ;
  const std::string& current_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_password(Arg_&& arg, Args_... args);
  std::string* mutable_current_password();
  PROTOBUF_NODISCARD std::string* release_current_password();
  void set_allocated_current_password(std::string* ptr);

  private:
  const std::string& _internal_current_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_password(
      const std::string& value);
  std::string* _internal_mutable_current_password();

  public:
  // string new_password = 2;
  void clear_new_password() ;
  const std::string& new_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_password(Arg_&& arg, Args_... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* ptr);

  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(
      const std::string& value);
  std::string* _internal_mutable_new_password();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserChangePasswordRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 75, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr current_password_;
    ::google::protobuf::internal::ArenaStringPtr new_password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserIndexResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserIndexResponse.Item) */ {
 public:
  inline UserIndexResponse_Item() : UserIndexResponse_Item(nullptr) {}
  ~UserIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserIndexResponse_Item(::google::protobuf::internal::ConstantInitialized);

  UserIndexResponse_Item(const UserIndexResponse_Item& from);
  UserIndexResponse_Item(UserIndexResponse_Item&& from) noexcept
    : UserIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline UserIndexResponse_Item& operator=(const UserIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIndexResponse_Item& operator=(UserIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const UserIndexResponse_Item*>(
               &_UserIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UserIndexResponse_Item& a, UserIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIndexResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserIndexResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserIndexResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserIndexResponse_Item& from) {
    UserIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIndexResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserIndexResponse.Item";
  }
  protected:
  explicit UserIndexResponse_Item(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kNicknameFieldNumber = 3,
    kRealNameFieldNumber = 4,
    kLastSignInIpFieldNumber = 12,
    kCurrentSignInIpFieldNumber = 14,
    kLangFieldNumber = 21,
    kTimezoneFieldNumber = 22,
    kAvatarFieldNumber = 23,
    kUpdatedAtFieldNumber = 9,
    kLastSignInAtFieldNumber = 11,
    kCurrentSignInAtFieldNumber = 13,
    kConfirmedAtFieldNumber = 27,
    kLockedAtFieldNumber = 28,
    kDeletedAtFieldNumber = 29,
    kIdFieldNumber = 1,
    kSignInCountFieldNumber = 19,
  };
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string nickname = 3;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string real_name = 4;
  void clear_real_name() ;
  const std::string& real_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // optional string last_sign_in_ip = 12;
  bool has_last_sign_in_ip() const;
  void clear_last_sign_in_ip() ;
  const std::string& last_sign_in_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_sign_in_ip(Arg_&& arg, Args_... args);
  std::string* mutable_last_sign_in_ip();
  PROTOBUF_NODISCARD std::string* release_last_sign_in_ip();
  void set_allocated_last_sign_in_ip(std::string* ptr);

  private:
  const std::string& _internal_last_sign_in_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_sign_in_ip(
      const std::string& value);
  std::string* _internal_mutable_last_sign_in_ip();

  public:
  // optional string current_sign_in_ip = 14;
  bool has_current_sign_in_ip() const;
  void clear_current_sign_in_ip() ;
  const std::string& current_sign_in_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_sign_in_ip(Arg_&& arg, Args_... args);
  std::string* mutable_current_sign_in_ip();
  PROTOBUF_NODISCARD std::string* release_current_sign_in_ip();
  void set_allocated_current_sign_in_ip(std::string* ptr);

  private:
  const std::string& _internal_current_sign_in_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_sign_in_ip(
      const std::string& value);
  std::string* _internal_mutable_current_sign_in_ip();

  public:
  // string lang = 21;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string timezone = 22;
  void clear_timezone() ;
  const std::string& timezone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string avatar = 23;
  void clear_avatar() ;
  const std::string& avatar() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* ptr);

  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(
      const std::string& value);
  std::string* _internal_mutable_avatar();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // optional .google.protobuf.Timestamp last_sign_in_at = 11;
  bool has_last_sign_in_at() const;
  void clear_last_sign_in_at() ;
  const ::google::protobuf::Timestamp& last_sign_in_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_sign_in_at();
  ::google::protobuf::Timestamp* mutable_last_sign_in_at();
  void set_allocated_last_sign_in_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_sign_in_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_sign_in_at();

  private:
  const ::google::protobuf::Timestamp& _internal_last_sign_in_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_sign_in_at();

  public:
  // optional .google.protobuf.Timestamp current_sign_in_at = 13;
  bool has_current_sign_in_at() const;
  void clear_current_sign_in_at() ;
  const ::google::protobuf::Timestamp& current_sign_in_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_current_sign_in_at();
  ::google::protobuf::Timestamp* mutable_current_sign_in_at();
  void set_allocated_current_sign_in_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_current_sign_in_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_current_sign_in_at();

  private:
  const ::google::protobuf::Timestamp& _internal_current_sign_in_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_current_sign_in_at();

  public:
  // optional .google.protobuf.Timestamp confirmed_at = 27;
  bool has_confirmed_at() const;
  void clear_confirmed_at() ;
  const ::google::protobuf::Timestamp& confirmed_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_confirmed_at();
  ::google::protobuf::Timestamp* mutable_confirmed_at();
  void set_allocated_confirmed_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_confirmed_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_confirmed_at();

  private:
  const ::google::protobuf::Timestamp& _internal_confirmed_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_confirmed_at();

  public:
  // optional .google.protobuf.Timestamp locked_at = 28;
  bool has_locked_at() const;
  void clear_locked_at() ;
  const ::google::protobuf::Timestamp& locked_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_locked_at();
  ::google::protobuf::Timestamp* mutable_locked_at();
  void set_allocated_locked_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_locked_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_locked_at();

  private:
  const ::google::protobuf::Timestamp& _internal_locked_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_locked_at();

  public:
  // optional .google.protobuf.Timestamp deleted_at = 29;
  bool has_deleted_at() const;
  void clear_deleted_at() ;
  const ::google::protobuf::Timestamp& deleted_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_deleted_at();
  ::google::protobuf::Timestamp* mutable_deleted_at();
  void set_allocated_deleted_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_deleted_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_deleted_at();

  private:
  const ::google::protobuf::Timestamp& _internal_deleted_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_deleted_at();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 sign_in_count = 19;
  void clear_sign_in_count() ;
  ::int32_t sign_in_count() const;
  void set_sign_in_count(::int32_t value);

  private:
  ::int32_t _internal_sign_in_count() const;
  void _internal_set_sign_in_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserIndexResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 16, 6, 133, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr real_name_;
    ::google::protobuf::internal::ArenaStringPtr last_sign_in_ip_;
    ::google::protobuf::internal::ArenaStringPtr current_sign_in_ip_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr timezone_;
    ::google::protobuf::internal::ArenaStringPtr avatar_;
    ::google::protobuf::Timestamp* updated_at_;
    ::google::protobuf::Timestamp* last_sign_in_at_;
    ::google::protobuf::Timestamp* current_sign_in_at_;
    ::google::protobuf::Timestamp* confirmed_at_;
    ::google::protobuf::Timestamp* locked_at_;
    ::google::protobuf::Timestamp* deleted_at_;
    ::int32_t id_;
    ::int32_t sign_in_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class UserIndexResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.UserIndexResponse) */ {
 public:
  inline UserIndexResponse() : UserIndexResponse(nullptr) {}
  ~UserIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserIndexResponse(::google::protobuf::internal::ConstantInitialized);

  UserIndexResponse(const UserIndexResponse& from);
  UserIndexResponse(UserIndexResponse&& from) noexcept
    : UserIndexResponse() {
    *this = ::std::move(from);
  }

  inline UserIndexResponse& operator=(const UserIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIndexResponse& operator=(UserIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIndexResponse* internal_default_instance() {
    return reinterpret_cast<const UserIndexResponse*>(
               &_UserIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserIndexResponse& a, UserIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIndexResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserIndexResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserIndexResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserIndexResponse& from) {
    UserIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIndexResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.UserIndexResponse";
  }
  protected:
  explicit UserIndexResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.auth.v1.UserIndexResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::UserIndexResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserIndexResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserIndexResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::UserIndexResponse_Item& items(int index) const;
  ::palm::auth::v1::UserIndexResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* value);
  void unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();

  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.UserIndexResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class SignInByGoogleRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.SignInByGoogleRequest) */ {
 public:
  inline SignInByGoogleRequest() : SignInByGoogleRequest(nullptr) {}
  ~SignInByGoogleRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignInByGoogleRequest(::google::protobuf::internal::ConstantInitialized);

  SignInByGoogleRequest(const SignInByGoogleRequest& from);
  SignInByGoogleRequest(SignInByGoogleRequest&& from) noexcept
    : SignInByGoogleRequest() {
    *this = ::std::move(from);
  }

  inline SignInByGoogleRequest& operator=(const SignInByGoogleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInByGoogleRequest& operator=(SignInByGoogleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignInByGoogleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignInByGoogleRequest* internal_default_instance() {
    return reinterpret_cast<const SignInByGoogleRequest*>(
               &_SignInByGoogleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SignInByGoogleRequest& a, SignInByGoogleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInByGoogleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignInByGoogleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignInByGoogleRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignInByGoogleRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignInByGoogleRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SignInByGoogleRequest& from) {
    SignInByGoogleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInByGoogleRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.SignInByGoogleRequest";
  }
  protected:
  explicit SignInByGoogleRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 1,
    kCodeFieldNumber = 2,
    kStateFieldNumber = 3,
    kRedirectUriFieldNumber = 4,
    kNonceFieldNumber = 9,
    kTtlFieldNumber = 11,
  };
  // repeated string scopes = 1;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;

  public:
  void clear_scopes() ;
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, std::size_t size);
  void set_scopes(int index, absl::string_view value);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, std::size_t size);
  void add_scopes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_scopes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_scopes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_scopes();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string state = 3;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string redirect_uri = 4;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // string nonce = 9;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* ptr);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // .google.protobuf.Duration ttl = 11;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.SignInByGoogleRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 6, 1, 75, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> scopes_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr redirect_uri_;
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::google::protobuf::Duration* ttl_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class GoogleSignInUrlRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.GoogleSignInUrlRequest) */ {
 public:
  inline GoogleSignInUrlRequest() : GoogleSignInUrlRequest(nullptr) {}
  ~GoogleSignInUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleSignInUrlRequest(::google::protobuf::internal::ConstantInitialized);

  GoogleSignInUrlRequest(const GoogleSignInUrlRequest& from);
  GoogleSignInUrlRequest(GoogleSignInUrlRequest&& from) noexcept
    : GoogleSignInUrlRequest() {
    *this = ::std::move(from);
  }

  inline GoogleSignInUrlRequest& operator=(const GoogleSignInUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSignInUrlRequest& operator=(GoogleSignInUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleSignInUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSignInUrlRequest* internal_default_instance() {
    return reinterpret_cast<const GoogleSignInUrlRequest*>(
               &_GoogleSignInUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GoogleSignInUrlRequest& a, GoogleSignInUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSignInUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSignInUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSignInUrlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSignInUrlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GoogleSignInUrlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GoogleSignInUrlRequest& from) {
    GoogleSignInUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleSignInUrlRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.GoogleSignInUrlRequest";
  }
  protected:
  explicit GoogleSignInUrlRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectUriFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string redirect_uri = 1;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // .palm.auth.v1.Oauth2State state = 2;
  bool has_state() const;
  void clear_state() ;
  const ::palm::auth::v1::Oauth2State& state() const;
  PROTOBUF_NODISCARD ::palm::auth::v1::Oauth2State* release_state();
  ::palm::auth::v1::Oauth2State* mutable_state();
  void set_allocated_state(::palm::auth::v1::Oauth2State* value);
  void unsafe_arena_set_allocated_state(::palm::auth::v1::Oauth2State* value);
  ::palm::auth::v1::Oauth2State* unsafe_arena_release_state();

  private:
  const ::palm::auth::v1::Oauth2State& _internal_state() const;
  ::palm::auth::v1::Oauth2State* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.GoogleSignInUrlRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 56, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr redirect_uri_;
    ::palm::auth::v1::Oauth2State* state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class GoogleSignInUrlResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.GoogleSignInUrlResponse) */ {
 public:
  inline GoogleSignInUrlResponse() : GoogleSignInUrlResponse(nullptr) {}
  ~GoogleSignInUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleSignInUrlResponse(::google::protobuf::internal::ConstantInitialized);

  GoogleSignInUrlResponse(const GoogleSignInUrlResponse& from);
  GoogleSignInUrlResponse(GoogleSignInUrlResponse&& from) noexcept
    : GoogleSignInUrlResponse() {
    *this = ::std::move(from);
  }

  inline GoogleSignInUrlResponse& operator=(const GoogleSignInUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSignInUrlResponse& operator=(GoogleSignInUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleSignInUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSignInUrlResponse* internal_default_instance() {
    return reinterpret_cast<const GoogleSignInUrlResponse*>(
               &_GoogleSignInUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GoogleSignInUrlResponse& a, GoogleSignInUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSignInUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSignInUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSignInUrlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSignInUrlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GoogleSignInUrlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GoogleSignInUrlResponse& from) {
    GoogleSignInUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleSignInUrlResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.GoogleSignInUrlResponse";
  }
  protected:
  explicit GoogleSignInUrlResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kNonceFieldNumber = 2,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string nonce = 2;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* ptr);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.GoogleSignInUrlResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatUserBindByIdRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatUserBindByIdRequest) */ {
 public:
  inline WechatUserBindByIdRequest() : WechatUserBindByIdRequest(nullptr) {}
  ~WechatUserBindByIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserBindByIdRequest(::google::protobuf::internal::ConstantInitialized);

  WechatUserBindByIdRequest(const WechatUserBindByIdRequest& from);
  WechatUserBindByIdRequest(WechatUserBindByIdRequest&& from) noexcept
    : WechatUserBindByIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserBindByIdRequest& operator=(const WechatUserBindByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserBindByIdRequest& operator=(WechatUserBindByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserBindByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserBindByIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserBindByIdRequest*>(
               &_WechatUserBindByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WechatUserBindByIdRequest& a, WechatUserBindByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserBindByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserBindByIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserBindByIdRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserBindByIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatUserBindByIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatUserBindByIdRequest& from) {
    WechatUserBindByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserBindByIdRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatUserBindByIdRequest";
  }
  protected:
  explicit WechatUserBindByIdRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kWechatUserIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // int32 wechat_user_id = 2;
  void clear_wechat_user_id() ;
  ::int32_t wechat_user_id() const;
  void set_wechat_user_id(::int32_t value);

  private:
  ::int32_t _internal_wechat_user_id() const;
  void _internal_set_wechat_user_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatUserBindByIdRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t user_id_;
    ::int32_t wechat_user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatUserBindByAccountRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatUserBindByAccountRequest) */ {
 public:
  inline WechatUserBindByAccountRequest() : WechatUserBindByAccountRequest(nullptr) {}
  ~WechatUserBindByAccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserBindByAccountRequest(::google::protobuf::internal::ConstantInitialized);

  WechatUserBindByAccountRequest(const WechatUserBindByAccountRequest& from);
  WechatUserBindByAccountRequest(WechatUserBindByAccountRequest&& from) noexcept
    : WechatUserBindByAccountRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserBindByAccountRequest& operator=(const WechatUserBindByAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserBindByAccountRequest& operator=(WechatUserBindByAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserBindByAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserBindByAccountRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserBindByAccountRequest*>(
               &_WechatUserBindByAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WechatUserBindByAccountRequest& a, WechatUserBindByAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserBindByAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserBindByAccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserBindByAccountRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserBindByAccountRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatUserBindByAccountRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatUserBindByAccountRequest& from) {
    WechatUserBindByAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserBindByAccountRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatUserBindByAccountRequest";
  }
  protected:
  explicit WechatUserBindByAccountRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatUserBindByAccountRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 68, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatUserQueryByOpenIdRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatUserQueryByOpenIdRequest) */ {
 public:
  inline WechatUserQueryByOpenIdRequest() : WechatUserQueryByOpenIdRequest(nullptr) {}
  ~WechatUserQueryByOpenIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserQueryByOpenIdRequest(::google::protobuf::internal::ConstantInitialized);

  WechatUserQueryByOpenIdRequest(const WechatUserQueryByOpenIdRequest& from);
  WechatUserQueryByOpenIdRequest(WechatUserQueryByOpenIdRequest&& from) noexcept
    : WechatUserQueryByOpenIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserQueryByOpenIdRequest& operator=(const WechatUserQueryByOpenIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserQueryByOpenIdRequest& operator=(WechatUserQueryByOpenIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserQueryByOpenIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserQueryByOpenIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserQueryByOpenIdRequest*>(
               &_WechatUserQueryByOpenIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WechatUserQueryByOpenIdRequest& a, WechatUserQueryByOpenIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserQueryByOpenIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserQueryByOpenIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserQueryByOpenIdRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserQueryByOpenIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatUserQueryByOpenIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatUserQueryByOpenIdRequest& from) {
    WechatUserQueryByOpenIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserQueryByOpenIdRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatUserQueryByOpenIdRequest";
  }
  protected:
  explicit WechatUserQueryByOpenIdRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kOpenIdFieldNumber = 2,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 2;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatUserQueryByOpenIdRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 65, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatUserQueryByUnionIdRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatUserQueryByUnionIdRequest) */ {
 public:
  inline WechatUserQueryByUnionIdRequest() : WechatUserQueryByUnionIdRequest(nullptr) {}
  ~WechatUserQueryByUnionIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserQueryByUnionIdRequest(::google::protobuf::internal::ConstantInitialized);

  WechatUserQueryByUnionIdRequest(const WechatUserQueryByUnionIdRequest& from);
  WechatUserQueryByUnionIdRequest(WechatUserQueryByUnionIdRequest&& from) noexcept
    : WechatUserQueryByUnionIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserQueryByUnionIdRequest& operator=(const WechatUserQueryByUnionIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserQueryByUnionIdRequest& operator=(WechatUserQueryByUnionIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserQueryByUnionIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserQueryByUnionIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserQueryByUnionIdRequest*>(
               &_WechatUserQueryByUnionIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WechatUserQueryByUnionIdRequest& a, WechatUserQueryByUnionIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserQueryByUnionIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserQueryByUnionIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserQueryByUnionIdRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserQueryByUnionIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatUserQueryByUnionIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatUserQueryByUnionIdRequest& from) {
    WechatUserQueryByUnionIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserQueryByUnionIdRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatUserQueryByUnionIdRequest";
  }
  protected:
  explicit WechatUserQueryByUnionIdRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 1,
  };
  // string union_id = 1;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatUserQueryByUnionIdRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatAllMiniProgramUserResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatAllMiniProgramUserResponse.Item) */ {
 public:
  inline WechatAllMiniProgramUserResponse_Item() : WechatAllMiniProgramUserResponse_Item(nullptr) {}
  ~WechatAllMiniProgramUserResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse_Item(::google::protobuf::internal::ConstantInitialized);

  WechatAllMiniProgramUserResponse_Item(const WechatAllMiniProgramUserResponse_Item& from);
  WechatAllMiniProgramUserResponse_Item(WechatAllMiniProgramUserResponse_Item&& from) noexcept
    : WechatAllMiniProgramUserResponse_Item() {
    *this = ::std::move(from);
  }

  inline WechatAllMiniProgramUserResponse_Item& operator=(const WechatAllMiniProgramUserResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllMiniProgramUserResponse_Item& operator=(WechatAllMiniProgramUserResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllMiniProgramUserResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllMiniProgramUserResponse_Item* internal_default_instance() {
    return reinterpret_cast<const WechatAllMiniProgramUserResponse_Item*>(
               &_WechatAllMiniProgramUserResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WechatAllMiniProgramUserResponse_Item& a, WechatAllMiniProgramUserResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllMiniProgramUserResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllMiniProgramUserResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllMiniProgramUserResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllMiniProgramUserResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatAllMiniProgramUserResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatAllMiniProgramUserResponse_Item& from) {
    WechatAllMiniProgramUserResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllMiniProgramUserResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatAllMiniProgramUserResponse.Item";
  }
  protected:
  explicit WechatAllMiniProgramUserResponse_Item(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kOpenIdFieldNumber = 5,
    kNicknameFieldNumber = 11,
    kAvatarUrlFieldNumber = 12,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string union_id = 3;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // string app_id = 4;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 5;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // optional string nickname = 11;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // optional string avatar_url = 12;
  bool has_avatar_url() const;
  void clear_avatar_url() ;
  const std::string& avatar_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_url(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* ptr);

  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(
      const std::string& value);
  std::string* _internal_mutable_avatar_url();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_id = 2;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 98, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr avatar_url_;
    ::int32_t id_;
    ::int32_t user_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatAllMiniProgramUserResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatAllMiniProgramUserResponse) */ {
 public:
  inline WechatAllMiniProgramUserResponse() : WechatAllMiniProgramUserResponse(nullptr) {}
  ~WechatAllMiniProgramUserResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse(::google::protobuf::internal::ConstantInitialized);

  WechatAllMiniProgramUserResponse(const WechatAllMiniProgramUserResponse& from);
  WechatAllMiniProgramUserResponse(WechatAllMiniProgramUserResponse&& from) noexcept
    : WechatAllMiniProgramUserResponse() {
    *this = ::std::move(from);
  }

  inline WechatAllMiniProgramUserResponse& operator=(const WechatAllMiniProgramUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllMiniProgramUserResponse& operator=(WechatAllMiniProgramUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllMiniProgramUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllMiniProgramUserResponse* internal_default_instance() {
    return reinterpret_cast<const WechatAllMiniProgramUserResponse*>(
               &_WechatAllMiniProgramUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WechatAllMiniProgramUserResponse& a, WechatAllMiniProgramUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllMiniProgramUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllMiniProgramUserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllMiniProgramUserResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllMiniProgramUserResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatAllMiniProgramUserResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatAllMiniProgramUserResponse& from) {
    WechatAllMiniProgramUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllMiniProgramUserResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatAllMiniProgramUserResponse";
  }
  protected:
  explicit WechatAllMiniProgramUserResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatAllMiniProgramUserResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.auth.v1.WechatAllMiniProgramUserResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item& items(int index) const;
  ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatAllMiniProgramUserResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatAllOauth2UserResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatAllOauth2UserResponse.Item) */ {
 public:
  inline WechatAllOauth2UserResponse_Item() : WechatAllOauth2UserResponse_Item(nullptr) {}
  ~WechatAllOauth2UserResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse_Item(::google::protobuf::internal::ConstantInitialized);

  WechatAllOauth2UserResponse_Item(const WechatAllOauth2UserResponse_Item& from);
  WechatAllOauth2UserResponse_Item(WechatAllOauth2UserResponse_Item&& from) noexcept
    : WechatAllOauth2UserResponse_Item() {
    *this = ::std::move(from);
  }

  inline WechatAllOauth2UserResponse_Item& operator=(const WechatAllOauth2UserResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllOauth2UserResponse_Item& operator=(WechatAllOauth2UserResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllOauth2UserResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllOauth2UserResponse_Item* internal_default_instance() {
    return reinterpret_cast<const WechatAllOauth2UserResponse_Item*>(
               &_WechatAllOauth2UserResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WechatAllOauth2UserResponse_Item& a, WechatAllOauth2UserResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllOauth2UserResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllOauth2UserResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllOauth2UserResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllOauth2UserResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatAllOauth2UserResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatAllOauth2UserResponse_Item& from) {
    WechatAllOauth2UserResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllOauth2UserResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatAllOauth2UserResponse.Item";
  }
  protected:
  explicit WechatAllOauth2UserResponse_Item(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 17,
    kUnionIdFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kOpenIdFieldNumber = 5,
    kNicknameFieldNumber = 11,
    kCityFieldNumber = 13,
    kProvinceFieldNumber = 14,
    kCountryFieldNumber = 15,
    kHeadImgUrlFieldNumber = 16,
    kLangFieldNumber = 18,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSexFieldNumber = 12,
  };
  // repeated string privilege = 17;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;

  public:
  void clear_privilege() ;
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, std::size_t size);
  void set_privilege(int index, absl::string_view value);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, std::size_t size);
  void add_privilege(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& privilege() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_privilege();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_privilege() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_privilege();

  public:
  // string union_id = 3;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // string app_id = 4;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 5;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string nickname = 11;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string city = 13;
  void clear_city() ;
  const std::string& city() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* ptr);

  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(
      const std::string& value);
  std::string* _internal_mutable_city();

  public:
  // string province = 14;
  void clear_province() ;
  const std::string& province() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_province(Arg_&& arg, Args_... args);
  std::string* mutable_province();
  PROTOBUF_NODISCARD std::string* release_province();
  void set_allocated_province(std::string* ptr);

  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(
      const std::string& value);
  std::string* _internal_mutable_province();

  public:
  // string country = 15;
  void clear_country() ;
  const std::string& country() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* ptr);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // optional string head_img_url = 16;
  bool has_head_img_url() const;
  void clear_head_img_url() ;
  const std::string& head_img_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_head_img_url(Arg_&& arg, Args_... args);
  std::string* mutable_head_img_url();
  PROTOBUF_NODISCARD std::string* release_head_img_url();
  void set_allocated_head_img_url(std::string* ptr);

  private:
  const std::string& _internal_head_img_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_img_url(
      const std::string& value);
  std::string* _internal_mutable_head_img_url();

  public:
  // string lang = 18;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_id = 2;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // int32 sex = 12;
  void clear_sex() ;
  ::int32_t sex() const;
  void set_sex(::int32_t value);

  private:
  ::int32_t _internal_sex() const;
  void _internal_set_sex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatAllOauth2UserResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 13, 0, 135, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> privilege_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr city_;
    ::google::protobuf::internal::ArenaStringPtr province_;
    ::google::protobuf::internal::ArenaStringPtr country_;
    ::google::protobuf::internal::ArenaStringPtr head_img_url_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::int32_t id_;
    ::int32_t user_id_;
    ::int32_t sex_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatAllOauth2UserResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatAllOauth2UserResponse) */ {
 public:
  inline WechatAllOauth2UserResponse() : WechatAllOauth2UserResponse(nullptr) {}
  ~WechatAllOauth2UserResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse(::google::protobuf::internal::ConstantInitialized);

  WechatAllOauth2UserResponse(const WechatAllOauth2UserResponse& from);
  WechatAllOauth2UserResponse(WechatAllOauth2UserResponse&& from) noexcept
    : WechatAllOauth2UserResponse() {
    *this = ::std::move(from);
  }

  inline WechatAllOauth2UserResponse& operator=(const WechatAllOauth2UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllOauth2UserResponse& operator=(WechatAllOauth2UserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllOauth2UserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllOauth2UserResponse* internal_default_instance() {
    return reinterpret_cast<const WechatAllOauth2UserResponse*>(
               &_WechatAllOauth2UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WechatAllOauth2UserResponse& a, WechatAllOauth2UserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllOauth2UserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllOauth2UserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllOauth2UserResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllOauth2UserResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatAllOauth2UserResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatAllOauth2UserResponse& from) {
    WechatAllOauth2UserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllOauth2UserResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatAllOauth2UserResponse";
  }
  protected:
  explicit WechatAllOauth2UserResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatAllOauth2UserResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.auth.v1.WechatAllOauth2UserResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::WechatAllOauth2UserResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllOauth2UserResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllOauth2UserResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllOauth2UserResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::WechatAllOauth2UserResponse_Item& items(int index) const;
  ::palm::auth::v1::WechatAllOauth2UserResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllOauth2UserResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatAllOauth2UserResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllOauth2UserResponse_Item > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class SignInByWechatOauth2Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.SignInByWechatOauth2Request) */ {
 public:
  inline SignInByWechatOauth2Request() : SignInByWechatOauth2Request(nullptr) {}
  ~SignInByWechatOauth2Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignInByWechatOauth2Request(::google::protobuf::internal::ConstantInitialized);

  SignInByWechatOauth2Request(const SignInByWechatOauth2Request& from);
  SignInByWechatOauth2Request(SignInByWechatOauth2Request&& from) noexcept
    : SignInByWechatOauth2Request() {
    *this = ::std::move(from);
  }

  inline SignInByWechatOauth2Request& operator=(const SignInByWechatOauth2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInByWechatOauth2Request& operator=(SignInByWechatOauth2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignInByWechatOauth2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignInByWechatOauth2Request* internal_default_instance() {
    return reinterpret_cast<const SignInByWechatOauth2Request*>(
               &_SignInByWechatOauth2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SignInByWechatOauth2Request& a, SignInByWechatOauth2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInByWechatOauth2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignInByWechatOauth2Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignInByWechatOauth2Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignInByWechatOauth2Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignInByWechatOauth2Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SignInByWechatOauth2Request& from) {
    SignInByWechatOauth2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInByWechatOauth2Request* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.SignInByWechatOauth2Request";
  }
  protected:
  explicit SignInByWechatOauth2Request(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCodeFieldNumber = 2,
    kAppIdFieldNumber = 3,
    kTtlFieldNumber = 11,
    kLanguageFieldNumber = 8,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string app_id = 3;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // .google.protobuf.Duration ttl = 11;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
  void clear_language() ;
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language language() const;
  void set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  private:
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language _internal_language() const;
  void _internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.SignInByWechatOauth2Request)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5, 1, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::Duration* ttl_;
    int language_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2SignInStateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatOauth2SignInStateResponse) */ {
 public:
  inline WechatOauth2SignInStateResponse() : WechatOauth2SignInStateResponse(nullptr) {}
  ~WechatOauth2SignInStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2SignInStateResponse(::google::protobuf::internal::ConstantInitialized);

  WechatOauth2SignInStateResponse(const WechatOauth2SignInStateResponse& from);
  WechatOauth2SignInStateResponse(WechatOauth2SignInStateResponse&& from) noexcept
    : WechatOauth2SignInStateResponse() {
    *this = ::std::move(from);
  }

  inline WechatOauth2SignInStateResponse& operator=(const WechatOauth2SignInStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2SignInStateResponse& operator=(WechatOauth2SignInStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2SignInStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2SignInStateResponse* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2SignInStateResponse*>(
               &_WechatOauth2SignInStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WechatOauth2SignInStateResponse& a, WechatOauth2SignInStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2SignInStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2SignInStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2SignInStateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2SignInStateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatOauth2SignInStateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatOauth2SignInStateResponse& from) {
    WechatOauth2SignInStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2SignInStateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatOauth2SignInStateResponse";
  }
  protected:
  explicit WechatOauth2SignInStateResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatOauth2SignInStateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 58, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2SignInUrlRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatOauth2SignInUrlRequest) */ {
 public:
  inline WechatOauth2SignInUrlRequest() : WechatOauth2SignInUrlRequest(nullptr) {}
  ~WechatOauth2SignInUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2SignInUrlRequest(::google::protobuf::internal::ConstantInitialized);

  WechatOauth2SignInUrlRequest(const WechatOauth2SignInUrlRequest& from);
  WechatOauth2SignInUrlRequest(WechatOauth2SignInUrlRequest&& from) noexcept
    : WechatOauth2SignInUrlRequest() {
    *this = ::std::move(from);
  }

  inline WechatOauth2SignInUrlRequest& operator=(const WechatOauth2SignInUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2SignInUrlRequest& operator=(WechatOauth2SignInUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2SignInUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2SignInUrlRequest* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2SignInUrlRequest*>(
               &_WechatOauth2SignInUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WechatOauth2SignInUrlRequest& a, WechatOauth2SignInUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2SignInUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2SignInUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2SignInUrlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2SignInUrlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatOauth2SignInUrlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatOauth2SignInUrlRequest& from) {
    WechatOauth2SignInUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2SignInUrlRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatOauth2SignInUrlRequest";
  }
  protected:
  explicit WechatOauth2SignInUrlRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kRedirectUriFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string redirect_uri = 2;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
  void clear_language() ;
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language language() const;
  void set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  private:
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language _internal_language() const;
  void _internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatOauth2SignInUrlRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 68, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr redirect_uri_;
    int language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class WechatMiniProgramUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.WechatMiniProgramUser) */ {
 public:
  inline WechatMiniProgramUser() : WechatMiniProgramUser(nullptr) {}
  ~WechatMiniProgramUser() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatMiniProgramUser(::google::protobuf::internal::ConstantInitialized);

  WechatMiniProgramUser(const WechatMiniProgramUser& from);
  WechatMiniProgramUser(WechatMiniProgramUser&& from) noexcept
    : WechatMiniProgramUser() {
    *this = ::std::move(from);
  }

  inline WechatMiniProgramUser& operator=(const WechatMiniProgramUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatMiniProgramUser& operator=(WechatMiniProgramUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatMiniProgramUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatMiniProgramUser* internal_default_instance() {
    return reinterpret_cast<const WechatMiniProgramUser*>(
               &_WechatMiniProgramUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(WechatMiniProgramUser& a, WechatMiniProgramUser& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatMiniProgramUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatMiniProgramUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatMiniProgramUser* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatMiniProgramUser>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WechatMiniProgramUser& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WechatMiniProgramUser& from) {
    WechatMiniProgramUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatMiniProgramUser* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.WechatMiniProgramUser";
  }
  protected:
  explicit WechatMiniProgramUser(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 11,
    kOpenIdFieldNumber = 12,
    kUnionIdFieldNumber = 13,
    kNicknameFieldNumber = 21,
    kAvatarUrlFieldNumber = 22,
  };
  // string app_id = 11;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 12;
  void clear_open_id() ;
  const std::string& open_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string union_id = 13;
  void clear_union_id() ;
  const std::string& union_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // optional string nickname = 21;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // optional string avatar_url = 22;
  bool has_avatar_url() const;
  void clear_avatar_url() ;
  const std::string& avatar_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_url(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* ptr);

  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(
      const std::string& value);
  std::string* _internal_mutable_avatar_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.WechatMiniProgramUser)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5, 0, 82, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr open_id_;
    ::google::protobuf::internal::ArenaStringPtr union_id_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr avatar_url_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class AttachmentShowRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.AttachmentShowRequest) */ {
 public:
  inline AttachmentShowRequest() : AttachmentShowRequest(nullptr) {}
  ~AttachmentShowRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentShowRequest(::google::protobuf::internal::ConstantInitialized);

  AttachmentShowRequest(const AttachmentShowRequest& from);
  AttachmentShowRequest(AttachmentShowRequest&& from) noexcept
    : AttachmentShowRequest() {
    *this = ::std::move(from);
  }

  inline AttachmentShowRequest& operator=(const AttachmentShowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentShowRequest& operator=(AttachmentShowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentShowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentShowRequest* internal_default_instance() {
    return reinterpret_cast<const AttachmentShowRequest*>(
               &_AttachmentShowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AttachmentShowRequest& a, AttachmentShowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentShowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentShowRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentShowRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentShowRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttachmentShowRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttachmentShowRequest& from) {
    AttachmentShowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentShowRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.AttachmentShowRequest";
  }
  protected:
  explicit AttachmentShowRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtlFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .google.protobuf.Duration ttl = 2;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::google::protobuf::Duration& ttl() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  private:
  const ::google::protobuf::Duration& _internal_ttl() const;
  ::google::protobuf::Duration* _internal_mutable_ttl();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.AttachmentShowRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* ttl_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class AttachmentShowResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.AttachmentShowResponse) */ {
 public:
  inline AttachmentShowResponse() : AttachmentShowResponse(nullptr) {}
  ~AttachmentShowResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentShowResponse(::google::protobuf::internal::ConstantInitialized);

  AttachmentShowResponse(const AttachmentShowResponse& from);
  AttachmentShowResponse(AttachmentShowResponse&& from) noexcept
    : AttachmentShowResponse() {
    *this = ::std::move(from);
  }

  inline AttachmentShowResponse& operator=(const AttachmentShowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentShowResponse& operator=(AttachmentShowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentShowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentShowResponse* internal_default_instance() {
    return reinterpret_cast<const AttachmentShowResponse*>(
               &_AttachmentShowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AttachmentShowResponse& a, AttachmentShowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentShowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentShowResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentShowResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentShowResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttachmentShowResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttachmentShowResponse& from) {
    AttachmentShowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentShowResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.AttachmentShowResponse";
  }
  protected:
  explicit AttachmentShowResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kItemFieldNumber = 1,
  };
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .palm.auth.v1.AttachmentIndexResponse.Item item = 1;
  bool has_item() const;
  void clear_item() ;
  const ::palm::auth::v1::AttachmentIndexResponse_Item& item() const;
  PROTOBUF_NODISCARD ::palm::auth::v1::AttachmentIndexResponse_Item* release_item();
  ::palm::auth::v1::AttachmentIndexResponse_Item* mutable_item();
  void set_allocated_item(::palm::auth::v1::AttachmentIndexResponse_Item* value);
  void unsafe_arena_set_allocated_item(::palm::auth::v1::AttachmentIndexResponse_Item* value);
  ::palm::auth::v1::AttachmentIndexResponse_Item* unsafe_arena_release_item();

  private:
  const ::palm::auth::v1::AttachmentIndexResponse_Item& _internal_item() const;
  ::palm::auth::v1::AttachmentIndexResponse_Item* _internal_mutable_item();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.AttachmentShowResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::palm::auth::v1::AttachmentIndexResponse_Item* item_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class AttachmentIndexResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.AttachmentIndexResponse.Item) */ {
 public:
  inline AttachmentIndexResponse_Item() : AttachmentIndexResponse_Item(nullptr) {}
  ~AttachmentIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentIndexResponse_Item(::google::protobuf::internal::ConstantInitialized);

  AttachmentIndexResponse_Item(const AttachmentIndexResponse_Item& from);
  AttachmentIndexResponse_Item(AttachmentIndexResponse_Item&& from) noexcept
    : AttachmentIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline AttachmentIndexResponse_Item& operator=(const AttachmentIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentIndexResponse_Item& operator=(AttachmentIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const AttachmentIndexResponse_Item*>(
               &_AttachmentIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AttachmentIndexResponse_Item& a, AttachmentIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentIndexResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentIndexResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttachmentIndexResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttachmentIndexResponse_Item& from) {
    AttachmentIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentIndexResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.AttachmentIndexResponse.Item";
  }
  protected:
  explicit AttachmentIndexResponse_Item(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 2,
    kNameFieldNumber = 3,
    kTitleFieldNumber = 4,
    kContentTypeFieldNumber = 6,
    kUpdatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 7,
    kSizeFieldNumber = 5,
  };
  // string bucket = 2;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* ptr);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string title = 4;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string content_type = 6;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .palm.nut.v1.MediaContent.Status status = 7;
  void clear_status() ;
  ::palm::nut::v1::MediaContent_Status status() const;
  void set_status(::palm::nut::v1::MediaContent_Status value);

  private:
  ::palm::nut::v1::MediaContent_Status _internal_status() const;
  void _internal_set_status(::palm::nut::v1::MediaContent_Status value);

  public:
  // int64 size = 5;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.AttachmentIndexResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 8, 1, 85, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::google::protobuf::Timestamp* updated_at_;
    ::int32_t id_;
    int status_;
    ::int64_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class AttachmentIndexResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.AttachmentIndexResponse) */ {
 public:
  inline AttachmentIndexResponse() : AttachmentIndexResponse(nullptr) {}
  ~AttachmentIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentIndexResponse(::google::protobuf::internal::ConstantInitialized);

  AttachmentIndexResponse(const AttachmentIndexResponse& from);
  AttachmentIndexResponse(AttachmentIndexResponse&& from) noexcept
    : AttachmentIndexResponse() {
    *this = ::std::move(from);
  }

  inline AttachmentIndexResponse& operator=(const AttachmentIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentIndexResponse& operator=(AttachmentIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentIndexResponse* internal_default_instance() {
    return reinterpret_cast<const AttachmentIndexResponse*>(
               &_AttachmentIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AttachmentIndexResponse& a, AttachmentIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentIndexResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentIndexResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttachmentIndexResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttachmentIndexResponse& from) {
    AttachmentIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentIndexResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.AttachmentIndexResponse";
  }
  protected:
  explicit AttachmentIndexResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AttachmentIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.auth.v1.AttachmentIndexResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::AttachmentIndexResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::AttachmentIndexResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::AttachmentIndexResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::AttachmentIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::AttachmentIndexResponse_Item& items(int index) const;
  ::palm::auth::v1::AttachmentIndexResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::AttachmentIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* value);
  void unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();

  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.AttachmentIndexResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::AttachmentIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleByLangRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleByLangRequest) */ {
 public:
  inline LocaleByLangRequest() : LocaleByLangRequest(nullptr) {}
  ~LocaleByLangRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleByLangRequest(::google::protobuf::internal::ConstantInitialized);

  LocaleByLangRequest(const LocaleByLangRequest& from);
  LocaleByLangRequest(LocaleByLangRequest&& from) noexcept
    : LocaleByLangRequest() {
    *this = ::std::move(from);
  }

  inline LocaleByLangRequest& operator=(const LocaleByLangRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleByLangRequest& operator=(LocaleByLangRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleByLangRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleByLangRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleByLangRequest*>(
               &_LocaleByLangRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LocaleByLangRequest& a, LocaleByLangRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleByLangRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleByLangRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleByLangRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleByLangRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleByLangRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleByLangRequest& from) {
    LocaleByLangRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleByLangRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleByLangRequest";
  }
  protected:
  explicit LocaleByLangRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleByLangRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr lang_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleListResponse) */ {
 public:
  inline LocaleListResponse() : LocaleListResponse(nullptr) {}
  ~LocaleListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleListResponse(::google::protobuf::internal::ConstantInitialized);

  LocaleListResponse(const LocaleListResponse& from);
  LocaleListResponse(LocaleListResponse&& from) noexcept
    : LocaleListResponse() {
    *this = ::std::move(from);
  }

  inline LocaleListResponse& operator=(const LocaleListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleListResponse& operator=(LocaleListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleListResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleListResponse*>(
               &_LocaleListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LocaleListResponse& a, LocaleListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleListResponse& from) {
    LocaleListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleListResponse";
  }
  protected:
  explicit LocaleListResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::auth::v1::LocaleIndexResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleIndexResponse_Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleIndexResponse.Item) */ {
 public:
  inline LocaleIndexResponse_Item() : LocaleIndexResponse_Item(nullptr) {}
  ~LocaleIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleIndexResponse_Item(::google::protobuf::internal::ConstantInitialized);

  LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from);
  LocaleIndexResponse_Item(LocaleIndexResponse_Item&& from) noexcept
    : LocaleIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse_Item& operator=(const LocaleIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse_Item& operator=(LocaleIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse_Item*>(
               &_LocaleIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LocaleIndexResponse_Item& a, LocaleIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse_Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse_Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse_Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleIndexResponse_Item& from) {
    LocaleIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse_Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleIndexResponse.Item";
  }
  protected:
  explicit LocaleIndexResponse_Item(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 2,
    kCodeFieldNumber = 3,
    kMessageFieldNumber = 4,
    kUpdatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
  };
  // string lang = 2;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string code = 3;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleIndexResponse.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5, 1, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::Timestamp* updated_at_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleIndexResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleIndexResponse) */ {
 public:
  inline LocaleIndexResponse() : LocaleIndexResponse(nullptr) {}
  ~LocaleIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleIndexResponse(::google::protobuf::internal::ConstantInitialized);

  LocaleIndexResponse(const LocaleIndexResponse& from);
  LocaleIndexResponse(LocaleIndexResponse&& from) noexcept
    : LocaleIndexResponse() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse& operator=(const LocaleIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse& operator=(LocaleIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse*>(
               &_LocaleIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LocaleIndexResponse& a, LocaleIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleIndexResponse& from) {
    LocaleIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleIndexResponse";
  }
  protected:
  explicit LocaleIndexResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocaleIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::auth::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::auth::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::auth::v1::LocaleIndexResponse_Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* value);
  void unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();

  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleIndexResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleByCodeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleByCodeRequest) */ {
 public:
  inline LocaleByCodeRequest() : LocaleByCodeRequest(nullptr) {}
  ~LocaleByCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleByCodeRequest(::google::protobuf::internal::ConstantInitialized);

  LocaleByCodeRequest(const LocaleByCodeRequest& from);
  LocaleByCodeRequest(LocaleByCodeRequest&& from) noexcept
    : LocaleByCodeRequest() {
    *this = ::std::move(from);
  }

  inline LocaleByCodeRequest& operator=(const LocaleByCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleByCodeRequest& operator=(LocaleByCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleByCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleByCodeRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleByCodeRequest*>(
               &_LocaleByCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LocaleByCodeRequest& a, LocaleByCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleByCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleByCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleByCodeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleByCodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleByCodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleByCodeRequest& from) {
    LocaleByCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleByCodeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleByCodeRequest";
  }
  protected:
  explicit LocaleByCodeRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleByCodeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleByLangAndCodeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleByLangAndCodeRequest) */ {
 public:
  inline LocaleByLangAndCodeRequest() : LocaleByLangAndCodeRequest(nullptr) {}
  ~LocaleByLangAndCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleByLangAndCodeRequest(::google::protobuf::internal::ConstantInitialized);

  LocaleByLangAndCodeRequest(const LocaleByLangAndCodeRequest& from);
  LocaleByLangAndCodeRequest(LocaleByLangAndCodeRequest&& from) noexcept
    : LocaleByLangAndCodeRequest() {
    *this = ::std::move(from);
  }

  inline LocaleByLangAndCodeRequest& operator=(const LocaleByLangAndCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleByLangAndCodeRequest& operator=(LocaleByLangAndCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleByLangAndCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleByLangAndCodeRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleByLangAndCodeRequest*>(
               &_LocaleByLangAndCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LocaleByLangAndCodeRequest& a, LocaleByLangAndCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleByLangAndCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleByLangAndCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleByLangAndCodeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleByLangAndCodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleByLangAndCodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleByLangAndCodeRequest& from) {
    LocaleByLangAndCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleByLangAndCodeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleByLangAndCodeRequest";
  }
  protected:
  explicit LocaleByLangAndCodeRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleByLangAndCodeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 56, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleCreateRequest) */ {
 public:
  inline LocaleCreateRequest() : LocaleCreateRequest(nullptr) {}
  ~LocaleCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleCreateRequest(::google::protobuf::internal::ConstantInitialized);

  LocaleCreateRequest(const LocaleCreateRequest& from);
  LocaleCreateRequest(LocaleCreateRequest&& from) noexcept
    : LocaleCreateRequest() {
    *this = ::std::move(from);
  }

  inline LocaleCreateRequest& operator=(const LocaleCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleCreateRequest& operator=(LocaleCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleCreateRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleCreateRequest*>(
               &_LocaleCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(LocaleCreateRequest& a, LocaleCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleCreateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleCreateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleCreateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleCreateRequest& from) {
    LocaleCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleCreateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleCreateRequest";
  }
  protected:
  explicit LocaleCreateRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kCodeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleCreateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 56, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr lang_;
    ::google::protobuf::internal::ArenaStringPtr code_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};// -------------------------------------------------------------------

class LocaleUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.auth.v1.LocaleUpdateRequest) */ {
 public:
  inline LocaleUpdateRequest() : LocaleUpdateRequest(nullptr) {}
  ~LocaleUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleUpdateRequest(::google::protobuf::internal::ConstantInitialized);

  LocaleUpdateRequest(const LocaleUpdateRequest& from);
  LocaleUpdateRequest(LocaleUpdateRequest&& from) noexcept
    : LocaleUpdateRequest() {
    *this = ::std::move(from);
  }

  inline LocaleUpdateRequest& operator=(const LocaleUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleUpdateRequest& operator=(LocaleUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleUpdateRequest*>(
               &_LocaleUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LocaleUpdateRequest& a, LocaleUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleUpdateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleUpdateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocaleUpdateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocaleUpdateRequest& from) {
    LocaleUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleUpdateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.auth.v1.LocaleUpdateRequest";
  }
  protected:
  explicit LocaleUpdateRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.auth.v1.LocaleUpdateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserDetail

// string nickname = 1;
inline void UserDetail::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserDetail::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserDetail.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserDetail::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserDetail.nickname)
}
inline std::string* UserDetail::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserDetail.nickname)
  return _s;
}
inline const std::string& UserDetail::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void UserDetail::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserDetail::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserDetail.nickname)
  return _impl_.nickname_.Release();
}
inline void UserDetail::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserDetail.nickname)
}

// string real_name = 2;
inline void UserDetail::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserDetail::real_name() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserDetail.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserDetail::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserDetail.real_name)
}
inline std::string* UserDetail::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserDetail.real_name)
  return _s;
}
inline const std::string& UserDetail::_internal_real_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_name_.Get();
}
inline void UserDetail::_internal_set_real_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserDetail::release_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserDetail.real_name)
  return _impl_.real_name_.Release();
}
inline void UserDetail::set_allocated_real_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserDetail.real_name)
}

// -------------------------------------------------------------------

// Oauth2State

// string goto = 1;
inline void Oauth2State::clear_goto_() {
  _impl_.goto__.ClearToEmpty();
}
inline const std::string& Oauth2State::goto_() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.Oauth2State.goto)
  return _internal_goto_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_goto_(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.goto__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.Oauth2State.goto)
}
inline std::string* Oauth2State::mutable_goto_() {
  std::string* _s = _internal_mutable_goto_();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.Oauth2State.goto)
  return _s;
}
inline const std::string& Oauth2State::_internal_goto_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.goto__.Get();
}
inline void Oauth2State::_internal_set_goto_(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.goto__.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_goto_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.goto__.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_goto_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.Oauth2State.goto)
  return _impl_.goto__.Release();
}
inline void Oauth2State::set_allocated_goto_(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.goto__.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.goto__.IsDefault()) {
          _impl_.goto__.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.Oauth2State.goto)
}

// string host = 2;
inline void Oauth2State::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& Oauth2State::host() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.Oauth2State.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.Oauth2State.host)
}
inline std::string* Oauth2State::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.Oauth2State.host)
  return _s;
}
inline const std::string& Oauth2State::_internal_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.host_.Get();
}
inline void Oauth2State::_internal_set_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.Oauth2State.host)
  return _impl_.host_.Release();
}
inline void Oauth2State::set_allocated_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.Oauth2State.host)
}

// optional string user = 3;
inline bool Oauth2State::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2State::clear_user() {
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2State::user() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.Oauth2State.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_user(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.Oauth2State.user)
}
inline std::string* Oauth2State::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.Oauth2State.user)
  return _s;
}
inline const std::string& Oauth2State::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_.Get();
}
inline void Oauth2State::_internal_set_user(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.Oauth2State.user)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2State::set_allocated_user(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.Oauth2State.user)
}

// string id = 9;
inline void Oauth2State::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Oauth2State::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.Oauth2State.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.Oauth2State.id)
}
inline std::string* Oauth2State::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.Oauth2State.id)
  return _s;
}
inline const std::string& Oauth2State::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Oauth2State::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.Oauth2State.id)
  return _impl_.id_.Release();
}
inline void Oauth2State::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.Oauth2State.id)
}

// -------------------------------------------------------------------

// UserSignInRequest

// string nickname = 1;
inline bool UserSignInRequest::has_nickname() const {
  return user_case() == kNickname;
}
inline void UserSignInRequest::set_has_nickname() {
  _impl_._oneof_case_[0] = kNickname;
}
inline void UserSignInRequest::clear_nickname() {
  if (user_case() == kNickname) {
    _impl_.user_.nickname_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserSignInRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  _impl_.user_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInRequest.nickname)
}
inline std::string* UserSignInRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInRequest.nickname)
  return _s;
}
inline const std::string& UserSignInRequest::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.nickname_.Get();
}
inline void UserSignInRequest::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  _impl_.user_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInRequest::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  return _impl_.user_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInRequest::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInRequest.nickname)
  if (user_case() != kNickname) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.nickname_.Release();
}
inline void UserSignInRequest::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_nickname();
    _impl_.user_.nickname_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInRequest.nickname)
}

// string email = 2;
inline bool UserSignInRequest::has_email() const {
  return user_case() == kEmail;
}
inline void UserSignInRequest::set_has_email() {
  _impl_._oneof_case_[0] = kEmail;
}
inline void UserSignInRequest::clear_email() {
  if (user_case() == kEmail) {
    _impl_.user_.email_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserSignInRequest::email() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  _impl_.user_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInRequest.email)
}
inline std::string* UserSignInRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInRequest.email)
  return _s;
}
inline const std::string& UserSignInRequest::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.email_.Get();
}
inline void UserSignInRequest::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  _impl_.user_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInRequest::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  return _impl_.user_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInRequest::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInRequest.email)
  if (user_case() != kEmail) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.email_.Release();
}
inline void UserSignInRequest::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_email();
    _impl_.user_.email_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInRequest.email)
}

// string password = 9;
inline void UserSignInRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserSignInRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInRequest.password)
}
inline std::string* UserSignInRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInRequest.password)
  return _s;
}
inline const std::string& UserSignInRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void UserSignInRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInRequest.password)
  return _impl_.password_.Release();
}
inline void UserSignInRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInRequest.password)
}

// .google.protobuf.Duration ttl = 11;
inline bool UserSignInRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& UserSignInRequest::_internal_ttl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& UserSignInRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInRequest.ttl)
  return _internal_ttl();
}
inline void UserSignInRequest::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserSignInRequest.ttl)
}
inline ::google::protobuf::Duration* UserSignInRequest::release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* UserSignInRequest::unsafe_arena_release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInRequest.ttl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* UserSignInRequest::_internal_mutable_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* UserSignInRequest::mutable_ttl() {
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInRequest.ttl)
  return _msg;
}
inline void UserSignInRequest::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInRequest.ttl)
}

inline bool UserSignInRequest::has_user() const {
  return user_case() != USER_NOT_SET;
}
inline void UserSignInRequest::clear_has_user() {
  _impl_._oneof_case_[0] = USER_NOT_SET;
}
inline UserSignInRequest::UserCase UserSignInRequest::user_case() const {
  return UserSignInRequest::UserCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserQueryRequest

// string nickname = 1;
inline bool UserQueryRequest::has_nickname() const {
  return user_case() == kNickname;
}
inline void UserQueryRequest::set_has_nickname() {
  _impl_._oneof_case_[0] = kNickname;
}
inline void UserQueryRequest::clear_nickname() {
  if (user_case() == kNickname) {
    _impl_.user_.nickname_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserQueryRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserQueryRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQueryRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  _impl_.user_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserQueryRequest.nickname)
}
inline std::string* UserQueryRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserQueryRequest.nickname)
  return _s;
}
inline const std::string& UserQueryRequest::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.nickname_.Get();
}
inline void UserQueryRequest::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  _impl_.user_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserQueryRequest::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  return _impl_.user_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserQueryRequest::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserQueryRequest.nickname)
  if (user_case() != kNickname) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.nickname_.Release();
}
inline void UserQueryRequest::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_nickname();
    _impl_.user_.nickname_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserQueryRequest.nickname)
}

// string email = 2;
inline bool UserQueryRequest::has_email() const {
  return user_case() == kEmail;
}
inline void UserQueryRequest::set_has_email() {
  _impl_._oneof_case_[0] = kEmail;
}
inline void UserQueryRequest::clear_email() {
  if (user_case() == kEmail) {
    _impl_.user_.email_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserQueryRequest::email() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserQueryRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQueryRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  _impl_.user_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserQueryRequest.email)
}
inline std::string* UserQueryRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserQueryRequest.email)
  return _s;
}
inline const std::string& UserQueryRequest::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.email_.Get();
}
inline void UserQueryRequest::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  _impl_.user_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserQueryRequest::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  return _impl_.user_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserQueryRequest::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserQueryRequest.email)
  if (user_case() != kEmail) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.email_.Release();
}
inline void UserQueryRequest::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_email();
    _impl_.user_.email_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserQueryRequest.email)
}

// string home = 9;
inline void UserQueryRequest::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& UserQueryRequest::home() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserQueryRequest.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQueryRequest::set_home(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserQueryRequest.home)
}
inline std::string* UserQueryRequest::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserQueryRequest.home)
  return _s;
}
inline const std::string& UserQueryRequest::_internal_home() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.home_.Get();
}
inline void UserQueryRequest::_internal_set_home(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* UserQueryRequest::_internal_mutable_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* UserQueryRequest::release_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserQueryRequest.home)
  return _impl_.home_.Release();
}
inline void UserQueryRequest::set_allocated_home(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserQueryRequest.home)
}

inline bool UserQueryRequest::has_user() const {
  return user_case() != USER_NOT_SET;
}
inline void UserQueryRequest::clear_has_user() {
  _impl_._oneof_case_[0] = USER_NOT_SET;
}
inline UserQueryRequest::UserCase UserQueryRequest::user_case() const {
  return UserQueryRequest::UserCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserSignInResponse

// string token = 1;
inline void UserSignInResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& UserSignInResponse::token() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.token)
}
inline std::string* UserSignInResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInResponse.token)
  return _s;
}
inline const std::string& UserSignInResponse::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void UserSignInResponse::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInResponse::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInResponse::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInResponse.token)
  return _impl_.token_.Release();
}
inline void UserSignInResponse::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInResponse.token)
}

// .palm.auth.v1.UserIndexResponse.Item user = 2;
inline bool UserSignInResponse::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void UserSignInResponse::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::auth::v1::UserIndexResponse_Item& UserSignInResponse::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::auth::v1::UserIndexResponse_Item* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::auth::v1::UserIndexResponse_Item&>(::palm::auth::v1::_UserIndexResponse_Item_default_instance_);
}
inline const ::palm::auth::v1::UserIndexResponse_Item& UserSignInResponse::user() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.user)
  return _internal_user();
}
inline void UserSignInResponse::unsafe_arena_set_allocated_user(::palm::auth::v1::UserIndexResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::palm::auth::v1::UserIndexResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserSignInResponse.user)
}
inline ::palm::auth::v1::UserIndexResponse_Item* UserSignInResponse::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::auth::v1::UserIndexResponse_Item* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::auth::v1::UserIndexResponse_Item* UserSignInResponse::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInResponse.user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::auth::v1::UserIndexResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::auth::v1::UserIndexResponse_Item* UserSignInResponse::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::auth::v1::UserIndexResponse_Item>(GetArenaForAllocation());
    _impl_.user_ = reinterpret_cast<::palm::auth::v1::UserIndexResponse_Item*>(p);
  }
  return _impl_.user_;
}
inline ::palm::auth::v1::UserIndexResponse_Item* UserSignInResponse::mutable_user() {
  ::palm::auth::v1::UserIndexResponse_Item* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInResponse.user)
  return _msg;
}
inline void UserSignInResponse::set_allocated_user(::palm::auth::v1::UserIndexResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::auth::v1::UserIndexResponse_Item*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::palm::auth::v1::UserIndexResponse_Item*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_ = reinterpret_cast<::palm::auth::v1::UserIndexResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInResponse.user)
}

// string provider_type = 9;
inline void UserSignInResponse::clear_provider_type() {
  _impl_.provider_type_.ClearToEmpty();
}
inline const std::string& UserSignInResponse::provider_type() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.provider_type)
  return _internal_provider_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInResponse::set_provider_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.provider_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.provider_type)
}
inline std::string* UserSignInResponse::mutable_provider_type() {
  std::string* _s = _internal_mutable_provider_type();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInResponse.provider_type)
  return _s;
}
inline const std::string& UserSignInResponse::_internal_provider_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.provider_type_.Get();
}
inline void UserSignInResponse::_internal_set_provider_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.provider_type_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInResponse::_internal_mutable_provider_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.provider_type_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInResponse::release_provider_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignInResponse.provider_type)
  return _impl_.provider_type_.Release();
}
inline void UserSignInResponse::set_allocated_provider_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.provider_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_type_.IsDefault()) {
          _impl_.provider_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignInResponse.provider_type)
}

// repeated string roles = 11;
inline int UserSignInResponse::_internal_roles_size() const {
  return _internal_roles().size();
}
inline int UserSignInResponse::roles_size() const {
  return _internal_roles_size();
}
inline void UserSignInResponse::clear_roles() {
  _internal_mutable_roles()->Clear();
}
inline std::string* UserSignInResponse::add_roles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_roles()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.auth.v1.UserSignInResponse.roles)
  return _s;
}
inline const std::string& UserSignInResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.roles)
  return _internal_roles().Get(index);
}
inline std::string* UserSignInResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInResponse.roles)
  return _internal_mutable_roles()->Mutable(index);
}
inline void UserSignInResponse::set_roles(int index, const std::string& value) {
  _internal_mutable_roles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, std::string&& value) {
  _internal_mutable_roles()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_roles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_roles()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, absl::string_view value) {
  _internal_mutable_roles()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_roles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_roles()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_roles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_roles()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.auth.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_roles()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.auth.v1.UserSignInResponse.roles)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserSignInResponse::roles() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.UserSignInResponse.roles)
  return _internal_roles();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* UserSignInResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.UserSignInResponse.roles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_roles();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserSignInResponse::_internal_roles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roles_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserSignInResponse::_internal_mutable_roles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.roles_;
}

// repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 12;
inline int UserSignInResponse::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int UserSignInResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserSignInResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignInResponse.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UserSignInResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.UserSignInResponse.permissions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_permissions();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UserSignInResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.permissions)
    return _internal_permissions().Get(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserSignInResponse::add_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.UserSignInResponse.permissions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UserSignInResponse::permissions() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.UserSignInResponse.permissions)
  return _internal_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UserSignInResponse::_internal_permissions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UserSignInResponse::_internal_mutable_permissions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.permissions_;
}

// bool has_google = 21;
inline void UserSignInResponse::clear_has_google() {
  _impl_.has_google_ = false;
}
inline bool UserSignInResponse::has_google() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.has_google)
  return _internal_has_google();
}
inline void UserSignInResponse::set_has_google(bool value) {
  _internal_set_has_google(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.has_google)
}
inline bool UserSignInResponse::_internal_has_google() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_google_;
}
inline void UserSignInResponse::_internal_set_has_google(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.has_google_ = value;
}

// bool has_wechat_mini_program = 22;
inline void UserSignInResponse::clear_has_wechat_mini_program() {
  _impl_.has_wechat_mini_program_ = false;
}
inline bool UserSignInResponse::has_wechat_mini_program() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.has_wechat_mini_program)
  return _internal_has_wechat_mini_program();
}
inline void UserSignInResponse::set_has_wechat_mini_program(bool value) {
  _internal_set_has_wechat_mini_program(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.has_wechat_mini_program)
}
inline bool UserSignInResponse::_internal_has_wechat_mini_program() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_wechat_mini_program_;
}
inline void UserSignInResponse::_internal_set_has_wechat_mini_program(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.has_wechat_mini_program_ = value;
}

// bool has_wechat_oauth2 = 23;
inline void UserSignInResponse::clear_has_wechat_oauth2() {
  _impl_.has_wechat_oauth2_ = false;
}
inline bool UserSignInResponse::has_wechat_oauth2() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignInResponse.has_wechat_oauth2)
  return _internal_has_wechat_oauth2();
}
inline void UserSignInResponse::set_has_wechat_oauth2(bool value) {
  _internal_set_has_wechat_oauth2(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignInResponse.has_wechat_oauth2)
}
inline bool UserSignInResponse::_internal_has_wechat_oauth2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_wechat_oauth2_;
}
inline void UserSignInResponse::_internal_set_has_wechat_oauth2(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.has_wechat_oauth2_ = value;
}

// -------------------------------------------------------------------

// UserSignUpRequest

// string real_name = 1;
inline void UserSignUpRequest::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::real_name() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.real_name)
}
inline std::string* UserSignUpRequest::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.real_name)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_real_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_name_.Get();
}
inline void UserSignUpRequest::_internal_set_real_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.real_name)
  return _impl_.real_name_.Release();
}
inline void UserSignUpRequest::set_allocated_real_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.real_name)
}

// string nickname = 2;
inline void UserSignUpRequest::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.nickname)
}
inline std::string* UserSignUpRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.nickname)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void UserSignUpRequest::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.nickname)
  return _impl_.nickname_.Release();
}
inline void UserSignUpRequest::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.nickname)
}

// string email = 3;
inline void UserSignUpRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::email() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.email)
}
inline std::string* UserSignUpRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.email)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void UserSignUpRequest::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.email)
  return _impl_.email_.Release();
}
inline void UserSignUpRequest::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.email)
}

// string password = 4;
inline void UserSignUpRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.password)
}
inline std::string* UserSignUpRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.password)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void UserSignUpRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.password)
  return _impl_.password_.Release();
}
inline void UserSignUpRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.password)
}

// string lang = 11;
inline void UserSignUpRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.lang)
}
inline std::string* UserSignUpRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.lang)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void UserSignUpRequest::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.lang)
  return _impl_.lang_.Release();
}
inline void UserSignUpRequest::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.lang)
}

// string timezone = 12;
inline void UserSignUpRequest::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::timezone() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.timezone)
}
inline std::string* UserSignUpRequest::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.timezone)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_timezone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timezone_.Get();
}
inline void UserSignUpRequest::_internal_set_timezone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.timezone)
  return _impl_.timezone_.Release();
}
inline void UserSignUpRequest::set_allocated_timezone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.timezone)
}

// string home = 21;
inline void UserSignUpRequest::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::home() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSignUpRequest.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_home(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSignUpRequest.home)
}
inline std::string* UserSignUpRequest::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSignUpRequest.home)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_home() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.home_.Get();
}
inline void UserSignUpRequest::_internal_set_home(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSignUpRequest.home)
  return _impl_.home_.Release();
}
inline void UserSignUpRequest::set_allocated_home(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSignUpRequest.home)
}

// -------------------------------------------------------------------

// UserTokenRequest

// string payload = 1;
inline void UserTokenRequest::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& UserTokenRequest::payload() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserTokenRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserTokenRequest::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserTokenRequest.payload)
}
inline std::string* UserTokenRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserTokenRequest.payload)
  return _s;
}
inline const std::string& UserTokenRequest::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void UserTokenRequest::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* UserTokenRequest::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* UserTokenRequest::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserTokenRequest.payload)
  return _impl_.payload_.Release();
}
inline void UserTokenRequest::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserTokenRequest.payload)
}

// -------------------------------------------------------------------

// UserResetPasswordRequest

// string token = 1;
inline void UserResetPasswordRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& UserResetPasswordRequest::token() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserResetPasswordRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserResetPasswordRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserResetPasswordRequest.token)
}
inline std::string* UserResetPasswordRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserResetPasswordRequest.token)
  return _s;
}
inline const std::string& UserResetPasswordRequest::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void UserResetPasswordRequest::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserResetPasswordRequest.token)
  return _impl_.token_.Release();
}
inline void UserResetPasswordRequest::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserResetPasswordRequest.token)
}

// string password = 2;
inline void UserResetPasswordRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserResetPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserResetPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserResetPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserResetPasswordRequest.password)
}
inline std::string* UserResetPasswordRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserResetPasswordRequest.password)
  return _s;
}
inline const std::string& UserResetPasswordRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void UserResetPasswordRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserResetPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void UserResetPasswordRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserResetPasswordRequest.password)
}

// -------------------------------------------------------------------

// UserSetPasswordRequest

// int32 user = 1;
inline void UserSetPasswordRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t UserSetPasswordRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetPasswordRequest.user)
  return _internal_user();
}
inline void UserSetPasswordRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetPasswordRequest.user)
}
inline ::int32_t UserSetPasswordRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_;
}
inline void UserSetPasswordRequest::_internal_set_user(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_ = value;
}

// string password = 2;
inline void UserSetPasswordRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserSetPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetPasswordRequest.password)
}
inline std::string* UserSetPasswordRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetPasswordRequest.password)
  return _s;
}
inline const std::string& UserSetPasswordRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void UserSetPasswordRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetPasswordRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetPasswordRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void UserSetPasswordRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetPasswordRequest.password)
}

// -------------------------------------------------------------------

// UserSetProfileRequest

// string real_name = 1;
inline void UserSetProfileRequest::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::real_name() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetProfileRequest.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetProfileRequest.real_name)
}
inline std::string* UserSetProfileRequest::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetProfileRequest.real_name)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_real_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_name_.Get();
}
inline void UserSetProfileRequest::_internal_set_real_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetProfileRequest.real_name)
  return _impl_.real_name_.Release();
}
inline void UserSetProfileRequest::set_allocated_real_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetProfileRequest.real_name)
}

// string avatar = 2;
inline void UserSetProfileRequest::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::avatar() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetProfileRequest.avatar)
  return _internal_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_avatar(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetProfileRequest.avatar)
}
inline std::string* UserSetProfileRequest::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetProfileRequest.avatar)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_avatar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_.Get();
}
inline void UserSetProfileRequest::_internal_set_avatar(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_avatar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_avatar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetProfileRequest.avatar)
  return _impl_.avatar_.Release();
}
inline void UserSetProfileRequest::set_allocated_avatar(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_.IsDefault()) {
          _impl_.avatar_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetProfileRequest.avatar)
}

// string timezone = 8;
inline void UserSetProfileRequest::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::timezone() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetProfileRequest.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetProfileRequest.timezone)
}
inline std::string* UserSetProfileRequest::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetProfileRequest.timezone)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_timezone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timezone_.Get();
}
inline void UserSetProfileRequest::_internal_set_timezone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetProfileRequest.timezone)
  return _impl_.timezone_.Release();
}
inline void UserSetProfileRequest::set_allocated_timezone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetProfileRequest.timezone)
}

// string lang = 9;
inline void UserSetProfileRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetProfileRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetProfileRequest.lang)
}
inline std::string* UserSetProfileRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetProfileRequest.lang)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void UserSetProfileRequest::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetProfileRequest.lang)
  return _impl_.lang_.Release();
}
inline void UserSetProfileRequest::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetProfileRequest.lang)
}

// string wechat = 11;
inline void UserSetProfileRequest::clear_wechat() {
  _impl_.wechat_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::wechat() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetProfileRequest.wechat)
  return _internal_wechat();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_wechat(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wechat_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetProfileRequest.wechat)
}
inline std::string* UserSetProfileRequest::mutable_wechat() {
  std::string* _s = _internal_mutable_wechat();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetProfileRequest.wechat)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_wechat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wechat_.Get();
}
inline void UserSetProfileRequest::_internal_set_wechat(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wechat_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_wechat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.wechat_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_wechat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetProfileRequest.wechat)
  return _impl_.wechat_.Release();
}
inline void UserSetProfileRequest::set_allocated_wechat(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wechat_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wechat_.IsDefault()) {
          _impl_.wechat_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetProfileRequest.wechat)
}

// string phone = 12;
inline void UserSetProfileRequest::clear_phone() {
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::phone() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserSetProfileRequest.phone)
  return _internal_phone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_phone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserSetProfileRequest.phone)
}
inline std::string* UserSetProfileRequest::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserSetProfileRequest.phone)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_phone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phone_.Get();
}
inline void UserSetProfileRequest::_internal_set_phone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.phone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserSetProfileRequest.phone)
  return _impl_.phone_.Release();
}
inline void UserSetProfileRequest::set_allocated_phone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_.IsDefault()) {
          _impl_.phone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserSetProfileRequest.phone)
}

// -------------------------------------------------------------------

// UserGetProfileResponse

// string real_name = 1;
inline void UserGetProfileResponse::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::real_name() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.real_name)
}
inline std::string* UserGetProfileResponse::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.real_name)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_real_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_name_.Get();
}
inline void UserGetProfileResponse::_internal_set_real_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.real_name)
  return _impl_.real_name_.Release();
}
inline void UserGetProfileResponse::set_allocated_real_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.real_name)
}

// string avatar = 2;
inline void UserGetProfileResponse::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::avatar() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.avatar)
  return _internal_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_avatar(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.avatar)
}
inline std::string* UserGetProfileResponse::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.avatar)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_avatar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_.Get();
}
inline void UserGetProfileResponse::_internal_set_avatar(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_avatar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_avatar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.avatar)
  return _impl_.avatar_.Release();
}
inline void UserGetProfileResponse::set_allocated_avatar(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_.IsDefault()) {
          _impl_.avatar_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.avatar)
}

// string nickname = 3;
inline void UserGetProfileResponse::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.nickname)
}
inline std::string* UserGetProfileResponse::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.nickname)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void UserGetProfileResponse::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.nickname)
  return _impl_.nickname_.Release();
}
inline void UserGetProfileResponse::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.nickname)
}

// string email = 4;
inline void UserGetProfileResponse::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::email() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.email)
}
inline std::string* UserGetProfileResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.email)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void UserGetProfileResponse::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.email)
  return _impl_.email_.Release();
}
inline void UserGetProfileResponse::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.email)
}

// string timezone = 8;
inline void UserGetProfileResponse::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::timezone() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.timezone)
}
inline std::string* UserGetProfileResponse::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.timezone)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_timezone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timezone_.Get();
}
inline void UserGetProfileResponse::_internal_set_timezone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.timezone)
  return _impl_.timezone_.Release();
}
inline void UserGetProfileResponse::set_allocated_timezone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.timezone)
}

// string lang = 9;
inline void UserGetProfileResponse::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.lang)
}
inline std::string* UserGetProfileResponse::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.lang)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void UserGetProfileResponse::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.lang)
  return _impl_.lang_.Release();
}
inline void UserGetProfileResponse::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.lang)
}

// string wechat = 11;
inline void UserGetProfileResponse::clear_wechat() {
  _impl_.wechat_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::wechat() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.wechat)
  return _internal_wechat();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_wechat(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wechat_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.wechat)
}
inline std::string* UserGetProfileResponse::mutable_wechat() {
  std::string* _s = _internal_mutable_wechat();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.wechat)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_wechat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wechat_.Get();
}
inline void UserGetProfileResponse::_internal_set_wechat(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wechat_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_wechat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.wechat_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_wechat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.wechat)
  return _impl_.wechat_.Release();
}
inline void UserGetProfileResponse::set_allocated_wechat(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wechat_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wechat_.IsDefault()) {
          _impl_.wechat_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.wechat)
}

// string phone = 12;
inline void UserGetProfileResponse::clear_phone() {
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::phone() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserGetProfileResponse.phone)
  return _internal_phone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_phone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserGetProfileResponse.phone)
}
inline std::string* UserGetProfileResponse::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserGetProfileResponse.phone)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_phone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phone_.Get();
}
inline void UserGetProfileResponse::_internal_set_phone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.phone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_phone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserGetProfileResponse.phone)
  return _impl_.phone_.Release();
}
inline void UserGetProfileResponse::set_allocated_phone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_.IsDefault()) {
          _impl_.phone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserGetProfileResponse.phone)
}

// -------------------------------------------------------------------

// UserLogsResponse_Item

// int32 id = 1;
inline void UserLogsResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t UserLogsResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.id)
  return _internal_id();
}
inline void UserLogsResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserLogsResponse.Item.id)
}
inline ::int32_t UserLogsResponse_Item::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void UserLogsResponse_Item::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 user_id = 2;
inline void UserLogsResponse_Item::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t UserLogsResponse_Item::user_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.user_id)
  return _internal_user_id();
}
inline void UserLogsResponse_Item::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserLogsResponse.Item.user_id)
}
inline ::int32_t UserLogsResponse_Item::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void UserLogsResponse_Item::_internal_set_user_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string ip = 3;
inline void UserLogsResponse_Item::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& UserLogsResponse_Item::ip() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserLogsResponse_Item::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserLogsResponse.Item.ip)
}
inline std::string* UserLogsResponse_Item::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserLogsResponse.Item.ip)
  return _s;
}
inline const std::string& UserLogsResponse_Item::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void UserLogsResponse_Item::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserLogsResponse.Item.ip)
  return _impl_.ip_.Release();
}
inline void UserLogsResponse_Item::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserLogsResponse.Item.ip)
}

// .palm.auth.v1.UserLogsResponse.Item.Level level = 4;
inline void UserLogsResponse_Item::clear_level() {
  _impl_.level_ = 0;
}
inline ::palm::auth::v1::UserLogsResponse_Item_Level UserLogsResponse_Item::level() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.level)
  return _internal_level();
}
inline void UserLogsResponse_Item::set_level(::palm::auth::v1::UserLogsResponse_Item_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserLogsResponse.Item.level)
}
inline ::palm::auth::v1::UserLogsResponse_Item_Level UserLogsResponse_Item::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::auth::v1::UserLogsResponse_Item_Level>(_impl_.level_);
}
inline void UserLogsResponse_Item::_internal_set_level(::palm::auth::v1::UserLogsResponse_Item_Level value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// string message = 5;
inline void UserLogsResponse_Item::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UserLogsResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserLogsResponse_Item::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserLogsResponse.Item.message)
}
inline std::string* UserLogsResponse_Item::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserLogsResponse.Item.message)
  return _s;
}
inline const std::string& UserLogsResponse_Item::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void UserLogsResponse_Item::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserLogsResponse.Item.message)
  return _impl_.message_.Release();
}
inline void UserLogsResponse_Item::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserLogsResponse.Item.message)
}

// .palm.rbac.v1.ResourcesResponse.Item resource = 6;
inline bool UserLogsResponse_Item::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& UserLogsResponse_Item::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::rbac::v1::ResourcesResponse_Item* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::ResourcesResponse_Item&>(::palm::rbac::v1::_ResourcesResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& UserLogsResponse_Item::resource() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.resource)
  return _internal_resource();
}
inline void UserLogsResponse_Item::unsafe_arena_set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::ResourcesResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserLogsResponse.Item.resource)
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserLogsResponse.Item.resource)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::ResourcesResponse_Item>(GetArenaForAllocation());
    _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::ResourcesResponse_Item*>(p);
  }
  return _impl_.resource_;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::mutable_resource() {
  ::palm::rbac::v1::ResourcesResponse_Item* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserLogsResponse.Item.resource)
  return _msg;
}
inline void UserLogsResponse_Item::set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.resource_ = reinterpret_cast<::palm::rbac::v1::ResourcesResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserLogsResponse.Item.resource)
}

// .google.protobuf.Timestamp created_at = 11;
inline bool UserLogsResponse_Item::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserLogsResponse_Item::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserLogsResponse_Item::created_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.Item.created_at)
  return _internal_created_at();
}
inline void UserLogsResponse_Item::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserLogsResponse.Item.created_at)
}
inline ::google::protobuf::Timestamp* UserLogsResponse_Item::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserLogsResponse_Item::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserLogsResponse.Item.created_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserLogsResponse_Item::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* UserLogsResponse_Item::mutable_created_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserLogsResponse.Item.created_at)
  return _msg;
}
inline void UserLogsResponse_Item::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserLogsResponse.Item.created_at)
}

// -------------------------------------------------------------------

// UserLogsResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool UserLogsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::palm::nut::v1::Pagination& UserLogsResponse::_internal_pagination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& UserLogsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.pagination)
  return _internal_pagination();
}
inline void UserLogsResponse::unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserLogsResponse.pagination)
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::unsafe_arena_release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserLogsResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::_internal_mutable_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(p);
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserLogsResponse.pagination)
  return _msg;
}
inline void UserLogsResponse::set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserLogsResponse.pagination)
}

// repeated .palm.auth.v1.UserLogsResponse.Item items = 11;
inline int UserLogsResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int UserLogsResponse::items_size() const {
  return _internal_items_size();
}
inline void UserLogsResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::UserLogsResponse_Item* UserLogsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserLogsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserLogsResponse_Item >*
UserLogsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.UserLogsResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::UserLogsResponse_Item& UserLogsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserLogsResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::UserLogsResponse_Item* UserLogsResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::UserLogsResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.UserLogsResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserLogsResponse_Item >&
UserLogsResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.UserLogsResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserLogsResponse_Item>&
UserLogsResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserLogsResponse_Item>*
UserLogsResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// UserChangePasswordRequest

// string current_password = 1;
inline void UserChangePasswordRequest::clear_current_password() {
  _impl_.current_password_.ClearToEmpty();
}
inline const std::string& UserChangePasswordRequest::current_password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserChangePasswordRequest.current_password)
  return _internal_current_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserChangePasswordRequest::set_current_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserChangePasswordRequest.current_password)
}
inline std::string* UserChangePasswordRequest::mutable_current_password() {
  std::string* _s = _internal_mutable_current_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserChangePasswordRequest.current_password)
  return _s;
}
inline const std::string& UserChangePasswordRequest::_internal_current_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_password_.Get();
}
inline void UserChangePasswordRequest::_internal_set_current_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::_internal_mutable_current_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.current_password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::release_current_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserChangePasswordRequest.current_password)
  return _impl_.current_password_.Release();
}
inline void UserChangePasswordRequest::set_allocated_current_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_password_.IsDefault()) {
          _impl_.current_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserChangePasswordRequest.current_password)
}

// string new_password = 2;
inline void UserChangePasswordRequest::clear_new_password() {
  _impl_.new_password_.ClearToEmpty();
}
inline const std::string& UserChangePasswordRequest::new_password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserChangePasswordRequest.new_password)
  return _internal_new_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserChangePasswordRequest::set_new_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.new_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserChangePasswordRequest.new_password)
}
inline std::string* UserChangePasswordRequest::mutable_new_password() {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserChangePasswordRequest.new_password)
  return _s;
}
inline const std::string& UserChangePasswordRequest::_internal_new_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_password_.Get();
}
inline void UserChangePasswordRequest::_internal_set_new_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.new_password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::_internal_mutable_new_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.new_password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::release_new_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserChangePasswordRequest.new_password)
  return _impl_.new_password_.Release();
}
inline void UserChangePasswordRequest::set_allocated_new_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_password_.IsDefault()) {
          _impl_.new_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserChangePasswordRequest.new_password)
}

// -------------------------------------------------------------------

// UserIndexResponse_Item

// int32 id = 1;
inline void UserIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t UserIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.id)
  return _internal_id();
}
inline void UserIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.id)
}
inline ::int32_t UserIndexResponse_Item::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void UserIndexResponse_Item::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string email = 2;
inline void UserIndexResponse_Item::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::email() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.email)
}
inline std::string* UserIndexResponse_Item::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.email)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void UserIndexResponse_Item::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.email)
  return _impl_.email_.Release();
}
inline void UserIndexResponse_Item::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.email)
}

// string nickname = 3;
inline void UserIndexResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.nickname)
}
inline std::string* UserIndexResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.nickname)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void UserIndexResponse_Item::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.nickname)
  return _impl_.nickname_.Release();
}
inline void UserIndexResponse_Item::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.nickname)
}

// string real_name = 4;
inline void UserIndexResponse_Item::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::real_name() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.real_name)
}
inline std::string* UserIndexResponse_Item::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.real_name)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_real_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_name_.Get();
}
inline void UserIndexResponse_Item::_internal_set_real_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_real_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.real_name)
  return _impl_.real_name_.Release();
}
inline void UserIndexResponse_Item::set_allocated_real_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.real_name)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool UserIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::_internal_updated_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.Item.updated_at)
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::unsafe_arena_release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.updated_at)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::_internal_mutable_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::mutable_updated_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.updated_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.updated_at)
}

// optional .google.protobuf.Timestamp last_sign_in_at = 11;
inline bool UserIndexResponse_Item::has_last_sign_in_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_sign_in_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::_internal_last_sign_in_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_sign_in_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::last_sign_in_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.last_sign_in_at)
  return _internal_last_sign_in_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_last_sign_in_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_sign_in_at_);
  }
  _impl_.last_sign_in_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.Item.last_sign_in_at)
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::release_last_sign_in_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.last_sign_in_at_;
  _impl_.last_sign_in_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::unsafe_arena_release_last_sign_in_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.last_sign_in_at)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.last_sign_in_at_;
  _impl_.last_sign_in_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::_internal_mutable_last_sign_in_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.last_sign_in_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.last_sign_in_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_sign_in_at_;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::mutable_last_sign_in_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_sign_in_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.last_sign_in_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_last_sign_in_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_sign_in_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.last_sign_in_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.last_sign_in_at)
}

// optional string last_sign_in_ip = 12;
inline bool UserIndexResponse_Item::has_last_sign_in_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserIndexResponse_Item::clear_last_sign_in_ip() {
  _impl_.last_sign_in_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserIndexResponse_Item::last_sign_in_ip() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip)
  return _internal_last_sign_in_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_last_sign_in_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_sign_in_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip)
}
inline std::string* UserIndexResponse_Item::mutable_last_sign_in_ip() {
  std::string* _s = _internal_mutable_last_sign_in_ip();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_last_sign_in_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_sign_in_ip_.Get();
}
inline void UserIndexResponse_Item::_internal_set_last_sign_in_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_sign_in_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_last_sign_in_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.last_sign_in_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_last_sign_in_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.last_sign_in_ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserIndexResponse_Item::set_allocated_last_sign_in_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_sign_in_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_sign_in_ip_.IsDefault()) {
          _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip)
}

// optional .google.protobuf.Timestamp current_sign_in_at = 13;
inline bool UserIndexResponse_Item::has_current_sign_in_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_sign_in_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::_internal_current_sign_in_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.current_sign_in_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::current_sign_in_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.current_sign_in_at)
  return _internal_current_sign_in_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_current_sign_in_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_sign_in_at_);
  }
  _impl_.current_sign_in_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.Item.current_sign_in_at)
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::release_current_sign_in_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.current_sign_in_at_;
  _impl_.current_sign_in_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::unsafe_arena_release_current_sign_in_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.current_sign_in_at)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.current_sign_in_at_;
  _impl_.current_sign_in_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::_internal_mutable_current_sign_in_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.current_sign_in_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.current_sign_in_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.current_sign_in_at_;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::mutable_current_sign_in_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_current_sign_in_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.current_sign_in_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_current_sign_in_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_sign_in_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.current_sign_in_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.current_sign_in_at)
}

// optional string current_sign_in_ip = 14;
inline bool UserIndexResponse_Item::has_current_sign_in_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserIndexResponse_Item::clear_current_sign_in_ip() {
  _impl_.current_sign_in_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserIndexResponse_Item::current_sign_in_ip() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip)
  return _internal_current_sign_in_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_current_sign_in_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_sign_in_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip)
}
inline std::string* UserIndexResponse_Item::mutable_current_sign_in_ip() {
  std::string* _s = _internal_mutable_current_sign_in_ip();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_current_sign_in_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_sign_in_ip_.Get();
}
inline void UserIndexResponse_Item::_internal_set_current_sign_in_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_sign_in_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_current_sign_in_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.current_sign_in_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_current_sign_in_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.current_sign_in_ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserIndexResponse_Item::set_allocated_current_sign_in_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.current_sign_in_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_sign_in_ip_.IsDefault()) {
          _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip)
}

// int32 sign_in_count = 19;
inline void UserIndexResponse_Item::clear_sign_in_count() {
  _impl_.sign_in_count_ = 0;
}
inline ::int32_t UserIndexResponse_Item::sign_in_count() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.sign_in_count)
  return _internal_sign_in_count();
}
inline void UserIndexResponse_Item::set_sign_in_count(::int32_t value) {
  _internal_set_sign_in_count(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.sign_in_count)
}
inline ::int32_t UserIndexResponse_Item::_internal_sign_in_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sign_in_count_;
}
inline void UserIndexResponse_Item::_internal_set_sign_in_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sign_in_count_ = value;
}

// string lang = 21;
inline void UserIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.lang)
}
inline std::string* UserIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.lang)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void UserIndexResponse_Item::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void UserIndexResponse_Item::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.lang)
}

// string timezone = 22;
inline void UserIndexResponse_Item::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::timezone() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.timezone)
}
inline std::string* UserIndexResponse_Item::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.timezone)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_timezone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timezone_.Get();
}
inline void UserIndexResponse_Item::_internal_set_timezone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_timezone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.timezone)
  return _impl_.timezone_.Release();
}
inline void UserIndexResponse_Item::set_allocated_timezone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.timezone)
}

// string avatar = 23;
inline void UserIndexResponse_Item::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::avatar() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.avatar)
  return _internal_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_avatar(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.UserIndexResponse.Item.avatar)
}
inline std::string* UserIndexResponse_Item::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.avatar)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_avatar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_.Get();
}
inline void UserIndexResponse_Item::_internal_set_avatar(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_avatar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_avatar() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.avatar)
  return _impl_.avatar_.Release();
}
inline void UserIndexResponse_Item::set_allocated_avatar(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_.IsDefault()) {
          _impl_.avatar_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.avatar)
}

// optional .google.protobuf.Timestamp confirmed_at = 27;
inline bool UserIndexResponse_Item::has_confirmed_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confirmed_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::_internal_confirmed_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.confirmed_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::confirmed_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.confirmed_at)
  return _internal_confirmed_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_confirmed_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confirmed_at_);
  }
  _impl_.confirmed_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.Item.confirmed_at)
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::release_confirmed_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.confirmed_at_;
  _impl_.confirmed_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::unsafe_arena_release_confirmed_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.confirmed_at)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.confirmed_at_;
  _impl_.confirmed_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::_internal_mutable_confirmed_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.confirmed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.confirmed_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.confirmed_at_;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::mutable_confirmed_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_confirmed_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.confirmed_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_confirmed_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confirmed_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.confirmed_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.confirmed_at)
}

// optional .google.protobuf.Timestamp locked_at = 28;
inline bool UserIndexResponse_Item::has_locked_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.locked_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::_internal_locked_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.locked_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::locked_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.locked_at)
  return _internal_locked_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_locked_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.locked_at_);
  }
  _impl_.locked_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.Item.locked_at)
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::release_locked_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.locked_at_;
  _impl_.locked_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::unsafe_arena_release_locked_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.locked_at)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.locked_at_;
  _impl_.locked_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::_internal_mutable_locked_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.locked_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.locked_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.locked_at_;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::mutable_locked_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_locked_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.locked_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_locked_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.locked_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.locked_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.locked_at)
}

// optional .google.protobuf.Timestamp deleted_at = 29;
inline bool UserIndexResponse_Item::has_deleted_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deleted_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::_internal_deleted_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.deleted_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserIndexResponse_Item::deleted_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.Item.deleted_at)
  return _internal_deleted_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_deleted_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deleted_at_);
  }
  _impl_.deleted_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.Item.deleted_at)
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::release_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::unsafe_arena_release_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.Item.deleted_at)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::_internal_mutable_deleted_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.deleted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.deleted_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.deleted_at_;
}
inline ::google::protobuf::Timestamp* UserIndexResponse_Item::mutable_deleted_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_deleted_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.Item.deleted_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_deleted_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deleted_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.deleted_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.Item.deleted_at)
}

// -------------------------------------------------------------------

// UserIndexResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool UserIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::palm::nut::v1::Pagination& UserIndexResponse::_internal_pagination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& UserIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.pagination)
  return _internal_pagination();
}
inline void UserIndexResponse::unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.UserIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::unsafe_arena_release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.UserIndexResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::_internal_mutable_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(p);
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.pagination)
  return _msg;
}
inline void UserIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.UserIndexResponse.pagination)
}

// repeated .palm.auth.v1.UserIndexResponse.Item items = 11;
inline int UserIndexResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int UserIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void UserIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::UserIndexResponse_Item* UserIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.UserIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserIndexResponse_Item >*
UserIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.UserIndexResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::UserIndexResponse_Item& UserIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.UserIndexResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::UserIndexResponse_Item* UserIndexResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::UserIndexResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.UserIndexResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::UserIndexResponse_Item >&
UserIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.UserIndexResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserIndexResponse_Item>&
UserIndexResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::UserIndexResponse_Item>*
UserIndexResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SignInByGoogleRequest

// repeated string scopes = 1;
inline int SignInByGoogleRequest::_internal_scopes_size() const {
  return _internal_scopes().size();
}
inline int SignInByGoogleRequest::scopes_size() const {
  return _internal_scopes_size();
}
inline void SignInByGoogleRequest::clear_scopes() {
  _internal_mutable_scopes()->Clear();
}
inline std::string* SignInByGoogleRequest::add_scopes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_scopes()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.auth.v1.SignInByGoogleRequest.scopes)
  return _s;
}
inline const std::string& SignInByGoogleRequest::scopes(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByGoogleRequest.scopes)
  return _internal_scopes().Get(index);
}
inline std::string* SignInByGoogleRequest::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByGoogleRequest.scopes)
  return _internal_mutable_scopes()->Mutable(index);
}
inline void SignInByGoogleRequest::set_scopes(int index, const std::string& value) {
  _internal_mutable_scopes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, std::string&& value) {
  _internal_mutable_scopes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scopes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_scopes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, absl::string_view value) {
  _internal_mutable_scopes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scopes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scopes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scopes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scopes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scopes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.auth.v1.SignInByGoogleRequest.scopes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SignInByGoogleRequest::scopes() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.SignInByGoogleRequest.scopes)
  return _internal_scopes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* SignInByGoogleRequest::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.SignInByGoogleRequest.scopes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scopes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SignInByGoogleRequest::_internal_scopes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scopes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SignInByGoogleRequest::_internal_mutable_scopes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scopes_;
}

// string code = 2;
inline void SignInByGoogleRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByGoogleRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByGoogleRequest.code)
}
inline std::string* SignInByGoogleRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByGoogleRequest.code)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void SignInByGoogleRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByGoogleRequest.code)
  return _impl_.code_.Release();
}
inline void SignInByGoogleRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByGoogleRequest.code)
}

// string state = 3;
inline void SignInByGoogleRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByGoogleRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByGoogleRequest.state)
}
inline std::string* SignInByGoogleRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByGoogleRequest.state)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void SignInByGoogleRequest::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByGoogleRequest.state)
  return _impl_.state_.Release();
}
inline void SignInByGoogleRequest::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByGoogleRequest.state)
}

// string redirect_uri = 4;
inline void SignInByGoogleRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByGoogleRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByGoogleRequest.redirect_uri)
}
inline std::string* SignInByGoogleRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByGoogleRequest.redirect_uri)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_redirect_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redirect_uri_.Get();
}
inline void SignInByGoogleRequest::_internal_set_redirect_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_redirect_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_redirect_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByGoogleRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void SignInByGoogleRequest::set_allocated_redirect_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByGoogleRequest.redirect_uri)
}

// string nonce = 9;
inline void SignInByGoogleRequest::clear_nonce() {
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::nonce() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByGoogleRequest.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByGoogleRequest.nonce)
}
inline std::string* SignInByGoogleRequest::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByGoogleRequest.nonce)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_nonce() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nonce_.Get();
}
inline void SignInByGoogleRequest::_internal_set_nonce(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nonce_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_nonce() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nonce_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_nonce() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByGoogleRequest.nonce)
  return _impl_.nonce_.Release();
}
inline void SignInByGoogleRequest::set_allocated_nonce(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nonce_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByGoogleRequest.nonce)
}

// .google.protobuf.Duration ttl = 11;
inline bool SignInByGoogleRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SignInByGoogleRequest::_internal_ttl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SignInByGoogleRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByGoogleRequest.ttl)
  return _internal_ttl();
}
inline void SignInByGoogleRequest::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.SignInByGoogleRequest.ttl)
}
inline ::google::protobuf::Duration* SignInByGoogleRequest::release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* SignInByGoogleRequest::unsafe_arena_release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByGoogleRequest.ttl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SignInByGoogleRequest::_internal_mutable_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* SignInByGoogleRequest::mutable_ttl() {
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByGoogleRequest.ttl)
  return _msg;
}
inline void SignInByGoogleRequest::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByGoogleRequest.ttl)
}

// -------------------------------------------------------------------

// GoogleSignInUrlRequest

// string redirect_uri = 1;
inline void GoogleSignInUrlRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& GoogleSignInUrlRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.GoogleSignInUrlRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleSignInUrlRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.GoogleSignInUrlRequest.redirect_uri)
}
inline std::string* GoogleSignInUrlRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.GoogleSignInUrlRequest.redirect_uri)
  return _s;
}
inline const std::string& GoogleSignInUrlRequest::_internal_redirect_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redirect_uri_.Get();
}
inline void GoogleSignInUrlRequest::_internal_set_redirect_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlRequest::_internal_mutable_redirect_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlRequest::release_redirect_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.GoogleSignInUrlRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void GoogleSignInUrlRequest::set_allocated_redirect_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.GoogleSignInUrlRequest.redirect_uri)
}

// .palm.auth.v1.Oauth2State state = 2;
inline bool GoogleSignInUrlRequest::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline void GoogleSignInUrlRequest::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::auth::v1::Oauth2State& GoogleSignInUrlRequest::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::auth::v1::Oauth2State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::auth::v1::Oauth2State&>(::palm::auth::v1::_Oauth2State_default_instance_);
}
inline const ::palm::auth::v1::Oauth2State& GoogleSignInUrlRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.GoogleSignInUrlRequest.state)
  return _internal_state();
}
inline void GoogleSignInUrlRequest::unsafe_arena_set_allocated_state(::palm::auth::v1::Oauth2State* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::palm::auth::v1::Oauth2State*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.GoogleSignInUrlRequest.state)
}
inline ::palm::auth::v1::Oauth2State* GoogleSignInUrlRequest::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::auth::v1::Oauth2State* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::auth::v1::Oauth2State* GoogleSignInUrlRequest::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.GoogleSignInUrlRequest.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::auth::v1::Oauth2State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::palm::auth::v1::Oauth2State* GoogleSignInUrlRequest::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::auth::v1::Oauth2State>(GetArenaForAllocation());
    _impl_.state_ = reinterpret_cast<::palm::auth::v1::Oauth2State*>(p);
  }
  return _impl_.state_;
}
inline ::palm::auth::v1::Oauth2State* GoogleSignInUrlRequest::mutable_state() {
  ::palm::auth::v1::Oauth2State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.GoogleSignInUrlRequest.state)
  return _msg;
}
inline void GoogleSignInUrlRequest::set_allocated_state(::palm::auth::v1::Oauth2State* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::auth::v1::Oauth2State*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::palm::auth::v1::Oauth2State*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::palm::auth::v1::Oauth2State*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.GoogleSignInUrlRequest.state)
}

// -------------------------------------------------------------------

// GoogleSignInUrlResponse

// string url = 1;
inline void GoogleSignInUrlResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& GoogleSignInUrlResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.GoogleSignInUrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleSignInUrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.GoogleSignInUrlResponse.url)
}
inline std::string* GoogleSignInUrlResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.GoogleSignInUrlResponse.url)
  return _s;
}
inline const std::string& GoogleSignInUrlResponse::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void GoogleSignInUrlResponse::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.GoogleSignInUrlResponse.url)
  return _impl_.url_.Release();
}
inline void GoogleSignInUrlResponse::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.GoogleSignInUrlResponse.url)
}

// string nonce = 2;
inline void GoogleSignInUrlResponse::clear_nonce() {
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& GoogleSignInUrlResponse::nonce() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.GoogleSignInUrlResponse.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleSignInUrlResponse::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.GoogleSignInUrlResponse.nonce)
}
inline std::string* GoogleSignInUrlResponse::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.GoogleSignInUrlResponse.nonce)
  return _s;
}
inline const std::string& GoogleSignInUrlResponse::_internal_nonce() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nonce_.Get();
}
inline void GoogleSignInUrlResponse::_internal_set_nonce(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nonce_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::_internal_mutable_nonce() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nonce_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::release_nonce() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.GoogleSignInUrlResponse.nonce)
  return _impl_.nonce_.Release();
}
inline void GoogleSignInUrlResponse::set_allocated_nonce(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nonce_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.GoogleSignInUrlResponse.nonce)
}

// -------------------------------------------------------------------

// WechatUserBindByIdRequest

// int32 user_id = 1;
inline void WechatUserBindByIdRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t WechatUserBindByIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserBindByIdRequest.user_id)
  return _internal_user_id();
}
inline void WechatUserBindByIdRequest::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserBindByIdRequest.user_id)
}
inline ::int32_t WechatUserBindByIdRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void WechatUserBindByIdRequest::_internal_set_user_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// int32 wechat_user_id = 2;
inline void WechatUserBindByIdRequest::clear_wechat_user_id() {
  _impl_.wechat_user_id_ = 0;
}
inline ::int32_t WechatUserBindByIdRequest::wechat_user_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserBindByIdRequest.wechat_user_id)
  return _internal_wechat_user_id();
}
inline void WechatUserBindByIdRequest::set_wechat_user_id(::int32_t value) {
  _internal_set_wechat_user_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserBindByIdRequest.wechat_user_id)
}
inline ::int32_t WechatUserBindByIdRequest::_internal_wechat_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wechat_user_id_;
}
inline void WechatUserBindByIdRequest::_internal_set_wechat_user_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wechat_user_id_ = value;
}

// -------------------------------------------------------------------

// WechatUserBindByAccountRequest

// string nickname = 1;
inline void WechatUserBindByAccountRequest::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& WechatUserBindByAccountRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserBindByAccountRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserBindByAccountRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserBindByAccountRequest.nickname)
}
inline std::string* WechatUserBindByAccountRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatUserBindByAccountRequest.nickname)
  return _s;
}
inline const std::string& WechatUserBindByAccountRequest::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void WechatUserBindByAccountRequest::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatUserBindByAccountRequest.nickname)
  return _impl_.nickname_.Release();
}
inline void WechatUserBindByAccountRequest::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatUserBindByAccountRequest.nickname)
}

// string password = 2;
inline void WechatUserBindByAccountRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& WechatUserBindByAccountRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserBindByAccountRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserBindByAccountRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserBindByAccountRequest.password)
}
inline std::string* WechatUserBindByAccountRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatUserBindByAccountRequest.password)
  return _s;
}
inline const std::string& WechatUserBindByAccountRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void WechatUserBindByAccountRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatUserBindByAccountRequest.password)
  return _impl_.password_.Release();
}
inline void WechatUserBindByAccountRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatUserBindByAccountRequest.password)
}

// -------------------------------------------------------------------

// WechatUserQueryByOpenIdRequest

// string app_id = 1;
inline void WechatUserQueryByOpenIdRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatUserQueryByOpenIdRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserQueryByOpenIdRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id)
}
inline std::string* WechatUserQueryByOpenIdRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id)
  return _s;
}
inline const std::string& WechatUserQueryByOpenIdRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void WechatUserQueryByOpenIdRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatUserQueryByOpenIdRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id)
}

// string open_id = 2;
inline void WechatUserQueryByOpenIdRequest::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatUserQueryByOpenIdRequest::open_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserQueryByOpenIdRequest::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id)
}
inline std::string* WechatUserQueryByOpenIdRequest::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id)
  return _s;
}
inline const std::string& WechatUserQueryByOpenIdRequest::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void WechatUserQueryByOpenIdRequest::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatUserQueryByOpenIdRequest::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id)
}

// -------------------------------------------------------------------

// WechatUserQueryByUnionIdRequest

// string union_id = 1;
inline void WechatUserQueryByUnionIdRequest::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatUserQueryByUnionIdRequest::union_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserQueryByUnionIdRequest::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id)
}
inline std::string* WechatUserQueryByUnionIdRequest::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id)
  return _s;
}
inline const std::string& WechatUserQueryByUnionIdRequest::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void WechatUserQueryByUnionIdRequest::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserQueryByUnionIdRequest::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserQueryByUnionIdRequest::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatUserQueryByUnionIdRequest::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id)
}

// -------------------------------------------------------------------

// WechatAllMiniProgramUserResponse_Item

// int32 id = 1;
inline void WechatAllMiniProgramUserResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.id)
  return _internal_id();
}
inline void WechatAllMiniProgramUserResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.id)
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 user_id = 2;
inline void WechatAllMiniProgramUserResponse_Item::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::user_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.user_id)
  return _internal_user_id();
}
inline void WechatAllMiniProgramUserResponse_Item::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.user_id)
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_user_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string union_id = 3;
inline void WechatAllMiniProgramUserResponse_Item::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::union_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id)
}

// string app_id = 4;
inline void WechatAllMiniProgramUserResponse_Item::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::app_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id)
}

// string open_id = 5;
inline void WechatAllMiniProgramUserResponse_Item::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::open_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id)
}

// optional string nickname = 11;
inline bool WechatAllMiniProgramUserResponse_Item::has_nickname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatAllMiniProgramUserResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.nickname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname)
}

// optional string avatar_url = 12;
inline bool WechatAllMiniProgramUserResponse_Item::has_avatar_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WechatAllMiniProgramUserResponse_Item::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::avatar_url() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
  return _internal_avatar_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_avatar_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avatar_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_avatar_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_url_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_avatar_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_avatar_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.avatar_url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_avatar_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.avatar_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_avatar_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.avatar_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_url_.IsDefault()) {
          _impl_.avatar_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
}

// -------------------------------------------------------------------

// WechatAllMiniProgramUserResponse

// repeated .palm.auth.v1.WechatAllMiniProgramUserResponse.Item items = 1;
inline int WechatAllMiniProgramUserResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int WechatAllMiniProgramUserResponse::items_size() const {
  return _internal_items_size();
}
inline void WechatAllMiniProgramUserResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* WechatAllMiniProgramUserResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllMiniProgramUserResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item >*
WechatAllMiniProgramUserResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.WechatAllMiniProgramUserResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item& WechatAllMiniProgramUserResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllMiniProgramUserResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* WechatAllMiniProgramUserResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.WechatAllMiniProgramUserResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item >&
WechatAllMiniProgramUserResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.WechatAllMiniProgramUserResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>&
WechatAllMiniProgramUserResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>*
WechatAllMiniProgramUserResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// WechatAllOauth2UserResponse_Item

// int32 id = 1;
inline void WechatAllOauth2UserResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t WechatAllOauth2UserResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.id)
  return _internal_id();
}
inline void WechatAllOauth2UserResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.id)
}
inline ::int32_t WechatAllOauth2UserResponse_Item::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 user_id = 2;
inline void WechatAllOauth2UserResponse_Item::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t WechatAllOauth2UserResponse_Item::user_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.user_id)
  return _internal_user_id();
}
inline void WechatAllOauth2UserResponse_Item::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.user_id)
}
inline ::int32_t WechatAllOauth2UserResponse_Item::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_user_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string union_id = 3;
inline void WechatAllOauth2UserResponse_Item::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::union_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id)
}

// string app_id = 4;
inline void WechatAllOauth2UserResponse_Item::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::app_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id)
}

// string open_id = 5;
inline void WechatAllOauth2UserResponse_Item::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::open_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id)
}

// string nickname = 11;
inline void WechatAllOauth2UserResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname)
  return _impl_.nickname_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname)
}

// int32 sex = 12;
inline void WechatAllOauth2UserResponse_Item::clear_sex() {
  _impl_.sex_ = 0;
}
inline ::int32_t WechatAllOauth2UserResponse_Item::sex() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.sex)
  return _internal_sex();
}
inline void WechatAllOauth2UserResponse_Item::set_sex(::int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.sex)
}
inline ::int32_t WechatAllOauth2UserResponse_Item::_internal_sex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sex_;
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_sex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sex_ = value;
}

// string city = 13;
inline void WechatAllOauth2UserResponse_Item::clear_city() {
  _impl_.city_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::city() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_city(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.city)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.city)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_city() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.city_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_city(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.city_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_city() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.city)
  return _impl_.city_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_city(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.city_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.city_.IsDefault()) {
          _impl_.city_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.city)
}

// string province = 14;
inline void WechatAllOauth2UserResponse_Item::clear_province() {
  _impl_.province_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::province() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.province)
  return _internal_province();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_province(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.province_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.province)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_province() {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.province)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_province() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.province_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_province(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.province_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.province_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_province() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.province)
  return _impl_.province_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_province(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.province_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.province_.IsDefault()) {
          _impl_.province_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.province)
}

// string country = 15;
inline void WechatAllOauth2UserResponse_Item::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::country() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_country(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.country)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.country)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_country() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.country_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_country(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.country_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_country() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.country)
  return _impl_.country_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_country(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.country_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_.IsDefault()) {
          _impl_.country_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.country)
}

// optional string head_img_url = 16;
inline bool WechatAllOauth2UserResponse_Item::has_head_img_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatAllOauth2UserResponse_Item::clear_head_img_url() {
  _impl_.head_img_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatAllOauth2UserResponse_Item::head_img_url() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url)
  return _internal_head_img_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_head_img_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_head_img_url() {
  std::string* _s = _internal_mutable_head_img_url();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_head_img_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_img_url_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_head_img_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.head_img_url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_head_img_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.head_img_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_head_img_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_img_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.head_img_url_.IsDefault()) {
          _impl_.head_img_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url)
}

// repeated string privilege = 17;
inline int WechatAllOauth2UserResponse_Item::_internal_privilege_size() const {
  return _internal_privilege().size();
}
inline int WechatAllOauth2UserResponse_Item::privilege_size() const {
  return _internal_privilege_size();
}
inline void WechatAllOauth2UserResponse_Item::clear_privilege() {
  _internal_mutable_privilege()->Clear();
}
inline std::string* WechatAllOauth2UserResponse_Item::add_privilege() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_privilege()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::privilege(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_privilege().Get(index);
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_privilege(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_mutable_privilege()->Mutable(index);
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, const std::string& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, std::string&& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_privilege()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, absl::string_view value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_privilege()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WechatAllOauth2UserResponse_Item::privilege() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_privilege();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* WechatAllOauth2UserResponse_Item::mutable_privilege() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_privilege();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WechatAllOauth2UserResponse_Item::_internal_privilege() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.privilege_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WechatAllOauth2UserResponse_Item::_internal_mutable_privilege() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.privilege_;
}

// string lang = 18;
inline void WechatAllOauth2UserResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatAllOauth2UserResponse.Item.lang)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.Item.lang)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatAllOauth2UserResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatAllOauth2UserResponse.Item.lang)
}

// -------------------------------------------------------------------

// WechatAllOauth2UserResponse

// repeated .palm.auth.v1.WechatAllOauth2UserResponse.Item items = 1;
inline int WechatAllOauth2UserResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int WechatAllOauth2UserResponse::items_size() const {
  return _internal_items_size();
}
inline void WechatAllOauth2UserResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::WechatAllOauth2UserResponse_Item* WechatAllOauth2UserResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatAllOauth2UserResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllOauth2UserResponse_Item >*
WechatAllOauth2UserResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.WechatAllOauth2UserResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::WechatAllOauth2UserResponse_Item& WechatAllOauth2UserResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatAllOauth2UserResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::WechatAllOauth2UserResponse_Item* WechatAllOauth2UserResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::WechatAllOauth2UserResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.WechatAllOauth2UserResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::WechatAllOauth2UserResponse_Item >&
WechatAllOauth2UserResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.WechatAllOauth2UserResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllOauth2UserResponse_Item>&
WechatAllOauth2UserResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::WechatAllOauth2UserResponse_Item>*
WechatAllOauth2UserResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SignInByWechatOauth2Request

// string state = 1;
inline void SignInByWechatOauth2Request::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& SignInByWechatOauth2Request::state() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByWechatOauth2Request.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByWechatOauth2Request::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByWechatOauth2Request.state)
}
inline std::string* SignInByWechatOauth2Request::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByWechatOauth2Request.state)
  return _s;
}
inline const std::string& SignInByWechatOauth2Request::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void SignInByWechatOauth2Request::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByWechatOauth2Request.state)
  return _impl_.state_.Release();
}
inline void SignInByWechatOauth2Request::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByWechatOauth2Request.state)
}

// string code = 2;
inline void SignInByWechatOauth2Request::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SignInByWechatOauth2Request::code() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByWechatOauth2Request.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByWechatOauth2Request::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByWechatOauth2Request.code)
}
inline std::string* SignInByWechatOauth2Request::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByWechatOauth2Request.code)
  return _s;
}
inline const std::string& SignInByWechatOauth2Request::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void SignInByWechatOauth2Request::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByWechatOauth2Request.code)
  return _impl_.code_.Release();
}
inline void SignInByWechatOauth2Request::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByWechatOauth2Request.code)
}

// string app_id = 3;
inline void SignInByWechatOauth2Request::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& SignInByWechatOauth2Request::app_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByWechatOauth2Request.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByWechatOauth2Request::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByWechatOauth2Request.app_id)
}
inline std::string* SignInByWechatOauth2Request::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByWechatOauth2Request.app_id)
  return _s;
}
inline const std::string& SignInByWechatOauth2Request::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void SignInByWechatOauth2Request::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByWechatOauth2Request.app_id)
  return _impl_.app_id_.Release();
}
inline void SignInByWechatOauth2Request::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByWechatOauth2Request.app_id)
}

// .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
inline void SignInByWechatOauth2Request::clear_language() {
  _impl_.language_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language SignInByWechatOauth2Request::language() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByWechatOauth2Request.language)
  return _internal_language();
}
inline void SignInByWechatOauth2Request::set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.SignInByWechatOauth2Request.language)
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language SignInByWechatOauth2Request::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(_impl_.language_);
}
inline void SignInByWechatOauth2Request::_internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_ = value;
}

// .google.protobuf.Duration ttl = 11;
inline bool SignInByWechatOauth2Request::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SignInByWechatOauth2Request::_internal_ttl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SignInByWechatOauth2Request::ttl() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.SignInByWechatOauth2Request.ttl)
  return _internal_ttl();
}
inline void SignInByWechatOauth2Request::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.SignInByWechatOauth2Request.ttl)
}
inline ::google::protobuf::Duration* SignInByWechatOauth2Request::release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* SignInByWechatOauth2Request::unsafe_arena_release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.SignInByWechatOauth2Request.ttl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SignInByWechatOauth2Request::_internal_mutable_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* SignInByWechatOauth2Request::mutable_ttl() {
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.SignInByWechatOauth2Request.ttl)
  return _msg;
}
inline void SignInByWechatOauth2Request::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.SignInByWechatOauth2Request.ttl)
}

// -------------------------------------------------------------------

// WechatOauth2SignInStateResponse

// string state = 1;
inline void WechatOauth2SignInStateResponse::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& WechatOauth2SignInStateResponse::state() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatOauth2SignInStateResponse.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2SignInStateResponse::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatOauth2SignInStateResponse.state)
}
inline std::string* WechatOauth2SignInStateResponse::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatOauth2SignInStateResponse.state)
  return _s;
}
inline const std::string& WechatOauth2SignInStateResponse::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void WechatOauth2SignInStateResponse::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInStateResponse::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInStateResponse::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatOauth2SignInStateResponse.state)
  return _impl_.state_.Release();
}
inline void WechatOauth2SignInStateResponse::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatOauth2SignInStateResponse.state)
}

// -------------------------------------------------------------------

// WechatOauth2SignInUrlRequest

// string app_id = 1;
inline void WechatOauth2SignInUrlRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatOauth2SignInUrlRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatOauth2SignInUrlRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2SignInUrlRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatOauth2SignInUrlRequest.app_id)
}
inline std::string* WechatOauth2SignInUrlRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatOauth2SignInUrlRequest.app_id)
  return _s;
}
inline const std::string& WechatOauth2SignInUrlRequest::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void WechatOauth2SignInUrlRequest::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatOauth2SignInUrlRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatOauth2SignInUrlRequest::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatOauth2SignInUrlRequest.app_id)
}

// string redirect_uri = 2;
inline void WechatOauth2SignInUrlRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& WechatOauth2SignInUrlRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2SignInUrlRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri)
}
inline std::string* WechatOauth2SignInUrlRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri)
  return _s;
}
inline const std::string& WechatOauth2SignInUrlRequest::_internal_redirect_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redirect_uri_.Get();
}
inline void WechatOauth2SignInUrlRequest::_internal_set_redirect_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::_internal_mutable_redirect_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::release_redirect_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void WechatOauth2SignInUrlRequest::set_allocated_redirect_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri)
}

// .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
inline void WechatOauth2SignInUrlRequest::clear_language() {
  _impl_.language_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2SignInUrlRequest::language() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatOauth2SignInUrlRequest.language)
  return _internal_language();
}
inline void WechatOauth2SignInUrlRequest::set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatOauth2SignInUrlRequest.language)
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2SignInUrlRequest::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(_impl_.language_);
}
inline void WechatOauth2SignInUrlRequest::_internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_ = value;
}

// -------------------------------------------------------------------

// WechatMiniProgramUser

// string app_id = 11;
inline void WechatMiniProgramUser::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramUser::app_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatMiniProgramUser.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatMiniProgramUser.app_id)
}
inline std::string* WechatMiniProgramUser::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatMiniProgramUser.app_id)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void WechatMiniProgramUser::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatMiniProgramUser.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatMiniProgramUser::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatMiniProgramUser.app_id)
}

// string open_id = 12;
inline void WechatMiniProgramUser::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramUser::open_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatMiniProgramUser.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatMiniProgramUser.open_id)
}
inline std::string* WechatMiniProgramUser::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatMiniProgramUser.open_id)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_open_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_id_.Get();
}
inline void WechatMiniProgramUser::_internal_set_open_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_open_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatMiniProgramUser.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatMiniProgramUser::set_allocated_open_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatMiniProgramUser.open_id)
}

// string union_id = 13;
inline void WechatMiniProgramUser::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramUser::union_id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatMiniProgramUser.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatMiniProgramUser.union_id)
}
inline std::string* WechatMiniProgramUser::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatMiniProgramUser.union_id)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_union_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.union_id_.Get();
}
inline void WechatMiniProgramUser::_internal_set_union_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_union_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatMiniProgramUser.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatMiniProgramUser::set_allocated_union_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatMiniProgramUser.union_id)
}

// optional string nickname = 21;
inline bool WechatMiniProgramUser::has_nickname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatMiniProgramUser::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatMiniProgramUser::nickname() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatMiniProgramUser.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatMiniProgramUser.nickname)
}
inline std::string* WechatMiniProgramUser::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatMiniProgramUser.nickname)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_.Get();
}
inline void WechatMiniProgramUser::_internal_set_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatMiniProgramUser.nickname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.nickname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatMiniProgramUser::set_allocated_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatMiniProgramUser.nickname)
}

// optional string avatar_url = 22;
inline bool WechatMiniProgramUser::has_avatar_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WechatMiniProgramUser::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WechatMiniProgramUser::avatar_url() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.WechatMiniProgramUser.avatar_url)
  return _internal_avatar_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_avatar_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avatar_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.WechatMiniProgramUser.avatar_url)
}
inline std::string* WechatMiniProgramUser::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.WechatMiniProgramUser.avatar_url)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_avatar_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_url_.Get();
}
inline void WechatMiniProgramUser::_internal_set_avatar_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_avatar_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.avatar_url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_avatar_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.WechatMiniProgramUser.avatar_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.avatar_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatMiniProgramUser::set_allocated_avatar_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.avatar_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_url_.IsDefault()) {
          _impl_.avatar_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.WechatMiniProgramUser.avatar_url)
}

// -------------------------------------------------------------------

// AttachmentShowRequest

// int32 id = 1;
inline void AttachmentShowRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t AttachmentShowRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentShowRequest.id)
  return _internal_id();
}
inline void AttachmentShowRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentShowRequest.id)
}
inline ::int32_t AttachmentShowRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void AttachmentShowRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .google.protobuf.Duration ttl = 2;
inline bool AttachmentShowRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& AttachmentShowRequest::_internal_ttl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& AttachmentShowRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentShowRequest.ttl)
  return _internal_ttl();
}
inline void AttachmentShowRequest::unsafe_arena_set_allocated_ttl(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.AttachmentShowRequest.ttl)
}
inline ::google::protobuf::Duration* AttachmentShowRequest::release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* AttachmentShowRequest::unsafe_arena_release_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentShowRequest.ttl)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* AttachmentShowRequest::_internal_mutable_ttl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.ttl_;
}
inline ::google::protobuf::Duration* AttachmentShowRequest::mutable_ttl() {
  ::google::protobuf::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentShowRequest.ttl)
  return _msg;
}
inline void AttachmentShowRequest::set_allocated_ttl(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ttl_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ttl_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentShowRequest.ttl)
}

// -------------------------------------------------------------------

// AttachmentShowResponse

// .palm.auth.v1.AttachmentIndexResponse.Item item = 1;
inline bool AttachmentShowResponse::has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_ != nullptr);
  return value;
}
inline void AttachmentShowResponse::clear_item() {
  if (_impl_.item_ != nullptr) _impl_.item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::auth::v1::AttachmentIndexResponse_Item& AttachmentShowResponse::_internal_item() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::auth::v1::AttachmentIndexResponse_Item* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::auth::v1::AttachmentIndexResponse_Item&>(::palm::auth::v1::_AttachmentIndexResponse_Item_default_instance_);
}
inline const ::palm::auth::v1::AttachmentIndexResponse_Item& AttachmentShowResponse::item() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentShowResponse.item)
  return _internal_item();
}
inline void AttachmentShowResponse::unsafe_arena_set_allocated_item(::palm::auth::v1::AttachmentIndexResponse_Item* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = reinterpret_cast<::palm::auth::v1::AttachmentIndexResponse_Item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.AttachmentShowResponse.item)
}
inline ::palm::auth::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::release_item() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::auth::v1::AttachmentIndexResponse_Item* released = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::auth::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::unsafe_arena_release_item() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentShowResponse.item)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::auth::v1::AttachmentIndexResponse_Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::palm::auth::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::_internal_mutable_item() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::auth::v1::AttachmentIndexResponse_Item>(GetArenaForAllocation());
    _impl_.item_ = reinterpret_cast<::palm::auth::v1::AttachmentIndexResponse_Item*>(p);
  }
  return _impl_.item_;
}
inline ::palm::auth::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::mutable_item() {
  ::palm::auth::v1::AttachmentIndexResponse_Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentShowResponse.item)
  return _msg;
}
inline void AttachmentShowResponse::set_allocated_item(::palm::auth::v1::AttachmentIndexResponse_Item* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::auth::v1::AttachmentIndexResponse_Item*>(_impl_.item_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::palm::auth::v1::AttachmentIndexResponse_Item*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.item_ = reinterpret_cast<::palm::auth::v1::AttachmentIndexResponse_Item*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentShowResponse.item)
}

// string url = 2;
inline void AttachmentShowResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& AttachmentShowResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentShowResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentShowResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentShowResponse.url)
}
inline std::string* AttachmentShowResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentShowResponse.url)
  return _s;
}
inline const std::string& AttachmentShowResponse::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void AttachmentShowResponse::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentShowResponse::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentShowResponse::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentShowResponse.url)
  return _impl_.url_.Release();
}
inline void AttachmentShowResponse::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentShowResponse.url)
}

// -------------------------------------------------------------------

// AttachmentIndexResponse_Item

// int32 id = 1;
inline void AttachmentIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t AttachmentIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.id)
  return _internal_id();
}
inline void AttachmentIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.id)
}
inline ::int32_t AttachmentIndexResponse_Item::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void AttachmentIndexResponse_Item::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string bucket = 2;
inline void AttachmentIndexResponse_Item::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::bucket() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.bucket)
}
inline std::string* AttachmentIndexResponse_Item::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.Item.bucket)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_bucket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bucket_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_bucket(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_bucket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bucket_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_bucket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentIndexResponse.Item.bucket)
  return _impl_.bucket_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_bucket(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bucket_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentIndexResponse.Item.bucket)
}

// string name = 3;
inline void AttachmentIndexResponse_Item::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::name() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.name)
}
inline std::string* AttachmentIndexResponse_Item::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.Item.name)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentIndexResponse.Item.name)
  return _impl_.name_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentIndexResponse.Item.name)
}

// string title = 4;
inline void AttachmentIndexResponse_Item::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::title() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.title)
}
inline std::string* AttachmentIndexResponse_Item::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.Item.title)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentIndexResponse.Item.title)
  return _impl_.title_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentIndexResponse.Item.title)
}

// int64 size = 5;
inline void AttachmentIndexResponse_Item::clear_size() {
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t AttachmentIndexResponse_Item::size() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.size)
  return _internal_size();
}
inline void AttachmentIndexResponse_Item::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.size)
}
inline ::int64_t AttachmentIndexResponse_Item::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void AttachmentIndexResponse_Item::_internal_set_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// string content_type = 6;
inline void AttachmentIndexResponse_Item::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::content_type() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.content_type)
}
inline std::string* AttachmentIndexResponse_Item::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.Item.content_type)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_type_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentIndexResponse.Item.content_type)
  return _impl_.content_type_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentIndexResponse.Item.content_type)
}

// .palm.nut.v1.MediaContent.Status status = 7;
inline void AttachmentIndexResponse_Item::clear_status() {
  _impl_.status_ = 0;
}
inline ::palm::nut::v1::MediaContent_Status AttachmentIndexResponse_Item::status() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.status)
  return _internal_status();
}
inline void AttachmentIndexResponse_Item::set_status(::palm::nut::v1::MediaContent_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.AttachmentIndexResponse.Item.status)
}
inline ::palm::nut::v1::MediaContent_Status AttachmentIndexResponse_Item::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::nut::v1::MediaContent_Status>(_impl_.status_);
}
inline void AttachmentIndexResponse_Item::_internal_set_status(::palm::nut::v1::MediaContent_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool AttachmentIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AttachmentIndexResponse_Item::_internal_updated_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AttachmentIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void AttachmentIndexResponse_Item::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.AttachmentIndexResponse.Item.updated_at)
}
inline ::google::protobuf::Timestamp* AttachmentIndexResponse_Item::release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AttachmentIndexResponse_Item::unsafe_arena_release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentIndexResponse.Item.updated_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AttachmentIndexResponse_Item::_internal_mutable_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* AttachmentIndexResponse_Item::mutable_updated_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.Item.updated_at)
  return _msg;
}
inline void AttachmentIndexResponse_Item::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// AttachmentIndexResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool AttachmentIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::palm::nut::v1::Pagination& AttachmentIndexResponse::_internal_pagination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& AttachmentIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.pagination)
  return _internal_pagination();
}
inline void AttachmentIndexResponse::unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.AttachmentIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::unsafe_arena_release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.AttachmentIndexResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::_internal_mutable_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(p);
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.pagination)
  return _msg;
}
inline void AttachmentIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.AttachmentIndexResponse.pagination)
}

// repeated .palm.auth.v1.AttachmentIndexResponse.Item items = 11;
inline int AttachmentIndexResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int AttachmentIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void AttachmentIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::AttachmentIndexResponse_Item* AttachmentIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.AttachmentIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::AttachmentIndexResponse_Item >*
AttachmentIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.AttachmentIndexResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::AttachmentIndexResponse_Item& AttachmentIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.AttachmentIndexResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::AttachmentIndexResponse_Item* AttachmentIndexResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::AttachmentIndexResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.AttachmentIndexResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::AttachmentIndexResponse_Item >&
AttachmentIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.AttachmentIndexResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::AttachmentIndexResponse_Item>&
AttachmentIndexResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::AttachmentIndexResponse_Item>*
AttachmentIndexResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// LocaleByLangRequest

// string lang = 1;
inline void LocaleByLangRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleByLangRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleByLangRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByLangRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleByLangRequest.lang)
}
inline std::string* LocaleByLangRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleByLangRequest.lang)
  return _s;
}
inline const std::string& LocaleByLangRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void LocaleByLangRequest::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByLangRequest::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByLangRequest::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleByLangRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleByLangRequest::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleByLangRequest.lang)
}

// -------------------------------------------------------------------

// LocaleListResponse

// repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleListResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int LocaleListResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleListResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::LocaleIndexResponse_Item* LocaleListResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleListResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >*
LocaleListResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.LocaleListResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::LocaleIndexResponse_Item& LocaleListResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleListResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::LocaleIndexResponse_Item* LocaleListResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::LocaleIndexResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.LocaleListResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >&
LocaleListResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.LocaleListResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>&
LocaleListResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>*
LocaleListResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// LocaleIndexResponse_Item

// int32 id = 1;
inline void LocaleIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LocaleIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.Item.id)
  return _internal_id();
}
inline void LocaleIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleIndexResponse.Item.id)
}
inline ::int32_t LocaleIndexResponse_Item::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void LocaleIndexResponse_Item::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string lang = 2;
inline void LocaleIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleIndexResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleIndexResponse.Item.lang)
}
inline std::string* LocaleIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleIndexResponse.Item.lang)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleIndexResponse.Item.lang)
}

// string code = 3;
inline void LocaleIndexResponse_Item::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.Item.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleIndexResponse_Item::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleIndexResponse.Item.code)
}
inline std::string* LocaleIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleIndexResponse.Item.code)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleIndexResponse.Item.code)
  return _impl_.code_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleIndexResponse.Item.code)
}

// string message = 4;
inline void LocaleIndexResponse_Item::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.Item.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleIndexResponse_Item::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleIndexResponse.Item.message)
}
inline std::string* LocaleIndexResponse_Item::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleIndexResponse.Item.message)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleIndexResponse.Item.message)
  return _impl_.message_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleIndexResponse.Item.message)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool LocaleIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LocaleIndexResponse_Item::_internal_updated_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LocaleIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void LocaleIndexResponse_Item::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.LocaleIndexResponse.Item.updated_at)
}
inline ::google::protobuf::Timestamp* LocaleIndexResponse_Item::release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* LocaleIndexResponse_Item::unsafe_arena_release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleIndexResponse.Item.updated_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LocaleIndexResponse_Item::_internal_mutable_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* LocaleIndexResponse_Item::mutable_updated_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleIndexResponse.Item.updated_at)
  return _msg;
}
inline void LocaleIndexResponse_Item::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// LocaleIndexResponse

// repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleIndexResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int LocaleIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::auth::v1::LocaleIndexResponse_Item* LocaleIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >*
LocaleIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.auth.v1.LocaleIndexResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::palm::auth::v1::LocaleIndexResponse_Item& LocaleIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.items)
    return _internal_items().Get(index);
}
inline ::palm::auth::v1::LocaleIndexResponse_Item* LocaleIndexResponse::add_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::auth::v1::LocaleIndexResponse_Item* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:palm.auth.v1.LocaleIndexResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::auth::v1::LocaleIndexResponse_Item >&
LocaleIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.auth.v1.LocaleIndexResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>&
LocaleIndexResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::auth::v1::LocaleIndexResponse_Item>*
LocaleIndexResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// .palm.nut.v1.Pagination pagination = 9;
inline bool LocaleIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::palm::nut::v1::Pagination& LocaleIndexResponse::_internal_pagination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& LocaleIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleIndexResponse.pagination)
  return _internal_pagination();
}
inline void LocaleIndexResponse::unsafe_arena_set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.auth.v1.LocaleIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::unsafe_arena_release_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleIndexResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::_internal_mutable_pagination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(p);
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleIndexResponse.pagination)
  return _msg;
}
inline void LocaleIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::palm::nut::v1::Pagination*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleIndexResponse.pagination)
}

// -------------------------------------------------------------------

// LocaleByCodeRequest

// string code = 1;
inline void LocaleByCodeRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleByCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleByCodeRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByCodeRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleByCodeRequest.code)
}
inline std::string* LocaleByCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleByCodeRequest.code)
  return _s;
}
inline const std::string& LocaleByCodeRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void LocaleByCodeRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByCodeRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByCodeRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleByCodeRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleByCodeRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleByCodeRequest.code)
}

// -------------------------------------------------------------------

// LocaleByLangAndCodeRequest

// string lang = 1;
inline void LocaleByLangAndCodeRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleByLangAndCodeRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleByLangAndCodeRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByLangAndCodeRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleByLangAndCodeRequest.lang)
}
inline std::string* LocaleByLangAndCodeRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleByLangAndCodeRequest.lang)
  return _s;
}
inline const std::string& LocaleByLangAndCodeRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void LocaleByLangAndCodeRequest::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleByLangAndCodeRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleByLangAndCodeRequest::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleByLangAndCodeRequest.lang)
}

// string code = 2;
inline void LocaleByLangAndCodeRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleByLangAndCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleByLangAndCodeRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByLangAndCodeRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleByLangAndCodeRequest.code)
}
inline std::string* LocaleByLangAndCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleByLangAndCodeRequest.code)
  return _s;
}
inline const std::string& LocaleByLangAndCodeRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void LocaleByLangAndCodeRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleByLangAndCodeRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleByLangAndCodeRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleByLangAndCodeRequest.code)
}

// -------------------------------------------------------------------

// LocaleCreateRequest

// string lang = 1;
inline void LocaleCreateRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleCreateRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleCreateRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleCreateRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleCreateRequest.lang)
}
inline std::string* LocaleCreateRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleCreateRequest.lang)
  return _s;
}
inline const std::string& LocaleCreateRequest::_internal_lang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lang_.Get();
}
inline void LocaleCreateRequest::_internal_set_lang(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::_internal_mutable_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::release_lang() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleCreateRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleCreateRequest::set_allocated_lang(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleCreateRequest.lang)
}

// string code = 2;
inline void LocaleCreateRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleCreateRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleCreateRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleCreateRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleCreateRequest.code)
}
inline std::string* LocaleCreateRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleCreateRequest.code)
  return _s;
}
inline const std::string& LocaleCreateRequest::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_.Get();
}
inline void LocaleCreateRequest::_internal_set_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::_internal_mutable_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::release_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleCreateRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleCreateRequest::set_allocated_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleCreateRequest.code)
}

// string message = 3;
inline void LocaleCreateRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleCreateRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleCreateRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleCreateRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleCreateRequest.message)
}
inline std::string* LocaleCreateRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleCreateRequest.message)
  return _s;
}
inline const std::string& LocaleCreateRequest::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void LocaleCreateRequest::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleCreateRequest.message)
  return _impl_.message_.Release();
}
inline void LocaleCreateRequest::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleCreateRequest.message)
}

// -------------------------------------------------------------------

// LocaleUpdateRequest

// int32 id = 1;
inline void LocaleUpdateRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LocaleUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleUpdateRequest.id)
  return _internal_id();
}
inline void LocaleUpdateRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleUpdateRequest.id)
}
inline ::int32_t LocaleUpdateRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void LocaleUpdateRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string message = 2;
inline void LocaleUpdateRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleUpdateRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.auth.v1.LocaleUpdateRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleUpdateRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.auth.v1.LocaleUpdateRequest.message)
}
inline std::string* LocaleUpdateRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.auth.v1.LocaleUpdateRequest.message)
  return _s;
}
inline const std::string& LocaleUpdateRequest::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void LocaleUpdateRequest::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleUpdateRequest::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleUpdateRequest::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.auth.v1.LocaleUpdateRequest.message)
  return _impl_.message_.Release();
}
inline void LocaleUpdateRequest::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.auth.v1.LocaleUpdateRequest.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace auth
}  // namespace palm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::palm::auth::v1::UserLogsResponse_Item_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::auth::v1::UserLogsResponse_Item_Level>() {
  return ::palm::auth::v1::UserLogsResponse_Item_Level_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_auth_2eproto_2epb_2eh
