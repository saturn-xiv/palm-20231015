// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fig.proto

#include "fig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace fig {
namespace v1 {
PROTOBUF_CONSTEXPR IndexNotificationResponse_Item::IndexNotificationResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct IndexNotificationResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexNotificationResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexNotificationResponse_ItemDefaultTypeInternal() {}
  union {
    IndexNotificationResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexNotificationResponse_ItemDefaultTypeInternal _IndexNotificationResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR IndexNotificationResponse::IndexNotificationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexNotificationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexNotificationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexNotificationResponseDefaultTypeInternal() {}
  union {
    IndexNotificationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexNotificationResponseDefaultTypeInternal _IndexNotificationResponse_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveWordIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LeaveWordIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordIndexResponse_ItemDefaultTypeInternal _LeaveWordIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LeaveWordIndexResponse::LeaveWordIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveWordIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveWordIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveWordIndexResponseDefaultTypeInternal() {}
  union {
    LeaveWordIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveWordIndexResponseDefaultTypeInternal _LeaveWordIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR IndexNowProfile::IndexNowProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexNowProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexNowProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexNowProfileDefaultTypeInternal() {}
  union {
    IndexNowProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexNowProfileDefaultTypeInternal _IndexNowProfile_default_instance_;
PROTOBUF_CONSTEXPR IndexNowPingRequest::IndexNowPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexNowPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexNowPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexNowPingRequestDefaultTypeInternal() {}
  union {
    IndexNowPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexNowPingRequestDefaultTypeInternal _IndexNowPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SitemapPingRequest::SitemapPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SitemapPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SitemapPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SitemapPingRequestDefaultTypeInternal() {}
  union {
    SitemapPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SitemapPingRequestDefaultTypeInternal _SitemapPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteMaintenanceModeRequest::SiteMaintenanceModeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteMaintenanceModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteMaintenanceModeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteMaintenanceModeRequestDefaultTypeInternal() {}
  union {
    SiteMaintenanceModeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteMaintenanceModeRequestDefaultTypeInternal _SiteMaintenanceModeRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteInstallRequest::SiteInstallRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteInstallRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteInstallRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteInstallRequestDefaultTypeInternal() {}
  union {
    SiteInstallRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteInstallRequestDefaultTypeInternal _SiteInstallRequest_default_instance_;
PROTOBUF_CONSTEXPR TwilioProfile::TwilioProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sms_status_callback_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TwilioProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwilioProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwilioProfileDefaultTypeInternal() {}
  union {
    TwilioProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwilioProfileDefaultTypeInternal _TwilioProfile_default_instance_;
PROTOBUF_CONSTEXPR SmtpProfile::SmtpProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_)*/{}
  , /*decltype(_impl_.bcc_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.auth_method_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmtpProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmtpProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmtpProfileDefaultTypeInternal() {}
  union {
    SmtpProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Address::EmailTask_Address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_AddressDefaultTypeInternal() {}
  union {
    EmailTask_Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_AddressDefaultTypeInternal _EmailTask_Address_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Body::EmailTask_Body(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.html_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_BodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_BodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_BodyDefaultTypeInternal() {}
  union {
    EmailTask_Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_BodyDefaultTypeInternal _EmailTask_Body_default_instance_;
PROTOBUF_CONSTEXPR EmailTask_Attachment::EmailTask_Attachment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTask_AttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTask_AttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTask_AttachmentDefaultTypeInternal() {}
  union {
    EmailTask_Attachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
PROTOBUF_CONSTEXPR EmailTask::EmailTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_)*/{}
  , /*decltype(_impl_.bcc_)*/{}
  , /*decltype(_impl_.attachments_)*/{}
  , /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.body_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EmailTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmailTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmailTaskDefaultTypeInternal() {}
  union {
    EmailTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
PROTOBUF_CONSTEXPR SiteTwilioPingRequest::SiteTwilioPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteTwilioPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteTwilioPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteTwilioPingRequestDefaultTypeInternal() {}
  union {
    SiteTwilioPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteTwilioPingRequestDefaultTypeInternal _SiteTwilioPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSmtpPingRequest::SiteSmtpPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.profile_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSmtpPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSmtpPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSmtpPingRequestDefaultTypeInternal() {}
  union {
    SiteSmtpPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSmtpPingRequestDefaultTypeInternal _SiteSmtpPingRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetLogoRequest::SiteSetLogoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetLogoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetLogoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetLogoRequestDefaultTypeInternal() {}
  union {
    SiteSetLogoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetLogoRequestDefaultTypeInternal _SiteSetLogoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetCopyrightRequest::SiteSetCopyrightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetCopyrightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetCopyrightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetCopyrightRequestDefaultTypeInternal() {}
  union {
    SiteSetCopyrightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetKeywordsRequest::SiteSetKeywordsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetKeywordsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetKeywordsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetKeywordsRequestDefaultTypeInternal() {}
  union {
    SiteSetKeywordsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteSetInfoRequest::SiteSetInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSetInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSetInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSetInfoRequestDefaultTypeInternal() {}
  union {
    SiteSetInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse_Author::SiteLayoutResponse_Author(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponse_AuthorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponse_AuthorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponse_AuthorDefaultTypeInternal() {}
  union {
    SiteLayoutResponse_Author _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
PROTOBUF_CONSTEXPR SiteLayoutResponse::SiteLayoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keywords_)*/{}
  , /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subhead_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyright_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponseDefaultTypeInternal() {}
  union {
    SiteLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
PROTOBUF_CONSTEXPR GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.site_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleProfile_ReCaptchaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleProfile_ReCaptchaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleProfile_ReCaptchaDefaultTypeInternal() {}
  union {
    GoogleProfile_ReCaptcha _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleProfile_ReCaptchaDefaultTypeInternal _GoogleProfile_ReCaptcha_default_instance_;
PROTOBUF_CONSTEXPR GoogleProfile::GoogleProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.re_captcha_)*/nullptr} {}
struct GoogleProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleProfileDefaultTypeInternal() {}
  union {
    GoogleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
PROTOBUF_CONSTEXPR BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaiduProfile_SiteVerifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaiduProfile_SiteVerifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaiduProfile_SiteVerifyDefaultTypeInternal() {}
  union {
    BaiduProfile_SiteVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaiduProfile_SiteVerifyDefaultTypeInternal _BaiduProfile_SiteVerify_default_instance_;
PROTOBUF_CONSTEXPR BaiduProfile::BaiduProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.site_verify_)*/nullptr} {}
struct BaiduProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaiduProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaiduProfileDefaultTypeInternal() {}
  union {
    BaiduProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
PROTOBUF_CONSTEXPR SmsTask::SmsTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmsTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmsTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmsTaskDefaultTypeInternal() {}
  union {
    SmsTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmsTaskDefaultTypeInternal _SmsTask_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Database::SiteStatusResponse_Database(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_DatabaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_DatabaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_DatabaseDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Database _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_DatabaseDefaultTypeInternal _SiteStatusResponse_Database_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.databases_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.now_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_PostgreSqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_PostgreSql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_MySql::SiteStatusResponse_MySql(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_MySqlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_MySqlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_MySqlDefaultTypeInternal() {}
  union {
    SiteStatusResponse_MySql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_MySqlDefaultTypeInternal _SiteStatusResponse_MySql_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_Redis_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_Redis_ItemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_Redis_ItemDefaultTypeInternal _SiteStatusResponse_Redis_Item_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Redis::SiteStatusResponse_Redis(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RedisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RedisDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RedisDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Redis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.heartbeat_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_RabbitMqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_RabbitMqDefaultTypeInternal() {}
  union {
    SiteStatusResponse_RabbitMq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_RabbitMqDefaultTypeInternal _SiteStatusResponse_RabbitMq_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_OpenSearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_OpenSearchDefaultTypeInternal() {}
  union {
    SiteStatusResponse_OpenSearch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_Health::SiteStatusResponse_Health(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_HealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_HealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_HealthDefaultTypeInternal() {}
  union {
    SiteStatusResponse_Health _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_HealthDefaultTypeInternal _SiteStatusResponse_Health_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse_System::SiteStatusResponse_System(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.boot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.swap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uptime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponse_SystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponse_SystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponse_SystemDefaultTypeInternal() {}
  union {
    SiteStatusResponse_System _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponse_SystemDefaultTypeInternal _SiteStatusResponse_System_default_instance_;
PROTOBUF_CONSTEXPR SiteStatusResponse::SiteStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.healthes_)*/{}
  , /*decltype(_impl_.postgresql_)*/nullptr
  , /*decltype(_impl_.mysql_)*/nullptr
  , /*decltype(_impl_.redis_)*/nullptr
  , /*decltype(_impl_.rabbitmq_)*/nullptr
  , /*decltype(_impl_.opensearch_)*/nullptr
  , /*decltype(_impl_.system_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteStatusResponseDefaultTypeInternal() {}
  union {
    SiteStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkIndexResponse_Item::ShorterLinkIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkIndexResponse_ItemDefaultTypeInternal() {}
  union {
    ShorterLinkIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkIndexResponse_ItemDefaultTypeInternal _ShorterLinkIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkIndexResponse::ShorterLinkIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkIndexResponseDefaultTypeInternal() {}
  union {
    ShorterLinkIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkIndexResponseDefaultTypeInternal _ShorterLinkIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkCreateRequest::ShorterLinkCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkCreateRequestDefaultTypeInternal() {}
  union {
    ShorterLinkCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkCreateRequestDefaultTypeInternal _ShorterLinkCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR ShorterLinkUpdateRequest::ShorterLinkUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShorterLinkUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShorterLinkUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShorterLinkUpdateRequestDefaultTypeInternal() {}
  union {
    ShorterLinkUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShorterLinkUpdateRequestDefaultTypeInternal _ShorterLinkUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR TagIndexResponse_Item::TagIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagIndexResponse_ItemDefaultTypeInternal() {}
  union {
    TagIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagIndexResponse_ItemDefaultTypeInternal _TagIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR TagIndexResponse::TagIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagIndexResponseDefaultTypeInternal() {}
  union {
    TagIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagIndexResponseDefaultTypeInternal _TagIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR TagCreateRequest::TagCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagCreateRequestDefaultTypeInternal() {}
  union {
    TagCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagCreateRequestDefaultTypeInternal _TagCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR TagUpdateRequest::TagUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagUpdateRequestDefaultTypeInternal() {}
  union {
    TagUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagUpdateRequestDefaultTypeInternal _TagUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR CategoryIndexResponse_Item::CategoryIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryIndexResponse_ItemDefaultTypeInternal() {}
  union {
    CategoryIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryIndexResponse_ItemDefaultTypeInternal _CategoryIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR CategoryIndexResponse::CategoryIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryIndexResponseDefaultTypeInternal() {}
  union {
    CategoryIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryIndexResponseDefaultTypeInternal _CategoryIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR CategoryCreateRequest::CategoryCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CategoryCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryCreateRequestDefaultTypeInternal() {}
  union {
    CategoryCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryCreateRequestDefaultTypeInternal _CategoryCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR CategoryUpdateRequest::CategoryUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryUpdateRequestDefaultTypeInternal() {}
  union {
    CategoryUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryUpdateRequestDefaultTypeInternal _CategoryUpdateRequest_default_instance_;
}  // namespace v1
}  // namespace fig
}  // namespace palm
static ::_pb::Metadata file_level_metadata_fig_2eproto[50];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fig_2eproto = nullptr;

const uint32_t TableStruct_fig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse_Item, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse_Item, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse_Item, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNotificationResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse_Item, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::LeaveWordIndexResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowProfile, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowPingRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::IndexNowPingRequest, _impl_.home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SitemapPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SitemapPingRequest, _impl_.home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteMaintenanceModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteMaintenanceModeRequest, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteMaintenanceModeRequest, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteInstallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteInstallRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.account_sid_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.auth_token_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TwilioProfile, _impl_.sms_status_callback_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.auth_method_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmtpProfile, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Address, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Address, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Body, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Body, _impl_.html_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Attachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Attachment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask_Attachment, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.cc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::EmailTask, _impl_.attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteTwilioPingRequest, _impl_.profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.subject_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSmtpPingRequest, _impl_.profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetLogoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetLogoRequest, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetCopyrightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetCopyrightRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetKeywordsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetKeywordsRequest, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteSetInfoRequest, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse_Author, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse_Author, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse_Author, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.subhead_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.keywords_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.copyright_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.logo_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteLayoutResponse, _impl_.languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile_ReCaptcha, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile_ReCaptcha, _impl_.site_key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile_ReCaptcha, _impl_.secret_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _impl_.site_verify_id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::GoogleProfile, _impl_.re_captcha_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile_SiteVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile_SiteVerify, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile_SiteVerify, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::BaiduProfile, _impl_.site_verify_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SmsTask, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Database, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Database, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _impl_.now_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_PostgreSql, _impl_.databases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_MySql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_MySql, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_MySql, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis_Item, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Redis, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_RabbitMq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_RabbitMq, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_RabbitMq, _impl_.heartbeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_OpenSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_OpenSearch, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_OpenSearch, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Health, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_Health, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.cpu_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.boot_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.disk_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.fs_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.swap_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.uptime_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse_System, _impl_.network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.postgresql_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.mysql_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.redis_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.rabbitmq_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.opensearch_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::SiteStatusResponse, _impl_.healthes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.details_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkCreateRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkCreateRequest, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::ShorterLinkUpdateRequest, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagCreateRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagCreateRequest, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::TagUpdateRequest, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.right_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _impl_.code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryCreateRequest, _impl_.by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::fig::v1::CategoryUpdateRequest, _impl_.code_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::fig::v1::IndexNotificationResponse_Item)},
  { 10, -1, -1, sizeof(::palm::fig::v1::IndexNotificationResponse)},
  { 18, -1, -1, sizeof(::palm::fig::v1::LeaveWordIndexResponse_Item)},
  { 30, -1, -1, sizeof(::palm::fig::v1::LeaveWordIndexResponse)},
  { 38, -1, -1, sizeof(::palm::fig::v1::IndexNowProfile)},
  { 45, -1, -1, sizeof(::palm::fig::v1::IndexNowPingRequest)},
  { 53, -1, -1, sizeof(::palm::fig::v1::SitemapPingRequest)},
  { 60, -1, -1, sizeof(::palm::fig::v1::SiteMaintenanceModeRequest)},
  { 68, -1, -1, sizeof(::palm::fig::v1::SiteInstallRequest)},
  { 75, 85, -1, sizeof(::palm::fig::v1::TwilioProfile)},
  { 89, -1, -1, sizeof(::palm::fig::v1::SmtpProfile)},
  { 102, -1, -1, sizeof(::palm::fig::v1::EmailTask_Address)},
  { 110, -1, -1, sizeof(::palm::fig::v1::EmailTask_Body)},
  { 118, -1, -1, sizeof(::palm::fig::v1::EmailTask_Attachment)},
  { 126, -1, -1, sizeof(::palm::fig::v1::EmailTask)},
  { 138, -1, -1, sizeof(::palm::fig::v1::SiteTwilioPingRequest)},
  { 147, -1, -1, sizeof(::palm::fig::v1::SiteSmtpPingRequest)},
  { 157, -1, -1, sizeof(::palm::fig::v1::SiteSetLogoRequest)},
  { 164, -1, -1, sizeof(::palm::fig::v1::SiteSetCopyrightRequest)},
  { 171, -1, -1, sizeof(::palm::fig::v1::SiteSetKeywordsRequest)},
  { 178, -1, -1, sizeof(::palm::fig::v1::SiteSetInfoRequest)},
  { 188, -1, -1, sizeof(::palm::fig::v1::SiteLayoutResponse_Author)},
  { 196, -1, -1, sizeof(::palm::fig::v1::SiteLayoutResponse)},
  { 210, -1, -1, sizeof(::palm::fig::v1::GoogleProfile_ReCaptcha)},
  { 218, 226, -1, sizeof(::palm::fig::v1::GoogleProfile)},
  { 228, -1, -1, sizeof(::palm::fig::v1::BaiduProfile_SiteVerify)},
  { 236, 243, -1, sizeof(::palm::fig::v1::BaiduProfile)},
  { 244, -1, -1, sizeof(::palm::fig::v1::SmsTask)},
  { 253, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Database)},
  { 261, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_PostgreSql)},
  { 270, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_MySql)},
  { 278, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Redis_Item)},
  { 287, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Redis)},
  { 295, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_RabbitMq)},
  { 303, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_OpenSearch)},
  { 311, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_Health)},
  { 319, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse_System)},
  { 335, -1, -1, sizeof(::palm::fig::v1::SiteStatusResponse)},
  { 348, -1, -1, sizeof(::palm::fig::v1::ShorterLinkIndexResponse_Item)},
  { 359, -1, -1, sizeof(::palm::fig::v1::ShorterLinkIndexResponse)},
  { 367, -1, -1, sizeof(::palm::fig::v1::ShorterLinkCreateRequest)},
  { 375, -1, -1, sizeof(::palm::fig::v1::ShorterLinkUpdateRequest)},
  { 384, -1, -1, sizeof(::palm::fig::v1::TagIndexResponse_Item)},
  { 394, -1, -1, sizeof(::palm::fig::v1::TagIndexResponse)},
  { 401, -1, -1, sizeof(::palm::fig::v1::TagCreateRequest)},
  { 409, -1, -1, sizeof(::palm::fig::v1::TagUpdateRequest)},
  { 418, -1, -1, sizeof(::palm::fig::v1::CategoryIndexResponse_Item)},
  { 429, -1, -1, sizeof(::palm::fig::v1::CategoryIndexResponse)},
  { 436, -1, -1, sizeof(::palm::fig::v1::CategoryCreateRequest)},
  { 446, -1, -1, sizeof(::palm::fig::v1::CategoryUpdateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::fig::v1::_IndexNotificationResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_IndexNotificationResponse_default_instance_._instance,
  &::palm::fig::v1::_LeaveWordIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_LeaveWordIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_IndexNowProfile_default_instance_._instance,
  &::palm::fig::v1::_IndexNowPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SitemapPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteMaintenanceModeRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteInstallRequest_default_instance_._instance,
  &::palm::fig::v1::_TwilioProfile_default_instance_._instance,
  &::palm::fig::v1::_SmtpProfile_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_Address_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_Body_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_Attachment_default_instance_._instance,
  &::palm::fig::v1::_EmailTask_default_instance_._instance,
  &::palm::fig::v1::_SiteTwilioPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSmtpPingRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetLogoRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetCopyrightRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetKeywordsRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteSetInfoRequest_default_instance_._instance,
  &::palm::fig::v1::_SiteLayoutResponse_Author_default_instance_._instance,
  &::palm::fig::v1::_SiteLayoutResponse_default_instance_._instance,
  &::palm::fig::v1::_GoogleProfile_ReCaptcha_default_instance_._instance,
  &::palm::fig::v1::_GoogleProfile_default_instance_._instance,
  &::palm::fig::v1::_BaiduProfile_SiteVerify_default_instance_._instance,
  &::palm::fig::v1::_BaiduProfile_default_instance_._instance,
  &::palm::fig::v1::_SmsTask_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Database_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_PostgreSql_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_MySql_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Redis_Item_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Redis_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_RabbitMq_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_OpenSearch_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_Health_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_System_default_instance_._instance,
  &::palm::fig::v1::_SiteStatusResponse_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_ShorterLinkUpdateRequest_default_instance_._instance,
  &::palm::fig::v1::_TagIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_TagIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_TagCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_TagUpdateRequest_default_instance_._instance,
  &::palm::fig::v1::_CategoryIndexResponse_Item_default_instance_._instance,
  &::palm::fig::v1::_CategoryIndexResponse_default_instance_._instance,
  &::palm::fig::v1::_CategoryCreateRequest_default_instance_._instance,
  &::palm::fig::v1::_CategoryUpdateRequest_default_instance_._instance,
};

const char descriptor_table_protodef_fig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tfig.proto\022\013palm.fig.v1\032\033google/protobu"
  "f/empty.proto\032\037google/protobuf/timestamp"
  ".proto\032\036google/protobuf/duration.proto\032\t"
  "nut.proto\032\nauth.proto\"\226\002\n\031IndexNotificat"
  "ionResponse\022:\n\005items\030\001 \003(\0132+.palm.fig.v1"
  ".IndexNotificationResponse.Item\022+\n\npagin"
  "ation\030\t \001(\0132\027.palm.nut.v1.Pagination\032\217\001\n"
  "\004Item\022\'\n\005email\030\001 \001(\0132\026.palm.fig.v1.Email"
  "TaskH\000\022#\n\003sms\030\002 \001(\0132\024.palm.fig.v1.SmsTas"
  "kH\000\022.\n\ncreated_at\030\023 \001(\0132\032.google.protobu"
  "f.TimestampB\t\n\007message\"\271\002\n\026LeaveWordInde"
  "xResponse\0227\n\005items\030\001 \003(\0132(.palm.fig.v1.L"
  "eaveWordIndexResponse.Item\022+\n\npagination"
  "\030\t \001(\0132\027.palm.nut.v1.Pagination\032\270\001\n\004Item"
  "\022\n\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022*"
  "\n\007content\030\010 \001(\0132\031.palm.nut.v1.MediaConte"
  "nt\022.\n\nupdated_at\030\013 \001(\0132\032.google.protobuf"
  ".Timestamp\022.\n\ncreated_at\030\014 \001(\0132\032.google."
  "protobuf.Timestamp\"\036\n\017IndexNowProfile\022\013\n"
  "\003key\030\001 \001(\t\"0\n\023IndexNowPingRequest\022\013\n\003key"
  "\030\001 \001(\t\022\014\n\004home\030\t \001(\t\"\"\n\022SitemapPingReque"
  "st\022\014\n\004home\030\001 \001(\t\"T\n\032SiteMaintenanceModeR"
  "equest\022&\n\003ttl\030\001 \001(\0132\031.google.protobuf.Du"
  "ration\022\016\n\006reason\030\002 \001(\t\"C\n\022SiteInstallReq"
  "uest\022-\n\004user\030\001 \001(\0132\037.palm.auth.v1.UserSi"
  "gnUpRequest\"\200\001\n\rTwilioProfile\022\014\n\004from\030\001 "
  "\001(\t\022\023\n\013account_sid\030\002 \001(\t\022\022\n\nauth_token\030\003"
  " \001(\t\022 \n\023sms_status_callback\030\t \001(\tH\000\210\001\001B\026"
  "\n\024_sms_status_callback\"\255\002\n\013SmtpProfile\022\014"
  "\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\0228\n\013auth_metho"
  "d\030\003 \001(\0162#.palm.fig.v1.SmtpProfile.AuthMe"
  "thod\022*\n\002cc\030\010 \003(\0132\036.palm.fig.v1.EmailTask"
  ".Address\022+\n\003bcc\030\t \003(\0132\036.palm.fig.v1.Emai"
  "lTask.Address\022,\n\004from\030\013 \001(\0132\036.palm.fig.v"
  "1.EmailTask.Address\022\020\n\010password\030\014 \001(\t\"/\n"
  "\nAuthMethod\022\010\n\004None\020\000\022\t\n\005Login\020\001\022\014\n\010Star"
  "tTls\020\002\"\375\002\n\tEmailTask\022*\n\002to\030\001 \001(\0132\036.palm."
  "fig.v1.EmailTask.Address\022*\n\002cc\030\002 \003(\0132\036.p"
  "alm.fig.v1.EmailTask.Address\022+\n\003bcc\030\003 \003("
  "\0132\036.palm.fig.v1.EmailTask.Address\022\017\n\007sub"
  "ject\030\013 \001(\t\022)\n\004body\030\014 \001(\0132\033.palm.fig.v1.E"
  "mailTask.Body\0226\n\013attachments\030\r \003(\0132!.pal"
  "m.fig.v1.EmailTask.Attachment\032&\n\007Address"
  "\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\032\"\n\004Body\022\014\n"
  "\004text\030\001 \001(\t\022\014\n\004html\030\002 \001(\010\032+\n\nAttachment\022"
  "\014\n\004name\030\001 \001(\t\022\017\n\007payload\030\002 \001(\014\"a\n\025SiteTw"
  "ilioPingRequest\022\n\n\002to\030\001 \001(\t\022\017\n\007message\030\002"
  " \001(\t\022+\n\007profile\030\t \001(\0132\032.palm.fig.v1.Twil"
  "ioProfile\"\216\001\n\023SiteSmtpPingRequest\022*\n\002to\030"
  "\001 \001(\0132\036.palm.fig.v1.EmailTask.Address\022\017\n"
  "\007subject\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\022)\n\007profi"
  "le\030\t \001(\0132\030.palm.fig.v1.SmtpProfile\"!\n\022Si"
  "teSetLogoRequest\022\013\n\003url\030\001 \001(\t\"*\n\027SiteSet"
  "CopyrightRequest\022\017\n\007payload\030\001 \001(\t\"\'\n\026Sit"
  "eSetKeywordsRequest\022\r\n\005items\030\001 \003(\t\"W\n\022Si"
  "teSetInfoRequest\022\014\n\004lang\030\001 \001(\t\022\r\n\005title\030"
  "\013 \001(\t\022\017\n\007subhead\030\014 \001(\t\022\023\n\013description\030\r "
  "\001(\t\"\356\001\n\022SiteLayoutResponse\022\r\n\005title\030\001 \001("
  "\t\022\017\n\007subhead\030\002 \001(\t\022\020\n\010keywords\030\003 \003(\t\022\023\n\013"
  "description\030\004 \001(\t\0226\n\006author\030\005 \001(\0132&.palm"
  ".fig.v1.SiteLayoutResponse.Author\022\021\n\tcop"
  "yright\030\006 \001(\t\022\014\n\004logo\030\007 \001(\t\022\021\n\tlanguages\030"
  "\t \003(\t\032%\n\006Author\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030\002"
  " \001(\t\"\274\001\n\rGoogleProfile\022\033\n\016site_verify_id"
  "\030\001 \001(\tH\000\210\001\001\022=\n\nre_captcha\030\002 \001(\0132$.palm.f"
  "ig.v1.GoogleProfile.ReCaptchaH\001\210\001\001\032-\n\tRe"
  "Captcha\022\020\n\010site_key\030\001 \001(\t\022\016\n\006secret\030\002 \001("
  "\tB\021\n\017_site_verify_idB\r\n\013_re_captcha\"\211\001\n\014"
  "BaiduProfile\022>\n\013site_verify\030\001 \001(\0132$.palm"
  ".fig.v1.BaiduProfile.SiteVerifyH\000\210\001\001\032)\n\n"
  "SiteVerify\022\n\n\002id\030\001 \001(\t\022\017\n\007content\030\002 \001(\tB"
  "\016\n\014_site_verify\"1\n\007SmsTask\022\014\n\004from\030\001 \001(\t"
  "\022\n\n\002to\030\002 \003(\t\022\014\n\004body\030\003 \001(\t\"\247\010\n\022SiteStatu"
  "sResponse\022>\n\npostgresql\030\001 \001(\0132*.palm.fig"
  ".v1.SiteStatusResponse.PostgreSql\0224\n\005mys"
  "ql\030\002 \001(\0132%.palm.fig.v1.SiteStatusRespons"
  "e.MySql\0224\n\005redis\030\003 \001(\0132%.palm.fig.v1.Sit"
  "eStatusResponse.Redis\022:\n\010rabbitmq\030\004 \001(\0132"
  "(.palm.fig.v1.SiteStatusResponse.RabbitM"
  "q\022>\n\nopensearch\030\005 \001(\0132*.palm.fig.v1.Site"
  "StatusResponse.OpenSearch\0226\n\006system\030\013 \001("
  "\0132&.palm.fig.v1.SiteStatusResponse.Syste"
  "m\0228\n\010healthes\030\025 \003(\0132&.palm.fig.v1.SiteSt"
  "atusResponse.Health\032&\n\010Database\022\014\n\004name\030"
  "\001 \001(\t\022\014\n\004size\030\002 \001(\t\032\203\001\n\nPostgreSql\022\017\n\007ve"
  "rsion\030\001 \001(\t\022\'\n\003now\030\002 \001(\0132\032.google.protob"
  "uf.Timestamp\022;\n\tdatabases\030\t \003(\0132(.palm.f"
  "ig.v1.SiteStatusResponse.Database\032&\n\005MyS"
  "ql\022\014\n\004size\030\001 \001(\004\022\017\n\007version\030\002 \001(\t\032\200\001\n\005Re"
  "dis\022\014\n\004info\030\001 \001(\t\0229\n\005items\030\002 \003(\0132*.palm."
  "fig.v1.SiteStatusResponse.Redis.Item\032.\n\004"
  "Item\022\014\n\004node\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\013\n\003ttl\030\003"
  " \001(\003\032/\n\010RabbitMq\022\020\n\010protocol\030\001 \001(\t\022\021\n\the"
  "artbeat\030\002 \001(\r\032\'\n\nOpenSearch\022\013\n\003url\030\001 \001(\t"
  "\022\014\n\004info\030\002 \001(\t\032&\n\006Health\022\014\n\004name\030\001 \001(\t\022\016"
  "\n\006status\030\002 \001(\t\032\233\001\n\006System\022\017\n\007version\030\001 \001"
  "(\t\022\013\n\003cpu\030\002 \001(\t\022\016\n\006memory\030\003 \001(\t\022\014\n\004boot\030"
  "\004 \001(\t\022\014\n\004disk\030\005 \001(\t\022\014\n\004load\030\006 \001(\t\022\n\n\002fs\030"
  "\007 \001(\t\022\014\n\004swap\030\010 \001(\t\022\016\n\006uptime\030\t \001(\t\022\017\n\007n"
  "etwork\030\n \001(\t\"\362\001\n\030ShorterLinkIndexRespons"
  "e\022+\n\npagination\030\001 \001(\0132\027.palm.nut.v1.Pagi"
  "nation\0229\n\005items\030\013 \003(\0132*.palm.fig.v1.Shor"
  "terLinkIndexResponse.Item\032n\n\004Item\022\n\n\002id\030"
  "\001 \001(\005\022\013\n\003url\030\002 \001(\t\022\017\n\007details\030\003 \001(\t\022\014\n\004c"
  "ode\030\t \001(\t\022.\n\nupdated_at\030\013 \001(\0132\032.google.p"
  "rotobuf.Timestamp\"8\n\030ShorterLinkCreateRe"
  "quest\022\013\n\003url\030\001 \001(\t\022\017\n\007details\030\002 \001(\t\"D\n\030S"
  "horterLinkUpdateRequest\022\n\n\002id\030\001 \001(\005\022\013\n\003u"
  "rl\030\002 \001(\t\022\017\n\007details\030\003 \001(\t\"\251\001\n\020TagIndexRe"
  "sponse\0221\n\005items\030\001 \003(\0132\".palm.fig.v1.TagI"
  "ndexResponse.Item\032b\n\004Item\022\n\n\002id\030\001 \001(\005\022\014\n"
  "\004code\030\002 \001(\t\022\020\n\010priority\030\003 \001(\005\022.\n\nupdated"
  "_at\030\013 \001(\0132\032.google.protobuf.Timestamp\"2\n"
  "\020TagCreateRequest\022\014\n\004code\030\001 \001(\t\022\020\n\010prior"
  "ity\030\013 \001(\005\">\n\020TagUpdateRequest\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004code\030\002 \001(\t\022\020\n\010priority\030\013 \001(\005\"\276\001\n\025Ca"
  "tegoryIndexResponse\0226\n\005items\030\001 \003(\0132\'.pal"
  "m.fig.v1.CategoryIndexResponse.Item\032m\n\004I"
  "tem\022\n\n\002id\030\001 \001(\005\022\014\n\004code\030\002 \001(\t\022\014\n\004left\030\003 "
  "\001(\005\022\r\n\005right\030\004 \001(\005\022.\n\nupdated_at\030\013 \001(\0132\032"
  ".google.protobuf.Timestamp\"M\n\025CategoryCr"
  "eateRequest\022\014\n\004code\030\001 \001(\t\022\016\n\004left\030\002 \001(\005H"
  "\000\022\020\n\006parent\030\003 \001(\005H\000B\004\n\002by\"1\n\025CategoryUpd"
  "ateRequest\022\n\n\002id\030\001 \001(\005\022\014\n\004code\030\002 \001(\t2U\n\014"
  "Notification\022E\n\005Index\022\022.palm.nut.v1.Page"
  "r\032&.palm.fig.v1.IndexNotificationRespons"
  "e\"\0002\227\002\n\tLeaveWord\022=\n\006Create\022\031.palm.nut.v"
  "1.MediaContent\032\026.google.protobuf.Empty\"\000"
  "\022B\n\005Index\022\022.palm.nut.v1.Pager\032#.palm.fig"
  ".v1.LeaveWordIndexResponse\"\000\022J\n\004Show\022\026.p"
  "alm.nut.v1.IdRequest\032(.palm.fig.v1.Leave"
  "WordIndexResponse.Item\"\000\022;\n\007Destroy\022\026.pa"
  "lm.nut.v1.IdRequest\032\026.google.protobuf.Em"
  "pty\"\0002\363\r\n\004Site\022W\n\022SetMaintenanceMode\022\'.p"
  "alm.fig.v1.SiteMaintenanceModeRequest\032\026."
  "google.protobuf.Empty\"\000\022D\n\007Install\022\037.pal"
  "m.fig.v1.SiteInstallRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022>\n\nClearCache\022\026.google.pro"
  "tobuf.Empty\032\026.google.protobuf.Empty\"\000\022C\n"
  "\006Layout\022\026.google.protobuf.Empty\032\037.palm.f"
  "ig.v1.SiteLayoutResponse\"\000\022M\n\tSetAuthor\022"
  "&.palm.fig.v1.SiteLayoutResponse.Author\032"
  "\026.google.protobuf.Empty\"\000\022N\n\014SetCopyrigh"
  "t\022$.palm.fig.v1.SiteSetCopyrightRequest\032"
  "\026.google.protobuf.Empty\"\000\022L\n\013SetKeywords"
  "\022#.palm.fig.v1.SiteSetKeywordsRequest\032\026."
  "google.protobuf.Empty\"\000\022D\n\007SetInfo\022\037.pal"
  "m.fig.v1.SiteSetInfoRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022D\n\007SetLogo\022\037.palm.fig.v1.S"
  "iteSetLogoRequest\032\026.google.protobuf.Empt"
  "y\"\000\022A\n\tSetTwilio\022\032.palm.fig.v1.TwilioPro"
  "file\032\026.google.protobuf.Empty\"\000\022A\n\tGetTwi"
  "lio\022\026.google.protobuf.Empty\032\032.palm.fig.v"
  "1.TwilioProfile\"\000\022J\n\nPingTwilio\022\".palm.f"
  "ig.v1.SiteTwilioPingRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022=\n\007SetSmtp\022\030.palm.fig.v1.S"
  "mtpProfile\032\026.google.protobuf.Empty\"\000\022=\n\007"
  "GetSmtp\022\026.google.protobuf.Empty\032\030.palm.f"
  "ig.v1.SmtpProfile\"\000\022F\n\010PingSmtp\022 .palm.f"
  "ig.v1.SiteSmtpPingRequest\032\026.google.proto"
  "buf.Empty\"\000\022E\n\013SetIndexNow\022\034.palm.fig.v1"
  ".IndexNowProfile\032\026.google.protobuf.Empty"
  "\"\000\022E\n\013GetIndexNow\022\026.google.protobuf.Empt"
  "y\032\034.palm.fig.v1.IndexNowProfile\"\000\022J\n\014Pin"
  "gIndexNow\022 .palm.fig.v1.IndexNowPingRequ"
  "est\032\026.google.protobuf.Empty\"\000\022A\n\tSetGoog"
  "le\022\032.palm.fig.v1.GoogleProfile\032\026.google."
  "protobuf.Empty\"\000\022A\n\tGetGoogle\022\026.google.p"
  "rotobuf.Empty\032\032.palm.fig.v1.GoogleProfil"
  "e\"\000\022G\n\nPingGoogle\022\037.palm.fig.v1.SitemapP"
  "ingRequest\032\026.google.protobuf.Empty\"\000\022\?\n\010"
  "SetBaidu\022\031.palm.fig.v1.BaiduProfile\032\026.go"
  "ogle.protobuf.Empty\"\000\022\?\n\010GetBaidu\022\026.goog"
  "le.protobuf.Empty\032\031.palm.fig.v1.BaiduPro"
  "file\"\000\022F\n\tPingBaidu\022\037.palm.fig.v1.Sitema"
  "pPingRequest\032\026.google.protobuf.Empty\"\000\022C"
  "\n\006Status\022\026.google.protobuf.Empty\032\037.palm."
  "fig.v1.SiteStatusResponse\"\0002\246\002\n\013ShorterL"
  "ink\022I\n\006Create\022%.palm.fig.v1.ShorterLinkC"
  "reateRequest\032\026.google.protobuf.Empty\"\000\022I"
  "\n\006Update\022%.palm.fig.v1.ShorterLinkUpdate"
  "Request\032\026.google.protobuf.Empty\"\000\022;\n\007Des"
  "troy\022\026.palm.nut.v1.IdRequest\032\026.google.pr"
  "otobuf.Empty\"\000\022D\n\005Index\022\022.palm.nut.v1.Pa"
  "ger\032%.palm.fig.v1.ShorterLinkIndexRespon"
  "se\"\0002\212\002\n\003Tag\022A\n\006Create\022\035.palm.fig.v1.Tag"
  "CreateRequest\032\026.google.protobuf.Empty\"\000\022"
  "A\n\006Update\022\035.palm.fig.v1.TagUpdateRequest"
  "\032\026.google.protobuf.Empty\"\000\022;\n\007Destroy\022\026."
  "palm.nut.v1.IdRequest\032\026.google.protobuf."
  "Empty\"\000\022@\n\005Index\022\026.google.protobuf.Empty"
  "\032\035.palm.fig.v1.TagIndexResponse\"\0002\236\002\n\010Ca"
  "tegory\022F\n\006Create\022\".palm.fig.v1.CategoryC"
  "reateRequest\032\026.google.protobuf.Empty\"\000\022F"
  "\n\006Update\022\".palm.fig.v1.CategoryUpdateReq"
  "uest\032\026.google.protobuf.Empty\"\000\022;\n\007Destro"
  "y\022\026.palm.nut.v1.IdRequest\032\026.google.proto"
  "buf.Empty\"\000\022E\n\005Index\022\026.google.protobuf.E"
  "mpty\032\".palm.fig.v1.CategoryIndexResponse"
  "\"\000B-\n)com.github.saturn_xiv.palm.plugins"
  ".fig.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_fig_2eproto_deps[5] = {
  &::descriptor_table_auth_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_nut_2eproto,
};
static ::_pbi::once_flag descriptor_table_fig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fig_2eproto = {
    false, false, 8017, descriptor_table_protodef_fig_2eproto,
    "fig.proto",
    &descriptor_table_fig_2eproto_once, descriptor_table_fig_2eproto_deps, 5, 50,
    schemas, file_default_instances, TableStruct_fig_2eproto::offsets,
    file_level_metadata_fig_2eproto, file_level_enum_descriptors_fig_2eproto,
    file_level_service_descriptors_fig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fig_2eproto_getter() {
  return &descriptor_table_fig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fig_2eproto(&descriptor_table_fig_2eproto);
namespace palm {
namespace fig {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmtpProfile_AuthMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fig_2eproto);
  return file_level_enum_descriptors_fig_2eproto[0];
}
bool SmtpProfile_AuthMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SmtpProfile_AuthMethod SmtpProfile::None;
constexpr SmtpProfile_AuthMethod SmtpProfile::Login;
constexpr SmtpProfile_AuthMethod SmtpProfile::StartTls;
constexpr SmtpProfile_AuthMethod SmtpProfile::AuthMethod_MIN;
constexpr SmtpProfile_AuthMethod SmtpProfile::AuthMethod_MAX;
constexpr int SmtpProfile::AuthMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class IndexNotificationResponse_Item::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask& email(const IndexNotificationResponse_Item* msg);
  static const ::palm::fig::v1::SmsTask& sms(const IndexNotificationResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const IndexNotificationResponse_Item* msg);
};

const ::palm::fig::v1::EmailTask&
IndexNotificationResponse_Item::_Internal::email(const IndexNotificationResponse_Item* msg) {
  return *msg->_impl_.message_.email_;
}
const ::palm::fig::v1::SmsTask&
IndexNotificationResponse_Item::_Internal::sms(const IndexNotificationResponse_Item* msg) {
  return *msg->_impl_.message_.sms_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IndexNotificationResponse_Item::_Internal::created_at(const IndexNotificationResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void IndexNotificationResponse_Item::set_allocated_email(::palm::fig::v1::EmailTask* email) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (email) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(email);
    if (message_arena != submessage_arena) {
      email = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    set_has_email();
    _impl_.message_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.fig.v1.IndexNotificationResponse.Item.email)
}
void IndexNotificationResponse_Item::set_allocated_sms(::palm::fig::v1::SmsTask* sms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (sms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sms);
    if (message_arena != submessage_arena) {
      sms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    set_has_sms();
    _impl_.message_.sms_ = sms;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.fig.v1.IndexNotificationResponse.Item.sms)
}
void IndexNotificationResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
IndexNotificationResponse_Item::IndexNotificationResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IndexNotificationResponse.Item)
}
IndexNotificationResponse_Item::IndexNotificationResponse_Item(const IndexNotificationResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexNotificationResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  clear_has_message();
  switch (from.message_case()) {
    case kEmail: {
      _this->_internal_mutable_email()->::palm::fig::v1::EmailTask::MergeFrom(
          from._internal_email());
      break;
    }
    case kSms: {
      _this->_internal_mutable_sms()->::palm::fig::v1::SmsTask::MergeFrom(
          from._internal_sms());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IndexNotificationResponse.Item)
}

inline void IndexNotificationResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

IndexNotificationResponse_Item::~IndexNotificationResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IndexNotificationResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexNotificationResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (has_message()) {
    clear_message();
  }
}

void IndexNotificationResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexNotificationResponse_Item::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:palm.fig.v1.IndexNotificationResponse.Item)
  switch (message_case()) {
    case kEmail: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.email_;
      }
      break;
    }
    case kSms: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.sms_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void IndexNotificationResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IndexNotificationResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexNotificationResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.EmailTask email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_email(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SmsTask sms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sms(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexNotificationResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IndexNotificationResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.EmailTask email = 1;
  if (_internal_has_email()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::email(this),
        _Internal::email(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SmsTask sms = 2;
  if (_internal_has_sms()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sms(this),
        _Internal::sms(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 19;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IndexNotificationResponse.Item)
  return target;
}

size_t IndexNotificationResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IndexNotificationResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 19;
  if (this->_internal_has_created_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  switch (message_case()) {
    // .palm.fig.v1.EmailTask email = 1;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.email_);
      break;
    }
    // .palm.fig.v1.SmsTask sms = 2;
    case kSms: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.sms_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexNotificationResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexNotificationResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexNotificationResponse_Item::GetClassData() const { return &_class_data_; }


void IndexNotificationResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexNotificationResponse_Item*>(&to_msg);
  auto& from = static_cast<const IndexNotificationResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IndexNotificationResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  switch (from.message_case()) {
    case kEmail: {
      _this->_internal_mutable_email()->::palm::fig::v1::EmailTask::MergeFrom(
          from._internal_email());
      break;
    }
    case kSms: {
      _this->_internal_mutable_sms()->::palm::fig::v1::SmsTask::MergeFrom(
          from._internal_sms());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexNotificationResponse_Item::CopyFrom(const IndexNotificationResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IndexNotificationResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNotificationResponse_Item::IsInitialized() const {
  return true;
}

void IndexNotificationResponse_Item::InternalSwap(IndexNotificationResponse_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.created_at_, other->_impl_.created_at_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexNotificationResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[0]);
}

// ===================================================================

class IndexNotificationResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const IndexNotificationResponse* msg);
};

const ::palm::nut::v1::Pagination&
IndexNotificationResponse::_Internal::pagination(const IndexNotificationResponse* msg) {
  return *msg->_impl_.pagination_;
}
void IndexNotificationResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
IndexNotificationResponse::IndexNotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IndexNotificationResponse)
}
IndexNotificationResponse::IndexNotificationResponse(const IndexNotificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexNotificationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IndexNotificationResponse)
}

inline void IndexNotificationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexNotificationResponse::~IndexNotificationResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IndexNotificationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexNotificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void IndexNotificationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexNotificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IndexNotificationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexNotificationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.IndexNotificationResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexNotificationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IndexNotificationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.IndexNotificationResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IndexNotificationResponse)
  return target;
}

size_t IndexNotificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IndexNotificationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.IndexNotificationResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexNotificationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexNotificationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexNotificationResponse::GetClassData() const { return &_class_data_; }


void IndexNotificationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexNotificationResponse*>(&to_msg);
  auto& from = static_cast<const IndexNotificationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IndexNotificationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexNotificationResponse::CopyFrom(const IndexNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IndexNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNotificationResponse::IsInitialized() const {
  return true;
}

void IndexNotificationResponse::InternalSwap(IndexNotificationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexNotificationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[1]);
}

// ===================================================================

class LeaveWordIndexResponse_Item::_Internal {
 public:
  static const ::palm::nut::v1::MediaContent& content(const LeaveWordIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LeaveWordIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LeaveWordIndexResponse_Item* msg);
};

const ::palm::nut::v1::MediaContent&
LeaveWordIndexResponse_Item::_Internal::content(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.content_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::updated_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LeaveWordIndexResponse_Item::_Internal::created_at(const LeaveWordIndexResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void LeaveWordIndexResponse_Item::clear_content() {
  if (GetArenaForAllocation() == nullptr && _impl_.content_ != nullptr) {
    delete _impl_.content_;
  }
  _impl_.content_ = nullptr;
}
void LeaveWordIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void LeaveWordIndexResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LeaveWordIndexResponse.Item)
}
LeaveWordIndexResponse_Item::LeaveWordIndexResponse_Item(const LeaveWordIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    _this->_impl_.content_ = new ::palm::nut::v1::MediaContent(*from._impl_.content_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LeaveWordIndexResponse.Item)
}

inline void LeaveWordIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.content_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaveWordIndexResponse_Item::~LeaveWordIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LeaveWordIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.content_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void LeaveWordIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.content_ != nullptr) {
    delete _impl_.content_;
  }
  _impl_.content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LeaveWordIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.LeaveWordIndexResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // .palm.nut.v1.MediaContent content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LeaveWordIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.LeaveWordIndexResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // .palm.nut.v1.MediaContent content = 8;
  if (this->_internal_has_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::content(this),
        _Internal::content(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LeaveWordIndexResponse.Item)
  return target;
}

size_t LeaveWordIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .palm.nut.v1.MediaContent content = 8;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.content_);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp created_at = 12;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordIndexResponse_Item::GetClassData() const { return &_class_data_; }


void LeaveWordIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const LeaveWordIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_content()) {
    _this->_internal_mutable_content()->::palm::nut::v1::MediaContent::MergeFrom(
        from._internal_content());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordIndexResponse_Item::CopyFrom(const LeaveWordIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LeaveWordIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordIndexResponse_Item::IsInitialized() const {
  return true;
}

void LeaveWordIndexResponse_Item::InternalSwap(LeaveWordIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveWordIndexResponse_Item, _impl_.id_)
      + sizeof(LeaveWordIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(LeaveWordIndexResponse_Item, _impl_.content_)>(
          reinterpret_cast<char*>(&_impl_.content_),
          reinterpret_cast<char*>(&other->_impl_.content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[2]);
}

// ===================================================================

class LeaveWordIndexResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const LeaveWordIndexResponse* msg);
};

const ::palm::nut::v1::Pagination&
LeaveWordIndexResponse::_Internal::pagination(const LeaveWordIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
void LeaveWordIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
LeaveWordIndexResponse::LeaveWordIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.LeaveWordIndexResponse)
}
LeaveWordIndexResponse::LeaveWordIndexResponse(const LeaveWordIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveWordIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.LeaveWordIndexResponse)
}

inline void LeaveWordIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveWordIndexResponse::~LeaveWordIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.LeaveWordIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveWordIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void LeaveWordIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveWordIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.LeaveWordIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveWordIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.LeaveWordIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveWordIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.LeaveWordIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.LeaveWordIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.LeaveWordIndexResponse)
  return target;
}

size_t LeaveWordIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.LeaveWordIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.LeaveWordIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveWordIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveWordIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveWordIndexResponse::GetClassData() const { return &_class_data_; }


void LeaveWordIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveWordIndexResponse*>(&to_msg);
  auto& from = static_cast<const LeaveWordIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.LeaveWordIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveWordIndexResponse::CopyFrom(const LeaveWordIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.LeaveWordIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveWordIndexResponse::IsInitialized() const {
  return true;
}

void LeaveWordIndexResponse::InternalSwap(LeaveWordIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveWordIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[3]);
}

// ===================================================================

class IndexNowProfile::_Internal {
 public:
};

IndexNowProfile::IndexNowProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IndexNowProfile)
}
IndexNowProfile::IndexNowProfile(const IndexNowProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexNowProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IndexNowProfile)
}

inline void IndexNowProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexNowProfile::~IndexNowProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IndexNowProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexNowProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void IndexNowProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexNowProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IndexNowProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexNowProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.IndexNowProfile.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexNowProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IndexNowProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.IndexNowProfile.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IndexNowProfile)
  return target;
}

size_t IndexNowProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IndexNowProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexNowProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexNowProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexNowProfile::GetClassData() const { return &_class_data_; }


void IndexNowProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexNowProfile*>(&to_msg);
  auto& from = static_cast<const IndexNowProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IndexNowProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexNowProfile::CopyFrom(const IndexNowProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IndexNowProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNowProfile::IsInitialized() const {
  return true;
}

void IndexNowProfile::InternalSwap(IndexNowProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexNowProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[4]);
}

// ===================================================================

class IndexNowPingRequest::_Internal {
 public:
};

IndexNowPingRequest::IndexNowPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.IndexNowPingRequest)
}
IndexNowPingRequest::IndexNowPingRequest(const IndexNowPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexNowPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.IndexNowPingRequest)
}

inline void IndexNowPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexNowPingRequest::~IndexNowPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.IndexNowPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexNowPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.home_.Destroy();
}

void IndexNowPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexNowPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.IndexNowPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexNowPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.IndexNowPingRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // string home = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.IndexNowPingRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexNowPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.IndexNowPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.IndexNowPingRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string home = 9;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.IndexNowPingRequest.home");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.IndexNowPingRequest)
  return target;
}

size_t IndexNowPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.IndexNowPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string home = 9;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexNowPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexNowPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexNowPingRequest::GetClassData() const { return &_class_data_; }


void IndexNowPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexNowPingRequest*>(&to_msg);
  auto& from = static_cast<const IndexNowPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.IndexNowPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexNowPingRequest::CopyFrom(const IndexNowPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.IndexNowPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexNowPingRequest::IsInitialized() const {
  return true;
}

void IndexNowPingRequest::InternalSwap(IndexNowPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexNowPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[5]);
}

// ===================================================================

class SitemapPingRequest::_Internal {
 public:
};

SitemapPingRequest::SitemapPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SitemapPingRequest)
}
SitemapPingRequest::SitemapPingRequest(const SitemapPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SitemapPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SitemapPingRequest)
}

inline void SitemapPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SitemapPingRequest::~SitemapPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SitemapPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SitemapPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.home_.Destroy();
}

void SitemapPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SitemapPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SitemapPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SitemapPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SitemapPingRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SitemapPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SitemapPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SitemapPingRequest.home");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SitemapPingRequest)
  return target;
}

size_t SitemapPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SitemapPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SitemapPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SitemapPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SitemapPingRequest::GetClassData() const { return &_class_data_; }


void SitemapPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SitemapPingRequest*>(&to_msg);
  auto& from = static_cast<const SitemapPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SitemapPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SitemapPingRequest::CopyFrom(const SitemapPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SitemapPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SitemapPingRequest::IsInitialized() const {
  return true;
}

void SitemapPingRequest::InternalSwap(SitemapPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SitemapPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[6]);
}

// ===================================================================

class SiteMaintenanceModeRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const SiteMaintenanceModeRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SiteMaintenanceModeRequest::_Internal::ttl(const SiteMaintenanceModeRequest* msg) {
  return *msg->_impl_.ttl_;
}
void SiteMaintenanceModeRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
SiteMaintenanceModeRequest::SiteMaintenanceModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteMaintenanceModeRequest)
}
SiteMaintenanceModeRequest::SiteMaintenanceModeRequest(const SiteMaintenanceModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteMaintenanceModeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteMaintenanceModeRequest)
}

inline void SiteMaintenanceModeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteMaintenanceModeRequest::~SiteMaintenanceModeRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteMaintenanceModeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteMaintenanceModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void SiteMaintenanceModeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteMaintenanceModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteMaintenanceModeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteMaintenanceModeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration ttl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteMaintenanceModeRequest.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteMaintenanceModeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteMaintenanceModeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteMaintenanceModeRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteMaintenanceModeRequest)
  return target;
}

size_t SiteMaintenanceModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteMaintenanceModeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .google.protobuf.Duration ttl = 1;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteMaintenanceModeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteMaintenanceModeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteMaintenanceModeRequest::GetClassData() const { return &_class_data_; }


void SiteMaintenanceModeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteMaintenanceModeRequest*>(&to_msg);
  auto& from = static_cast<const SiteMaintenanceModeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteMaintenanceModeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteMaintenanceModeRequest::CopyFrom(const SiteMaintenanceModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteMaintenanceModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteMaintenanceModeRequest::IsInitialized() const {
  return true;
}

void SiteMaintenanceModeRequest::InternalSwap(SiteMaintenanceModeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteMaintenanceModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[7]);
}

// ===================================================================

class SiteInstallRequest::_Internal {
 public:
  static const ::palm::auth::v1::UserSignUpRequest& user(const SiteInstallRequest* msg);
};

const ::palm::auth::v1::UserSignUpRequest&
SiteInstallRequest::_Internal::user(const SiteInstallRequest* msg) {
  return *msg->_impl_.user_;
}
void SiteInstallRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
SiteInstallRequest::SiteInstallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteInstallRequest)
}
SiteInstallRequest::SiteInstallRequest(const SiteInstallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteInstallRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::palm::auth::v1::UserSignUpRequest(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteInstallRequest)
}

inline void SiteInstallRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteInstallRequest::~SiteInstallRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteInstallRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteInstallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void SiteInstallRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteInstallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteInstallRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteInstallRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.auth.v1.UserSignUpRequest user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteInstallRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteInstallRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.auth.v1.UserSignUpRequest user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteInstallRequest)
  return target;
}

size_t SiteInstallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteInstallRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .palm.auth.v1.UserSignUpRequest user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteInstallRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteInstallRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteInstallRequest::GetClassData() const { return &_class_data_; }


void SiteInstallRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteInstallRequest*>(&to_msg);
  auto& from = static_cast<const SiteInstallRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteInstallRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::palm::auth::v1::UserSignUpRequest::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteInstallRequest::CopyFrom(const SiteInstallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteInstallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteInstallRequest::IsInitialized() const {
  return true;
}

void SiteInstallRequest::InternalSwap(SiteInstallRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteInstallRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[8]);
}

// ===================================================================

class TwilioProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<TwilioProfile>()._impl_._has_bits_);
  static void set_has_sms_status_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TwilioProfile::TwilioProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TwilioProfile)
}
TwilioProfile::TwilioProfile(const TwilioProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TwilioProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.account_sid_){}
    , decltype(_impl_.auth_token_){}
    , decltype(_impl_.sms_status_callback_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_sid().empty()) {
    _this->_impl_.account_sid_.Set(from._internal_account_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_token().empty()) {
    _this->_impl_.auth_token_.Set(from._internal_auth_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sms_status_callback_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sms_status_callback_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sms_status_callback()) {
    _this->_impl_.sms_status_callback_.Set(from._internal_sms_status_callback(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TwilioProfile)
}

inline void TwilioProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.account_sid_){}
    , decltype(_impl_.auth_token_){}
    , decltype(_impl_.sms_status_callback_){}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sms_status_callback_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sms_status_callback_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TwilioProfile::~TwilioProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TwilioProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TwilioProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.Destroy();
  _impl_.account_sid_.Destroy();
  _impl_.auth_token_.Destroy();
  _impl_.sms_status_callback_.Destroy();
}

void TwilioProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TwilioProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TwilioProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.ClearToEmpty();
  _impl_.account_sid_.ClearToEmpty();
  _impl_.auth_token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sms_status_callback_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwilioProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.from"));
        } else
          goto handle_unusual;
        continue;
      // string account_sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.account_sid"));
        } else
          goto handle_unusual;
        continue;
      // string auth_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.auth_token"));
        } else
          goto handle_unusual;
        continue;
      // optional string sms_status_callback = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sms_status_callback();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TwilioProfile.sms_status_callback"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwilioProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TwilioProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string account_sid = 2;
  if (!this->_internal_account_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_sid().data(), static_cast<int>(this->_internal_account_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.account_sid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_sid(), target);
  }

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.auth_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth_token(), target);
  }

  // optional string sms_status_callback = 9;
  if (_internal_has_sms_status_callback()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sms_status_callback().data(), static_cast<int>(this->_internal_sms_status_callback().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TwilioProfile.sms_status_callback");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sms_status_callback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TwilioProfile)
  return target;
}

size_t TwilioProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TwilioProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string account_sid = 2;
  if (!this->_internal_account_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_sid());
  }

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // optional string sms_status_callback = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sms_status_callback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwilioProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TwilioProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwilioProfile::GetClassData() const { return &_class_data_; }


void TwilioProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TwilioProfile*>(&to_msg);
  auto& from = static_cast<const TwilioProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TwilioProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_account_sid().empty()) {
    _this->_internal_set_account_sid(from._internal_account_sid());
  }
  if (!from._internal_auth_token().empty()) {
    _this->_internal_set_auth_token(from._internal_auth_token());
  }
  if (from._internal_has_sms_status_callback()) {
    _this->_internal_set_sms_status_callback(from._internal_sms_status_callback());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwilioProfile::CopyFrom(const TwilioProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TwilioProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwilioProfile::IsInitialized() const {
  return true;
}

void TwilioProfile::InternalSwap(TwilioProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_sid_, lhs_arena,
      &other->_impl_.account_sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_token_, lhs_arena,
      &other->_impl_.auth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sms_status_callback_, lhs_arena,
      &other->_impl_.sms_status_callback_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TwilioProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[9]);
}

// ===================================================================

class SmtpProfile::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask_Address& from(const SmtpProfile* msg);
};

const ::palm::fig::v1::EmailTask_Address&
SmtpProfile::_Internal::from(const SmtpProfile* msg) {
  return *msg->_impl_.from_;
}
SmtpProfile::SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SmtpProfile)
}
SmtpProfile::SmtpProfile(const SmtpProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmtpProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){from._impl_.cc_}
    , decltype(_impl_.bcc_){from._impl_.bcc_}
    , decltype(_impl_.host_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.port_){}
    , decltype(_impl_.auth_method_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::palm::fig::v1::EmailTask_Address(*from._impl_.from_);
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auth_method_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.auth_method_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SmtpProfile)
}

inline void SmtpProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){arena}
    , decltype(_impl_.bcc_){arena}
    , decltype(_impl_.host_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.from_){nullptr}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.auth_method_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmtpProfile::~SmtpProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SmtpProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmtpProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_.~RepeatedPtrField();
  _impl_.bcc_.~RepeatedPtrField();
  _impl_.host_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.from_;
}

void SmtpProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmtpProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SmtpProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_.Clear();
  _impl_.bcc_.Clear();
  _impl_.host_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.auth_method_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.auth_method_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmtpProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmtpProfile.host"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SmtpProfile.AuthMethod auth_method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auth_method(static_cast<::palm::fig::v1::SmtpProfile_AuthMethod>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address cc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address bcc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bcc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.EmailTask.Address from = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmtpProfile.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmtpProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SmtpProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmtpProfile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .palm.fig.v1.SmtpProfile.AuthMethod auth_method = 3;
  if (this->_internal_auth_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_auth_method(), target);
  }

  // repeated .palm.fig.v1.EmailTask.Address cc = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cc_size()); i < n; i++) {
    const auto& repfield = this->_internal_cc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bcc_size()); i < n; i++) {
    const auto& repfield = this->_internal_bcc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.EmailTask.Address from = 11;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // string password = 12;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmtpProfile.password");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SmtpProfile)
  return target;
}

size_t SmtpProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SmtpProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.EmailTask.Address cc = 8;
  total_size += 1UL * this->_internal_cc_size();
  for (const auto& msg : this->_impl_.cc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 9;
  total_size += 1UL * this->_internal_bcc_size();
  for (const auto& msg : this->_impl_.bcc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string password = 12;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .palm.fig.v1.EmailTask.Address from = 11;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .palm.fig.v1.SmtpProfile.AuthMethod auth_method = 3;
  if (this->_internal_auth_method() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_auth_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmtpProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmtpProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmtpProfile::GetClassData() const { return &_class_data_; }


void SmtpProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmtpProfile*>(&to_msg);
  auto& from = static_cast<const SmtpProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SmtpProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_.MergeFrom(from._impl_.cc_);
  _this->_impl_.bcc_.MergeFrom(from._impl_.bcc_);
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::palm::fig::v1::EmailTask_Address::MergeFrom(
        from._internal_from());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_auth_method() != 0) {
    _this->_internal_set_auth_method(from._internal_auth_method());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmtpProfile::CopyFrom(const SmtpProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SmtpProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmtpProfile::IsInitialized() const {
  return true;
}

void SmtpProfile::InternalSwap(SmtpProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_.InternalSwap(&other->_impl_.cc_);
  _impl_.bcc_.InternalSwap(&other->_impl_.bcc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmtpProfile, _impl_.auth_method_)
      + sizeof(SmtpProfile::_impl_.auth_method_)
      - PROTOBUF_FIELD_OFFSET(SmtpProfile, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmtpProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[10]);
}

// ===================================================================

class EmailTask_Address::_Internal {
 public:
};

EmailTask_Address::EmailTask_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask.Address)
}
EmailTask_Address::EmailTask_Address(const EmailTask_Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask.Address)
}

inline void EmailTask_Address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Address::~EmailTask_Address() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void EmailTask_Address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Address.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Address.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Address.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Address.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask.Address)
  return target;
}

size_t EmailTask_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Address::GetClassData() const { return &_class_data_; }


void EmailTask_Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Address*>(&to_msg);
  auto& from = static_cast<const EmailTask_Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask.Address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Address::CopyFrom(const EmailTask_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Address::IsInitialized() const {
  return true;
}

void EmailTask_Address::InternalSwap(EmailTask_Address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[11]);
}

// ===================================================================

class EmailTask_Body::_Internal {
 public:
};

EmailTask_Body::EmailTask_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask.Body)
}
EmailTask_Body::EmailTask_Body(const EmailTask_Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Body* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.html_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.html_ = from._impl_.html_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask.Body)
}

inline void EmailTask_Body::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.html_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Body::~EmailTask_Body() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask.Body)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void EmailTask_Body::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Body::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.html_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Body::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Body.text"));
        } else
          goto handle_unusual;
        continue;
      // bool html = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Body.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // bool html = 2;
  if (this->_internal_html() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_html(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask.Body)
  return target;
}

size_t EmailTask_Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask.Body)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // bool html = 2;
  if (this->_internal_html() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Body::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Body::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Body::GetClassData() const { return &_class_data_; }


void EmailTask_Body::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Body*>(&to_msg);
  auto& from = static_cast<const EmailTask_Body&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask.Body)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_html() != 0) {
    _this->_internal_set_html(from._internal_html());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Body::CopyFrom(const EmailTask_Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Body::IsInitialized() const {
  return true;
}

void EmailTask_Body::InternalSwap(EmailTask_Body* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.html_, other->_impl_.html_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Body::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[12]);
}

// ===================================================================

class EmailTask_Attachment::_Internal {
 public:
};

EmailTask_Attachment::EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask.Attachment)
}
EmailTask_Attachment::EmailTask_Attachment(const EmailTask_Attachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask_Attachment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask.Attachment)
}

inline void EmailTask_Attachment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask_Attachment::~EmailTask_Attachment() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask.Attachment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask_Attachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.payload_.Destroy();
}

void EmailTask_Attachment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask_Attachment::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask.Attachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask_Attachment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.Attachment.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask_Attachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask.Attachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.Attachment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask.Attachment)
  return target;
}

size_t EmailTask_Attachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask.Attachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask_Attachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask_Attachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask_Attachment::GetClassData() const { return &_class_data_; }


void EmailTask_Attachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask_Attachment*>(&to_msg);
  auto& from = static_cast<const EmailTask_Attachment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask.Attachment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask_Attachment::CopyFrom(const EmailTask_Attachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask.Attachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask_Attachment::IsInitialized() const {
  return true;
}

void EmailTask_Attachment::InternalSwap(EmailTask_Attachment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask_Attachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[13]);
}

// ===================================================================

class EmailTask::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask_Address& to(const EmailTask* msg);
  static const ::palm::fig::v1::EmailTask_Body& body(const EmailTask* msg);
};

const ::palm::fig::v1::EmailTask_Address&
EmailTask::_Internal::to(const EmailTask* msg) {
  return *msg->_impl_.to_;
}
const ::palm::fig::v1::EmailTask_Body&
EmailTask::_Internal::body(const EmailTask* msg) {
  return *msg->_impl_.body_;
}
EmailTask::EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.EmailTask)
}
EmailTask::EmailTask(const EmailTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmailTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){from._impl_.cc_}
    , decltype(_impl_.bcc_){from._impl_.bcc_}
    , decltype(_impl_.attachments_){from._impl_.attachments_}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::palm::fig::v1::EmailTask_Address(*from._impl_.to_);
  }
  if (from._internal_has_body()) {
    _this->_impl_.body_ = new ::palm::fig::v1::EmailTask_Body(*from._impl_.body_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.EmailTask)
}

inline void EmailTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_){arena}
    , decltype(_impl_.bcc_){arena}
    , decltype(_impl_.attachments_){arena}
    , decltype(_impl_.subject_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.body_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EmailTask::~EmailTask() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.EmailTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmailTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_.~RepeatedPtrField();
  _impl_.bcc_.~RepeatedPtrField();
  _impl_.attachments_.~RepeatedPtrField();
  _impl_.subject_.Destroy();
  if (this != internal_default_instance()) delete _impl_.to_;
  if (this != internal_default_instance()) delete _impl_.body_;
}

void EmailTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmailTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.EmailTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_.Clear();
  _impl_.bcc_.Clear();
  _impl_.attachments_.Clear();
  _impl_.subject_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.EmailTask.Address to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address cc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Address bcc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bcc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string subject = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.EmailTask.subject"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.EmailTask.Body body = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.EmailTask.Attachment attachments = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmailTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.EmailTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Address cc = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cc_size()); i < n; i++) {
    const auto& repfield = this->_internal_cc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bcc_size()); i < n; i++) {
    const auto& repfield = this->_internal_bcc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.EmailTask.subject");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_subject(), target);
  }

  // .palm.fig.v1.EmailTask.Body body = 12;
  if (this->_internal_has_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::body(this),
        _Internal::body(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.EmailTask.Attachment attachments = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachments_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.EmailTask)
  return target;
}

size_t EmailTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.EmailTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.EmailTask.Address cc = 2;
  total_size += 1UL * this->_internal_cc_size();
  for (const auto& msg : this->_impl_.cc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.fig.v1.EmailTask.Address bcc = 3;
  total_size += 1UL * this->_internal_bcc_size();
  for (const auto& msg : this->_impl_.bcc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.fig.v1.EmailTask.Attachment attachments = 13;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->_impl_.attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 11;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .palm.fig.v1.EmailTask.Body body = 12;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmailTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmailTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmailTask::GetClassData() const { return &_class_data_; }


void EmailTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmailTask*>(&to_msg);
  auto& from = static_cast<const EmailTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.EmailTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_.MergeFrom(from._impl_.cc_);
  _this->_impl_.bcc_.MergeFrom(from._impl_.bcc_);
  _this->_impl_.attachments_.MergeFrom(from._impl_.attachments_);
  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::palm::fig::v1::EmailTask_Address::MergeFrom(
        from._internal_to());
  }
  if (from._internal_has_body()) {
    _this->_internal_mutable_body()->::palm::fig::v1::EmailTask_Body::MergeFrom(
        from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmailTask::CopyFrom(const EmailTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.EmailTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailTask::IsInitialized() const {
  return true;
}

void EmailTask::InternalSwap(EmailTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_.InternalSwap(&other->_impl_.cc_);
  _impl_.bcc_.InternalSwap(&other->_impl_.bcc_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmailTask, _impl_.body_)
      + sizeof(EmailTask::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(EmailTask, _impl_.to_)>(
          reinterpret_cast<char*>(&_impl_.to_),
          reinterpret_cast<char*>(&other->_impl_.to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[14]);
}

// ===================================================================

class SiteTwilioPingRequest::_Internal {
 public:
  static const ::palm::fig::v1::TwilioProfile& profile(const SiteTwilioPingRequest* msg);
};

const ::palm::fig::v1::TwilioProfile&
SiteTwilioPingRequest::_Internal::profile(const SiteTwilioPingRequest* msg) {
  return *msg->_impl_.profile_;
}
SiteTwilioPingRequest::SiteTwilioPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteTwilioPingRequest)
}
SiteTwilioPingRequest::SiteTwilioPingRequest(const SiteTwilioPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteTwilioPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_profile()) {
    _this->_impl_.profile_ = new ::palm::fig::v1::TwilioProfile(*from._impl_.profile_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteTwilioPingRequest)
}

inline void SiteTwilioPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteTwilioPingRequest::~SiteTwilioPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteTwilioPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteTwilioPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.profile_;
}

void SiteTwilioPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteTwilioPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteTwilioPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.profile_ != nullptr) {
    delete _impl_.profile_;
  }
  _impl_.profile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteTwilioPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteTwilioPingRequest.to"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteTwilioPingRequest.message"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.TwilioProfile profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteTwilioPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteTwilioPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteTwilioPingRequest.to");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_to(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteTwilioPingRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .palm.fig.v1.TwilioProfile profile = 9;
  if (this->_internal_has_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteTwilioPingRequest)
  return target;
}

size_t SiteTwilioPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteTwilioPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .palm.fig.v1.TwilioProfile profile = 9;
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteTwilioPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteTwilioPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteTwilioPingRequest::GetClassData() const { return &_class_data_; }


void SiteTwilioPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteTwilioPingRequest*>(&to_msg);
  auto& from = static_cast<const SiteTwilioPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteTwilioPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_profile()) {
    _this->_internal_mutable_profile()->::palm::fig::v1::TwilioProfile::MergeFrom(
        from._internal_profile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteTwilioPingRequest::CopyFrom(const SiteTwilioPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteTwilioPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteTwilioPingRequest::IsInitialized() const {
  return true;
}

void SiteTwilioPingRequest::InternalSwap(SiteTwilioPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.profile_, other->_impl_.profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteTwilioPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[15]);
}

// ===================================================================

class SiteSmtpPingRequest::_Internal {
 public:
  static const ::palm::fig::v1::EmailTask_Address& to(const SiteSmtpPingRequest* msg);
  static const ::palm::fig::v1::SmtpProfile& profile(const SiteSmtpPingRequest* msg);
};

const ::palm::fig::v1::EmailTask_Address&
SiteSmtpPingRequest::_Internal::to(const SiteSmtpPingRequest* msg) {
  return *msg->_impl_.to_;
}
const ::palm::fig::v1::SmtpProfile&
SiteSmtpPingRequest::_Internal::profile(const SiteSmtpPingRequest* msg) {
  return *msg->_impl_.profile_;
}
SiteSmtpPingRequest::SiteSmtpPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSmtpPingRequest)
}
SiteSmtpPingRequest::SiteSmtpPingRequest(const SiteSmtpPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSmtpPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject().empty()) {
    _this->_impl_.subject_.Set(from._internal_subject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::palm::fig::v1::EmailTask_Address(*from._impl_.to_);
  }
  if (from._internal_has_profile()) {
    _this->_impl_.profile_ = new ::palm::fig::v1::SmtpProfile(*from._impl_.profile_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSmtpPingRequest)
}

inline void SiteSmtpPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subject_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.profile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSmtpPingRequest::~SiteSmtpPingRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSmtpPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSmtpPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subject_.Destroy();
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.to_;
  if (this != internal_default_instance()) delete _impl_.profile_;
}

void SiteSmtpPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSmtpPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSmtpPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subject_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.profile_ != nullptr) {
    delete _impl_.profile_;
  }
  _impl_.profile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSmtpPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.EmailTask.Address to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSmtpPingRequest.subject"));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSmtpPingRequest.content"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SmtpProfile profile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSmtpPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSmtpPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSmtpPingRequest.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSmtpPingRequest.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // .palm.fig.v1.SmtpProfile profile = 9;
  if (this->_internal_has_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSmtpPingRequest)
  return target;
}

size_t SiteSmtpPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSmtpPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 2;
  if (!this->_internal_subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .palm.fig.v1.EmailTask.Address to = 1;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // .palm.fig.v1.SmtpProfile profile = 9;
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSmtpPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSmtpPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSmtpPingRequest::GetClassData() const { return &_class_data_; }


void SiteSmtpPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSmtpPingRequest*>(&to_msg);
  auto& from = static_cast<const SiteSmtpPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSmtpPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subject().empty()) {
    _this->_internal_set_subject(from._internal_subject());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::palm::fig::v1::EmailTask_Address::MergeFrom(
        from._internal_to());
  }
  if (from._internal_has_profile()) {
    _this->_internal_mutable_profile()->::palm::fig::v1::SmtpProfile::MergeFrom(
        from._internal_profile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSmtpPingRequest::CopyFrom(const SiteSmtpPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSmtpPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSmtpPingRequest::IsInitialized() const {
  return true;
}

void SiteSmtpPingRequest::InternalSwap(SiteSmtpPingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subject_, lhs_arena,
      &other->_impl_.subject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteSmtpPingRequest, _impl_.profile_)
      + sizeof(SiteSmtpPingRequest::_impl_.profile_)
      - PROTOBUF_FIELD_OFFSET(SiteSmtpPingRequest, _impl_.to_)>(
          reinterpret_cast<char*>(&_impl_.to_),
          reinterpret_cast<char*>(&other->_impl_.to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSmtpPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[16]);
}

// ===================================================================

class SiteSetLogoRequest::_Internal {
 public:
};

SiteSetLogoRequest::SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetLogoRequest)
}
SiteSetLogoRequest::SiteSetLogoRequest(const SiteSetLogoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetLogoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetLogoRequest)
}

inline void SiteSetLogoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetLogoRequest::~SiteSetLogoRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetLogoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetLogoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void SiteSetLogoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetLogoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetLogoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetLogoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetLogoRequest.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetLogoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetLogoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetLogoRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetLogoRequest)
  return target;
}

size_t SiteSetLogoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetLogoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetLogoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetLogoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetLogoRequest::GetClassData() const { return &_class_data_; }


void SiteSetLogoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetLogoRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetLogoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetLogoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetLogoRequest::CopyFrom(const SiteSetLogoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetLogoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetLogoRequest::IsInitialized() const {
  return true;
}

void SiteSetLogoRequest::InternalSwap(SiteSetLogoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetLogoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[17]);
}

// ===================================================================

class SiteSetCopyrightRequest::_Internal {
 public:
};

SiteSetCopyrightRequest::SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetCopyrightRequest)
}
SiteSetCopyrightRequest::SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetCopyrightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetCopyrightRequest)
}

inline void SiteSetCopyrightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetCopyrightRequest::~SiteSetCopyrightRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetCopyrightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetCopyrightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SiteSetCopyrightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetCopyrightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetCopyrightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetCopyrightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetCopyrightRequest.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetCopyrightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetCopyrightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetCopyrightRequest.payload");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetCopyrightRequest)
  return target;
}

size_t SiteSetCopyrightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetCopyrightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetCopyrightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetCopyrightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetCopyrightRequest::GetClassData() const { return &_class_data_; }


void SiteSetCopyrightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetCopyrightRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetCopyrightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetCopyrightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetCopyrightRequest::CopyFrom(const SiteSetCopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetCopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetCopyrightRequest::IsInitialized() const {
  return true;
}

void SiteSetCopyrightRequest::InternalSwap(SiteSetCopyrightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetCopyrightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[18]);
}

// ===================================================================

class SiteSetKeywordsRequest::_Internal {
 public:
};

SiteSetKeywordsRequest::SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetKeywordsRequest)
}
SiteSetKeywordsRequest::SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetKeywordsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetKeywordsRequest)
}

inline void SiteSetKeywordsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteSetKeywordsRequest::~SiteSetKeywordsRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetKeywordsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetKeywordsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SiteSetKeywordsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetKeywordsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetKeywordsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetKeywordsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetKeywordsRequest.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetKeywordsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetKeywordsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetKeywordsRequest.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetKeywordsRequest)
  return target;
}

size_t SiteSetKeywordsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetKeywordsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.items_.size());
  for (int i = 0, n = _impl_.items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.items_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetKeywordsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetKeywordsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetKeywordsRequest::GetClassData() const { return &_class_data_; }


void SiteSetKeywordsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetKeywordsRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetKeywordsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetKeywordsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetKeywordsRequest::CopyFrom(const SiteSetKeywordsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetKeywordsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetKeywordsRequest::IsInitialized() const {
  return true;
}

void SiteSetKeywordsRequest::InternalSwap(SiteSetKeywordsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetKeywordsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[19]);
}

// ===================================================================

class SiteSetInfoRequest::_Internal {
 public:
};

SiteSetInfoRequest::SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteSetInfoRequest)
}
SiteSetInfoRequest::SiteSetInfoRequest(const SiteSetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSetInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteSetInfoRequest)
}

inline void SiteSetInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteSetInfoRequest::~SiteSetInfoRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteSetInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
}

void SiteSetInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteSetInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSetInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string title = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.subhead"));
        } else
          goto handle_unusual;
        continue;
      // string description = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteSetInfoRequest.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteSetInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteSetInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string title = 11;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.title");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_title(), target);
  }

  // string subhead = 12;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.subhead");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_subhead(), target);
  }

  // string description = 13;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteSetInfoRequest.description");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteSetInfoRequest)
  return target;
}

size_t SiteSetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteSetInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string title = 11;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 12;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 13;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSetInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSetInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSetInfoRequest::GetClassData() const { return &_class_data_; }


void SiteSetInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSetInfoRequest*>(&to_msg);
  auto& from = static_cast<const SiteSetInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteSetInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSetInfoRequest::CopyFrom(const SiteSetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteSetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSetInfoRequest::IsInitialized() const {
  return true;
}

void SiteSetInfoRequest::InternalSwap(SiteSetInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSetInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[20]);
}

// ===================================================================

class SiteLayoutResponse_Author::_Internal {
 public:
};

SiteLayoutResponse_Author::SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteLayoutResponse.Author)
}
SiteLayoutResponse_Author::SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse_Author* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteLayoutResponse.Author)
}

inline void SiteLayoutResponse_Author::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse_Author::~SiteLayoutResponse_Author() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteLayoutResponse.Author)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse_Author::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.email_.Destroy();
}

void SiteLayoutResponse_Author::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse_Author::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse_Author::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.Author.name"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.Author.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse_Author::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteLayoutResponse.Author)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.Author.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.Author.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteLayoutResponse.Author)
  return target;
}

size_t SiteLayoutResponse_Author::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteLayoutResponse.Author)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse_Author::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse_Author::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse_Author::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse_Author::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse_Author*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse_Author&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteLayoutResponse.Author)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse_Author::CopyFrom(const SiteLayoutResponse_Author& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteLayoutResponse.Author)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse_Author::IsInitialized() const {
  return true;
}

void SiteLayoutResponse_Author::InternalSwap(SiteLayoutResponse_Author* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse_Author::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[21]);
}

// ===================================================================

class SiteLayoutResponse::_Internal {
 public:
  static const ::palm::fig::v1::SiteLayoutResponse_Author& author(const SiteLayoutResponse* msg);
};

const ::palm::fig::v1::SiteLayoutResponse_Author&
SiteLayoutResponse::_Internal::author(const SiteLayoutResponse* msg) {
  return *msg->_impl_.author_;
}
SiteLayoutResponse::SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteLayoutResponse)
}
SiteLayoutResponse::SiteLayoutResponse(const SiteLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keywords_){from._impl_.keywords_}
    , decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subhead().empty()) {
    _this->_impl_.subhead_.Set(from._internal_subhead(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_copyright().empty()) {
    _this->_impl_.copyright_.Set(from._internal_copyright(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::palm::fig::v1::SiteLayoutResponse_Author(*from._impl_.author_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteLayoutResponse)
}

inline void SiteLayoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keywords_){arena}
    , decltype(_impl_.languages_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.subhead_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.copyright_){}
    , decltype(_impl_.logo_){}
    , decltype(_impl_.author_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subhead_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subhead_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyright_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyright_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutResponse::~SiteLayoutResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteLayoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keywords_.~RepeatedPtrField();
  _impl_.languages_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.subhead_.Destroy();
  _impl_.description_.Destroy();
  _impl_.copyright_.Destroy();
  _impl_.logo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
}

void SiteLayoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keywords_.Clear();
  _impl_.languages_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.subhead_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.copyright_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // string subhead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subhead();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.subhead"));
        } else
          goto handle_unusual;
        continue;
      // repeated string keywords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keywords();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.keywords"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.description"));
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteLayoutResponse.Author author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string copyright = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_copyright();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.copyright"));
        } else
          goto handle_unusual;
        continue;
      // string logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.logo"));
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteLayoutResponse.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteLayoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteLayoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subhead().data(), static_cast<int>(this->_internal_subhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.subhead");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subhead(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0, n = this->_internal_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.keywords");
    target = stream->WriteString(3, s, target);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .palm.fig.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_copyright().data(), static_cast<int>(this->_internal_copyright().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.copyright");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_copyright(), target);
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.logo");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logo(), target);
  }

  // repeated string languages = 9;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteLayoutResponse.languages");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteLayoutResponse)
  return target;
}

size_t SiteLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteLayoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keywords = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keywords_.size());
  for (int i = 0, n = _impl_.keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keywords_.Get(i));
  }

  // repeated string languages = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subhead = 2;
  if (!this->_internal_subhead().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subhead());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string copyright = 6;
  if (!this->_internal_copyright().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_copyright());
  }

  // string logo = 7;
  if (!this->_internal_logo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // .palm.fig.v1.SiteLayoutResponse.Author author = 5;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteLayoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keywords_.MergeFrom(from._impl_.keywords_);
  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_subhead().empty()) {
    _this->_internal_set_subhead(from._internal_subhead());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_copyright().empty()) {
    _this->_internal_set_copyright(from._internal_copyright());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::palm::fig::v1::SiteLayoutResponse_Author::MergeFrom(
        from._internal_author());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse::CopyFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse::IsInitialized() const {
  return true;
}

void SiteLayoutResponse::InternalSwap(SiteLayoutResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keywords_.InternalSwap(&other->_impl_.keywords_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subhead_, lhs_arena,
      &other->_impl_.subhead_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyright_, lhs_arena,
      &other->_impl_.copyright_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logo_, lhs_arena,
      &other->_impl_.logo_, rhs_arena
  );
  swap(_impl_.author_, other->_impl_.author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[22]);
}

// ===================================================================

class GoogleProfile_ReCaptcha::_Internal {
 public:
};

GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.GoogleProfile.ReCaptcha)
}
GoogleProfile_ReCaptcha::GoogleProfile_ReCaptcha(const GoogleProfile_ReCaptcha& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleProfile_ReCaptcha* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_key().empty()) {
    _this->_impl_.site_key_.Set(from._internal_site_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.GoogleProfile.ReCaptcha)
}

inline void GoogleProfile_ReCaptcha::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.site_key_){}
    , decltype(_impl_.secret_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.site_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleProfile_ReCaptcha::~GoogleProfile_ReCaptcha() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.GoogleProfile.ReCaptcha)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleProfile_ReCaptcha::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_key_.Destroy();
  _impl_.secret_.Destroy();
}

void GoogleProfile_ReCaptcha::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleProfile_ReCaptcha::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.site_key_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile_ReCaptcha::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string site_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleProfile.ReCaptcha.site_key"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleProfile.ReCaptcha.secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleProfile_ReCaptcha::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_key().data(), static_cast<int>(this->_internal_site_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleProfile.ReCaptcha.site_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_key(), target);
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleProfile.ReCaptcha.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.GoogleProfile.ReCaptcha)
  return target;
}

size_t GoogleProfile_ReCaptcha::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_key = 1;
  if (!this->_internal_site_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_key());
  }

  // string secret = 2;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile_ReCaptcha::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleProfile_ReCaptcha::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile_ReCaptcha::GetClassData() const { return &_class_data_; }


void GoogleProfile_ReCaptcha::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleProfile_ReCaptcha*>(&to_msg);
  auto& from = static_cast<const GoogleProfile_ReCaptcha&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_site_key().empty()) {
    _this->_internal_set_site_key(from._internal_site_key());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile_ReCaptcha::CopyFrom(const GoogleProfile_ReCaptcha& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.GoogleProfile.ReCaptcha)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile_ReCaptcha::IsInitialized() const {
  return true;
}

void GoogleProfile_ReCaptcha::InternalSwap(GoogleProfile_ReCaptcha* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_key_, lhs_arena,
      &other->_impl_.site_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile_ReCaptcha::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[23]);
}

// ===================================================================

class GoogleProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<GoogleProfile>()._impl_._has_bits_);
  static void set_has_site_verify_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::fig::v1::GoogleProfile_ReCaptcha& re_captcha(const GoogleProfile* msg);
  static void set_has_re_captcha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::palm::fig::v1::GoogleProfile_ReCaptcha&
GoogleProfile::_Internal::re_captcha(const GoogleProfile* msg) {
  return *msg->_impl_.re_captcha_;
}
GoogleProfile::GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.GoogleProfile)
}
GoogleProfile::GoogleProfile(const GoogleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
    , decltype(_impl_.re_captcha_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_verify_id()) {
    _this->_impl_.site_verify_id_.Set(from._internal_site_verify_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_re_captcha()) {
    _this->_impl_.re_captcha_ = new ::palm::fig::v1::GoogleProfile_ReCaptcha(*from._impl_.re_captcha_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.GoogleProfile)
}

inline void GoogleProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_id_){}
    , decltype(_impl_.re_captcha_){nullptr}
  };
  _impl_.site_verify_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleProfile::~GoogleProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.GoogleProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_verify_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.re_captcha_;
}

void GoogleProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.GoogleProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.site_verify_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.re_captcha_ != nullptr);
      _impl_.re_captcha_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string site_verify_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_verify_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.GoogleProfile.site_verify_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .palm.fig.v1.GoogleProfile.ReCaptcha re_captcha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_re_captcha(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.GoogleProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string site_verify_id = 1;
  if (_internal_has_site_verify_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_verify_id().data(), static_cast<int>(this->_internal_site_verify_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.GoogleProfile.site_verify_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_verify_id(), target);
  }

  // optional .palm.fig.v1.GoogleProfile.ReCaptcha re_captcha = 2;
  if (_internal_has_re_captcha()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::re_captcha(this),
        _Internal::re_captcha(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.GoogleProfile)
  return target;
}

size_t GoogleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.GoogleProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string site_verify_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_verify_id());
    }

    // optional .palm.fig.v1.GoogleProfile.ReCaptcha re_captcha = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.re_captcha_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleProfile::GetClassData() const { return &_class_data_; }


void GoogleProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleProfile*>(&to_msg);
  auto& from = static_cast<const GoogleProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.GoogleProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_site_verify_id(from._internal_site_verify_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_re_captcha()->::palm::fig::v1::GoogleProfile_ReCaptcha::MergeFrom(
          from._internal_re_captcha());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleProfile::CopyFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.GoogleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile::IsInitialized() const {
  return true;
}

void GoogleProfile::InternalSwap(GoogleProfile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.site_verify_id_, lhs_arena,
      &other->_impl_.site_verify_id_, rhs_arena
  );
  swap(_impl_.re_captcha_, other->_impl_.re_captcha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[24]);
}

// ===================================================================

class BaiduProfile_SiteVerify::_Internal {
 public:
};

BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.BaiduProfile.SiteVerify)
}
BaiduProfile_SiteVerify::BaiduProfile_SiteVerify(const BaiduProfile_SiteVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaiduProfile_SiteVerify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.BaiduProfile.SiteVerify)
}

inline void BaiduProfile_SiteVerify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BaiduProfile_SiteVerify::~BaiduProfile_SiteVerify() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.BaiduProfile.SiteVerify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaiduProfile_SiteVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.content_.Destroy();
}

void BaiduProfile_SiteVerify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaiduProfile_SiteVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.BaiduProfile.SiteVerify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile_SiteVerify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.BaiduProfile.SiteVerify.id"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.BaiduProfile.SiteVerify.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaiduProfile_SiteVerify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.BaiduProfile.SiteVerify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.BaiduProfile.SiteVerify.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.BaiduProfile.SiteVerify.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.BaiduProfile.SiteVerify)
  return target;
}

size_t BaiduProfile_SiteVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.BaiduProfile.SiteVerify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile_SiteVerify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaiduProfile_SiteVerify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile_SiteVerify::GetClassData() const { return &_class_data_; }


void BaiduProfile_SiteVerify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaiduProfile_SiteVerify*>(&to_msg);
  auto& from = static_cast<const BaiduProfile_SiteVerify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.BaiduProfile.SiteVerify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile_SiteVerify::CopyFrom(const BaiduProfile_SiteVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.BaiduProfile.SiteVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile_SiteVerify::IsInitialized() const {
  return true;
}

void BaiduProfile_SiteVerify::InternalSwap(BaiduProfile_SiteVerify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile_SiteVerify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[25]);
}

// ===================================================================

class BaiduProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<BaiduProfile>()._impl_._has_bits_);
  static const ::palm::fig::v1::BaiduProfile_SiteVerify& site_verify(const BaiduProfile* msg);
  static void set_has_site_verify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::fig::v1::BaiduProfile_SiteVerify&
BaiduProfile::_Internal::site_verify(const BaiduProfile* msg) {
  return *msg->_impl_.site_verify_;
}
BaiduProfile::BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.BaiduProfile)
}
BaiduProfile::BaiduProfile(const BaiduProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaiduProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_site_verify()) {
    _this->_impl_.site_verify_ = new ::palm::fig::v1::BaiduProfile_SiteVerify(*from._impl_.site_verify_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.BaiduProfile)
}

inline void BaiduProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.site_verify_){nullptr}
  };
}

BaiduProfile::~BaiduProfile() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.BaiduProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaiduProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.site_verify_;
}

void BaiduProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaiduProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.BaiduProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.site_verify_ != nullptr);
    _impl_.site_verify_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .palm.fig.v1.BaiduProfile.SiteVerify site_verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_site_verify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaiduProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.BaiduProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .palm.fig.v1.BaiduProfile.SiteVerify site_verify = 1;
  if (_internal_has_site_verify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::site_verify(this),
        _Internal::site_verify(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.BaiduProfile)
  return target;
}

size_t BaiduProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.BaiduProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .palm.fig.v1.BaiduProfile.SiteVerify site_verify = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.site_verify_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaiduProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaiduProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaiduProfile::GetClassData() const { return &_class_data_; }


void BaiduProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaiduProfile*>(&to_msg);
  auto& from = static_cast<const BaiduProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.BaiduProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_site_verify()) {
    _this->_internal_mutable_site_verify()->::palm::fig::v1::BaiduProfile_SiteVerify::MergeFrom(
        from._internal_site_verify());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaiduProfile::CopyFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.BaiduProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile::IsInitialized() const {
  return true;
}

void BaiduProfile::InternalSwap(BaiduProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.site_verify_, other->_impl_.site_verify_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[26]);
}

// ===================================================================

class SmsTask::_Internal {
 public:
};

SmsTask::SmsTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SmsTask)
}
SmsTask::SmsTask(const SmsTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmsTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){from._impl_.to_}
    , decltype(_impl_.from_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SmsTask)
}

inline void SmsTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){arena}
    , decltype(_impl_.from_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmsTask::~SmsTask() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SmsTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmsTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.~RepeatedPtrField();
  _impl_.from_.Destroy();
  _impl_.body_.Destroy();
}

void SmsTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmsTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SmsTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.Clear();
  _impl_.from_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmsTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmsTask.from"));
        } else
          goto handle_unusual;
        continue;
      // repeated string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmsTask.to"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SmsTask.body"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmsTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SmsTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmsTask.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated string to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmsTask.to");
    target = stream->WriteString(2, s, target);
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SmsTask.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SmsTask)
  return target;
}

size_t SmsTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SmsTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.to_.size());
  for (int i = 0, n = _impl_.to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.to_.Get(i));
  }

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmsTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmsTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmsTask::GetClassData() const { return &_class_data_; }


void SmsTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmsTask*>(&to_msg);
  auto& from = static_cast<const SmsTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SmsTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_.MergeFrom(from._impl_.to_);
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmsTask::CopyFrom(const SmsTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SmsTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsTask::IsInitialized() const {
  return true;
}

void SmsTask::InternalSwap(SmsTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.to_.InternalSwap(&other->_impl_.to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SmsTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[27]);
}

// ===================================================================

class SiteStatusResponse_Database::_Internal {
 public:
};

SiteStatusResponse_Database::SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Database)
}
SiteStatusResponse_Database::SiteStatusResponse_Database(const SiteStatusResponse_Database& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Database* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_size().empty()) {
    _this->_impl_.size_.Set(from._internal_size(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Database)
}

inline void SiteStatusResponse_Database::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Database::~SiteStatusResponse_Database() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Database)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Database::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.size_.Destroy();
}

void SiteStatusResponse_Database::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Database)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.size_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Database::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Database.name"));
        } else
          goto handle_unusual;
        continue;
      // string size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Database.size"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Database::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Database)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Database.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Database.size");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Database)
  return target;
}

size_t SiteStatusResponse_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Database)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string size = 2;
  if (!this->_internal_size().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Database::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Database::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Database::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Database::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Database*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Database&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Database)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_size().empty()) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Database::CopyFrom(const SiteStatusResponse_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Database::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Database::InternalSwap(SiteStatusResponse_Database* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.size_, lhs_arena,
      &other->_impl_.size_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Database::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[28]);
}

// ===================================================================

class SiteStatusResponse_PostgreSql::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& now(const SiteStatusResponse_PostgreSql* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SiteStatusResponse_PostgreSql::_Internal::now(const SiteStatusResponse_PostgreSql* msg) {
  return *msg->_impl_.now_;
}
void SiteStatusResponse_PostgreSql::clear_now() {
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.PostgreSql)
}
SiteStatusResponse_PostgreSql::SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_PostgreSql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.databases_){from._impl_.databases_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.now_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_now()) {
    _this->_impl_.now_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.now_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.PostgreSql)
}

inline void SiteStatusResponse_PostgreSql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.databases_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.now_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_PostgreSql::~SiteStatusResponse_PostgreSql() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.PostgreSql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_PostgreSql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.databases_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.now_;
}

void SiteStatusResponse_PostgreSql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_PostgreSql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.databases_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.now_ != nullptr) {
    delete _impl_.now_;
  }
  _impl_.now_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_PostgreSql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.PostgreSql.version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp now = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.SiteStatusResponse.Database databases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_databases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_PostgreSql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.PostgreSql.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::now(this),
        _Internal::now(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.SiteStatusResponse.Database databases = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_databases_size()); i < n; i++) {
    const auto& repfield = this->_internal_databases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.PostgreSql)
  return target;
}

size_t SiteStatusResponse_PostgreSql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SiteStatusResponse.Database databases = 9;
  total_size += 1UL * this->_internal_databases_size();
  for (const auto& msg : this->_impl_.databases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp now = 2;
  if (this->_internal_has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.now_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_PostgreSql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_PostgreSql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_PostgreSql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_PostgreSql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_PostgreSql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_PostgreSql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.databases_.MergeFrom(from._impl_.databases_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_now()) {
    _this->_internal_mutable_now()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_now());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_PostgreSql::CopyFrom(const SiteStatusResponse_PostgreSql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.PostgreSql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_PostgreSql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_PostgreSql::InternalSwap(SiteStatusResponse_PostgreSql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.databases_.InternalSwap(&other->_impl_.databases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.now_, other->_impl_.now_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_PostgreSql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[29]);
}

// ===================================================================

class SiteStatusResponse_MySql::_Internal {
 public:
};

SiteStatusResponse_MySql::SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.MySql)
}
SiteStatusResponse_MySql::SiteStatusResponse_MySql(const SiteStatusResponse_MySql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_MySql* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.MySql)
}

inline void SiteStatusResponse_MySql::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_MySql::~SiteStatusResponse_MySql() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.MySql)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_MySql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void SiteStatusResponse_MySql::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_MySql::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.MySql)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_MySql::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.MySql.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_MySql::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.MySql)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.MySql.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.MySql)
  return target;
}

size_t SiteStatusResponse_MySql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.MySql)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_MySql::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_MySql::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_MySql::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_MySql::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_MySql*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_MySql&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.MySql)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_MySql::CopyFrom(const SiteStatusResponse_MySql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.MySql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_MySql::IsInitialized() const {
  return true;
}

void SiteStatusResponse_MySql::InternalSwap(SiteStatusResponse_MySql* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_MySql::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[30]);
}

// ===================================================================

class SiteStatusResponse_Redis_Item::_Internal {
 public:
};

SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Redis.Item)
}
SiteStatusResponse_Redis_Item::SiteStatusResponse_Redis_Item(const SiteStatusResponse_Redis_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.ttl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    _this->_impl_.node_.Set(from._internal_node(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ttl_ = from._impl_.ttl_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Redis.Item)
}

inline void SiteStatusResponse_Redis_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.ttl_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Redis_Item::~SiteStatusResponse_Redis_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Redis.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.Destroy();
  _impl_.key_.Destroy();
}

void SiteStatusResponse_Redis_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.ttl_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Redis.Item.node"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Redis.Item.key"));
        } else
          goto handle_unusual;
        continue;
      // int64 ttl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node = 1;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Redis.Item.node");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Redis.Item.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // int64 ttl = 3;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Redis.Item)
  return target;
}

size_t SiteStatusResponse_Redis_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node = 1;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 ttl = 3;
  if (this->_internal_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis_Item::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis_Item*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _this->_internal_set_node(from._internal_node());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_ttl() != 0) {
    _this->_internal_set_ttl(from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis_Item::CopyFrom(const SiteStatusResponse_Redis_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Redis.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis_Item::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis_Item::InternalSwap(SiteStatusResponse_Redis_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_, lhs_arena,
      &other->_impl_.node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[31]);
}

// ===================================================================

class SiteStatusResponse_Redis::_Internal {
 public:
};

SiteStatusResponse_Redis::SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Redis)
}
SiteStatusResponse_Redis::SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Redis* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Redis)
}

inline void SiteStatusResponse_Redis::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Redis::~SiteStatusResponse_Redis() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Redis)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Redis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.info_.Destroy();
}

void SiteStatusResponse_Redis::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Redis::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Redis::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Redis.info"));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.SiteStatusResponse.Redis.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Redis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Redis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Redis.info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_info(), target);
  }

  // repeated .palm.fig.v1.SiteStatusResponse.Redis.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Redis)
  return target;
}

size_t SiteStatusResponse_Redis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Redis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SiteStatusResponse.Redis.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string info = 1;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Redis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Redis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Redis::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Redis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Redis*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Redis&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Redis)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Redis::CopyFrom(const SiteStatusResponse_Redis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Redis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Redis::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Redis::InternalSwap(SiteStatusResponse_Redis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Redis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[32]);
}

// ===================================================================

class SiteStatusResponse_RabbitMq::_Internal {
 public:
};

SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.RabbitMq)
}
SiteStatusResponse_RabbitMq::SiteStatusResponse_RabbitMq(const SiteStatusResponse_RabbitMq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_RabbitMq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , decltype(_impl_.heartbeat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.heartbeat_ = from._impl_.heartbeat_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.RabbitMq)
}

inline void SiteStatusResponse_RabbitMq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.protocol_){}
    , decltype(_impl_.heartbeat_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_RabbitMq::~SiteStatusResponse_RabbitMq() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.RabbitMq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_RabbitMq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.protocol_.Destroy();
}

void SiteStatusResponse_RabbitMq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_RabbitMq::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_.ClearToEmpty();
  _impl_.heartbeat_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_RabbitMq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.RabbitMq.protocol"));
        } else
          goto handle_unusual;
        continue;
      // uint32 heartbeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.heartbeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_RabbitMq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.RabbitMq.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  // uint32 heartbeat = 2;
  if (this->_internal_heartbeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heartbeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.RabbitMq)
  return target;
}

size_t SiteStatusResponse_RabbitMq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 1;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // uint32 heartbeat = 2;
  if (this->_internal_heartbeat() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_heartbeat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_RabbitMq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_RabbitMq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_RabbitMq::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_RabbitMq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_RabbitMq*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_RabbitMq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_heartbeat() != 0) {
    _this->_internal_set_heartbeat(from._internal_heartbeat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_RabbitMq::CopyFrom(const SiteStatusResponse_RabbitMq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.RabbitMq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_RabbitMq::IsInitialized() const {
  return true;
}

void SiteStatusResponse_RabbitMq::InternalSwap(SiteStatusResponse_RabbitMq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  swap(_impl_.heartbeat_, other->_impl_.heartbeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_RabbitMq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[33]);
}

// ===================================================================

class SiteStatusResponse_OpenSearch::_Internal {
 public:
};

SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.OpenSearch)
}
SiteStatusResponse_OpenSearch::SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_OpenSearch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.OpenSearch)
}

inline void SiteStatusResponse_OpenSearch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_OpenSearch::~SiteStatusResponse_OpenSearch() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.OpenSearch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_OpenSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.info_.Destroy();
}

void SiteStatusResponse_OpenSearch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_OpenSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_OpenSearch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.OpenSearch.url"));
        } else
          goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.OpenSearch.info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_OpenSearch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.OpenSearch.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.OpenSearch.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.OpenSearch)
  return target;
}

size_t SiteStatusResponse_OpenSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string info = 2;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_OpenSearch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_OpenSearch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_OpenSearch::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_OpenSearch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_OpenSearch*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_OpenSearch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_OpenSearch::CopyFrom(const SiteStatusResponse_OpenSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.OpenSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_OpenSearch::IsInitialized() const {
  return true;
}

void SiteStatusResponse_OpenSearch::InternalSwap(SiteStatusResponse_OpenSearch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_OpenSearch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[34]);
}

// ===================================================================

class SiteStatusResponse_Health::_Internal {
 public:
};

SiteStatusResponse_Health::SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.Health)
}
SiteStatusResponse_Health::SiteStatusResponse_Health(const SiteStatusResponse_Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_Health* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.Health)
}

inline void SiteStatusResponse_Health::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_Health::~SiteStatusResponse_Health() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.Health)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_Health::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.status_.Destroy();
}

void SiteStatusResponse_Health::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_Health::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.Health)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_Health::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Health.name"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.Health.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_Health::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.Health)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Health.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.Health.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.Health)
  return target;
}

size_t SiteStatusResponse_Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.Health)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_Health::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_Health::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_Health::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_Health::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_Health*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_Health&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.Health)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_Health::CopyFrom(const SiteStatusResponse_Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_Health::IsInitialized() const {
  return true;
}

void SiteStatusResponse_Health::InternalSwap(SiteStatusResponse_Health* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_Health::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[35]);
}

// ===================================================================

class SiteStatusResponse_System::_Internal {
 public:
};

SiteStatusResponse_System::SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse.System)
}
SiteStatusResponse_System::SiteStatusResponse_System(const SiteStatusResponse_System& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse_System* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.boot_){}
    , decltype(_impl_.disk_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.swap_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu().empty()) {
    _this->_impl_.cpu_.Set(from._internal_cpu(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory().empty()) {
    _this->_impl_.memory_.Set(from._internal_memory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.boot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_boot().empty()) {
    _this->_impl_.boot_.Set(from._internal_boot(), 
      _this->GetArenaForAllocation());
  }
  _impl_.disk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disk().empty()) {
    _this->_impl_.disk_.Set(from._internal_disk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.load_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load().empty()) {
    _this->_impl_.load_.Set(from._internal_load(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fs().empty()) {
    _this->_impl_.fs_.Set(from._internal_fs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.swap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.swap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_swap().empty()) {
    _this->_impl_.swap_.Set(from._internal_swap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uptime().empty()) {
    _this->_impl_.uptime_.Set(from._internal_uptime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse.System)
}

inline void SiteStatusResponse_System::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.cpu_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.boot_){}
    , decltype(_impl_.disk_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.swap_){}
    , decltype(_impl_.uptime_){}
    , decltype(_impl_.network_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpu_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.boot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.boot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.disk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.load_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.swap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.swap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uptime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uptime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteStatusResponse_System::~SiteStatusResponse_System() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse.System)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse_System::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.cpu_.Destroy();
  _impl_.memory_.Destroy();
  _impl_.boot_.Destroy();
  _impl_.disk_.Destroy();
  _impl_.load_.Destroy();
  _impl_.fs_.Destroy();
  _impl_.swap_.Destroy();
  _impl_.uptime_.Destroy();
  _impl_.network_.Destroy();
}

void SiteStatusResponse_System::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse_System::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse.System)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.cpu_.ClearToEmpty();
  _impl_.memory_.ClearToEmpty();
  _impl_.boot_.ClearToEmpty();
  _impl_.disk_.ClearToEmpty();
  _impl_.load_.ClearToEmpty();
  _impl_.fs_.ClearToEmpty();
  _impl_.swap_.ClearToEmpty();
  _impl_.uptime_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse_System::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.version"));
        } else
          goto handle_unusual;
        continue;
      // string cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cpu();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.cpu"));
        } else
          goto handle_unusual;
        continue;
      // string memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.memory"));
        } else
          goto handle_unusual;
        continue;
      // string boot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_boot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.boot"));
        } else
          goto handle_unusual;
        continue;
      // string disk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_disk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.disk"));
        } else
          goto handle_unusual;
        continue;
      // string load = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_load();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.load"));
        } else
          goto handle_unusual;
        continue;
      // string fs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.fs"));
        } else
          goto handle_unusual;
        continue;
      // string swap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_swap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.swap"));
        } else
          goto handle_unusual;
        continue;
      // string uptime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_uptime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.uptime"));
        } else
          goto handle_unusual;
        continue;
      // string network = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.SiteStatusResponse.System.network"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse_System::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse.System)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.cpu");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu(), target);
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory().data(), static_cast<int>(this->_internal_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.memory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memory(), target);
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boot().data(), static_cast<int>(this->_internal_boot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.boot");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_boot(), target);
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disk().data(), static_cast<int>(this->_internal_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.disk");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_disk(), target);
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load().data(), static_cast<int>(this->_internal_load().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.load");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_load(), target);
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fs().data(), static_cast<int>(this->_internal_fs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.fs");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fs(), target);
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_swap().data(), static_cast<int>(this->_internal_swap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.swap");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_swap(), target);
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uptime().data(), static_cast<int>(this->_internal_uptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.uptime");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uptime(), target);
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.SiteStatusResponse.System.network");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse.System)
  return target;
}

size_t SiteStatusResponse_System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse.System)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string memory = 3;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory());
  }

  // string boot = 4;
  if (!this->_internal_boot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boot());
  }

  // string disk = 5;
  if (!this->_internal_disk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disk());
  }

  // string load = 6;
  if (!this->_internal_load().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load());
  }

  // string fs = 7;
  if (!this->_internal_fs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fs());
  }

  // string swap = 8;
  if (!this->_internal_swap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_swap());
  }

  // string uptime = 9;
  if (!this->_internal_uptime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uptime());
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse_System::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse_System::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse_System::GetClassData() const { return &_class_data_; }


void SiteStatusResponse_System::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse_System*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse_System&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse.System)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_cpu().empty()) {
    _this->_internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_memory().empty()) {
    _this->_internal_set_memory(from._internal_memory());
  }
  if (!from._internal_boot().empty()) {
    _this->_internal_set_boot(from._internal_boot());
  }
  if (!from._internal_disk().empty()) {
    _this->_internal_set_disk(from._internal_disk());
  }
  if (!from._internal_load().empty()) {
    _this->_internal_set_load(from._internal_load());
  }
  if (!from._internal_fs().empty()) {
    _this->_internal_set_fs(from._internal_fs());
  }
  if (!from._internal_swap().empty()) {
    _this->_internal_set_swap(from._internal_swap());
  }
  if (!from._internal_uptime().empty()) {
    _this->_internal_set_uptime(from._internal_uptime());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse_System::CopyFrom(const SiteStatusResponse_System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse_System::IsInitialized() const {
  return true;
}

void SiteStatusResponse_System::InternalSwap(SiteStatusResponse_System* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_, lhs_arena,
      &other->_impl_.cpu_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_, lhs_arena,
      &other->_impl_.memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.boot_, lhs_arena,
      &other->_impl_.boot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disk_, lhs_arena,
      &other->_impl_.disk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_, lhs_arena,
      &other->_impl_.load_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fs_, lhs_arena,
      &other->_impl_.fs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.swap_, lhs_arena,
      &other->_impl_.swap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uptime_, lhs_arena,
      &other->_impl_.uptime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse_System::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[36]);
}

// ===================================================================

class SiteStatusResponse::_Internal {
 public:
  static const ::palm::fig::v1::SiteStatusResponse_PostgreSql& postgresql(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_MySql& mysql(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_Redis& redis(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_RabbitMq& rabbitmq(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_OpenSearch& opensearch(const SiteStatusResponse* msg);
  static const ::palm::fig::v1::SiteStatusResponse_System& system(const SiteStatusResponse* msg);
};

const ::palm::fig::v1::SiteStatusResponse_PostgreSql&
SiteStatusResponse::_Internal::postgresql(const SiteStatusResponse* msg) {
  return *msg->_impl_.postgresql_;
}
const ::palm::fig::v1::SiteStatusResponse_MySql&
SiteStatusResponse::_Internal::mysql(const SiteStatusResponse* msg) {
  return *msg->_impl_.mysql_;
}
const ::palm::fig::v1::SiteStatusResponse_Redis&
SiteStatusResponse::_Internal::redis(const SiteStatusResponse* msg) {
  return *msg->_impl_.redis_;
}
const ::palm::fig::v1::SiteStatusResponse_RabbitMq&
SiteStatusResponse::_Internal::rabbitmq(const SiteStatusResponse* msg) {
  return *msg->_impl_.rabbitmq_;
}
const ::palm::fig::v1::SiteStatusResponse_OpenSearch&
SiteStatusResponse::_Internal::opensearch(const SiteStatusResponse* msg) {
  return *msg->_impl_.opensearch_;
}
const ::palm::fig::v1::SiteStatusResponse_System&
SiteStatusResponse::_Internal::system(const SiteStatusResponse* msg) {
  return *msg->_impl_.system_;
}
SiteStatusResponse::SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.SiteStatusResponse)
}
SiteStatusResponse::SiteStatusResponse(const SiteStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.healthes_){from._impl_.healthes_}
    , decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.mysql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.rabbitmq_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_postgresql()) {
    _this->_impl_.postgresql_ = new ::palm::fig::v1::SiteStatusResponse_PostgreSql(*from._impl_.postgresql_);
  }
  if (from._internal_has_mysql()) {
    _this->_impl_.mysql_ = new ::palm::fig::v1::SiteStatusResponse_MySql(*from._impl_.mysql_);
  }
  if (from._internal_has_redis()) {
    _this->_impl_.redis_ = new ::palm::fig::v1::SiteStatusResponse_Redis(*from._impl_.redis_);
  }
  if (from._internal_has_rabbitmq()) {
    _this->_impl_.rabbitmq_ = new ::palm::fig::v1::SiteStatusResponse_RabbitMq(*from._impl_.rabbitmq_);
  }
  if (from._internal_has_opensearch()) {
    _this->_impl_.opensearch_ = new ::palm::fig::v1::SiteStatusResponse_OpenSearch(*from._impl_.opensearch_);
  }
  if (from._internal_has_system()) {
    _this->_impl_.system_ = new ::palm::fig::v1::SiteStatusResponse_System(*from._impl_.system_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.SiteStatusResponse)
}

inline void SiteStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.healthes_){arena}
    , decltype(_impl_.postgresql_){nullptr}
    , decltype(_impl_.mysql_){nullptr}
    , decltype(_impl_.redis_){nullptr}
    , decltype(_impl_.rabbitmq_){nullptr}
    , decltype(_impl_.opensearch_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteStatusResponse::~SiteStatusResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.SiteStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.healthes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.postgresql_;
  if (this != internal_default_instance()) delete _impl_.mysql_;
  if (this != internal_default_instance()) delete _impl_.redis_;
  if (this != internal_default_instance()) delete _impl_.rabbitmq_;
  if (this != internal_default_instance()) delete _impl_.opensearch_;
  if (this != internal_default_instance()) delete _impl_.system_;
}

void SiteStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.healthes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.postgresql_ != nullptr) {
    delete _impl_.postgresql_;
  }
  _impl_.postgresql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mysql_ != nullptr) {
    delete _impl_.mysql_;
  }
  _impl_.mysql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.redis_ != nullptr) {
    delete _impl_.redis_;
  }
  _impl_.redis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rabbitmq_ != nullptr) {
    delete _impl_.rabbitmq_;
  }
  _impl_.rabbitmq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opensearch_ != nullptr) {
    delete _impl_.opensearch_;
  }
  _impl_.opensearch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.fig.v1.SiteStatusResponse.PostgreSql postgresql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_postgresql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.MySql mysql = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mysql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.Redis redis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rabbitmq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.OpenSearch opensearch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_opensearch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.fig.v1.SiteStatusResponse.System system = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.SiteStatusResponse.Health healthes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_healthes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SiteStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.SiteStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.fig.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::postgresql(this),
        _Internal::postgresql(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mysql(this),
        _Internal::mysql(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::redis(this),
        _Internal::redis(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rabbitmq(this),
        _Internal::rabbitmq(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::opensearch(this),
        _Internal::opensearch(this).GetCachedSize(), target, stream);
  }

  // .palm.fig.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.SiteStatusResponse.Health healthes = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_healthes_size()); i < n; i++) {
    const auto& repfield = this->_internal_healthes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.SiteStatusResponse)
  return target;
}

size_t SiteStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.SiteStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.SiteStatusResponse.Health healthes = 21;
  total_size += 2UL * this->_internal_healthes_size();
  for (const auto& msg : this->_impl_.healthes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.fig.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  if (this->_internal_has_postgresql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.postgresql_);
  }

  // .palm.fig.v1.SiteStatusResponse.MySql mysql = 2;
  if (this->_internal_has_mysql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mysql_);
  }

  // .palm.fig.v1.SiteStatusResponse.Redis redis = 3;
  if (this->_internal_has_redis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redis_);
  }

  // .palm.fig.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  if (this->_internal_has_rabbitmq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rabbitmq_);
  }

  // .palm.fig.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  if (this->_internal_has_opensearch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opensearch_);
  }

  // .palm.fig.v1.SiteStatusResponse.System system = 11;
  if (this->_internal_has_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteStatusResponse::GetClassData() const { return &_class_data_; }


void SiteStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteStatusResponse*>(&to_msg);
  auto& from = static_cast<const SiteStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.SiteStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.healthes_.MergeFrom(from._impl_.healthes_);
  if (from._internal_has_postgresql()) {
    _this->_internal_mutable_postgresql()->::palm::fig::v1::SiteStatusResponse_PostgreSql::MergeFrom(
        from._internal_postgresql());
  }
  if (from._internal_has_mysql()) {
    _this->_internal_mutable_mysql()->::palm::fig::v1::SiteStatusResponse_MySql::MergeFrom(
        from._internal_mysql());
  }
  if (from._internal_has_redis()) {
    _this->_internal_mutable_redis()->::palm::fig::v1::SiteStatusResponse_Redis::MergeFrom(
        from._internal_redis());
  }
  if (from._internal_has_rabbitmq()) {
    _this->_internal_mutable_rabbitmq()->::palm::fig::v1::SiteStatusResponse_RabbitMq::MergeFrom(
        from._internal_rabbitmq());
  }
  if (from._internal_has_opensearch()) {
    _this->_internal_mutable_opensearch()->::palm::fig::v1::SiteStatusResponse_OpenSearch::MergeFrom(
        from._internal_opensearch());
  }
  if (from._internal_has_system()) {
    _this->_internal_mutable_system()->::palm::fig::v1::SiteStatusResponse_System::MergeFrom(
        from._internal_system());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteStatusResponse::CopyFrom(const SiteStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.SiteStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteStatusResponse::IsInitialized() const {
  return true;
}

void SiteStatusResponse::InternalSwap(SiteStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.healthes_.InternalSwap(&other->_impl_.healthes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.system_)
      + sizeof(SiteStatusResponse::_impl_.system_)
      - PROTOBUF_FIELD_OFFSET(SiteStatusResponse, _impl_.postgresql_)>(
          reinterpret_cast<char*>(&_impl_.postgresql_),
          reinterpret_cast<char*>(&other->_impl_.postgresql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[37]);
}

// ===================================================================

class ShorterLinkIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ShorterLinkIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShorterLinkIndexResponse_Item::_Internal::updated_at(const ShorterLinkIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void ShorterLinkIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
ShorterLinkIndexResponse_Item::ShorterLinkIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkIndexResponse.Item)
}
ShorterLinkIndexResponse_Item::ShorterLinkIndexResponse_Item(const ShorterLinkIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkIndexResponse.Item)
}

inline void ShorterLinkIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShorterLinkIndexResponse_Item::~ShorterLinkIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.details_.Destroy();
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void ShorterLinkIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkIndexResponse.Item.url"));
        } else
          goto handle_unusual;
        continue;
      // string details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkIndexResponse.Item.details"));
        } else
          goto handle_unusual;
        continue;
      // string code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkIndexResponse.Item.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkIndexResponse.Item.details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_details(), target);
  }

  // string code = 9;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_code(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkIndexResponse.Item)
  return target;
}

size_t ShorterLinkIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // string code = 9;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkIndexResponse_Item::GetClassData() const { return &_class_data_; }


void ShorterLinkIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const ShorterLinkIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkIndexResponse_Item::CopyFrom(const ShorterLinkIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkIndexResponse_Item::IsInitialized() const {
  return true;
}

void ShorterLinkIndexResponse_Item::InternalSwap(ShorterLinkIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShorterLinkIndexResponse_Item, _impl_.id_)
      + sizeof(ShorterLinkIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ShorterLinkIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[38]);
}

// ===================================================================

class ShorterLinkIndexResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const ShorterLinkIndexResponse* msg);
};

const ::palm::nut::v1::Pagination&
ShorterLinkIndexResponse::_Internal::pagination(const ShorterLinkIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
void ShorterLinkIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
ShorterLinkIndexResponse::ShorterLinkIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkIndexResponse)
}
ShorterLinkIndexResponse::ShorterLinkIndexResponse(const ShorterLinkIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkIndexResponse)
}

inline void ShorterLinkIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShorterLinkIndexResponse::~ShorterLinkIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ShorterLinkIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.nut.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.fig.v1.ShorterLinkIndexResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.fig.v1.ShorterLinkIndexResponse.Item items = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkIndexResponse)
  return target;
}

size_t ShorterLinkIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.ShorterLinkIndexResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkIndexResponse::GetClassData() const { return &_class_data_; }


void ShorterLinkIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkIndexResponse*>(&to_msg);
  auto& from = static_cast<const ShorterLinkIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkIndexResponse::CopyFrom(const ShorterLinkIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkIndexResponse::IsInitialized() const {
  return true;
}

void ShorterLinkIndexResponse::InternalSwap(ShorterLinkIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[39]);
}

// ===================================================================

class ShorterLinkCreateRequest::_Internal {
 public:
};

ShorterLinkCreateRequest::ShorterLinkCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkCreateRequest)
}
ShorterLinkCreateRequest::ShorterLinkCreateRequest(const ShorterLinkCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkCreateRequest)
}

inline void ShorterLinkCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShorterLinkCreateRequest::~ShorterLinkCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.details_.Destroy();
}

void ShorterLinkCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkCreateRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkCreateRequest.details"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkCreateRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string details = 2;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkCreateRequest.details");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkCreateRequest)
  return target;
}

size_t ShorterLinkCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string details = 2;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkCreateRequest::GetClassData() const { return &_class_data_; }


void ShorterLinkCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkCreateRequest*>(&to_msg);
  auto& from = static_cast<const ShorterLinkCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkCreateRequest::CopyFrom(const ShorterLinkCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkCreateRequest::IsInitialized() const {
  return true;
}

void ShorterLinkCreateRequest::InternalSwap(ShorterLinkCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[40]);
}

// ===================================================================

class ShorterLinkUpdateRequest::_Internal {
 public:
};

ShorterLinkUpdateRequest::ShorterLinkUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.ShorterLinkUpdateRequest)
}
ShorterLinkUpdateRequest::ShorterLinkUpdateRequest(const ShorterLinkUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShorterLinkUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.ShorterLinkUpdateRequest)
}

inline void ShorterLinkUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.details_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShorterLinkUpdateRequest::~ShorterLinkUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.ShorterLinkUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShorterLinkUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.details_.Destroy();
}

void ShorterLinkUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShorterLinkUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.ShorterLinkUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShorterLinkUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkUpdateRequest.url"));
        } else
          goto handle_unusual;
        continue;
      // string details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.ShorterLinkUpdateRequest.details"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShorterLinkUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.ShorterLinkUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkUpdateRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.ShorterLinkUpdateRequest.details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.ShorterLinkUpdateRequest)
  return target;
}

size_t ShorterLinkUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.ShorterLinkUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShorterLinkUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShorterLinkUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShorterLinkUpdateRequest::GetClassData() const { return &_class_data_; }


void ShorterLinkUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShorterLinkUpdateRequest*>(&to_msg);
  auto& from = static_cast<const ShorterLinkUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.ShorterLinkUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShorterLinkUpdateRequest::CopyFrom(const ShorterLinkUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.ShorterLinkUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShorterLinkUpdateRequest::IsInitialized() const {
  return true;
}

void ShorterLinkUpdateRequest::InternalSwap(ShorterLinkUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_, lhs_arena,
      &other->_impl_.details_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShorterLinkUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[41]);
}

// ===================================================================

class TagIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const TagIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TagIndexResponse_Item::_Internal::updated_at(const TagIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void TagIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
TagIndexResponse_Item::TagIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagIndexResponse.Item)
}
TagIndexResponse_Item::TagIndexResponse_Item(const TagIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagIndexResponse.Item)
}

inline void TagIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagIndexResponse_Item::~TagIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void TagIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TagIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TagIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagIndexResponse.Item)
  return target;
}

size_t TagIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagIndexResponse_Item::GetClassData() const { return &_class_data_; }


void TagIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const TagIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagIndexResponse_Item::CopyFrom(const TagIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagIndexResponse_Item::IsInitialized() const {
  return true;
}

void TagIndexResponse_Item::InternalSwap(TagIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagIndexResponse_Item, _impl_.priority_)
      + sizeof(TagIndexResponse_Item::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(TagIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[42]);
}

// ===================================================================

class TagIndexResponse::_Internal {
 public:
};

TagIndexResponse::TagIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagIndexResponse)
}
TagIndexResponse::TagIndexResponse(const TagIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagIndexResponse)
}

inline void TagIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TagIndexResponse::~TagIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void TagIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.TagIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.TagIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagIndexResponse)
  return target;
}

size_t TagIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.TagIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagIndexResponse::GetClassData() const { return &_class_data_; }


void TagIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagIndexResponse*>(&to_msg);
  auto& from = static_cast<const TagIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagIndexResponse::CopyFrom(const TagIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagIndexResponse::IsInitialized() const {
  return true;
}

void TagIndexResponse::InternalSwap(TagIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[43]);
}

// ===================================================================

class TagCreateRequest::_Internal {
 public:
};

TagCreateRequest::TagCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagCreateRequest)
}
TagCreateRequest::TagCreateRequest(const TagCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagCreateRequest)
}

inline void TagCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagCreateRequest::~TagCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void TagCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TagCreateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TagCreateRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagCreateRequest)
  return target;
}

size_t TagCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagCreateRequest::GetClassData() const { return &_class_data_; }


void TagCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagCreateRequest*>(&to_msg);
  auto& from = static_cast<const TagCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagCreateRequest::CopyFrom(const TagCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagCreateRequest::IsInitialized() const {
  return true;
}

void TagCreateRequest::InternalSwap(TagCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.priority_, other->_impl_.priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[44]);
}

// ===================================================================

class TagUpdateRequest::_Internal {
 public:
};

TagUpdateRequest::TagUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.TagUpdateRequest)
}
TagUpdateRequest::TagUpdateRequest(const TagUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.TagUpdateRequest)
}

inline void TagUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TagUpdateRequest::~TagUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.TagUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void TagUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.TagUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.TagUpdateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.TagUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.TagUpdateRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.TagUpdateRequest)
  return target;
}

size_t TagUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.TagUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 priority = 11;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagUpdateRequest::GetClassData() const { return &_class_data_; }


void TagUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagUpdateRequest*>(&to_msg);
  auto& from = static_cast<const TagUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.TagUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagUpdateRequest::CopyFrom(const TagUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.TagUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagUpdateRequest::IsInitialized() const {
  return true;
}

void TagUpdateRequest::InternalSwap(TagUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagUpdateRequest, _impl_.priority_)
      + sizeof(TagUpdateRequest::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(TagUpdateRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[45]);
}

// ===================================================================

class CategoryIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const CategoryIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CategoryIndexResponse_Item::_Internal::updated_at(const CategoryIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void CategoryIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
CategoryIndexResponse_Item::CategoryIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryIndexResponse.Item)
}
CategoryIndexResponse_Item::CategoryIndexResponse_Item(const CategoryIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.left_){}
    , decltype(_impl_.right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.right_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.right_));
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryIndexResponse.Item)
}

inline void CategoryIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CategoryIndexResponse_Item::~CategoryIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void CategoryIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.right_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.CategoryIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.CategoryIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 left = 3;
  if (this->_internal_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_left(), target);
  }

  // int32 right = 4;
  if (this->_internal_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_right(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryIndexResponse.Item)
  return target;
}

size_t CategoryIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 left = 3;
  if (this->_internal_left() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
  }

  // int32 right = 4;
  if (this->_internal_right() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_right());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryIndexResponse_Item::GetClassData() const { return &_class_data_; }


void CategoryIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const CategoryIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_left() != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  if (from._internal_right() != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryIndexResponse_Item::CopyFrom(const CategoryIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryIndexResponse_Item::IsInitialized() const {
  return true;
}

void CategoryIndexResponse_Item::InternalSwap(CategoryIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryIndexResponse_Item, _impl_.right_)
      + sizeof(CategoryIndexResponse_Item::_impl_.right_)
      - PROTOBUF_FIELD_OFFSET(CategoryIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[46]);
}

// ===================================================================

class CategoryIndexResponse::_Internal {
 public:
};

CategoryIndexResponse::CategoryIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryIndexResponse)
}
CategoryIndexResponse::CategoryIndexResponse(const CategoryIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryIndexResponse)
}

inline void CategoryIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CategoryIndexResponse::~CategoryIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CategoryIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.fig.v1.CategoryIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.fig.v1.CategoryIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryIndexResponse)
  return target;
}

size_t CategoryIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.fig.v1.CategoryIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryIndexResponse::GetClassData() const { return &_class_data_; }


void CategoryIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryIndexResponse*>(&to_msg);
  auto& from = static_cast<const CategoryIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryIndexResponse::CopyFrom(const CategoryIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryIndexResponse::IsInitialized() const {
  return true;
}

void CategoryIndexResponse::InternalSwap(CategoryIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[47]);
}

// ===================================================================

class CategoryCreateRequest::_Internal {
 public:
};

CategoryCreateRequest::CategoryCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryCreateRequest)
}
CategoryCreateRequest::CategoryCreateRequest(const CategoryCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  clear_has_by();
  switch (from.by_case()) {
    case kLeft: {
      _this->_internal_set_left(from._internal_left());
      break;
    }
    case kParent: {
      _this->_internal_set_parent(from._internal_parent());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryCreateRequest)
}

inline void CategoryCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_by();
}

CategoryCreateRequest::~CategoryCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  if (has_by()) {
    clear_by();
  }
}

void CategoryCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryCreateRequest::clear_by() {
// @@protoc_insertion_point(one_of_clear_start:palm.fig.v1.CategoryCreateRequest)
  switch (by_case()) {
    case kLeft: {
      // No need to clear
      break;
    }
    case kParent: {
      // No need to clear
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BY_NOT_SET;
}


void CategoryCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  clear_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.CategoryCreateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // int32 left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_left(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_parent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.CategoryCreateRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // int32 left = 2;
  if (_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_left(), target);
  }

  // int32 parent = 3;
  if (_internal_has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryCreateRequest)
  return target;
}

size_t CategoryCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  switch (by_case()) {
    // int32 left = 2;
    case kLeft: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
      break;
    }
    // int32 parent = 3;
    case kParent: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryCreateRequest::GetClassData() const { return &_class_data_; }


void CategoryCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryCreateRequest*>(&to_msg);
  auto& from = static_cast<const CategoryCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  switch (from.by_case()) {
    case kLeft: {
      _this->_internal_set_left(from._internal_left());
      break;
    }
    case kParent: {
      _this->_internal_set_parent(from._internal_parent());
      break;
    }
    case BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryCreateRequest::CopyFrom(const CategoryCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryCreateRequest::IsInitialized() const {
  return true;
}

void CategoryCreateRequest::InternalSwap(CategoryCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.by_, other->_impl_.by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[48]);
}

// ===================================================================

class CategoryUpdateRequest::_Internal {
 public:
};

CategoryUpdateRequest::CategoryUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.fig.v1.CategoryUpdateRequest)
}
CategoryUpdateRequest::CategoryUpdateRequest(const CategoryUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.fig.v1.CategoryUpdateRequest)
}

inline void CategoryUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CategoryUpdateRequest::~CategoryUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.fig.v1.CategoryUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void CategoryUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.fig.v1.CategoryUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.fig.v1.CategoryUpdateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.fig.v1.CategoryUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.fig.v1.CategoryUpdateRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.fig.v1.CategoryUpdateRequest)
  return target;
}

size_t CategoryUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.fig.v1.CategoryUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryUpdateRequest::GetClassData() const { return &_class_data_; }


void CategoryUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryUpdateRequest*>(&to_msg);
  auto& from = static_cast<const CategoryUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.fig.v1.CategoryUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryUpdateRequest::CopyFrom(const CategoryUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.fig.v1.CategoryUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryUpdateRequest::IsInitialized() const {
  return true;
}

void CategoryUpdateRequest::InternalSwap(CategoryUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fig_2eproto_getter, &descriptor_table_fig_2eproto_once,
      file_level_metadata_fig_2eproto[49]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fig
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IndexNotificationResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::IndexNotificationResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IndexNotificationResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IndexNotificationResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::IndexNotificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IndexNotificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LeaveWordIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::LeaveWordIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LeaveWordIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::LeaveWordIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::LeaveWordIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::LeaveWordIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IndexNowProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::IndexNowProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IndexNowProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::IndexNowPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::IndexNowPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::IndexNowPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SitemapPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SitemapPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SitemapPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteMaintenanceModeRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteMaintenanceModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteMaintenanceModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteInstallRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteInstallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteInstallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TwilioProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::TwilioProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TwilioProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SmtpProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::SmtpProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SmtpProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask_Address*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask_Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask_Address >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask_Body*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask_Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask_Body >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask_Attachment*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask_Attachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask_Attachment >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::EmailTask*
Arena::CreateMaybeMessage< ::palm::fig::v1::EmailTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::EmailTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteTwilioPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteTwilioPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteTwilioPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSmtpPingRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSmtpPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSmtpPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetLogoRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetLogoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetLogoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetCopyrightRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetCopyrightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetCopyrightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetKeywordsRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetKeywordsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetKeywordsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteSetInfoRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteSetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteSetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteLayoutResponse_Author*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteLayoutResponse_Author >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteLayoutResponse_Author >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteLayoutResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::GoogleProfile_ReCaptcha*
Arena::CreateMaybeMessage< ::palm::fig::v1::GoogleProfile_ReCaptcha >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::GoogleProfile_ReCaptcha >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::GoogleProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::GoogleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::GoogleProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::BaiduProfile_SiteVerify*
Arena::CreateMaybeMessage< ::palm::fig::v1::BaiduProfile_SiteVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::BaiduProfile_SiteVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::BaiduProfile*
Arena::CreateMaybeMessage< ::palm::fig::v1::BaiduProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::BaiduProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SmsTask*
Arena::CreateMaybeMessage< ::palm::fig::v1::SmsTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SmsTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Database*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Database >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Database >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_PostgreSql*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_PostgreSql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_PostgreSql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_MySql*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_MySql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_MySql >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Redis_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Redis_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Redis_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Redis*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Redis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Redis >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_RabbitMq*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_RabbitMq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_RabbitMq >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_OpenSearch*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_OpenSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_OpenSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_Health*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_Health >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse_System*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse_System >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse_System >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::SiteStatusResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::SiteStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::SiteStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::ShorterLinkUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::ShorterLinkUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::ShorterLinkUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::TagUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::TagUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::TagUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryIndexResponse*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryCreateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::fig::v1::CategoryUpdateRequest*
Arena::CreateMaybeMessage< ::palm::fig::v1::CategoryUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::fig::v1::CategoryUpdateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
