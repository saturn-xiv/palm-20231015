// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orchid.proto
#ifndef GRPC_orchid_2eproto__INCLUDED
#define GRPC_orchid_2eproto__INCLUDED

#include "orchid.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace orchid {
namespace v1 {

// ----------------------------------------------------------------------------
class WechatMiniProgram final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.orchid.v1.WechatMiniProgram";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramLoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramLoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramLoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramLoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>> AsyncPhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>>(AsyncPhoneNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>> PrepareAsyncPhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>>(PrepareAsyncPhoneNumberRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* AsyncPhoneNumberRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* PrepareAsyncPhoneNumberRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>> AsyncPhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>>(AsyncPhoneNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>> PrepareAsyncPhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>>(PrepareAsyncPhoneNumberRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response, std::function<void(::grpc::Status)>) override;
      void PhoneNumber(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* AsyncPhoneNumberRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* PrepareAsyncPhoneNumberRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_PhoneNumber_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response);
    virtual ::grpc::Status PhoneNumber(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::orchid::v1::WechatMiniProgramLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PhoneNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PhoneNumber() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PhoneNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PhoneNumber(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPhoneNumber(::grpc::ServerContext* context, ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_PhoneNumber<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* request, ::palm::orchid::v1::WechatMiniProgramLoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PhoneNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PhoneNumber() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* request, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* response) { return this->PhoneNumber(context, request, response); }));}
    void SetMessageAllocatorFor_PhoneNumber(
        ::grpc::MessageAllocator< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PhoneNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PhoneNumber(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PhoneNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_PhoneNumber<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PhoneNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PhoneNumber() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PhoneNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PhoneNumber(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PhoneNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PhoneNumber() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PhoneNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PhoneNumber(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPhoneNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PhoneNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PhoneNumber() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PhoneNumber(context, request, response); }));
    }
    ~WithRawCallbackMethod_PhoneNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PhoneNumber(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PhoneNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::orchid::v1::WechatMiniProgramLoginRequest, ::palm::orchid::v1::WechatMiniProgramLoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramLoginRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::orchid::v1::WechatMiniProgramLoginRequest,::palm::orchid::v1::WechatMiniProgramLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PhoneNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PhoneNumber() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* streamer) {
                       return this->StreamedPhoneNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PhoneNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PhoneNumber(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* /*request*/, ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPhoneNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest,::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_PhoneNumber<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_PhoneNumber<Service > > StreamedService;
};

// ----------------------------------------------------------------------------
//
class WechatOauth2 final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.orchid.v1.WechatOauth2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2QrConnectResponse>> AsyncQrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2QrConnectResponse>>(AsyncQrConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2QrConnectResponse>> PrepareAsyncQrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2QrConnectResponse>>(PrepareAsyncQrConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::palm::orchid::v1::WechatOauth2LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* AsyncQrConnectRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* PrepareAsyncQrConnectRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::orchid::v1::WechatOauth2LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>> AsyncQrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>>(AsyncQrConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>> PrepareAsyncQrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>>(PrepareAsyncQrConnectRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::palm::orchid::v1::WechatOauth2LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void QrConnect(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* AsyncQrConnectRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* PrepareAsyncQrConnectRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QrConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QrConnect(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QrConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QrConnect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QrConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnect(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQrConnect(::grpc::ServerContext* context, ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::orchid::v1::WechatOauth2LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QrConnect<WithAsyncMethod_Login<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_QrConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QrConnect() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) { return this->QrConnect(context, request, response); }));}
    void SetMessageAllocatorFor_QrConnect(
        ::grpc::MessageAllocator< ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QrConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnect(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QrConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::orchid::v1::WechatOauth2LoginRequest* request, ::palm::orchid::v1::WechatOauth2LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_QrConnect<WithCallbackMethod_Login<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QrConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QrConnect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QrConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnect(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QrConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QrConnect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QrConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnect(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQrConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QrConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QrConnect() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QrConnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_QrConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QrConnect(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QrConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QrConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QrConnect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::orchid::v1::WechatOauth2QrConnectRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse>* streamer) {
                       return this->StreamedQrConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QrConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QrConnect(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2QrConnectRequest* /*request*/, ::palm::orchid::v1::WechatOauth2QrConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQrConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::orchid::v1::WechatOauth2QrConnectRequest,::palm::orchid::v1::WechatOauth2QrConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::orchid::v1::WechatOauth2LoginRequest, ::palm::orchid::v1::WechatOauth2LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::palm::orchid::v1::WechatOauth2LoginRequest* /*request*/, ::palm::orchid::v1::WechatOauth2LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::orchid::v1::WechatOauth2LoginRequest,::palm::orchid::v1::WechatOauth2LoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QrConnect<WithStreamedUnaryMethod_Login<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_QrConnect<WithStreamedUnaryMethod_Login<Service > > StreamedService;
};

}  // namespace v1
}  // namespace orchid
}  // namespace palm


#endif  // GRPC_orchid_2eproto__INCLUDED
