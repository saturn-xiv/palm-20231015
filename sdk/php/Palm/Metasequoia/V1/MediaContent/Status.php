<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: metasequoia.proto

namespace Palm\Metasequoia\V1\MediaContent;

use UnexpectedValueException;

/**
 * Protobuf type <code>palm.metasequoia.v1.MediaContent.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>Published = 0;</code>
     */
    const Published = 0;
    /**
     * Generated from protobuf enum <code>Draft = 1;</code>
     */
    const Draft = 1;
    /**
     * Generated from protobuf enum <code>Pending = 2;</code>
     */
    const Pending = 2;
    /**
     * Generated from protobuf enum <code>Private = 3;</code>
     */
    const PBPrivate = 3;
    /**
     * Generated from protobuf enum <code>Future = 4;</code>
     */
    const Future = 4;
    /**
     * Generated from protobuf enum <code>Trash = 99;</code>
     */
    const Trash = 99;

    private static $valueToName = [
        self::Published => 'Published',
        self::Draft => 'Draft',
        self::Pending => 'Pending',
        self::PBPrivate => 'Private',
        self::Future => 'Future',
        self::Trash => 'Trash',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Palm\Metasequoia\V1\MediaContent_Status::class);

