<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mall.proto

namespace Palm\Mall\V1\Order;

use UnexpectedValueException;

/**
 * Protobuf type <code>palm.mall.v1.Order.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>Voided = 0;</code>
     */
    const Voided = 0;
    /**
     * Generated from protobuf enum <code>Pending = 1;</code>
     */
    const Pending = 1;
    /**
     * Generated from protobuf enum <code>Processing = 2;</code>
     */
    const Processing = 2;
    /**
     * Generated from protobuf enum <code>Shiped = 3;</code>
     */
    const Shiped = 3;
    /**
     * Generated from protobuf enum <code>Complete = 4;</code>
     */
    const Complete = 4;
    /**
     * Generated from protobuf enum <code>Canceled = 5;</code>
     */
    const Canceled = 5;
    /**
     * Generated from protobuf enum <code>Denied = 6;</code>
     */
    const Denied = 6;
    /**
     * Generated from protobuf enum <code>CanceledReversal = 7;</code>
     */
    const CanceledReversal = 7;
    /**
     * Generated from protobuf enum <code>Failed = 8;</code>
     */
    const Failed = 8;
    /**
     * Generated from protobuf enum <code>Refunded = 9;</code>
     */
    const Refunded = 9;
    /**
     * Generated from protobuf enum <code>Reversed = 10;</code>
     */
    const Reversed = 10;
    /**
     * Generated from protobuf enum <code>Chargeback = 11;</code>
     */
    const Chargeback = 11;
    /**
     * Generated from protobuf enum <code>Expired = 12;</code>
     */
    const Expired = 12;
    /**
     * Generated from protobuf enum <code>Processed = 13;</code>
     */
    const Processed = 13;

    private static $valueToName = [
        self::Voided => 'Voided',
        self::Pending => 'Pending',
        self::Processing => 'Processing',
        self::Shiped => 'Shiped',
        self::Complete => 'Complete',
        self::Canceled => 'Canceled',
        self::Denied => 'Denied',
        self::CanceledReversal => 'CanceledReversal',
        self::Failed => 'Failed',
        self::Refunded => 'Refunded',
        self::Reversed => 'Reversed',
        self::Chargeback => 'Chargeback',
        self::Expired => 'Expired',
        self::Processed => 'Processed',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Palm\Mall\V1\Order_Status::class);

