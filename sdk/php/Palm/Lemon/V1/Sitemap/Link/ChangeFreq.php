<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lemon.proto

namespace Palm\Lemon\V1\Sitemap\Link;

use UnexpectedValueException;

/**
 * Protobuf type <code>palm.lemon.v1.Sitemap.Link.ChangeFreq</code>
 */
class ChangeFreq
{
    /**
     * Generated from protobuf enum <code>Never = 0;</code>
     */
    const Never = 0;
    /**
     * Generated from protobuf enum <code>Always = 1;</code>
     */
    const Always = 1;
    /**
     * Generated from protobuf enum <code>Hourly = 2;</code>
     */
    const Hourly = 2;
    /**
     * Generated from protobuf enum <code>Daily = 3;</code>
     */
    const Daily = 3;
    /**
     * Generated from protobuf enum <code>Weekly = 4;</code>
     */
    const Weekly = 4;
    /**
     * Generated from protobuf enum <code>Monthly = 5;</code>
     */
    const Monthly = 5;
    /**
     * Generated from protobuf enum <code>Yearly = 6;</code>
     */
    const Yearly = 6;

    private static $valueToName = [
        self::Never => 'Never',
        self::Always => 'Always',
        self::Hourly => 'Hourly',
        self::Daily => 'Daily',
        self::Weekly => 'Weekly',
        self::Monthly => 'Monthly',
        self::Yearly => 'Yearly',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ChangeFreq::class, \Palm\Lemon\V1\Sitemap_Link_ChangeFreq::class);

