# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import orchid_pb2 as orchid__pb2


class WechatMiniProgramStub(object):
    """----------------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/palm.orchid.v1.WechatMiniProgram/Login',
                request_serializer=orchid__pb2.WechatMiniProgramLoginRequest.SerializeToString,
                response_deserializer=orchid__pb2.WechatMiniProgramLoginResponse.FromString,
                )
        self.PhoneNumber = channel.unary_unary(
                '/palm.orchid.v1.WechatMiniProgram/PhoneNumber',
                request_serializer=orchid__pb2.WechatMiniProgramPhoneNumberRequest.SerializeToString,
                response_deserializer=orchid__pb2.WechatMiniProgramPhoneNumberResponse.FromString,
                )


class WechatMiniProgramServicer(object):
    """----------------------------------------------------------------------------
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PhoneNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatMiniProgramServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=orchid__pb2.WechatMiniProgramLoginRequest.FromString,
                    response_serializer=orchid__pb2.WechatMiniProgramLoginResponse.SerializeToString,
            ),
            'PhoneNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.PhoneNumber,
                    request_deserializer=orchid__pb2.WechatMiniProgramPhoneNumberRequest.FromString,
                    response_serializer=orchid__pb2.WechatMiniProgramPhoneNumberResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.orchid.v1.WechatMiniProgram', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatMiniProgram(object):
    """----------------------------------------------------------------------------
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.orchid.v1.WechatMiniProgram/Login',
            orchid__pb2.WechatMiniProgramLoginRequest.SerializeToString,
            orchid__pb2.WechatMiniProgramLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PhoneNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.orchid.v1.WechatMiniProgram/PhoneNumber',
            orchid__pb2.WechatMiniProgramPhoneNumberRequest.SerializeToString,
            orchid__pb2.WechatMiniProgramPhoneNumberResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WechatOauth2Stub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QrConnect = channel.unary_unary(
                '/palm.orchid.v1.WechatOauth2/QrConnect',
                request_serializer=orchid__pb2.WechatOauth2QrConnectRequest.SerializeToString,
                response_deserializer=orchid__pb2.WechatOauth2QrConnectResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/palm.orchid.v1.WechatOauth2/Login',
                request_serializer=orchid__pb2.WechatOauth2LoginRequest.SerializeToString,
                response_deserializer=orchid__pb2.WechatOauth2LoginResponse.FromString,
                )


class WechatOauth2Servicer(object):
    """----------------------------------------------------------------------------

    """

    def QrConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatOauth2Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QrConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.QrConnect,
                    request_deserializer=orchid__pb2.WechatOauth2QrConnectRequest.FromString,
                    response_serializer=orchid__pb2.WechatOauth2QrConnectResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=orchid__pb2.WechatOauth2LoginRequest.FromString,
                    response_serializer=orchid__pb2.WechatOauth2LoginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.orchid.v1.WechatOauth2', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatOauth2(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def QrConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.orchid.v1.WechatOauth2/QrConnect',
            orchid__pb2.WechatOauth2QrConnectRequest.SerializeToString,
            orchid__pb2.WechatOauth2QrConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.orchid.v1.WechatOauth2/Login',
            orchid__pb2.WechatOauth2LoginRequest.SerializeToString,
            orchid__pb2.WechatOauth2LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
