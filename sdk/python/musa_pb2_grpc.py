# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import musa_pb2 as musa__pb2


class WechatPayNativeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Prepay = channel.unary_unary(
                '/palm.musa.v1.WechatPayNative/Prepay',
                request_serializer=musa__pb2.WechatPayPrepayRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayNativeQrCodeUrlResponse.FromString,
                )


class WechatPayNativeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Prepay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatPayNativeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Prepay': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepay,
                    request_deserializer=musa__pb2.WechatPayPrepayRequest.FromString,
                    response_serializer=musa__pb2.WechatPayNativeQrCodeUrlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.musa.v1.WechatPayNative', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatPayNative(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Prepay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayNative/Prepay',
            musa__pb2.WechatPayPrepayRequest.SerializeToString,
            musa__pb2.WechatPayNativeQrCodeUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WechatPayJsapiStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Prepay = channel.unary_unary(
                '/palm.musa.v1.WechatPayJsapi/Prepay',
                request_serializer=musa__pb2.WechatPayPrepayRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayJsapiPrepayIdResponse.FromString,
                )
        self.QueryOrderByOutTradeNo = channel.unary_unary(
                '/palm.musa.v1.WechatPayJsapi/QueryOrderByOutTradeNo',
                request_serializer=musa__pb2.WechatPayQueryOrderByOutTradeNoRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayTradeResponse.FromString,
                )
        self.QueryOrderById = channel.unary_unary(
                '/palm.musa.v1.WechatPayJsapi/QueryOrderById',
                request_serializer=musa__pb2.WechatPayQueryOrderByIdRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayTradeResponse.FromString,
                )
        self.CloseOrder = channel.unary_unary(
                '/palm.musa.v1.WechatPayJsapi/CloseOrder',
                request_serializer=musa__pb2.WechatPayCloseOrderRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class WechatPayJsapiServicer(object):
    """----------------------------------------------------------------------------

    """

    def Prepay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOrderByOutTradeNo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOrderById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatPayJsapiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Prepay': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepay,
                    request_deserializer=musa__pb2.WechatPayPrepayRequest.FromString,
                    response_serializer=musa__pb2.WechatPayJsapiPrepayIdResponse.SerializeToString,
            ),
            'QueryOrderByOutTradeNo': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryOrderByOutTradeNo,
                    request_deserializer=musa__pb2.WechatPayQueryOrderByOutTradeNoRequest.FromString,
                    response_serializer=musa__pb2.WechatPayTradeResponse.SerializeToString,
            ),
            'QueryOrderById': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryOrderById,
                    request_deserializer=musa__pb2.WechatPayQueryOrderByIdRequest.FromString,
                    response_serializer=musa__pb2.WechatPayTradeResponse.SerializeToString,
            ),
            'CloseOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseOrder,
                    request_deserializer=musa__pb2.WechatPayCloseOrderRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.musa.v1.WechatPayJsapi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatPayJsapi(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Prepay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayJsapi/Prepay',
            musa__pb2.WechatPayPrepayRequest.SerializeToString,
            musa__pb2.WechatPayJsapiPrepayIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOrderByOutTradeNo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayJsapi/QueryOrderByOutTradeNo',
            musa__pb2.WechatPayQueryOrderByOutTradeNoRequest.SerializeToString,
            musa__pb2.WechatPayTradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOrderById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayJsapi/QueryOrderById',
            musa__pb2.WechatPayQueryOrderByIdRequest.SerializeToString,
            musa__pb2.WechatPayTradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayJsapi/CloseOrder',
            musa__pb2.WechatPayCloseOrderRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WechatPayBillStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Trade = channel.unary_unary(
                '/palm.musa.v1.WechatPayBill/Trade',
                request_serializer=musa__pb2.WechatPayTradeBillRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayBillResponse.FromString,
                )
        self.FundFlow = channel.unary_unary(
                '/palm.musa.v1.WechatPayBill/FundFlow',
                request_serializer=musa__pb2.WechatPayFundFlowBillRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayBillResponse.FromString,
                )


class WechatPayBillServicer(object):
    """----------------------------------------------------------------------------

    """

    def Trade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundFlow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatPayBillServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Trade': grpc.unary_unary_rpc_method_handler(
                    servicer.Trade,
                    request_deserializer=musa__pb2.WechatPayTradeBillRequest.FromString,
                    response_serializer=musa__pb2.WechatPayBillResponse.SerializeToString,
            ),
            'FundFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.FundFlow,
                    request_deserializer=musa__pb2.WechatPayFundFlowBillRequest.FromString,
                    response_serializer=musa__pb2.WechatPayBillResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.musa.v1.WechatPayBill', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatPayBill(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Trade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayBill/Trade',
            musa__pb2.WechatPayTradeBillRequest.SerializeToString,
            musa__pb2.WechatPayBillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayBill/FundFlow',
            musa__pb2.WechatPayFundFlowBillRequest.SerializeToString,
            musa__pb2.WechatPayBillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WechatPayRefundStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/palm.musa.v1.WechatPayRefund/Create',
                request_serializer=musa__pb2.WechatPayCreateRefundRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayRefundResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/palm.musa.v1.WechatPayRefund/Query',
                request_serializer=musa__pb2.WechatPayQueryRefundRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayRefundResponse.FromString,
                )


class WechatPayRefundServicer(object):
    """----------------------------------------------------------------------------

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatPayRefundServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=musa__pb2.WechatPayCreateRefundRequest.FromString,
                    response_serializer=musa__pb2.WechatPayRefundResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=musa__pb2.WechatPayQueryRefundRequest.FromString,
                    response_serializer=musa__pb2.WechatPayRefundResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.musa.v1.WechatPayRefund', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatPayRefund(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayRefund/Create',
            musa__pb2.WechatPayCreateRefundRequest.SerializeToString,
            musa__pb2.WechatPayRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayRefund/Query',
            musa__pb2.WechatPayQueryRefundRequest.SerializeToString,
            musa__pb2.WechatPayRefundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WechatPayTransferStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteBatch = channel.unary_unary(
                '/palm.musa.v1.WechatPayTransfer/ExecuteBatch',
                request_serializer=musa__pb2.WechatPayExecuteBatchTransferRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayExecuteBatchTransferResponse.FromString,
                )
        self.QueryBatch = channel.unary_unary(
                '/palm.musa.v1.WechatPayTransfer/QueryBatch',
                request_serializer=musa__pb2.WechatPayQueryBatchTransferRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayQueryBatchTransferResponse.FromString,
                )
        self.QueryDetail = channel.unary_unary(
                '/palm.musa.v1.WechatPayTransfer/QueryDetail',
                request_serializer=musa__pb2.WechatPayQueryTransferDetailRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayQueryTransferDetailResponse.FromString,
                )
        self.GetBillReceipt = channel.unary_unary(
                '/palm.musa.v1.WechatPayTransfer/GetBillReceipt',
                request_serializer=musa__pb2.WechatPayTransferGetBillReceiptRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayTransferGetReceiptResponse.FromString,
                )
        self.GetElectronicReceipt = channel.unary_unary(
                '/palm.musa.v1.WechatPayTransfer/GetElectronicReceipt',
                request_serializer=musa__pb2.WechatPayTransferGetElectronicReceiptRequest.SerializeToString,
                response_deserializer=musa__pb2.WechatPayTransferGetReceiptResponse.FromString,
                )


class WechatPayTransferServicer(object):
    """----------------------------------------------------------------------------

    """

    def ExecuteBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBillReceipt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetElectronicReceipt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WechatPayTransferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteBatch,
                    request_deserializer=musa__pb2.WechatPayExecuteBatchTransferRequest.FromString,
                    response_serializer=musa__pb2.WechatPayExecuteBatchTransferResponse.SerializeToString,
            ),
            'QueryBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryBatch,
                    request_deserializer=musa__pb2.WechatPayQueryBatchTransferRequest.FromString,
                    response_serializer=musa__pb2.WechatPayQueryBatchTransferResponse.SerializeToString,
            ),
            'QueryDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryDetail,
                    request_deserializer=musa__pb2.WechatPayQueryTransferDetailRequest.FromString,
                    response_serializer=musa__pb2.WechatPayQueryTransferDetailResponse.SerializeToString,
            ),
            'GetBillReceipt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBillReceipt,
                    request_deserializer=musa__pb2.WechatPayTransferGetBillReceiptRequest.FromString,
                    response_serializer=musa__pb2.WechatPayTransferGetReceiptResponse.SerializeToString,
            ),
            'GetElectronicReceipt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetElectronicReceipt,
                    request_deserializer=musa__pb2.WechatPayTransferGetElectronicReceiptRequest.FromString,
                    response_serializer=musa__pb2.WechatPayTransferGetReceiptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.musa.v1.WechatPayTransfer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WechatPayTransfer(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def ExecuteBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayTransfer/ExecuteBatch',
            musa__pb2.WechatPayExecuteBatchTransferRequest.SerializeToString,
            musa__pb2.WechatPayExecuteBatchTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayTransfer/QueryBatch',
            musa__pb2.WechatPayQueryBatchTransferRequest.SerializeToString,
            musa__pb2.WechatPayQueryBatchTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayTransfer/QueryDetail',
            musa__pb2.WechatPayQueryTransferDetailRequest.SerializeToString,
            musa__pb2.WechatPayQueryTransferDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBillReceipt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayTransfer/GetBillReceipt',
            musa__pb2.WechatPayTransferGetBillReceiptRequest.SerializeToString,
            musa__pb2.WechatPayTransferGetReceiptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetElectronicReceipt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.musa.v1.WechatPayTransfer/GetElectronicReceipt',
            musa__pb2.WechatPayTransferGetElectronicReceiptRequest.SerializeToString,
            musa__pb2.WechatPayTransferGetReceiptResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
