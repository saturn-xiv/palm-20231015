// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ops-router.proto

#include "ops-router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace ops {
namespace router {
namespace v1 {
PROTOBUF_CONSTEXPR Administrator::Administrator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdministratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdministratorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdministratorDefaultTypeInternal() {}
  union {
    Administrator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdministratorDefaultTypeInternal _Administrator_default_instance_;
PROTOBUF_CONSTEXPR Log::Log(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;
PROTOBUF_CONSTEXPR Wan_Static::Wan_Static(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gateway_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_dns_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.alternate_dns_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subnet_prefix_length_)*/0u} {}
struct Wan_StaticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wan_StaticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wan_StaticDefaultTypeInternal() {}
  union {
    Wan_Static _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wan_StaticDefaultTypeInternal _Wan_Static_default_instance_;
PROTOBUF_CONSTEXPR Wan_Dhcp::Wan_Dhcp(
    ::_pbi::ConstantInitialized) {}
struct Wan_DhcpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wan_DhcpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wan_DhcpDefaultTypeInternal() {}
  union {
    Wan_Dhcp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wan_DhcpDefaultTypeInternal _Wan_Dhcp_default_instance_;
PROTOBUF_CONSTEXPR Wan_Nat::Wan_Nat(
    ::_pbi::ConstantInitialized) {}
struct Wan_NatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wan_NatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wan_NatDefaultTypeInternal() {}
  union {
    Wan_Nat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wan_NatDefaultTypeInternal _Wan_Nat_default_instance_;
PROTOBUF_CONSTEXPR Wan_In::Wan_In(
    ::_pbi::ConstantInitialized) {}
struct Wan_InDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wan_InDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wan_InDefaultTypeInternal() {}
  union {
    Wan_In _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wan_InDefaultTypeInternal _Wan_In_default_instance_;
PROTOBUF_CONSTEXPR Wan_Out::Wan_Out(
    ::_pbi::ConstantInitialized) {}
struct Wan_OutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Wan_OutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Wan_OutDefaultTypeInternal() {}
  union {
    Wan_Out _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Wan_OutDefaultTypeInternal _Wan_Out_default_instance_;
PROTOBUF_CONSTEXPR Wan::Wan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nat_)*/{}
  , /*decltype(_impl_.in_)*/{}
  , /*decltype(_impl_.out_)*/{}
  , /*decltype(_impl_.route_metric_)*/0u
  , /*decltype(_impl_.v6_)*/false
  , /*decltype(_impl_.ip_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WanDefaultTypeInternal() {}
  union {
    Wan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WanDefaultTypeInternal _Wan_default_instance_;
PROTOBUF_CONSTEXPR Dhcpd_HostsEntry_DoNotUse::Dhcpd_HostsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Dhcpd_HostsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Dhcpd_HostsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Dhcpd_HostsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Dhcpd_HostsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Dhcpd_HostsEntry_DoNotUseDefaultTypeInternal _Dhcpd_HostsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Dhcpd::Dhcpd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hosts_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.netmask_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v6_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DhcpdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DhcpdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DhcpdDefaultTypeInternal() {}
  union {
    Dhcpd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DhcpdDefaultTypeInternal _Dhcpd_default_instance_;
PROTOBUF_CONSTEXPR Dns::Dns(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servers_)*/{}
  , /*decltype(_impl_.sec_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DnsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DnsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DnsDefaultTypeInternal() {}
  union {
    Dns _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DnsDefaultTypeInternal _Dns_default_instance_;
PROTOBUF_CONSTEXPR Profile_WanEntry_DoNotUse::Profile_WanEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Profile_WanEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Profile_WanEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Profile_WanEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Profile_WanEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Profile_WanEntry_DoNotUseDefaultTypeInternal _Profile_WanEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Profile::Profile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wan_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.administrator_)*/nullptr
  , /*decltype(_impl_.lan_)*/nullptr
  , /*decltype(_impl_.dmz_)*/nullptr
  , /*decltype(_impl_.dns_)*/nullptr} {}
struct ProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileDefaultTypeInternal() {}
  union {
    Profile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileDefaultTypeInternal _Profile_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.profile_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace v1
}  // namespace router
}  // namespace ops
}  // namespace palm
static ::_pb::Metadata file_level_metadata_ops_2drouter_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ops_2drouter_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ops_2drouter_2eproto = nullptr;

const uint32_t TableStruct_ops_2drouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Administrator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Administrator, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Administrator, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Log, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Log, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Log, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Log, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _impl_.subnet_prefix_length_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _impl_.gateway_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _impl_.preferred_dns_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Static, _impl_.alternate_dns_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Dhcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Nat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_In, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan_Out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_.route_metric_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_.v6_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_.nat_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_.in_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_.out_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Wan, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.netmask_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.v6_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.start_addr_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.end_addr_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dhcpd, _impl_.hosts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dns, _impl_.servers_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Dns, _impl_.sec_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile_WanEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile_WanEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile_WanEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile_WanEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _impl_.administrator_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _impl_.wan_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _impl_.dmz_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Profile, _impl_.dns_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Status, _impl_.profile_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Status, _impl_.logs_),
  PROTOBUF_FIELD_OFFSET(::palm::ops::router::v1::Status, _impl_.created_at_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::ops::router::v1::Administrator)},
  { 8, -1, -1, sizeof(::palm::ops::router::v1::Log)},
  { 18, 29, -1, sizeof(::palm::ops::router::v1::Wan_Static)},
  { 34, -1, -1, sizeof(::palm::ops::router::v1::Wan_Dhcp)},
  { 40, -1, -1, sizeof(::palm::ops::router::v1::Wan_Nat)},
  { 46, -1, -1, sizeof(::palm::ops::router::v1::Wan_In)},
  { 52, -1, -1, sizeof(::palm::ops::router::v1::Wan_Out)},
  { 58, -1, -1, sizeof(::palm::ops::router::v1::Wan)},
  { 72, 80, -1, sizeof(::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse)},
  { 82, -1, -1, sizeof(::palm::ops::router::v1::Dhcpd)},
  { 95, -1, -1, sizeof(::palm::ops::router::v1::Dns)},
  { 103, 111, -1, sizeof(::palm::ops::router::v1::Profile_WanEntry_DoNotUse)},
  { 113, 124, -1, sizeof(::palm::ops::router::v1::Profile)},
  { 129, -1, -1, sizeof(::palm::ops::router::v1::Status)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::ops::router::v1::_Administrator_default_instance_._instance,
  &::palm::ops::router::v1::_Log_default_instance_._instance,
  &::palm::ops::router::v1::_Wan_Static_default_instance_._instance,
  &::palm::ops::router::v1::_Wan_Dhcp_default_instance_._instance,
  &::palm::ops::router::v1::_Wan_Nat_default_instance_._instance,
  &::palm::ops::router::v1::_Wan_In_default_instance_._instance,
  &::palm::ops::router::v1::_Wan_Out_default_instance_._instance,
  &::palm::ops::router::v1::_Wan_default_instance_._instance,
  &::palm::ops::router::v1::_Dhcpd_HostsEntry_DoNotUse_default_instance_._instance,
  &::palm::ops::router::v1::_Dhcpd_default_instance_._instance,
  &::palm::ops::router::v1::_Dns_default_instance_._instance,
  &::palm::ops::router::v1::_Profile_WanEntry_DoNotUse_default_instance_._instance,
  &::palm::ops::router::v1::_Profile_default_instance_._instance,
  &::palm::ops::router::v1::_Status_default_instance_._instance,
};

const char descriptor_table_protodef_ops_2drouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ops-router.proto\022\022palm.ops.router.v1\032\033"
  "google/protobuf/empty.proto\032\037google/prot"
  "obuf/timestamp.proto\"3\n\rAdministrator\022\020\n"
  "\010nickname\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\266\001\n\003Lo"
  "g\022\n\n\002ip\030\001 \001(\t\022,\n\005level\030\002 \001(\0162\035.palm.ops."
  "router.v1.Log.Level\022\017\n\007message\030\003 \001(\t\022.\n\n"
  "created_at\030\004 \001(\0132\032.google.protobuf.Times"
  "tamp\"4\n\005Level\022\t\n\005DEBUG\020\000\022\010\n\004INFO\020\001\022\013\n\007WA"
  "RNING\020\002\022\t\n\005ERROR\020\003\"\270\003\n\003Wan\022,\n\004dhcp\030\001 \001(\013"
  "2\034.palm.ops.router.v1.Wan.DhcpH\000\0220\n\006stat"
  "ic\030\002 \001(\0132\036.palm.ops.router.v1.Wan.Static"
  "H\000\022\024\n\014route_metric\030\t \001(\r\022\n\n\002v6\030\013 \001(\010\022(\n\003"
  "nat\030\014 \003(\0132\033.palm.ops.router.v1.Wan.Nat\022&"
  "\n\002in\030\r \003(\0132\032.palm.ops.router.v1.Wan.In\022("
  "\n\003out\030\016 \003(\0132\033.palm.ops.router.v1.Wan.Out"
  "\032\220\001\n\006Static\022\022\n\nip_address\030\001 \001(\t\022\034\n\024subne"
  "t_prefix_length\030\002 \001(\r\022\017\n\007gateway\030\003 \001(\t\022\025"
  "\n\rpreferred_dns\030\004 \001(\t\022\032\n\ralternate_dns\030\005"
  " \001(\tH\000\210\001\001B\020\n\016_alternate_dns\032\006\n\004Dhcp\032\005\n\003N"
  "at\032\004\n\002In\032\005\n\003OutB\004\n\002ip\"\316\001\n\005Dhcpd\022\016\n\006devic"
  "e\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\022\017\n\007netmask\030\003 \001("
  "\t\022\n\n\002v6\030\t \001(\010\022\022\n\nstart_addr\030\013 \001(\t\022\020\n\010end"
  "_addr\030\014 \001(\t\0223\n\005hosts\030\023 \003(\0132$.palm.ops.ro"
  "uter.v1.Dhcpd.HostsEntry\032,\n\nHostsEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"#\n\003Dns\022\017\n"
  "\007servers\030\001 \003(\t\022\013\n\003sec\030\002 \001(\010\"\276\002\n\007Profile\022"
  "8\n\radministrator\030\001 \001(\0132!.palm.ops.router"
  ".v1.Administrator\0221\n\003wan\030\013 \003(\0132$.palm.op"
  "s.router.v1.Profile.WanEntry\022&\n\003lan\030\025 \001("
  "\0132\031.palm.ops.router.v1.Dhcpd\022+\n\003dmz\030\026 \001("
  "\0132\031.palm.ops.router.v1.DhcpdH\000\210\001\001\022$\n\003dns"
  "\030\035 \001(\0132\027.palm.ops.router.v1.Dns\032C\n\010WanEn"
  "try\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.palm.o"
  "ps.router.v1.Wan:\0028\001B\006\n\004_dmz\"\215\001\n\006Status\022"
  ",\n\007profile\030\001 \001(\0132\033.palm.ops.router.v1.Pr"
  "ofile\022%\n\004logs\030\002 \003(\0132\027.palm.ops.router.v1"
  ".Log\022.\n\ncreated_at\030\t \001(\0132\032.google.protob"
  "uf.Timestamp2D\n\006Router\022:\n\006Reboot\022\026.googl"
  "e.protobuf.Empty\032\026.google.protobuf.Empty"
  "\"\000B4\n0com.github.saturn_xiv.palm.plugins"
  ".ops.router.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ops_2drouter_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_ops_2drouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ops_2drouter_2eproto = {
    false, false, 1624, descriptor_table_protodef_ops_2drouter_2eproto,
    "ops-router.proto",
    &descriptor_table_ops_2drouter_2eproto_once, descriptor_table_ops_2drouter_2eproto_deps, 2, 14,
    schemas, file_default_instances, TableStruct_ops_2drouter_2eproto::offsets,
    file_level_metadata_ops_2drouter_2eproto, file_level_enum_descriptors_ops_2drouter_2eproto,
    file_level_service_descriptors_ops_2drouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ops_2drouter_2eproto_getter() {
  return &descriptor_table_ops_2drouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ops_2drouter_2eproto(&descriptor_table_ops_2drouter_2eproto);
namespace palm {
namespace ops {
namespace router {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ops_2drouter_2eproto);
  return file_level_enum_descriptors_ops_2drouter_2eproto[0];
}
bool Log_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Log_Level Log::DEBUG;
constexpr Log_Level Log::INFO;
constexpr Log_Level Log::WARNING;
constexpr Log_Level Log::ERROR;
constexpr Log_Level Log::Level_MIN;
constexpr Log_Level Log::Level_MAX;
constexpr int Log::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Administrator::_Internal {
 public:
};

Administrator::Administrator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Administrator)
}
Administrator::Administrator(const Administrator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Administrator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Administrator)
}

inline void Administrator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Administrator::~Administrator() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Administrator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Administrator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.password_.Destroy();
}

void Administrator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Administrator::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Administrator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Administrator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Administrator.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Administrator.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Administrator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Administrator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Administrator.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Administrator.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Administrator)
  return target;
}

size_t Administrator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Administrator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Administrator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Administrator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Administrator::GetClassData() const { return &_class_data_; }


void Administrator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Administrator*>(&to_msg);
  auto& from = static_cast<const Administrator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Administrator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Administrator::CopyFrom(const Administrator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Administrator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Administrator::IsInitialized() const {
  return true;
}

void Administrator::InternalSwap(Administrator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Administrator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[0]);
}

// ===================================================================

class Log::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Log* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Log::_Internal::created_at(const Log* msg) {
  return *msg->_impl_.created_at_;
}
void Log::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Log* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Log)
}

inline void Log::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Log)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void Log::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Log)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Log.ip"));
        } else
          goto handle_unusual;
        continue;
      // .palm.ops.router.v1.Log.Level level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::ops::router::v1::Log_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Log.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Log::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Log)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Log.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // .palm.ops.router.v1.Log.Level level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Log.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Log)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .palm.ops.router.v1.Log.Level level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }


void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Log)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, _impl_.level_)
      + sizeof(Log::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(Log, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[1]);
}

// ===================================================================

class Wan_Static::_Internal {
 public:
  using HasBits = decltype(std::declval<Wan_Static>()._impl_._has_bits_);
  static void set_has_alternate_dns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Wan_Static::Wan_Static(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Wan.Static)
}
Wan_Static::Wan_Static(const Wan_Static& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Wan_Static* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.gateway_){}
    , decltype(_impl_.preferred_dns_){}
    , decltype(_impl_.alternate_dns_){}
    , decltype(_impl_.subnet_prefix_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gateway_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gateway().empty()) {
    _this->_impl_.gateway_.Set(from._internal_gateway(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preferred_dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preferred_dns().empty()) {
    _this->_impl_.preferred_dns_.Set(from._internal_preferred_dns(), 
      _this->GetArenaForAllocation());
  }
  _impl_.alternate_dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alternate_dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alternate_dns()) {
    _this->_impl_.alternate_dns_.Set(from._internal_alternate_dns(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subnet_prefix_length_ = from._impl_.subnet_prefix_length_;
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Wan.Static)
}

inline void Wan_Static::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_address_){}
    , decltype(_impl_.gateway_){}
    , decltype(_impl_.preferred_dns_){}
    , decltype(_impl_.alternate_dns_){}
    , decltype(_impl_.subnet_prefix_length_){0u}
  };
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gateway_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.alternate_dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.alternate_dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Wan_Static::~Wan_Static() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Wan.Static)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wan_Static::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_address_.Destroy();
  _impl_.gateway_.Destroy();
  _impl_.preferred_dns_.Destroy();
  _impl_.alternate_dns_.Destroy();
}

void Wan_Static::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wan_Static::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Wan.Static)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_address_.ClearToEmpty();
  _impl_.gateway_.ClearToEmpty();
  _impl_.preferred_dns_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.alternate_dns_.ClearNonDefaultToEmpty();
  }
  _impl_.subnet_prefix_length_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wan_Static::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Wan.Static.ip_address"));
        } else
          goto handle_unusual;
        continue;
      // uint32 subnet_prefix_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.subnet_prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gateway = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gateway();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Wan.Static.gateway"));
        } else
          goto handle_unusual;
        continue;
      // string preferred_dns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_preferred_dns();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Wan.Static.preferred_dns"));
        } else
          goto handle_unusual;
        continue;
      // optional string alternate_dns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_alternate_dns();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Wan.Static.alternate_dns"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wan_Static::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Wan.Static)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Wan.Static.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // uint32 subnet_prefix_length = 2;
  if (this->_internal_subnet_prefix_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_subnet_prefix_length(), target);
  }

  // string gateway = 3;
  if (!this->_internal_gateway().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Wan.Static.gateway");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gateway(), target);
  }

  // string preferred_dns = 4;
  if (!this->_internal_preferred_dns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preferred_dns().data(), static_cast<int>(this->_internal_preferred_dns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Wan.Static.preferred_dns");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preferred_dns(), target);
  }

  // optional string alternate_dns = 5;
  if (_internal_has_alternate_dns()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternate_dns().data(), static_cast<int>(this->_internal_alternate_dns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Wan.Static.alternate_dns");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_alternate_dns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Wan.Static)
  return target;
}

size_t Wan_Static::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Wan.Static)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string gateway = 3;
  if (!this->_internal_gateway().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());
  }

  // string preferred_dns = 4;
  if (!this->_internal_preferred_dns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_dns());
  }

  // optional string alternate_dns = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alternate_dns());
  }

  // uint32 subnet_prefix_length = 2;
  if (this->_internal_subnet_prefix_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_subnet_prefix_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wan_Static::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Wan_Static::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wan_Static::GetClassData() const { return &_class_data_; }


void Wan_Static::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Wan_Static*>(&to_msg);
  auto& from = static_cast<const Wan_Static&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Wan.Static)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_gateway().empty()) {
    _this->_internal_set_gateway(from._internal_gateway());
  }
  if (!from._internal_preferred_dns().empty()) {
    _this->_internal_set_preferred_dns(from._internal_preferred_dns());
  }
  if (from._internal_has_alternate_dns()) {
    _this->_internal_set_alternate_dns(from._internal_alternate_dns());
  }
  if (from._internal_subnet_prefix_length() != 0) {
    _this->_internal_set_subnet_prefix_length(from._internal_subnet_prefix_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wan_Static::CopyFrom(const Wan_Static& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Wan.Static)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wan_Static::IsInitialized() const {
  return true;
}

void Wan_Static::InternalSwap(Wan_Static* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gateway_, lhs_arena,
      &other->_impl_.gateway_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_dns_, lhs_arena,
      &other->_impl_.preferred_dns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.alternate_dns_, lhs_arena,
      &other->_impl_.alternate_dns_, rhs_arena
  );
  swap(_impl_.subnet_prefix_length_, other->_impl_.subnet_prefix_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wan_Static::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[2]);
}

// ===================================================================

class Wan_Dhcp::_Internal {
 public:
};

Wan_Dhcp::Wan_Dhcp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Wan.Dhcp)
}
Wan_Dhcp::Wan_Dhcp(const Wan_Dhcp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Wan_Dhcp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Wan.Dhcp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wan_Dhcp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wan_Dhcp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Wan_Dhcp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[3]);
}

// ===================================================================

class Wan_Nat::_Internal {
 public:
};

Wan_Nat::Wan_Nat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Wan.Nat)
}
Wan_Nat::Wan_Nat(const Wan_Nat& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Wan_Nat* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Wan.Nat)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wan_Nat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wan_Nat::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Wan_Nat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[4]);
}

// ===================================================================

class Wan_In::_Internal {
 public:
};

Wan_In::Wan_In(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Wan.In)
}
Wan_In::Wan_In(const Wan_In& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Wan_In* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Wan.In)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wan_In::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wan_In::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Wan_In::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[5]);
}

// ===================================================================

class Wan_Out::_Internal {
 public:
};

Wan_Out::Wan_Out(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Wan.Out)
}
Wan_Out::Wan_Out(const Wan_Out& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Wan_Out* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Wan.Out)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wan_Out::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wan_Out::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Wan_Out::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[6]);
}

// ===================================================================

class Wan::_Internal {
 public:
  static const ::palm::ops::router::v1::Wan_Dhcp& dhcp(const Wan* msg);
  static const ::palm::ops::router::v1::Wan_Static& static_(const Wan* msg);
};

const ::palm::ops::router::v1::Wan_Dhcp&
Wan::_Internal::dhcp(const Wan* msg) {
  return *msg->_impl_.ip_.dhcp_;
}
const ::palm::ops::router::v1::Wan_Static&
Wan::_Internal::static_(const Wan* msg) {
  return *msg->_impl_.ip_.static__;
}
void Wan::set_allocated_dhcp(::palm::ops::router::v1::Wan_Dhcp* dhcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip();
  if (dhcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dhcp);
    if (message_arena != submessage_arena) {
      dhcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dhcp, submessage_arena);
    }
    set_has_dhcp();
    _impl_.ip_.dhcp_ = dhcp;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.ops.router.v1.Wan.dhcp)
}
void Wan::set_allocated_static_(::palm::ops::router::v1::Wan_Static* static_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip();
  if (static_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(static_);
    if (message_arena != submessage_arena) {
      static_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, static_, submessage_arena);
    }
    set_has_static_();
    _impl_.ip_.static__ = static_;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.ops.router.v1.Wan.static)
}
Wan::Wan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Wan)
}
Wan::Wan(const Wan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Wan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nat_){from._impl_.nat_}
    , decltype(_impl_.in_){from._impl_.in_}
    , decltype(_impl_.out_){from._impl_.out_}
    , decltype(_impl_.route_metric_){}
    , decltype(_impl_.v6_){}
    , decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.route_metric_, &from._impl_.route_metric_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v6_) -
    reinterpret_cast<char*>(&_impl_.route_metric_)) + sizeof(_impl_.v6_));
  clear_has_ip();
  switch (from.ip_case()) {
    case kDhcp: {
      _this->_internal_mutable_dhcp()->::palm::ops::router::v1::Wan_Dhcp::MergeFrom(
          from._internal_dhcp());
      break;
    }
    case kStatic: {
      _this->_internal_mutable_static_()->::palm::ops::router::v1::Wan_Static::MergeFrom(
          from._internal_static_());
      break;
    }
    case IP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Wan)
}

inline void Wan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nat_){arena}
    , decltype(_impl_.in_){arena}
    , decltype(_impl_.out_){arena}
    , decltype(_impl_.route_metric_){0u}
    , decltype(_impl_.v6_){false}
    , decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ip();
}

Wan::~Wan() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Wan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nat_.~RepeatedPtrField();
  _impl_.in_.~RepeatedPtrField();
  _impl_.out_.~RepeatedPtrField();
  if (has_ip()) {
    clear_ip();
  }
}

void Wan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wan::clear_ip() {
// @@protoc_insertion_point(one_of_clear_start:palm.ops.router.v1.Wan)
  switch (ip_case()) {
    case kDhcp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ip_.dhcp_;
      }
      break;
    }
    case kStatic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ip_.static__;
      }
      break;
    }
    case IP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IP_NOT_SET;
}


void Wan::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Wan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nat_.Clear();
  _impl_.in_.Clear();
  _impl_.out_.Clear();
  ::memset(&_impl_.route_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v6_) -
      reinterpret_cast<char*>(&_impl_.route_metric_)) + sizeof(_impl_.v6_));
  clear_ip();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.ops.router.v1.Wan.Dhcp dhcp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dhcp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.ops.router.v1.Wan.Static static = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_static_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 route_metric = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.route_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool v6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.v6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.ops.router.v1.Wan.Nat nat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.ops.router.v1.Wan.In in = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.ops.router.v1.Wan.Out out = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_out(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Wan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.ops.router.v1.Wan.Dhcp dhcp = 1;
  if (_internal_has_dhcp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dhcp(this),
        _Internal::dhcp(this).GetCachedSize(), target, stream);
  }

  // .palm.ops.router.v1.Wan.Static static = 2;
  if (_internal_has_static_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::static_(this),
        _Internal::static_(this).GetCachedSize(), target, stream);
  }

  // uint32 route_metric = 9;
  if (this->_internal_route_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_route_metric(), target);
  }

  // bool v6 = 11;
  if (this->_internal_v6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_v6(), target);
  }

  // repeated .palm.ops.router.v1.Wan.Nat nat = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nat_size()); i < n; i++) {
    const auto& repfield = this->_internal_nat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.ops.router.v1.Wan.In in = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_in_size()); i < n; i++) {
    const auto& repfield = this->_internal_in(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.ops.router.v1.Wan.Out out = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_out_size()); i < n; i++) {
    const auto& repfield = this->_internal_out(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Wan)
  return target;
}

size_t Wan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Wan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.ops.router.v1.Wan.Nat nat = 12;
  total_size += 1UL * this->_internal_nat_size();
  for (const auto& msg : this->_impl_.nat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.ops.router.v1.Wan.In in = 13;
  total_size += 1UL * this->_internal_in_size();
  for (const auto& msg : this->_impl_.in_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.ops.router.v1.Wan.Out out = 14;
  total_size += 1UL * this->_internal_out_size();
  for (const auto& msg : this->_impl_.out_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 route_metric = 9;
  if (this->_internal_route_metric() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_route_metric());
  }

  // bool v6 = 11;
  if (this->_internal_v6() != 0) {
    total_size += 1 + 1;
  }

  switch (ip_case()) {
    // .palm.ops.router.v1.Wan.Dhcp dhcp = 1;
    case kDhcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ip_.dhcp_);
      break;
    }
    // .palm.ops.router.v1.Wan.Static static = 2;
    case kStatic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ip_.static__);
      break;
    }
    case IP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Wan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wan::GetClassData() const { return &_class_data_; }


void Wan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Wan*>(&to_msg);
  auto& from = static_cast<const Wan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Wan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nat_.MergeFrom(from._impl_.nat_);
  _this->_impl_.in_.MergeFrom(from._impl_.in_);
  _this->_impl_.out_.MergeFrom(from._impl_.out_);
  if (from._internal_route_metric() != 0) {
    _this->_internal_set_route_metric(from._internal_route_metric());
  }
  if (from._internal_v6() != 0) {
    _this->_internal_set_v6(from._internal_v6());
  }
  switch (from.ip_case()) {
    case kDhcp: {
      _this->_internal_mutable_dhcp()->::palm::ops::router::v1::Wan_Dhcp::MergeFrom(
          from._internal_dhcp());
      break;
    }
    case kStatic: {
      _this->_internal_mutable_static_()->::palm::ops::router::v1::Wan_Static::MergeFrom(
          from._internal_static_());
      break;
    }
    case IP_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wan::CopyFrom(const Wan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Wan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wan::IsInitialized() const {
  return true;
}

void Wan::InternalSwap(Wan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nat_.InternalSwap(&other->_impl_.nat_);
  _impl_.in_.InternalSwap(&other->_impl_.in_);
  _impl_.out_.InternalSwap(&other->_impl_.out_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wan, _impl_.v6_)
      + sizeof(Wan::_impl_.v6_)
      - PROTOBUF_FIELD_OFFSET(Wan, _impl_.route_metric_)>(
          reinterpret_cast<char*>(&_impl_.route_metric_),
          reinterpret_cast<char*>(&other->_impl_.route_metric_));
  swap(_impl_.ip_, other->_impl_.ip_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[7]);
}

// ===================================================================

Dhcpd_HostsEntry_DoNotUse::Dhcpd_HostsEntry_DoNotUse() {}
Dhcpd_HostsEntry_DoNotUse::Dhcpd_HostsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Dhcpd_HostsEntry_DoNotUse::MergeFrom(const Dhcpd_HostsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Dhcpd_HostsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[8]);
}

// ===================================================================

class Dhcpd::_Internal {
 public:
};

Dhcpd::Dhcpd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Dhcpd::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Dhcpd)
}
Dhcpd::Dhcpd(const Dhcpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dhcpd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.hosts_)*/{}
    , decltype(_impl_.device_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.netmask_){}
    , decltype(_impl_.start_addr_){}
    , decltype(_impl_.end_addr_){}
    , decltype(_impl_.v6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hosts_.MergeFrom(from._impl_.hosts_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.netmask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.netmask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_netmask().empty()) {
    _this->_impl_.netmask_.Set(from._internal_netmask(), 
      _this->GetArenaForAllocation());
  }
  _impl_.start_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_addr().empty()) {
    _this->_impl_.start_addr_.Set(from._internal_start_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_addr().empty()) {
    _this->_impl_.end_addr_.Set(from._internal_end_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.v6_ = from._impl_.v6_;
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Dhcpd)
}

inline void Dhcpd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.hosts_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.device_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.netmask_){}
    , decltype(_impl_.start_addr_){}
    , decltype(_impl_.end_addr_){}
    , decltype(_impl_.v6_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.netmask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.netmask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dhcpd::~Dhcpd() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Dhcpd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Dhcpd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hosts_.Destruct();
  _impl_.hosts_.~MapField();
  _impl_.device_.Destroy();
  _impl_.address_.Destroy();
  _impl_.netmask_.Destroy();
  _impl_.start_addr_.Destroy();
  _impl_.end_addr_.Destroy();
}

void Dhcpd::ArenaDtor(void* object) {
  Dhcpd* _this = reinterpret_cast< Dhcpd* >(object);
  _this->_impl_.hosts_.Destruct();
}
void Dhcpd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dhcpd::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Dhcpd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hosts_.Clear();
  _impl_.device_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.netmask_.ClearToEmpty();
  _impl_.start_addr_.ClearToEmpty();
  _impl_.end_addr_.ClearToEmpty();
  _impl_.v6_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dhcpd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Dhcpd.device"));
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Dhcpd.address"));
        } else
          goto handle_unusual;
        continue;
      // string netmask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_netmask();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Dhcpd.netmask"));
        } else
          goto handle_unusual;
        continue;
      // bool v6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.v6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_start_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Dhcpd.start_addr"));
        } else
          goto handle_unusual;
        continue;
      // string end_addr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_end_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Dhcpd.end_addr"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> hosts = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.hosts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dhcpd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Dhcpd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Dhcpd.device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Dhcpd.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string netmask = 3;
  if (!this->_internal_netmask().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_netmask().data(), static_cast<int>(this->_internal_netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Dhcpd.netmask");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_netmask(), target);
  }

  // bool v6 = 9;
  if (this->_internal_v6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_v6(), target);
  }

  // string start_addr = 11;
  if (!this->_internal_start_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_addr().data(), static_cast<int>(this->_internal_start_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Dhcpd.start_addr");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_start_addr(), target);
  }

  // string end_addr = 12;
  if (!this->_internal_end_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_addr().data(), static_cast<int>(this->_internal_end_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Dhcpd.end_addr");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_end_addr(), target);
  }

  // map<string, string> hosts = 19;
  if (!this->_internal_hosts().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Dhcpd_HostsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_hosts();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "palm.ops.router.v1.Dhcpd.HostsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "palm.ops.router.v1.Dhcpd.HostsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(19, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(19, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Dhcpd)
  return target;
}

size_t Dhcpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Dhcpd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> hosts = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hosts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_hosts().begin();
      it != this->_internal_hosts().end(); ++it) {
    total_size += Dhcpd_HostsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string device = 1;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string netmask = 3;
  if (!this->_internal_netmask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netmask());
  }

  // string start_addr = 11;
  if (!this->_internal_start_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_addr());
  }

  // string end_addr = 12;
  if (!this->_internal_end_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_addr());
  }

  // bool v6 = 9;
  if (this->_internal_v6() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dhcpd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dhcpd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dhcpd::GetClassData() const { return &_class_data_; }


void Dhcpd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dhcpd*>(&to_msg);
  auto& from = static_cast<const Dhcpd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Dhcpd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hosts_.MergeFrom(from._impl_.hosts_);
  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_netmask().empty()) {
    _this->_internal_set_netmask(from._internal_netmask());
  }
  if (!from._internal_start_addr().empty()) {
    _this->_internal_set_start_addr(from._internal_start_addr());
  }
  if (!from._internal_end_addr().empty()) {
    _this->_internal_set_end_addr(from._internal_end_addr());
  }
  if (from._internal_v6() != 0) {
    _this->_internal_set_v6(from._internal_v6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dhcpd::CopyFrom(const Dhcpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Dhcpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dhcpd::IsInitialized() const {
  return true;
}

void Dhcpd::InternalSwap(Dhcpd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hosts_.InternalSwap(&other->_impl_.hosts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.netmask_, lhs_arena,
      &other->_impl_.netmask_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_addr_, lhs_arena,
      &other->_impl_.start_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_addr_, lhs_arena,
      &other->_impl_.end_addr_, rhs_arena
  );
  swap(_impl_.v6_, other->_impl_.v6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dhcpd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[9]);
}

// ===================================================================

class Dns::_Internal {
 public:
};

Dns::Dns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Dns)
}
Dns::Dns(const Dns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dns* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servers_){from._impl_.servers_}
    , decltype(_impl_.sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sec_ = from._impl_.sec_;
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Dns)
}

inline void Dns::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servers_){arena}
    , decltype(_impl_.sec_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dns::~Dns() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Dns)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dns::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servers_.~RepeatedPtrField();
}

void Dns::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dns::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Dns)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servers_.Clear();
  _impl_.sec_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dns::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_servers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.ops.router.v1.Dns.servers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dns::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Dns)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string servers = 1;
  for (int i = 0, n = this->_internal_servers_size(); i < n; i++) {
    const auto& s = this->_internal_servers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.ops.router.v1.Dns.servers");
    target = stream->WriteString(1, s, target);
  }

  // bool sec = 2;
  if (this->_internal_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Dns)
  return target;
}

size_t Dns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Dns)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string servers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.servers_.size());
  for (int i = 0, n = _impl_.servers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.servers_.Get(i));
  }

  // bool sec = 2;
  if (this->_internal_sec() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dns::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dns::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dns::GetClassData() const { return &_class_data_; }


void Dns::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dns*>(&to_msg);
  auto& from = static_cast<const Dns&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Dns)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.servers_.MergeFrom(from._impl_.servers_);
  if (from._internal_sec() != 0) {
    _this->_internal_set_sec(from._internal_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dns::CopyFrom(const Dns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Dns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dns::IsInitialized() const {
  return true;
}

void Dns::InternalSwap(Dns* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.servers_.InternalSwap(&other->_impl_.servers_);
  swap(_impl_.sec_, other->_impl_.sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dns::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[10]);
}

// ===================================================================

Profile_WanEntry_DoNotUse::Profile_WanEntry_DoNotUse() {}
Profile_WanEntry_DoNotUse::Profile_WanEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Profile_WanEntry_DoNotUse::MergeFrom(const Profile_WanEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Profile_WanEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[11]);
}

// ===================================================================

class Profile::_Internal {
 public:
  using HasBits = decltype(std::declval<Profile>()._impl_._has_bits_);
  static const ::palm::ops::router::v1::Administrator& administrator(const Profile* msg);
  static const ::palm::ops::router::v1::Dhcpd& lan(const Profile* msg);
  static const ::palm::ops::router::v1::Dhcpd& dmz(const Profile* msg);
  static void set_has_dmz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::palm::ops::router::v1::Dns& dns(const Profile* msg);
};

const ::palm::ops::router::v1::Administrator&
Profile::_Internal::administrator(const Profile* msg) {
  return *msg->_impl_.administrator_;
}
const ::palm::ops::router::v1::Dhcpd&
Profile::_Internal::lan(const Profile* msg) {
  return *msg->_impl_.lan_;
}
const ::palm::ops::router::v1::Dhcpd&
Profile::_Internal::dmz(const Profile* msg) {
  return *msg->_impl_.dmz_;
}
const ::palm::ops::router::v1::Dns&
Profile::_Internal::dns(const Profile* msg) {
  return *msg->_impl_.dns_;
}
Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Profile::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Profile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.wan_)*/{}
    , decltype(_impl_.administrator_){nullptr}
    , decltype(_impl_.lan_){nullptr}
    , decltype(_impl_.dmz_){nullptr}
    , decltype(_impl_.dns_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.wan_.MergeFrom(from._impl_.wan_);
  if (from._internal_has_administrator()) {
    _this->_impl_.administrator_ = new ::palm::ops::router::v1::Administrator(*from._impl_.administrator_);
  }
  if (from._internal_has_lan()) {
    _this->_impl_.lan_ = new ::palm::ops::router::v1::Dhcpd(*from._impl_.lan_);
  }
  if (from._internal_has_dmz()) {
    _this->_impl_.dmz_ = new ::palm::ops::router::v1::Dhcpd(*from._impl_.dmz_);
  }
  if (from._internal_has_dns()) {
    _this->_impl_.dns_ = new ::palm::ops::router::v1::Dns(*from._impl_.dns_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Profile)
}

inline void Profile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.wan_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.administrator_){nullptr}
    , decltype(_impl_.lan_){nullptr}
    , decltype(_impl_.dmz_){nullptr}
    , decltype(_impl_.dns_){nullptr}
  };
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Profile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wan_.Destruct();
  _impl_.wan_.~MapField();
  if (this != internal_default_instance()) delete _impl_.administrator_;
  if (this != internal_default_instance()) delete _impl_.lan_;
  if (this != internal_default_instance()) delete _impl_.dmz_;
  if (this != internal_default_instance()) delete _impl_.dns_;
}

void Profile::ArenaDtor(void* object) {
  Profile* _this = reinterpret_cast< Profile* >(object);
  _this->_impl_.wan_.Destruct();
}
void Profile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Profile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wan_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.administrator_ != nullptr) {
    delete _impl_.administrator_;
  }
  _impl_.administrator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lan_ != nullptr) {
    delete _impl_.lan_;
  }
  _impl_.lan_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.dmz_ != nullptr);
    _impl_.dmz_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.dns_ != nullptr) {
    delete _impl_.dns_;
  }
  _impl_.dns_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.ops.router.v1.Administrator administrator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_administrator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .palm.ops.router.v1.Wan> wan = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.wan_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.ops.router.v1.Dhcpd lan = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_lan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .palm.ops.router.v1.Dhcpd dmz = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_dmz(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palm.ops.router.v1.Dns dns = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Profile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Profile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.ops.router.v1.Administrator administrator = 1;
  if (this->_internal_has_administrator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::administrator(this),
        _Internal::administrator(this).GetCachedSize(), target, stream);
  }

  // map<string, .palm.ops.router.v1.Wan> wan = 11;
  if (!this->_internal_wan().empty()) {
    using MapType = ::_pb::Map<std::string, ::palm::ops::router::v1::Wan>;
    using WireHelper = Profile_WanEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_wan();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "palm.ops.router.v1.Profile.WanEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .palm.ops.router.v1.Dhcpd lan = 21;
  if (this->_internal_has_lan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::lan(this),
        _Internal::lan(this).GetCachedSize(), target, stream);
  }

  // optional .palm.ops.router.v1.Dhcpd dmz = 22;
  if (_internal_has_dmz()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::dmz(this),
        _Internal::dmz(this).GetCachedSize(), target, stream);
  }

  // .palm.ops.router.v1.Dns dns = 29;
  if (this->_internal_has_dns()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::dns(this),
        _Internal::dns(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Profile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .palm.ops.router.v1.Wan> wan = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wan_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::palm::ops::router::v1::Wan >::const_iterator
      it = this->_internal_wan().begin();
      it != this->_internal_wan().end(); ++it) {
    total_size += Profile_WanEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .palm.ops.router.v1.Administrator administrator = 1;
  if (this->_internal_has_administrator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.administrator_);
  }

  // .palm.ops.router.v1.Dhcpd lan = 21;
  if (this->_internal_has_lan()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lan_);
  }

  // optional .palm.ops.router.v1.Dhcpd dmz = 22;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dmz_);
  }

  // .palm.ops.router.v1.Dns dns = 29;
  if (this->_internal_has_dns()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dns_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Profile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Profile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Profile::GetClassData() const { return &_class_data_; }


void Profile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Profile*>(&to_msg);
  auto& from = static_cast<const Profile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Profile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wan_.MergeFrom(from._impl_.wan_);
  if (from._internal_has_administrator()) {
    _this->_internal_mutable_administrator()->::palm::ops::router::v1::Administrator::MergeFrom(
        from._internal_administrator());
  }
  if (from._internal_has_lan()) {
    _this->_internal_mutable_lan()->::palm::ops::router::v1::Dhcpd::MergeFrom(
        from._internal_lan());
  }
  if (from._internal_has_dmz()) {
    _this->_internal_mutable_dmz()->::palm::ops::router::v1::Dhcpd::MergeFrom(
        from._internal_dmz());
  }
  if (from._internal_has_dns()) {
    _this->_internal_mutable_dns()->::palm::ops::router::v1::Dns::MergeFrom(
        from._internal_dns());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.wan_.InternalSwap(&other->_impl_.wan_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Profile, _impl_.dns_)
      + sizeof(Profile::_impl_.dns_)
      - PROTOBUF_FIELD_OFFSET(Profile, _impl_.administrator_)>(
          reinterpret_cast<char*>(&_impl_.administrator_),
          reinterpret_cast<char*>(&other->_impl_.administrator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[12]);
}

// ===================================================================

class Status::_Internal {
 public:
  static const ::palm::ops::router::v1::Profile& profile(const Status* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Status* msg);
};

const ::palm::ops::router::v1::Profile&
Status::_Internal::profile(const Status* msg) {
  return *msg->_impl_.profile_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Status::_Internal::created_at(const Status* msg) {
  return *msg->_impl_.created_at_;
}
void Status::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.ops.router.v1.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.profile_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile()) {
    _this->_impl_.profile_ = new ::palm::ops::router::v1::Profile(*from._impl_.profile_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.ops.router.v1.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){arena}
    , decltype(_impl_.profile_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:palm.ops.router.v1.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.profile_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.ops.router.v1.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.profile_ != nullptr) {
    delete _impl_.profile_;
  }
  _impl_.profile_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.ops.router.v1.Profile profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.ops.router.v1.Log logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.ops.router.v1.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.ops.router.v1.Profile profile = 1;
  if (this->_internal_has_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.ops.router.v1.Log logs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.ops.router.v1.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.ops.router.v1.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.ops.router.v1.Log logs = 2;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.ops.router.v1.Profile profile = 1;
  if (this->_internal_has_profile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profile_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.ops.router.v1.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  if (from._internal_has_profile()) {
    _this->_internal_mutable_profile()->::palm::ops::router::v1::Profile::MergeFrom(
        from._internal_profile());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.ops.router.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.created_at_)
      + sizeof(Status::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.profile_)>(
          reinterpret_cast<char*>(&_impl_.profile_),
          reinterpret_cast<char*>(&other->_impl_.profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ops_2drouter_2eproto_getter, &descriptor_table_ops_2drouter_2eproto_once,
      file_level_metadata_ops_2drouter_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace router
}  // namespace ops
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Administrator*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Administrator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Administrator >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Log*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Wan_Static*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Wan_Static >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Wan_Static >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Wan_Dhcp*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Wan_Dhcp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Wan_Dhcp >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Wan_Nat*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Wan_Nat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Wan_Nat >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Wan_In*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Wan_In >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Wan_In >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Wan_Out*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Wan_Out >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Wan_Out >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Wan*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Wan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Wan >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Dhcpd_HostsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Dhcpd*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Dhcpd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Dhcpd >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Dns*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Dns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Dns >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Profile_WanEntry_DoNotUse*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Profile_WanEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Profile_WanEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Profile*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::ops::router::v1::Status*
Arena::CreateMaybeMessage< ::palm::ops::router::v1::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::ops::router::v1::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
