// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: metasequoia.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserLogsResponse_Item_Level int32

const (
	UserLogsResponse_Item_DEBUG   UserLogsResponse_Item_Level = 0
	UserLogsResponse_Item_INFO    UserLogsResponse_Item_Level = 1
	UserLogsResponse_Item_WARNING UserLogsResponse_Item_Level = 2
	UserLogsResponse_Item_ERROR   UserLogsResponse_Item_Level = 3
)

// Enum value maps for UserLogsResponse_Item_Level.
var (
	UserLogsResponse_Item_Level_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARNING",
		3: "ERROR",
	}
	UserLogsResponse_Item_Level_value = map[string]int32{
		"DEBUG":   0,
		"INFO":    1,
		"WARNING": 2,
		"ERROR":   3,
	}
)

func (x UserLogsResponse_Item_Level) Enum() *UserLogsResponse_Item_Level {
	p := new(UserLogsResponse_Item_Level)
	*p = x
	return p
}

func (x UserLogsResponse_Item_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserLogsResponse_Item_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_metasequoia_proto_enumTypes[0].Descriptor()
}

func (UserLogsResponse_Item_Level) Type() protoreflect.EnumType {
	return &file_metasequoia_proto_enumTypes[0]
}

func (x UserLogsResponse_Item_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserLogsResponse_Item_Level.Descriptor instead.
func (UserLogsResponse_Item_Level) EnumDescriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{5, 0, 0}
}

type UserSignInResponse_By int32

const (
	UserSignInResponse_Nickname          UserSignInResponse_By = 0
	UserSignInResponse_Email             UserSignInResponse_By = 1
	UserSignInResponse_Phone             UserSignInResponse_By = 2
	UserSignInResponse_WechatOauth2      UserSignInResponse_By = 11
	UserSignInResponse_WechatMiniProgram UserSignInResponse_By = 12
	UserSignInResponse_Facebook          UserSignInResponse_By = 21
	UserSignInResponse_Google            UserSignInResponse_By = 22
)

// Enum value maps for UserSignInResponse_By.
var (
	UserSignInResponse_By_name = map[int32]string{
		0:  "Nickname",
		1:  "Email",
		2:  "Phone",
		11: "WechatOauth2",
		12: "WechatMiniProgram",
		21: "Facebook",
		22: "Google",
	}
	UserSignInResponse_By_value = map[string]int32{
		"Nickname":          0,
		"Email":             1,
		"Phone":             2,
		"WechatOauth2":      11,
		"WechatMiniProgram": 12,
		"Facebook":          21,
		"Google":            22,
	}
)

func (x UserSignInResponse_By) Enum() *UserSignInResponse_By {
	p := new(UserSignInResponse_By)
	*p = x
	return p
}

func (x UserSignInResponse_By) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSignInResponse_By) Descriptor() protoreflect.EnumDescriptor {
	return file_metasequoia_proto_enumTypes[1].Descriptor()
}

func (UserSignInResponse_By) Type() protoreflect.EnumType {
	return &file_metasequoia_proto_enumTypes[1]
}

func (x UserSignInResponse_By) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSignInResponse_By.Descriptor instead.
func (UserSignInResponse_By) EnumDescriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{11, 0}
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload map[string]string `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{0}
}

func (x *UserProfile) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UserIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UserIndexResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UserIndexResponse) Reset() {
	*x = UserIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIndexResponse) ProtoMessage() {}

func (x *UserIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIndexResponse.ProtoReflect.Descriptor instead.
func (*UserIndexResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{1}
}

func (x *UserIndexResponse) GetItems() []*UserIndexResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserSetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserSetPasswordRequest) Reset() {
	*x = UserSetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetPasswordRequest) ProtoMessage() {}

func (x *UserSetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetPasswordRequest.ProtoReflect.Descriptor instead.
func (*UserSetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{2}
}

func (x *UserSetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPassword      string `protobuf:"bytes,1,opt,name=current_password,json=currentPassword,proto3" json:"current_password,omitempty"`
	NewPassword          string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	PasswordConfirmation string `protobuf:"bytes,3,opt,name=password_confirmation,json=passwordConfirmation,proto3" json:"password_confirmation,omitempty"`
}

func (x *UserChangePasswordRequest) Reset() {
	*x = UserChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChangePasswordRequest) ProtoMessage() {}

func (x *UserChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*UserChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{3}
}

func (x *UserChangePasswordRequest) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *UserChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *UserChangePasswordRequest) GetPasswordConfirmation() string {
	if x != nil {
		return x.PasswordConfirmation
	}
	return ""
}

type UserLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *string                `protobuf:"bytes,1,opt,name=plugin,proto3,oneof" json:"plugin,omitempty"`
	From   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *UserLogsRequest) Reset() {
	*x = UserLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogsRequest) ProtoMessage() {}

func (x *UserLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogsRequest.ProtoReflect.Descriptor instead.
func (*UserLogsRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{4}
}

func (x *UserLogsRequest) GetPlugin() string {
	if x != nil && x.Plugin != nil {
		return *x.Plugin
	}
	return ""
}

func (x *UserLogsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *UserLogsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type UserLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UserLogsResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UserLogsResponse) Reset() {
	*x = UserLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogsResponse) ProtoMessage() {}

func (x *UserLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogsResponse.ProtoReflect.Descriptor instead.
func (*UserLogsResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{5}
}

func (x *UserLogsResponse) GetItems() []*UserLogsResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserResetPasswordRequest) Reset() {
	*x = UserResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResetPasswordRequest) ProtoMessage() {}

func (x *UserResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*UserResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{6}
}

func (x *UserResetPasswordRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserResetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserTokenRequest) Reset() {
	*x = UserTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTokenRequest) ProtoMessage() {}

func (x *UserTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTokenRequest.ProtoReflect.Descriptor instead.
func (*UserTokenRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{7}
}

func (x *UserTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//
	//	*UserQueryRequest_Email
	//	*UserQueryRequest_Nickname
	//	*UserQueryRequest_Phone
	//	*UserQueryRequest_Uid
	By isUserQueryRequest_By `protobuf_oneof:"by"`
}

func (x *UserQueryRequest) Reset() {
	*x = UserQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQueryRequest) ProtoMessage() {}

func (x *UserQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQueryRequest.ProtoReflect.Descriptor instead.
func (*UserQueryRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{8}
}

func (m *UserQueryRequest) GetBy() isUserQueryRequest_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *UserQueryRequest) GetEmail() string {
	if x, ok := x.GetBy().(*UserQueryRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (x *UserQueryRequest) GetNickname() string {
	if x, ok := x.GetBy().(*UserQueryRequest_Nickname); ok {
		return x.Nickname
	}
	return ""
}

func (x *UserQueryRequest) GetPhone() string {
	if x, ok := x.GetBy().(*UserQueryRequest_Phone); ok {
		return x.Phone
	}
	return ""
}

func (x *UserQueryRequest) GetUid() string {
	if x, ok := x.GetBy().(*UserQueryRequest_Uid); ok {
		return x.Uid
	}
	return ""
}

type isUserQueryRequest_By interface {
	isUserQueryRequest_By()
}

type UserQueryRequest_Email struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3,oneof"`
}

type UserQueryRequest_Nickname struct {
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3,oneof"`
}

type UserQueryRequest_Phone struct {
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3,oneof"`
}

type UserQueryRequest_Uid struct {
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3,oneof"`
}

func (*UserQueryRequest_Email) isUserQueryRequest_By() {}

func (*UserQueryRequest_Nickname) isUserQueryRequest_By() {}

func (*UserQueryRequest_Phone) isUserQueryRequest_By() {}

func (*UserQueryRequest_Uid) isUserQueryRequest_By() {}

type UserSignUpByEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RealName string `protobuf:"bytes,2,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Locale   string `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale,omitempty"`
	Timezone string `protobuf:"bytes,12,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Home     string `protobuf:"bytes,99,opt,name=home,proto3" json:"home,omitempty"`
}

func (x *UserSignUpByEmailRequest) Reset() {
	*x = UserSignUpByEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignUpByEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignUpByEmailRequest) ProtoMessage() {}

func (x *UserSignUpByEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignUpByEmailRequest.ProtoReflect.Descriptor instead.
func (*UserSignUpByEmailRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{9}
}

func (x *UserSignUpByEmailRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserSignUpByEmailRequest) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserSignUpByEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserSignUpByEmailRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSignUpByEmailRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *UserSignUpByEmailRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *UserSignUpByEmailRequest) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

type UserSignInByPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to User:
	//
	//	*UserSignInByPasswordRequest_Email
	//	*UserSignInByPasswordRequest_Nickname
	//	*UserSignInByPasswordRequest_Phone
	User     isUserSignInByPasswordRequest_User `protobuf_oneof:"user"`
	Password string                             `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	Ttl      *durationpb.Duration               `protobuf:"bytes,19,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *UserSignInByPasswordRequest) Reset() {
	*x = UserSignInByPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignInByPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignInByPasswordRequest) ProtoMessage() {}

func (x *UserSignInByPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignInByPasswordRequest.ProtoReflect.Descriptor instead.
func (*UserSignInByPasswordRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{10}
}

func (m *UserSignInByPasswordRequest) GetUser() isUserSignInByPasswordRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *UserSignInByPasswordRequest) GetEmail() string {
	if x, ok := x.GetUser().(*UserSignInByPasswordRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (x *UserSignInByPasswordRequest) GetNickname() string {
	if x, ok := x.GetUser().(*UserSignInByPasswordRequest_Nickname); ok {
		return x.Nickname
	}
	return ""
}

func (x *UserSignInByPasswordRequest) GetPhone() string {
	if x, ok := x.GetUser().(*UserSignInByPasswordRequest_Phone); ok {
		return x.Phone
	}
	return ""
}

func (x *UserSignInByPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSignInByPasswordRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type isUserSignInByPasswordRequest_User interface {
	isUserSignInByPasswordRequest_User()
}

type UserSignInByPasswordRequest_Email struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3,oneof"`
}

type UserSignInByPasswordRequest_Nickname struct {
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3,oneof"`
}

type UserSignInByPasswordRequest_Phone struct {
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3,oneof"`
}

func (*UserSignInByPasswordRequest_Email) isUserSignInByPasswordRequest_User() {}

func (*UserSignInByPasswordRequest_Nickname) isUserSignInByPasswordRequest_User() {}

func (*UserSignInByPasswordRequest_Phone) isUserSignInByPasswordRequest_User() {}

type UserSignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealName    string                `protobuf:"bytes,1,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	By          UserSignInResponse_By `protobuf:"varint,9,opt,name=by,proto3,enum=palm.metasequoia.v1.UserSignInResponse_By" json:"by,omitempty"`
	Token       string                `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	Roles       []*Role               `protobuf:"bytes,12,rep,name=roles,proto3" json:"roles,omitempty"`
	Permissions []*Permission         `protobuf:"bytes,13,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *UserSignInResponse) Reset() {
	*x = UserSignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignInResponse) ProtoMessage() {}

func (x *UserSignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignInResponse.ProtoReflect.Descriptor instead.
func (*UserSignInResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{11}
}

func (x *UserSignInResponse) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserSignInResponse) GetBy() UserSignInResponse_By {
	if x != nil {
		return x.By
	}
	return UserSignInResponse_Nickname
}

func (x *UserSignInResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserSignInResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UserSignInResponse) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Subject:
	//
	//	*Permission_User
	//	*Permission_Role
	Subject isPermission_Subject `protobuf_oneof:"subject"`
	Object  *Resource            `protobuf:"bytes,11,opt,name=object,proto3" json:"object,omitempty"`
	Action  string               `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{12}
}

func (m *Permission) GetSubject() isPermission_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (x *Permission) GetUser() int32 {
	if x, ok := x.GetSubject().(*Permission_User); ok {
		return x.User
	}
	return 0
}

func (x *Permission) GetRole() *Role {
	if x, ok := x.GetSubject().(*Permission_Role); ok {
		return x.Role
	}
	return nil
}

func (x *Permission) GetObject() *Resource {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Permission) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type isPermission_Subject interface {
	isPermission_Subject()
}

type Permission_User struct {
	User int32 `protobuf:"varint,1,opt,name=user,proto3,oneof"`
}

type Permission_Role struct {
	Role *Role `protobuf:"bytes,2,opt,name=role,proto3,oneof"`
}

func (*Permission_User) isPermission_Subject() {}

func (*Permission_Role) isPermission_Subject() {}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*Resource_S
	//	*Resource_I
	Id   isResource_Id `protobuf_oneof:"id"`
	Type string        `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{13}
}

func (m *Resource) GetId() isResource_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *Resource) GetS() string {
	if x, ok := x.GetId().(*Resource_S); ok {
		return x.S
	}
	return ""
}

func (x *Resource) GetI() int32 {
	if x, ok := x.GetId().(*Resource_I); ok {
		return x.I
	}
	return 0
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type isResource_Id interface {
	isResource_Id()
}

type Resource_S struct {
	S string `protobuf:"bytes,1,opt,name=s,proto3,oneof"`
}

type Resource_I struct {
	I int32 `protobuf:"varint,2,opt,name=i,proto3,oneof"`
}

func (*Resource_S) isResource_Id() {}

func (*Resource_I) isResource_Id() {}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//
	//	*Role_Administrator
	//	*Role_Root
	//	*Role_Member_
	By isRole_By `protobuf_oneof:"by"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{14}
}

func (m *Role) GetBy() isRole_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *Role) GetAdministrator() *emptypb.Empty {
	if x, ok := x.GetBy().(*Role_Administrator); ok {
		return x.Administrator
	}
	return nil
}

func (x *Role) GetRoot() *emptypb.Empty {
	if x, ok := x.GetBy().(*Role_Root); ok {
		return x.Root
	}
	return nil
}

func (x *Role) GetMember() *Role_Member {
	if x, ok := x.GetBy().(*Role_Member_); ok {
		return x.Member
	}
	return nil
}

type isRole_By interface {
	isRole_By()
}

type Role_Administrator struct {
	Administrator *emptypb.Empty `protobuf:"bytes,1,opt,name=administrator,proto3,oneof"`
}

type Role_Root struct {
	Root *emptypb.Empty `protobuf:"bytes,2,opt,name=root,proto3,oneof"`
}

type Role_Member_ struct {
	Member *Role_Member `protobuf:"bytes,3,opt,name=member,proto3,oneof"`
}

func (*Role_Administrator) isRole_By() {}

func (*Role_Root) isRole_By() {}

func (*Role_Member_) isRole_By() {}

type RbacCanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User   int32     `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Object *Resource `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Action string    `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *RbacCanRequest) Reset() {
	*x = RbacCanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacCanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacCanRequest) ProtoMessage() {}

func (x *RbacCanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacCanRequest.ProtoReflect.Descriptor instead.
func (*RbacCanRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{15}
}

func (x *RbacCanRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *RbacCanRequest) GetObject() *Resource {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *RbacCanRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type RbacHasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Role *Role `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RbacHasRequest) Reset() {
	*x = RbacHasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacHasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacHasRequest) ProtoMessage() {}

func (x *RbacHasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacHasRequest.ProtoReflect.Descriptor instead.
func (*RbacHasRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{16}
}

func (x *RbacHasRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *RbacHasRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type RbacPermissionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   string    `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *RbacPermissionItem) Reset() {
	*x = RbacPermissionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacPermissionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacPermissionItem) ProtoMessage() {}

func (x *RbacPermissionItem) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacPermissionItem.ProtoReflect.Descriptor instead.
func (*RbacPermissionItem) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{17}
}

func (x *RbacPermissionItem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RbacPermissionItem) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type RbacPermissionsForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        int32                 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Permissions []*RbacPermissionItem `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RbacPermissionsForUserRequest) Reset() {
	*x = RbacPermissionsForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacPermissionsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacPermissionsForUserRequest) ProtoMessage() {}

func (x *RbacPermissionsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacPermissionsForUserRequest.ProtoReflect.Descriptor instead.
func (*RbacPermissionsForUserRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{18}
}

func (x *RbacPermissionsForUserRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *RbacPermissionsForUserRequest) GetPermissions() []*RbacPermissionItem {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RbacPermissionsForRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role        *Role                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Permissions []*RbacPermissionItem `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RbacPermissionsForRoleRequest) Reset() {
	*x = RbacPermissionsForRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacPermissionsForRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacPermissionsForRoleRequest) ProtoMessage() {}

func (x *RbacPermissionsForRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacPermissionsForRoleRequest.ProtoReflect.Descriptor instead.
func (*RbacPermissionsForRoleRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{19}
}

func (x *RbacPermissionsForRoleRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RbacPermissionsForRoleRequest) GetPermissions() []*RbacPermissionItem {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RbacRolesForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  int32   `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	Roles []*Role `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *RbacRolesForUserRequest) Reset() {
	*x = RbacRolesForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacRolesForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacRolesForUserRequest) ProtoMessage() {}

func (x *RbacRolesForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacRolesForUserRequest.ProtoReflect.Descriptor instead.
func (*RbacRolesForUserRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{20}
}

func (x *RbacRolesForUserRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *RbacRolesForUserRequest) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

type RbacRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Role `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RbacRolesResponse) Reset() {
	*x = RbacRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacRolesResponse) ProtoMessage() {}

func (x *RbacRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacRolesResponse.ProtoReflect.Descriptor instead.
func (*RbacRolesResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{21}
}

func (x *RbacRolesResponse) GetItems() []*Role {
	if x != nil {
		return x.Items
	}
	return nil
}

type RbacPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Permission `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RbacPermissionsResponse) Reset() {
	*x = RbacPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RbacPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RbacPermissionsResponse) ProtoMessage() {}

func (x *RbacPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RbacPermissionsResponse.ProtoReflect.Descriptor instead.
func (*RbacPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{22}
}

func (x *RbacPermissionsResponse) GetItems() []*Permission {
	if x != nil {
		return x.Items
	}
	return nil
}

type SettingSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global bool   `protobuf:"varint,1,opt,name=global,proto3" json:"global,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SettingSetRequest) Reset() {
	*x = SettingSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingSetRequest) ProtoMessage() {}

func (x *SettingSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingSetRequest.ProtoReflect.Descriptor instead.
func (*SettingSetRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{23}
}

func (x *SettingSetRequest) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

func (x *SettingSetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SettingSetRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SettingGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global bool   `protobuf:"varint,1,opt,name=global,proto3" json:"global,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SettingGetRequest) Reset() {
	*x = SettingGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingGetRequest) ProtoMessage() {}

func (x *SettingGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingGetRequest.ProtoReflect.Descriptor instead.
func (*SettingGetRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{24}
}

func (x *SettingGetRequest) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

func (x *SettingGetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SettingByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User int32 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SettingByUserRequest) Reset() {
	*x = SettingByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingByUserRequest) ProtoMessage() {}

func (x *SettingByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingByUserRequest.ProtoReflect.Descriptor instead.
func (*SettingByUserRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{25}
}

func (x *SettingByUserRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

type SettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SettingsResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SettingsResponse) Reset() {
	*x = SettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse) ProtoMessage() {}

func (x *SettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse.ProtoReflect.Descriptor instead.
func (*SettingsResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{26}
}

func (x *SettingsResponse) GetItems() []*SettingsResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type LocaleByLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *LocaleByLangRequest) Reset() {
	*x = LocaleByLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocaleByLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleByLangRequest) ProtoMessage() {}

func (x *LocaleByLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleByLangRequest.ProtoReflect.Descriptor instead.
func (*LocaleByLangRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{27}
}

func (x *LocaleByLangRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type LocaleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *LocaleGetRequest) Reset() {
	*x = LocaleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocaleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleGetRequest) ProtoMessage() {}

func (x *LocaleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleGetRequest.ProtoReflect.Descriptor instead.
func (*LocaleGetRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{28}
}

func (x *LocaleGetRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LocaleGetRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LocalesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*LocalesResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *LocalesResponse) Reset() {
	*x = LocalesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalesResponse) ProtoMessage() {}

func (x *LocalesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalesResponse.ProtoReflect.Descriptor instead.
func (*LocalesResponse) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{29}
}

func (x *LocalesResponse) GetItems() []*LocalesResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type LocaleSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang    string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LocaleSetRequest) Reset() {
	*x = LocaleSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocaleSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleSetRequest) ProtoMessage() {}

func (x *LocaleSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleSetRequest.ProtoReflect.Descriptor instead.
func (*LocaleSetRequest) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{30}
}

func (x *LocaleSetRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LocaleSetRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LocaleSetRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UserIndexResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname    string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RealName    string                 `protobuf:"bytes,2,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Email       string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Locale      string                 `protobuf:"bytes,18,opt,name=locale,proto3" json:"locale,omitempty"`
	Timezone    string                 `protobuf:"bytes,19,opt,name=timezone,proto3" json:"timezone,omitempty"`
	ConfirmedAt *timestamppb.Timestamp `protobuf:"bytes,91,opt,name=confirmed_at,json=confirmedAt,proto3,oneof" json:"confirmed_at,omitempty"`
	LockedAt    *timestamppb.Timestamp `protobuf:"bytes,92,opt,name=locked_at,json=lockedAt,proto3,oneof" json:"locked_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,93,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	By          UserSignInResponse_By  `protobuf:"varint,99,opt,name=by,proto3,enum=palm.metasequoia.v1.UserSignInResponse_By" json:"by,omitempty"`
}

func (x *UserIndexResponse_Item) Reset() {
	*x = UserIndexResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIndexResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIndexResponse_Item) ProtoMessage() {}

func (x *UserIndexResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIndexResponse_Item.ProtoReflect.Descriptor instead.
func (*UserIndexResponse_Item) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{1, 0}
}

func (x *UserIndexResponse_Item) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserIndexResponse_Item) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserIndexResponse_Item) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserIndexResponse_Item) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *UserIndexResponse_Item) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *UserIndexResponse_Item) GetConfirmedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

func (x *UserIndexResponse_Item) GetLockedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedAt
	}
	return nil
}

func (x *UserIndexResponse_Item) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *UserIndexResponse_Item) GetBy() UserSignInResponse_By {
	if x != nil {
		return x.By
	}
	return UserSignInResponse_Nickname
}

type UserLogsResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level     UserLogsResponse_Item_Level `protobuf:"varint,2,opt,name=level,proto3,enum=palm.metasequoia.v1.UserLogsResponse_Item_Level" json:"level,omitempty"`
	Plugin    string                      `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Ip        string                      `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Message   string                      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt *timestamppb.Timestamp      `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserLogsResponse_Item) Reset() {
	*x = UserLogsResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogsResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogsResponse_Item) ProtoMessage() {}

func (x *UserLogsResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogsResponse_Item.ProtoReflect.Descriptor instead.
func (*UserLogsResponse_Item) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{5, 0}
}

func (x *UserLogsResponse_Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLogsResponse_Item) GetLevel() UserLogsResponse_Item_Level {
	if x != nil {
		return x.Level
	}
	return UserLogsResponse_Item_DEBUG
}

func (x *UserLogsResponse_Item) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *UserLogsResponse_Item) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserLogsResponse_Item) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserLogsResponse_Item) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Role_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Role_Member) Reset() {
	*x = Role_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role_Member) ProtoMessage() {}

func (x *Role_Member) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role_Member.ProtoReflect.Descriptor instead.
func (*Role_Member) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Role_Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SettingsResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    *int32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Key       string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SettingsResponse_Item) Reset() {
	*x = SettingsResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse_Item) ProtoMessage() {}

func (x *SettingsResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse_Item.ProtoReflect.Descriptor instead.
func (*SettingsResponse_Item) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{26, 0}
}

func (x *SettingsResponse_Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SettingsResponse_Item) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *SettingsResponse_Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SettingsResponse_Item) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SettingsResponse_Item) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SettingsResponse_Item) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type LocalesResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lang      string                 `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Code      string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message   string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *LocalesResponse_Item) Reset() {
	*x = LocalesResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metasequoia_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalesResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalesResponse_Item) ProtoMessage() {}

func (x *LocalesResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_metasequoia_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalesResponse_Item.ProtoReflect.Descriptor instead.
func (*LocalesResponse_Item) Descriptor() ([]byte, []int) {
	return file_metasequoia_proto_rawDescGZIP(), []int{29, 0}
}

func (x *LocalesResponse_Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocalesResponse_Item) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LocalesResponse_Item) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LocalesResponse_Item) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LocalesResponse_Item) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LocalesResponse_Item) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_metasequoia_proto protoreflect.FileDescriptor

var file_metasequoia_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65,
	0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x04, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0xb5, 0x03, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x79, 0x52, 0x02, 0x62, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x34, 0x0a, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0xe8, 0x02, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f,
	0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x91, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x34, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x4c, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x28, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xe4, 0x02, 0x0a, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x02, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x79, 0x52, 0x02, 0x62, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2f, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x02, 0x42, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x16,
	0x22, 0xad, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x44, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x01,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x73, 0x12, 0x0e, 0x0a, 0x01,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x01, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22, 0x73, 0x0a,
	0x0e, 0x52, 0x62, 0x61, 0x63, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x0e, 0x52, 0x62, 0x61, 0x63, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x67, 0x0a, 0x12, 0x52, 0x62, 0x61, 0x63, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x7e, 0x0a, 0x1d, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x1d, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61,
	0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x17,
	0x52, 0x62, 0x61, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x11,
	0x52, 0x62, 0x61, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xde, 0x01, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x13,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x3a, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xce, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x54, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0xde, 0x0e, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x42, 0x79, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x42, 0x79, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0e, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f,
	0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x07, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x04, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65,
	0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x04, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65,
	0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65,
	0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x25,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x32, 0xa5, 0x09, 0x0a, 0x04, 0x52, 0x62, 0x61, 0x63, 0x12, 0x44, 0x0a, 0x03, 0x43, 0x61, 0x6e,
	0x12, 0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61, 0x63, 0x43, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x03, 0x48, 0x61, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61,
	0x63, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f,
	0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x62, 0x61, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x62, 0x61, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61,
	0x63, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62,
	0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x32, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f,
	0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62,
	0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x32, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x62, 0x61, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x9f, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x06, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f,
	0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x02, 0x4d, 0x79, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x87, 0x02, 0x0a, 0x06, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x06, 0x42, 0x79, 0x4c, 0x61,
	0x6e, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65,
	0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x42,
	0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x60, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x78, 0x69, 0x76, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x78,
	0x69, 0x76, 0x2f, 0x70, 0x61, 0x6c, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x65, 0x71, 0x75,
	0x6f, 0x69, 0x61, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metasequoia_proto_rawDescOnce sync.Once
	file_metasequoia_proto_rawDescData = file_metasequoia_proto_rawDesc
)

func file_metasequoia_proto_rawDescGZIP() []byte {
	file_metasequoia_proto_rawDescOnce.Do(func() {
		file_metasequoia_proto_rawDescData = protoimpl.X.CompressGZIP(file_metasequoia_proto_rawDescData)
	})
	return file_metasequoia_proto_rawDescData
}

var file_metasequoia_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metasequoia_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_metasequoia_proto_goTypes = []interface{}{
	(UserLogsResponse_Item_Level)(0),      // 0: palm.metasequoia.v1.UserLogsResponse.Item.Level
	(UserSignInResponse_By)(0),            // 1: palm.metasequoia.v1.UserSignInResponse.By
	(*UserProfile)(nil),                   // 2: palm.metasequoia.v1.UserProfile
	(*UserIndexResponse)(nil),             // 3: palm.metasequoia.v1.UserIndexResponse
	(*UserSetPasswordRequest)(nil),        // 4: palm.metasequoia.v1.UserSetPasswordRequest
	(*UserChangePasswordRequest)(nil),     // 5: palm.metasequoia.v1.UserChangePasswordRequest
	(*UserLogsRequest)(nil),               // 6: palm.metasequoia.v1.UserLogsRequest
	(*UserLogsResponse)(nil),              // 7: palm.metasequoia.v1.UserLogsResponse
	(*UserResetPasswordRequest)(nil),      // 8: palm.metasequoia.v1.UserResetPasswordRequest
	(*UserTokenRequest)(nil),              // 9: palm.metasequoia.v1.UserTokenRequest
	(*UserQueryRequest)(nil),              // 10: palm.metasequoia.v1.UserQueryRequest
	(*UserSignUpByEmailRequest)(nil),      // 11: palm.metasequoia.v1.UserSignUpByEmailRequest
	(*UserSignInByPasswordRequest)(nil),   // 12: palm.metasequoia.v1.UserSignInByPasswordRequest
	(*UserSignInResponse)(nil),            // 13: palm.metasequoia.v1.UserSignInResponse
	(*Permission)(nil),                    // 14: palm.metasequoia.v1.Permission
	(*Resource)(nil),                      // 15: palm.metasequoia.v1.Resource
	(*Role)(nil),                          // 16: palm.metasequoia.v1.Role
	(*RbacCanRequest)(nil),                // 17: palm.metasequoia.v1.RbacCanRequest
	(*RbacHasRequest)(nil),                // 18: palm.metasequoia.v1.RbacHasRequest
	(*RbacPermissionItem)(nil),            // 19: palm.metasequoia.v1.RbacPermissionItem
	(*RbacPermissionsForUserRequest)(nil), // 20: palm.metasequoia.v1.RbacPermissionsForUserRequest
	(*RbacPermissionsForRoleRequest)(nil), // 21: palm.metasequoia.v1.RbacPermissionsForRoleRequest
	(*RbacRolesForUserRequest)(nil),       // 22: palm.metasequoia.v1.RbacRolesForUserRequest
	(*RbacRolesResponse)(nil),             // 23: palm.metasequoia.v1.RbacRolesResponse
	(*RbacPermissionsResponse)(nil),       // 24: palm.metasequoia.v1.RbacPermissionsResponse
	(*SettingSetRequest)(nil),             // 25: palm.metasequoia.v1.SettingSetRequest
	(*SettingGetRequest)(nil),             // 26: palm.metasequoia.v1.SettingGetRequest
	(*SettingByUserRequest)(nil),          // 27: palm.metasequoia.v1.SettingByUserRequest
	(*SettingsResponse)(nil),              // 28: palm.metasequoia.v1.SettingsResponse
	(*LocaleByLangRequest)(nil),           // 29: palm.metasequoia.v1.LocaleByLangRequest
	(*LocaleGetRequest)(nil),              // 30: palm.metasequoia.v1.LocaleGetRequest
	(*LocalesResponse)(nil),               // 31: palm.metasequoia.v1.LocalesResponse
	(*LocaleSetRequest)(nil),              // 32: palm.metasequoia.v1.LocaleSetRequest
	nil,                                   // 33: palm.metasequoia.v1.UserProfile.PayloadEntry
	(*UserIndexResponse_Item)(nil),        // 34: palm.metasequoia.v1.UserIndexResponse.Item
	(*UserLogsResponse_Item)(nil),         // 35: palm.metasequoia.v1.UserLogsResponse.Item
	(*Role_Member)(nil),                   // 36: palm.metasequoia.v1.Role.Member
	(*SettingsResponse_Item)(nil),         // 37: palm.metasequoia.v1.SettingsResponse.Item
	(*LocalesResponse_Item)(nil),          // 38: palm.metasequoia.v1.LocalesResponse.Item
	(*timestamppb.Timestamp)(nil),         // 39: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),           // 40: google.protobuf.Duration
	(*emptypb.Empty)(nil),                 // 41: google.protobuf.Empty
}
var file_metasequoia_proto_depIdxs = []int32{
	33, // 0: palm.metasequoia.v1.UserProfile.payload:type_name -> palm.metasequoia.v1.UserProfile.PayloadEntry
	34, // 1: palm.metasequoia.v1.UserIndexResponse.items:type_name -> palm.metasequoia.v1.UserIndexResponse.Item
	39, // 2: palm.metasequoia.v1.UserLogsRequest.from:type_name -> google.protobuf.Timestamp
	39, // 3: palm.metasequoia.v1.UserLogsRequest.to:type_name -> google.protobuf.Timestamp
	35, // 4: palm.metasequoia.v1.UserLogsResponse.items:type_name -> palm.metasequoia.v1.UserLogsResponse.Item
	40, // 5: palm.metasequoia.v1.UserSignInByPasswordRequest.ttl:type_name -> google.protobuf.Duration
	1,  // 6: palm.metasequoia.v1.UserSignInResponse.by:type_name -> palm.metasequoia.v1.UserSignInResponse.By
	16, // 7: palm.metasequoia.v1.UserSignInResponse.roles:type_name -> palm.metasequoia.v1.Role
	14, // 8: palm.metasequoia.v1.UserSignInResponse.permissions:type_name -> palm.metasequoia.v1.Permission
	16, // 9: palm.metasequoia.v1.Permission.role:type_name -> palm.metasequoia.v1.Role
	15, // 10: palm.metasequoia.v1.Permission.object:type_name -> palm.metasequoia.v1.Resource
	41, // 11: palm.metasequoia.v1.Role.administrator:type_name -> google.protobuf.Empty
	41, // 12: palm.metasequoia.v1.Role.root:type_name -> google.protobuf.Empty
	36, // 13: palm.metasequoia.v1.Role.member:type_name -> palm.metasequoia.v1.Role.Member
	15, // 14: palm.metasequoia.v1.RbacCanRequest.object:type_name -> palm.metasequoia.v1.Resource
	16, // 15: palm.metasequoia.v1.RbacHasRequest.role:type_name -> palm.metasequoia.v1.Role
	15, // 16: palm.metasequoia.v1.RbacPermissionItem.resource:type_name -> palm.metasequoia.v1.Resource
	19, // 17: palm.metasequoia.v1.RbacPermissionsForUserRequest.permissions:type_name -> palm.metasequoia.v1.RbacPermissionItem
	16, // 18: palm.metasequoia.v1.RbacPermissionsForRoleRequest.role:type_name -> palm.metasequoia.v1.Role
	19, // 19: palm.metasequoia.v1.RbacPermissionsForRoleRequest.permissions:type_name -> palm.metasequoia.v1.RbacPermissionItem
	16, // 20: palm.metasequoia.v1.RbacRolesForUserRequest.roles:type_name -> palm.metasequoia.v1.Role
	16, // 21: palm.metasequoia.v1.RbacRolesResponse.items:type_name -> palm.metasequoia.v1.Role
	14, // 22: palm.metasequoia.v1.RbacPermissionsResponse.items:type_name -> palm.metasequoia.v1.Permission
	37, // 23: palm.metasequoia.v1.SettingsResponse.items:type_name -> palm.metasequoia.v1.SettingsResponse.Item
	38, // 24: palm.metasequoia.v1.LocalesResponse.items:type_name -> palm.metasequoia.v1.LocalesResponse.Item
	39, // 25: palm.metasequoia.v1.UserIndexResponse.Item.confirmed_at:type_name -> google.protobuf.Timestamp
	39, // 26: palm.metasequoia.v1.UserIndexResponse.Item.locked_at:type_name -> google.protobuf.Timestamp
	39, // 27: palm.metasequoia.v1.UserIndexResponse.Item.deleted_at:type_name -> google.protobuf.Timestamp
	1,  // 28: palm.metasequoia.v1.UserIndexResponse.Item.by:type_name -> palm.metasequoia.v1.UserSignInResponse.By
	0,  // 29: palm.metasequoia.v1.UserLogsResponse.Item.level:type_name -> palm.metasequoia.v1.UserLogsResponse.Item.Level
	39, // 30: palm.metasequoia.v1.UserLogsResponse.Item.created_at:type_name -> google.protobuf.Timestamp
	39, // 31: palm.metasequoia.v1.SettingsResponse.Item.created_at:type_name -> google.protobuf.Timestamp
	39, // 32: palm.metasequoia.v1.SettingsResponse.Item.updated_at:type_name -> google.protobuf.Timestamp
	39, // 33: palm.metasequoia.v1.LocalesResponse.Item.created_at:type_name -> google.protobuf.Timestamp
	39, // 34: palm.metasequoia.v1.LocalesResponse.Item.updated_at:type_name -> google.protobuf.Timestamp
	12, // 35: palm.metasequoia.v1.User.SignInByPassword:input_type -> palm.metasequoia.v1.UserSignInByPasswordRequest
	11, // 36: palm.metasequoia.v1.User.SignUpByEmail:input_type -> palm.metasequoia.v1.UserSignUpByEmailRequest
	10, // 37: palm.metasequoia.v1.User.ConfirmByEmail:input_type -> palm.metasequoia.v1.UserQueryRequest
	9,  // 38: palm.metasequoia.v1.User.ConfirmByToken:input_type -> palm.metasequoia.v1.UserTokenRequest
	10, // 39: palm.metasequoia.v1.User.UnlockByEmail:input_type -> palm.metasequoia.v1.UserQueryRequest
	9,  // 40: palm.metasequoia.v1.User.UnlockByToken:input_type -> palm.metasequoia.v1.UserTokenRequest
	10, // 41: palm.metasequoia.v1.User.ForgotPassword:input_type -> palm.metasequoia.v1.UserQueryRequest
	8,  // 42: palm.metasequoia.v1.User.ResetPassword:input_type -> palm.metasequoia.v1.UserResetPasswordRequest
	40, // 43: palm.metasequoia.v1.User.Refresh:input_type -> google.protobuf.Duration
	6,  // 44: palm.metasequoia.v1.User.Logs:input_type -> palm.metasequoia.v1.UserLogsRequest
	2,  // 45: palm.metasequoia.v1.User.SetProfile:input_type -> palm.metasequoia.v1.UserProfile
	41, // 46: palm.metasequoia.v1.User.GetProfile:input_type -> google.protobuf.Empty
	5,  // 47: palm.metasequoia.v1.User.ChangePassword:input_type -> palm.metasequoia.v1.UserChangePasswordRequest
	41, // 48: palm.metasequoia.v1.User.SignOut:input_type -> google.protobuf.Empty
	41, // 49: palm.metasequoia.v1.User.Index:input_type -> google.protobuf.Empty
	10, // 50: palm.metasequoia.v1.User.Show:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 51: palm.metasequoia.v1.User.Disable:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 52: palm.metasequoia.v1.User.Enable:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 53: palm.metasequoia.v1.User.Lock:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 54: palm.metasequoia.v1.User.Unlock:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 55: palm.metasequoia.v1.User.Confirm:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 56: palm.metasequoia.v1.User.Delete:input_type -> palm.metasequoia.v1.UserQueryRequest
	4,  // 57: palm.metasequoia.v1.User.SetPassword:input_type -> palm.metasequoia.v1.UserSetPasswordRequest
	17, // 58: palm.metasequoia.v1.Rbac.Can:input_type -> palm.metasequoia.v1.RbacCanRequest
	18, // 59: palm.metasequoia.v1.Rbac.Has:input_type -> palm.metasequoia.v1.RbacHasRequest
	10, // 60: palm.metasequoia.v1.Rbac.GetRolesForUser:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 61: palm.metasequoia.v1.Rbac.GetImplicitRolesForUser:input_type -> palm.metasequoia.v1.UserQueryRequest
	22, // 62: palm.metasequoia.v1.Rbac.AddRolesForUser:input_type -> palm.metasequoia.v1.RbacRolesForUserRequest
	22, // 63: palm.metasequoia.v1.Rbac.DeleteRolesForUser:input_type -> palm.metasequoia.v1.RbacRolesForUserRequest
	21, // 64: palm.metasequoia.v1.Rbac.AddPermissionsForRole:input_type -> palm.metasequoia.v1.RbacPermissionsForRoleRequest
	21, // 65: palm.metasequoia.v1.Rbac.DeletePermissionsForRole:input_type -> palm.metasequoia.v1.RbacPermissionsForRoleRequest
	10, // 66: palm.metasequoia.v1.Rbac.GetPermissionsForUser:input_type -> palm.metasequoia.v1.UserQueryRequest
	10, // 67: palm.metasequoia.v1.Rbac.GetImplicitPermissionsForUser:input_type -> palm.metasequoia.v1.UserQueryRequest
	20, // 68: palm.metasequoia.v1.Rbac.AddPermissionsForUser:input_type -> palm.metasequoia.v1.RbacPermissionsForUserRequest
	20, // 69: palm.metasequoia.v1.Rbac.DeletePermissionsForUser:input_type -> palm.metasequoia.v1.RbacPermissionsForUserRequest
	25, // 70: palm.metasequoia.v1.Setting.Set:input_type -> palm.metasequoia.v1.SettingSetRequest
	26, // 71: palm.metasequoia.v1.Setting.Get:input_type -> palm.metasequoia.v1.SettingGetRequest
	27, // 72: palm.metasequoia.v1.Setting.ByUser:input_type -> palm.metasequoia.v1.SettingByUserRequest
	41, // 73: palm.metasequoia.v1.Setting.My:input_type -> google.protobuf.Empty
	41, // 74: palm.metasequoia.v1.Setting.Global:input_type -> google.protobuf.Empty
	32, // 75: palm.metasequoia.v1.Locale.Set:input_type -> palm.metasequoia.v1.LocaleSetRequest
	30, // 76: palm.metasequoia.v1.Locale.Get:input_type -> palm.metasequoia.v1.LocaleGetRequest
	29, // 77: palm.metasequoia.v1.Locale.ByLang:input_type -> palm.metasequoia.v1.LocaleByLangRequest
	13, // 78: palm.metasequoia.v1.User.SignInByPassword:output_type -> palm.metasequoia.v1.UserSignInResponse
	41, // 79: palm.metasequoia.v1.User.SignUpByEmail:output_type -> google.protobuf.Empty
	41, // 80: palm.metasequoia.v1.User.ConfirmByEmail:output_type -> google.protobuf.Empty
	41, // 81: palm.metasequoia.v1.User.ConfirmByToken:output_type -> google.protobuf.Empty
	41, // 82: palm.metasequoia.v1.User.UnlockByEmail:output_type -> google.protobuf.Empty
	41, // 83: palm.metasequoia.v1.User.UnlockByToken:output_type -> google.protobuf.Empty
	41, // 84: palm.metasequoia.v1.User.ForgotPassword:output_type -> google.protobuf.Empty
	41, // 85: palm.metasequoia.v1.User.ResetPassword:output_type -> google.protobuf.Empty
	13, // 86: palm.metasequoia.v1.User.Refresh:output_type -> palm.metasequoia.v1.UserSignInResponse
	7,  // 87: palm.metasequoia.v1.User.Logs:output_type -> palm.metasequoia.v1.UserLogsResponse
	41, // 88: palm.metasequoia.v1.User.SetProfile:output_type -> google.protobuf.Empty
	2,  // 89: palm.metasequoia.v1.User.GetProfile:output_type -> palm.metasequoia.v1.UserProfile
	41, // 90: palm.metasequoia.v1.User.ChangePassword:output_type -> google.protobuf.Empty
	41, // 91: palm.metasequoia.v1.User.SignOut:output_type -> google.protobuf.Empty
	3,  // 92: palm.metasequoia.v1.User.Index:output_type -> palm.metasequoia.v1.UserIndexResponse
	34, // 93: palm.metasequoia.v1.User.Show:output_type -> palm.metasequoia.v1.UserIndexResponse.Item
	41, // 94: palm.metasequoia.v1.User.Disable:output_type -> google.protobuf.Empty
	41, // 95: palm.metasequoia.v1.User.Enable:output_type -> google.protobuf.Empty
	41, // 96: palm.metasequoia.v1.User.Lock:output_type -> google.protobuf.Empty
	41, // 97: palm.metasequoia.v1.User.Unlock:output_type -> google.protobuf.Empty
	41, // 98: palm.metasequoia.v1.User.Confirm:output_type -> google.protobuf.Empty
	41, // 99: palm.metasequoia.v1.User.Delete:output_type -> google.protobuf.Empty
	41, // 100: palm.metasequoia.v1.User.SetPassword:output_type -> google.protobuf.Empty
	41, // 101: palm.metasequoia.v1.Rbac.Can:output_type -> google.protobuf.Empty
	41, // 102: palm.metasequoia.v1.Rbac.Has:output_type -> google.protobuf.Empty
	23, // 103: palm.metasequoia.v1.Rbac.GetRolesForUser:output_type -> palm.metasequoia.v1.RbacRolesResponse
	23, // 104: palm.metasequoia.v1.Rbac.GetImplicitRolesForUser:output_type -> palm.metasequoia.v1.RbacRolesResponse
	41, // 105: palm.metasequoia.v1.Rbac.AddRolesForUser:output_type -> google.protobuf.Empty
	41, // 106: palm.metasequoia.v1.Rbac.DeleteRolesForUser:output_type -> google.protobuf.Empty
	41, // 107: palm.metasequoia.v1.Rbac.AddPermissionsForRole:output_type -> google.protobuf.Empty
	41, // 108: palm.metasequoia.v1.Rbac.DeletePermissionsForRole:output_type -> google.protobuf.Empty
	24, // 109: palm.metasequoia.v1.Rbac.GetPermissionsForUser:output_type -> palm.metasequoia.v1.RbacPermissionsResponse
	24, // 110: palm.metasequoia.v1.Rbac.GetImplicitPermissionsForUser:output_type -> palm.metasequoia.v1.RbacPermissionsResponse
	41, // 111: palm.metasequoia.v1.Rbac.AddPermissionsForUser:output_type -> google.protobuf.Empty
	41, // 112: palm.metasequoia.v1.Rbac.DeletePermissionsForUser:output_type -> google.protobuf.Empty
	41, // 113: palm.metasequoia.v1.Setting.Set:output_type -> google.protobuf.Empty
	37, // 114: palm.metasequoia.v1.Setting.Get:output_type -> palm.metasequoia.v1.SettingsResponse.Item
	28, // 115: palm.metasequoia.v1.Setting.ByUser:output_type -> palm.metasequoia.v1.SettingsResponse
	28, // 116: palm.metasequoia.v1.Setting.My:output_type -> palm.metasequoia.v1.SettingsResponse
	28, // 117: palm.metasequoia.v1.Setting.Global:output_type -> palm.metasequoia.v1.SettingsResponse
	41, // 118: palm.metasequoia.v1.Locale.Set:output_type -> google.protobuf.Empty
	38, // 119: palm.metasequoia.v1.Locale.Get:output_type -> palm.metasequoia.v1.LocalesResponse.Item
	31, // 120: palm.metasequoia.v1.Locale.ByLang:output_type -> palm.metasequoia.v1.LocalesResponse
	78, // [78:121] is the sub-list for method output_type
	35, // [35:78] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_metasequoia_proto_init() }
func file_metasequoia_proto_init() {
	if File_metasequoia_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metasequoia_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignUpByEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignInByPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacCanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacHasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacPermissionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacPermissionsForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacPermissionsForRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacRolesForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RbacPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocaleByLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocaleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocaleSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIndexResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogsResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metasequoia_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalesResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_metasequoia_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_metasequoia_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UserQueryRequest_Email)(nil),
		(*UserQueryRequest_Nickname)(nil),
		(*UserQueryRequest_Phone)(nil),
		(*UserQueryRequest_Uid)(nil),
	}
	file_metasequoia_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UserSignInByPasswordRequest_Email)(nil),
		(*UserSignInByPasswordRequest_Nickname)(nil),
		(*UserSignInByPasswordRequest_Phone)(nil),
	}
	file_metasequoia_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Permission_User)(nil),
		(*Permission_Role)(nil),
	}
	file_metasequoia_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Resource_S)(nil),
		(*Resource_I)(nil),
	}
	file_metasequoia_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Role_Administrator)(nil),
		(*Role_Root)(nil),
		(*Role_Member_)(nil),
	}
	file_metasequoia_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_metasequoia_proto_msgTypes[35].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metasequoia_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_metasequoia_proto_goTypes,
		DependencyIndexes: file_metasequoia_proto_depIdxs,
		EnumInfos:         file_metasequoia_proto_enumTypes,
		MessageInfos:      file_metasequoia_proto_msgTypes,
	}.Build()
	File_metasequoia_proto = out.File
	file_metasequoia_proto_rawDesc = nil
	file_metasequoia_proto_goTypes = nil
	file_metasequoia_proto_depIdxs = nil
}
