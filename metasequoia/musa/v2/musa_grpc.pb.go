// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: musa.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WechatPayNative_Prepay_FullMethodName = "/palm.musa.v1.WechatPayNative/Prepay"
)

// WechatPayNativeClient is the client API for WechatPayNative service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatPayNativeClient interface {
	Prepay(ctx context.Context, in *WechatPayPrepayRequest, opts ...grpc.CallOption) (*WechatPayNativeQrCodeUrlResponse, error)
}

type wechatPayNativeClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatPayNativeClient(cc grpc.ClientConnInterface) WechatPayNativeClient {
	return &wechatPayNativeClient{cc}
}

func (c *wechatPayNativeClient) Prepay(ctx context.Context, in *WechatPayPrepayRequest, opts ...grpc.CallOption) (*WechatPayNativeQrCodeUrlResponse, error) {
	out := new(WechatPayNativeQrCodeUrlResponse)
	err := c.cc.Invoke(ctx, WechatPayNative_Prepay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatPayNativeServer is the server API for WechatPayNative service.
// All implementations must embed UnimplementedWechatPayNativeServer
// for forward compatibility
type WechatPayNativeServer interface {
	Prepay(context.Context, *WechatPayPrepayRequest) (*WechatPayNativeQrCodeUrlResponse, error)
	mustEmbedUnimplementedWechatPayNativeServer()
}

// UnimplementedWechatPayNativeServer must be embedded to have forward compatible implementations.
type UnimplementedWechatPayNativeServer struct {
}

func (UnimplementedWechatPayNativeServer) Prepay(context.Context, *WechatPayPrepayRequest) (*WechatPayNativeQrCodeUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepay not implemented")
}
func (UnimplementedWechatPayNativeServer) mustEmbedUnimplementedWechatPayNativeServer() {}

// UnsafeWechatPayNativeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatPayNativeServer will
// result in compilation errors.
type UnsafeWechatPayNativeServer interface {
	mustEmbedUnimplementedWechatPayNativeServer()
}

func RegisterWechatPayNativeServer(s grpc.ServiceRegistrar, srv WechatPayNativeServer) {
	s.RegisterService(&WechatPayNative_ServiceDesc, srv)
}

func _WechatPayNative_Prepay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayPrepayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayNativeServer).Prepay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayNative_Prepay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayNativeServer).Prepay(ctx, req.(*WechatPayPrepayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatPayNative_ServiceDesc is the grpc.ServiceDesc for WechatPayNative service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatPayNative_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.musa.v1.WechatPayNative",
	HandlerType: (*WechatPayNativeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepay",
			Handler:    _WechatPayNative_Prepay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musa.proto",
}

const (
	WechatPayJsapi_Prepay_FullMethodName                 = "/palm.musa.v1.WechatPayJsapi/Prepay"
	WechatPayJsapi_QueryOrderByOutTradeNo_FullMethodName = "/palm.musa.v1.WechatPayJsapi/QueryOrderByOutTradeNo"
	WechatPayJsapi_QueryOrderById_FullMethodName         = "/palm.musa.v1.WechatPayJsapi/QueryOrderById"
	WechatPayJsapi_CloseOrder_FullMethodName             = "/palm.musa.v1.WechatPayJsapi/CloseOrder"
)

// WechatPayJsapiClient is the client API for WechatPayJsapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatPayJsapiClient interface {
	Prepay(ctx context.Context, in *WechatPayPrepayRequest, opts ...grpc.CallOption) (*WechatPayJsapiPrepayIdResponse, error)
	QueryOrderByOutTradeNo(ctx context.Context, in *WechatPayQueryOrderByOutTradeNoRequest, opts ...grpc.CallOption) (*WechatPayTradeResponse, error)
	QueryOrderById(ctx context.Context, in *WechatPayQueryOrderByIdRequest, opts ...grpc.CallOption) (*WechatPayTradeResponse, error)
	CloseOrder(ctx context.Context, in *WechatPayCloseOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type wechatPayJsapiClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatPayJsapiClient(cc grpc.ClientConnInterface) WechatPayJsapiClient {
	return &wechatPayJsapiClient{cc}
}

func (c *wechatPayJsapiClient) Prepay(ctx context.Context, in *WechatPayPrepayRequest, opts ...grpc.CallOption) (*WechatPayJsapiPrepayIdResponse, error) {
	out := new(WechatPayJsapiPrepayIdResponse)
	err := c.cc.Invoke(ctx, WechatPayJsapi_Prepay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayJsapiClient) QueryOrderByOutTradeNo(ctx context.Context, in *WechatPayQueryOrderByOutTradeNoRequest, opts ...grpc.CallOption) (*WechatPayTradeResponse, error) {
	out := new(WechatPayTradeResponse)
	err := c.cc.Invoke(ctx, WechatPayJsapi_QueryOrderByOutTradeNo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayJsapiClient) QueryOrderById(ctx context.Context, in *WechatPayQueryOrderByIdRequest, opts ...grpc.CallOption) (*WechatPayTradeResponse, error) {
	out := new(WechatPayTradeResponse)
	err := c.cc.Invoke(ctx, WechatPayJsapi_QueryOrderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayJsapiClient) CloseOrder(ctx context.Context, in *WechatPayCloseOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WechatPayJsapi_CloseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatPayJsapiServer is the server API for WechatPayJsapi service.
// All implementations must embed UnimplementedWechatPayJsapiServer
// for forward compatibility
type WechatPayJsapiServer interface {
	Prepay(context.Context, *WechatPayPrepayRequest) (*WechatPayJsapiPrepayIdResponse, error)
	QueryOrderByOutTradeNo(context.Context, *WechatPayQueryOrderByOutTradeNoRequest) (*WechatPayTradeResponse, error)
	QueryOrderById(context.Context, *WechatPayQueryOrderByIdRequest) (*WechatPayTradeResponse, error)
	CloseOrder(context.Context, *WechatPayCloseOrderRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWechatPayJsapiServer()
}

// UnimplementedWechatPayJsapiServer must be embedded to have forward compatible implementations.
type UnimplementedWechatPayJsapiServer struct {
}

func (UnimplementedWechatPayJsapiServer) Prepay(context.Context, *WechatPayPrepayRequest) (*WechatPayJsapiPrepayIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepay not implemented")
}
func (UnimplementedWechatPayJsapiServer) QueryOrderByOutTradeNo(context.Context, *WechatPayQueryOrderByOutTradeNoRequest) (*WechatPayTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderByOutTradeNo not implemented")
}
func (UnimplementedWechatPayJsapiServer) QueryOrderById(context.Context, *WechatPayQueryOrderByIdRequest) (*WechatPayTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrderById not implemented")
}
func (UnimplementedWechatPayJsapiServer) CloseOrder(context.Context, *WechatPayCloseOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOrder not implemented")
}
func (UnimplementedWechatPayJsapiServer) mustEmbedUnimplementedWechatPayJsapiServer() {}

// UnsafeWechatPayJsapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatPayJsapiServer will
// result in compilation errors.
type UnsafeWechatPayJsapiServer interface {
	mustEmbedUnimplementedWechatPayJsapiServer()
}

func RegisterWechatPayJsapiServer(s grpc.ServiceRegistrar, srv WechatPayJsapiServer) {
	s.RegisterService(&WechatPayJsapi_ServiceDesc, srv)
}

func _WechatPayJsapi_Prepay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayPrepayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayJsapiServer).Prepay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayJsapi_Prepay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayJsapiServer).Prepay(ctx, req.(*WechatPayPrepayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayJsapi_QueryOrderByOutTradeNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayQueryOrderByOutTradeNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayJsapiServer).QueryOrderByOutTradeNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayJsapi_QueryOrderByOutTradeNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayJsapiServer).QueryOrderByOutTradeNo(ctx, req.(*WechatPayQueryOrderByOutTradeNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayJsapi_QueryOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayQueryOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayJsapiServer).QueryOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayJsapi_QueryOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayJsapiServer).QueryOrderById(ctx, req.(*WechatPayQueryOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayJsapi_CloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayCloseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayJsapiServer).CloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayJsapi_CloseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayJsapiServer).CloseOrder(ctx, req.(*WechatPayCloseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatPayJsapi_ServiceDesc is the grpc.ServiceDesc for WechatPayJsapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatPayJsapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.musa.v1.WechatPayJsapi",
	HandlerType: (*WechatPayJsapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepay",
			Handler:    _WechatPayJsapi_Prepay_Handler,
		},
		{
			MethodName: "QueryOrderByOutTradeNo",
			Handler:    _WechatPayJsapi_QueryOrderByOutTradeNo_Handler,
		},
		{
			MethodName: "QueryOrderById",
			Handler:    _WechatPayJsapi_QueryOrderById_Handler,
		},
		{
			MethodName: "CloseOrder",
			Handler:    _WechatPayJsapi_CloseOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musa.proto",
}

const (
	WechatPayBill_Trade_FullMethodName    = "/palm.musa.v1.WechatPayBill/Trade"
	WechatPayBill_FundFlow_FullMethodName = "/palm.musa.v1.WechatPayBill/FundFlow"
)

// WechatPayBillClient is the client API for WechatPayBill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatPayBillClient interface {
	Trade(ctx context.Context, in *WechatPayTradeBillRequest, opts ...grpc.CallOption) (*WechatPayBillResponse, error)
	FundFlow(ctx context.Context, in *WechatPayFundFlowBillRequest, opts ...grpc.CallOption) (*WechatPayBillResponse, error)
}

type wechatPayBillClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatPayBillClient(cc grpc.ClientConnInterface) WechatPayBillClient {
	return &wechatPayBillClient{cc}
}

func (c *wechatPayBillClient) Trade(ctx context.Context, in *WechatPayTradeBillRequest, opts ...grpc.CallOption) (*WechatPayBillResponse, error) {
	out := new(WechatPayBillResponse)
	err := c.cc.Invoke(ctx, WechatPayBill_Trade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayBillClient) FundFlow(ctx context.Context, in *WechatPayFundFlowBillRequest, opts ...grpc.CallOption) (*WechatPayBillResponse, error) {
	out := new(WechatPayBillResponse)
	err := c.cc.Invoke(ctx, WechatPayBill_FundFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatPayBillServer is the server API for WechatPayBill service.
// All implementations must embed UnimplementedWechatPayBillServer
// for forward compatibility
type WechatPayBillServer interface {
	Trade(context.Context, *WechatPayTradeBillRequest) (*WechatPayBillResponse, error)
	FundFlow(context.Context, *WechatPayFundFlowBillRequest) (*WechatPayBillResponse, error)
	mustEmbedUnimplementedWechatPayBillServer()
}

// UnimplementedWechatPayBillServer must be embedded to have forward compatible implementations.
type UnimplementedWechatPayBillServer struct {
}

func (UnimplementedWechatPayBillServer) Trade(context.Context, *WechatPayTradeBillRequest) (*WechatPayBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (UnimplementedWechatPayBillServer) FundFlow(context.Context, *WechatPayFundFlowBillRequest) (*WechatPayBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundFlow not implemented")
}
func (UnimplementedWechatPayBillServer) mustEmbedUnimplementedWechatPayBillServer() {}

// UnsafeWechatPayBillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatPayBillServer will
// result in compilation errors.
type UnsafeWechatPayBillServer interface {
	mustEmbedUnimplementedWechatPayBillServer()
}

func RegisterWechatPayBillServer(s grpc.ServiceRegistrar, srv WechatPayBillServer) {
	s.RegisterService(&WechatPayBill_ServiceDesc, srv)
}

func _WechatPayBill_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayTradeBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayBillServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayBill_Trade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayBillServer).Trade(ctx, req.(*WechatPayTradeBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayBill_FundFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayFundFlowBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayBillServer).FundFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayBill_FundFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayBillServer).FundFlow(ctx, req.(*WechatPayFundFlowBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatPayBill_ServiceDesc is the grpc.ServiceDesc for WechatPayBill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatPayBill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.musa.v1.WechatPayBill",
	HandlerType: (*WechatPayBillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trade",
			Handler:    _WechatPayBill_Trade_Handler,
		},
		{
			MethodName: "FundFlow",
			Handler:    _WechatPayBill_FundFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musa.proto",
}

const (
	WechatPayRefund_Create_FullMethodName = "/palm.musa.v1.WechatPayRefund/Create"
	WechatPayRefund_Query_FullMethodName  = "/palm.musa.v1.WechatPayRefund/Query"
)

// WechatPayRefundClient is the client API for WechatPayRefund service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatPayRefundClient interface {
	Create(ctx context.Context, in *WechatPayCreateRefundRequest, opts ...grpc.CallOption) (*WechatPayRefundResponse, error)
	Query(ctx context.Context, in *WechatPayQueryRefundRequest, opts ...grpc.CallOption) (*WechatPayRefundResponse, error)
}

type wechatPayRefundClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatPayRefundClient(cc grpc.ClientConnInterface) WechatPayRefundClient {
	return &wechatPayRefundClient{cc}
}

func (c *wechatPayRefundClient) Create(ctx context.Context, in *WechatPayCreateRefundRequest, opts ...grpc.CallOption) (*WechatPayRefundResponse, error) {
	out := new(WechatPayRefundResponse)
	err := c.cc.Invoke(ctx, WechatPayRefund_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayRefundClient) Query(ctx context.Context, in *WechatPayQueryRefundRequest, opts ...grpc.CallOption) (*WechatPayRefundResponse, error) {
	out := new(WechatPayRefundResponse)
	err := c.cc.Invoke(ctx, WechatPayRefund_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatPayRefundServer is the server API for WechatPayRefund service.
// All implementations must embed UnimplementedWechatPayRefundServer
// for forward compatibility
type WechatPayRefundServer interface {
	Create(context.Context, *WechatPayCreateRefundRequest) (*WechatPayRefundResponse, error)
	Query(context.Context, *WechatPayQueryRefundRequest) (*WechatPayRefundResponse, error)
	mustEmbedUnimplementedWechatPayRefundServer()
}

// UnimplementedWechatPayRefundServer must be embedded to have forward compatible implementations.
type UnimplementedWechatPayRefundServer struct {
}

func (UnimplementedWechatPayRefundServer) Create(context.Context, *WechatPayCreateRefundRequest) (*WechatPayRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWechatPayRefundServer) Query(context.Context, *WechatPayQueryRefundRequest) (*WechatPayRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedWechatPayRefundServer) mustEmbedUnimplementedWechatPayRefundServer() {}

// UnsafeWechatPayRefundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatPayRefundServer will
// result in compilation errors.
type UnsafeWechatPayRefundServer interface {
	mustEmbedUnimplementedWechatPayRefundServer()
}

func RegisterWechatPayRefundServer(s grpc.ServiceRegistrar, srv WechatPayRefundServer) {
	s.RegisterService(&WechatPayRefund_ServiceDesc, srv)
}

func _WechatPayRefund_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayCreateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayRefundServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayRefund_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayRefundServer).Create(ctx, req.(*WechatPayCreateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayRefund_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayQueryRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayRefundServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayRefund_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayRefundServer).Query(ctx, req.(*WechatPayQueryRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatPayRefund_ServiceDesc is the grpc.ServiceDesc for WechatPayRefund service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatPayRefund_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.musa.v1.WechatPayRefund",
	HandlerType: (*WechatPayRefundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WechatPayRefund_Create_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _WechatPayRefund_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musa.proto",
}

const (
	WechatPayTransfer_ExecuteBatch_FullMethodName         = "/palm.musa.v1.WechatPayTransfer/ExecuteBatch"
	WechatPayTransfer_QueryBatch_FullMethodName           = "/palm.musa.v1.WechatPayTransfer/QueryBatch"
	WechatPayTransfer_QueryDetail_FullMethodName          = "/palm.musa.v1.WechatPayTransfer/QueryDetail"
	WechatPayTransfer_GetBillReceipt_FullMethodName       = "/palm.musa.v1.WechatPayTransfer/GetBillReceipt"
	WechatPayTransfer_GetElectronicReceipt_FullMethodName = "/palm.musa.v1.WechatPayTransfer/GetElectronicReceipt"
)

// WechatPayTransferClient is the client API for WechatPayTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatPayTransferClient interface {
	ExecuteBatch(ctx context.Context, in *WechatPayExecuteBatchTransferRequest, opts ...grpc.CallOption) (*WechatPayExecuteBatchTransferResponse, error)
	QueryBatch(ctx context.Context, in *WechatPayQueryBatchTransferRequest, opts ...grpc.CallOption) (*WechatPayQueryBatchTransferResponse, error)
	QueryDetail(ctx context.Context, in *WechatPayQueryTransferDetailRequest, opts ...grpc.CallOption) (*WechatPayQueryTransferDetailResponse, error)
	GetBillReceipt(ctx context.Context, in *WechatPayTransferGetBillReceiptRequest, opts ...grpc.CallOption) (*WechatPayTransferGetReceiptResponse, error)
	GetElectronicReceipt(ctx context.Context, in *WechatPayTransferGetElectronicReceiptRequest, opts ...grpc.CallOption) (*WechatPayTransferGetReceiptResponse, error)
}

type wechatPayTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatPayTransferClient(cc grpc.ClientConnInterface) WechatPayTransferClient {
	return &wechatPayTransferClient{cc}
}

func (c *wechatPayTransferClient) ExecuteBatch(ctx context.Context, in *WechatPayExecuteBatchTransferRequest, opts ...grpc.CallOption) (*WechatPayExecuteBatchTransferResponse, error) {
	out := new(WechatPayExecuteBatchTransferResponse)
	err := c.cc.Invoke(ctx, WechatPayTransfer_ExecuteBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayTransferClient) QueryBatch(ctx context.Context, in *WechatPayQueryBatchTransferRequest, opts ...grpc.CallOption) (*WechatPayQueryBatchTransferResponse, error) {
	out := new(WechatPayQueryBatchTransferResponse)
	err := c.cc.Invoke(ctx, WechatPayTransfer_QueryBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayTransferClient) QueryDetail(ctx context.Context, in *WechatPayQueryTransferDetailRequest, opts ...grpc.CallOption) (*WechatPayQueryTransferDetailResponse, error) {
	out := new(WechatPayQueryTransferDetailResponse)
	err := c.cc.Invoke(ctx, WechatPayTransfer_QueryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayTransferClient) GetBillReceipt(ctx context.Context, in *WechatPayTransferGetBillReceiptRequest, opts ...grpc.CallOption) (*WechatPayTransferGetReceiptResponse, error) {
	out := new(WechatPayTransferGetReceiptResponse)
	err := c.cc.Invoke(ctx, WechatPayTransfer_GetBillReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatPayTransferClient) GetElectronicReceipt(ctx context.Context, in *WechatPayTransferGetElectronicReceiptRequest, opts ...grpc.CallOption) (*WechatPayTransferGetReceiptResponse, error) {
	out := new(WechatPayTransferGetReceiptResponse)
	err := c.cc.Invoke(ctx, WechatPayTransfer_GetElectronicReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatPayTransferServer is the server API for WechatPayTransfer service.
// All implementations must embed UnimplementedWechatPayTransferServer
// for forward compatibility
type WechatPayTransferServer interface {
	ExecuteBatch(context.Context, *WechatPayExecuteBatchTransferRequest) (*WechatPayExecuteBatchTransferResponse, error)
	QueryBatch(context.Context, *WechatPayQueryBatchTransferRequest) (*WechatPayQueryBatchTransferResponse, error)
	QueryDetail(context.Context, *WechatPayQueryTransferDetailRequest) (*WechatPayQueryTransferDetailResponse, error)
	GetBillReceipt(context.Context, *WechatPayTransferGetBillReceiptRequest) (*WechatPayTransferGetReceiptResponse, error)
	GetElectronicReceipt(context.Context, *WechatPayTransferGetElectronicReceiptRequest) (*WechatPayTransferGetReceiptResponse, error)
	mustEmbedUnimplementedWechatPayTransferServer()
}

// UnimplementedWechatPayTransferServer must be embedded to have forward compatible implementations.
type UnimplementedWechatPayTransferServer struct {
}

func (UnimplementedWechatPayTransferServer) ExecuteBatch(context.Context, *WechatPayExecuteBatchTransferRequest) (*WechatPayExecuteBatchTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBatch not implemented")
}
func (UnimplementedWechatPayTransferServer) QueryBatch(context.Context, *WechatPayQueryBatchTransferRequest) (*WechatPayQueryBatchTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBatch not implemented")
}
func (UnimplementedWechatPayTransferServer) QueryDetail(context.Context, *WechatPayQueryTransferDetailRequest) (*WechatPayQueryTransferDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDetail not implemented")
}
func (UnimplementedWechatPayTransferServer) GetBillReceipt(context.Context, *WechatPayTransferGetBillReceiptRequest) (*WechatPayTransferGetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillReceipt not implemented")
}
func (UnimplementedWechatPayTransferServer) GetElectronicReceipt(context.Context, *WechatPayTransferGetElectronicReceiptRequest) (*WechatPayTransferGetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElectronicReceipt not implemented")
}
func (UnimplementedWechatPayTransferServer) mustEmbedUnimplementedWechatPayTransferServer() {}

// UnsafeWechatPayTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatPayTransferServer will
// result in compilation errors.
type UnsafeWechatPayTransferServer interface {
	mustEmbedUnimplementedWechatPayTransferServer()
}

func RegisterWechatPayTransferServer(s grpc.ServiceRegistrar, srv WechatPayTransferServer) {
	s.RegisterService(&WechatPayTransfer_ServiceDesc, srv)
}

func _WechatPayTransfer_ExecuteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayExecuteBatchTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayTransferServer).ExecuteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayTransfer_ExecuteBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayTransferServer).ExecuteBatch(ctx, req.(*WechatPayExecuteBatchTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayTransfer_QueryBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayQueryBatchTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayTransferServer).QueryBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayTransfer_QueryBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayTransferServer).QueryBatch(ctx, req.(*WechatPayQueryBatchTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayTransfer_QueryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayQueryTransferDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayTransferServer).QueryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayTransfer_QueryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayTransferServer).QueryDetail(ctx, req.(*WechatPayQueryTransferDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayTransfer_GetBillReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayTransferGetBillReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayTransferServer).GetBillReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayTransfer_GetBillReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayTransferServer).GetBillReceipt(ctx, req.(*WechatPayTransferGetBillReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatPayTransfer_GetElectronicReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatPayTransferGetElectronicReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatPayTransferServer).GetElectronicReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatPayTransfer_GetElectronicReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatPayTransferServer).GetElectronicReceipt(ctx, req.(*WechatPayTransferGetElectronicReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatPayTransfer_ServiceDesc is the grpc.ServiceDesc for WechatPayTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatPayTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.musa.v1.WechatPayTransfer",
	HandlerType: (*WechatPayTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteBatch",
			Handler:    _WechatPayTransfer_ExecuteBatch_Handler,
		},
		{
			MethodName: "QueryBatch",
			Handler:    _WechatPayTransfer_QueryBatch_Handler,
		},
		{
			MethodName: "QueryDetail",
			Handler:    _WechatPayTransfer_QueryDetail_Handler,
		},
		{
			MethodName: "GetBillReceipt",
			Handler:    _WechatPayTransfer_GetBillReceipt_Handler,
		},
		{
			MethodName: "GetElectronicReceipt",
			Handler:    _WechatPayTransfer_GetElectronicReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musa.proto",
}
