// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: lily.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Excel_Parse_FullMethodName    = "/palm.lily.v1.Excel/Parse"
	Excel_Generate_FullMethodName = "/palm.lily.v1.Excel/Generate"
)

// ExcelClient is the client API for Excel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelClient interface {
	Parse(ctx context.Context, in *S3File, opts ...grpc.CallOption) (*ExcelModel, error)
	Generate(ctx context.Context, in *ExcelModel, opts ...grpc.CallOption) (*S3File, error)
}

type excelClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelClient(cc grpc.ClientConnInterface) ExcelClient {
	return &excelClient{cc}
}

func (c *excelClient) Parse(ctx context.Context, in *S3File, opts ...grpc.CallOption) (*ExcelModel, error) {
	out := new(ExcelModel)
	err := c.cc.Invoke(ctx, Excel_Parse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelClient) Generate(ctx context.Context, in *ExcelModel, opts ...grpc.CallOption) (*S3File, error) {
	out := new(S3File)
	err := c.cc.Invoke(ctx, Excel_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelServer is the server API for Excel service.
// All implementations must embed UnimplementedExcelServer
// for forward compatibility
type ExcelServer interface {
	Parse(context.Context, *S3File) (*ExcelModel, error)
	Generate(context.Context, *ExcelModel) (*S3File, error)
	mustEmbedUnimplementedExcelServer()
}

// UnimplementedExcelServer must be embedded to have forward compatible implementations.
type UnimplementedExcelServer struct {
}

func (UnimplementedExcelServer) Parse(context.Context, *S3File) (*ExcelModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedExcelServer) Generate(context.Context, *ExcelModel) (*S3File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedExcelServer) mustEmbedUnimplementedExcelServer() {}

// UnsafeExcelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelServer will
// result in compilation errors.
type UnsafeExcelServer interface {
	mustEmbedUnimplementedExcelServer()
}

func RegisterExcelServer(s grpc.ServiceRegistrar, srv ExcelServer) {
	s.RegisterService(&Excel_ServiceDesc, srv)
}

func _Excel_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(S3File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Excel_Parse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServer).Parse(ctx, req.(*S3File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Excel_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcelModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Excel_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelServer).Generate(ctx, req.(*ExcelModel))
	}
	return interceptor(ctx, in, info, handler)
}

// Excel_ServiceDesc is the grpc.ServiceDesc for Excel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Excel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.lily.v1.Excel",
	HandlerType: (*ExcelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _Excel_Parse_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _Excel_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lily.proto",
}

const (
	S3_GetFile_FullMethodName = "/palm.lily.v1.S3/GetFile"
)

// S3Client is the client API for S3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3Client interface {
	GetFile(ctx context.Context, in *S3GetFileRequest, opts ...grpc.CallOption) (*S3GetFileResponse, error)
}

type s3Client struct {
	cc grpc.ClientConnInterface
}

func NewS3Client(cc grpc.ClientConnInterface) S3Client {
	return &s3Client{cc}
}

func (c *s3Client) GetFile(ctx context.Context, in *S3GetFileRequest, opts ...grpc.CallOption) (*S3GetFileResponse, error) {
	out := new(S3GetFileResponse)
	err := c.cc.Invoke(ctx, S3_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3Server is the server API for S3 service.
// All implementations must embed UnimplementedS3Server
// for forward compatibility
type S3Server interface {
	GetFile(context.Context, *S3GetFileRequest) (*S3GetFileResponse, error)
	mustEmbedUnimplementedS3Server()
}

// UnimplementedS3Server must be embedded to have forward compatible implementations.
type UnimplementedS3Server struct {
}

func (UnimplementedS3Server) GetFile(context.Context, *S3GetFileRequest) (*S3GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedS3Server) mustEmbedUnimplementedS3Server() {}

// UnsafeS3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3Server will
// result in compilation errors.
type UnsafeS3Server interface {
	mustEmbedUnimplementedS3Server()
}

func RegisterS3Server(s grpc.ServiceRegistrar, srv S3Server) {
	s.RegisterService(&S3_ServiceDesc, srv)
}

func _S3_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(S3GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3Server).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3Server).GetFile(ctx, req.(*S3GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3_ServiceDesc is the grpc.ServiceDesc for S3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.lily.v1.S3",
	HandlerType: (*S3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _S3_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lily.proto",
}

const (
	Tex_ToPdf_FullMethodName  = "/palm.lily.v1.Tex/ToPdf"
	Tex_ToWord_FullMethodName = "/palm.lily.v1.Tex/ToWord"
)

// TexClient is the client API for Tex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TexClient interface {
	ToPdf(ctx context.Context, in *TexToRequest, opts ...grpc.CallOption) (*S3File, error)
	ToWord(ctx context.Context, in *TexToRequest, opts ...grpc.CallOption) (*S3File, error)
}

type texClient struct {
	cc grpc.ClientConnInterface
}

func NewTexClient(cc grpc.ClientConnInterface) TexClient {
	return &texClient{cc}
}

func (c *texClient) ToPdf(ctx context.Context, in *TexToRequest, opts ...grpc.CallOption) (*S3File, error) {
	out := new(S3File)
	err := c.cc.Invoke(ctx, Tex_ToPdf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *texClient) ToWord(ctx context.Context, in *TexToRequest, opts ...grpc.CallOption) (*S3File, error) {
	out := new(S3File)
	err := c.cc.Invoke(ctx, Tex_ToWord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TexServer is the server API for Tex service.
// All implementations must embed UnimplementedTexServer
// for forward compatibility
type TexServer interface {
	ToPdf(context.Context, *TexToRequest) (*S3File, error)
	ToWord(context.Context, *TexToRequest) (*S3File, error)
	mustEmbedUnimplementedTexServer()
}

// UnimplementedTexServer must be embedded to have forward compatible implementations.
type UnimplementedTexServer struct {
}

func (UnimplementedTexServer) ToPdf(context.Context, *TexToRequest) (*S3File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToPdf not implemented")
}
func (UnimplementedTexServer) ToWord(context.Context, *TexToRequest) (*S3File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToWord not implemented")
}
func (UnimplementedTexServer) mustEmbedUnimplementedTexServer() {}

// UnsafeTexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TexServer will
// result in compilation errors.
type UnsafeTexServer interface {
	mustEmbedUnimplementedTexServer()
}

func RegisterTexServer(s grpc.ServiceRegistrar, srv TexServer) {
	s.RegisterService(&Tex_ServiceDesc, srv)
}

func _Tex_ToPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TexToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TexServer).ToPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tex_ToPdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TexServer).ToPdf(ctx, req.(*TexToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tex_ToWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TexToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TexServer).ToWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tex_ToWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TexServer).ToWord(ctx, req.(*TexToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tex_ServiceDesc is the grpc.ServiceDesc for Tex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.lily.v1.Tex",
	HandlerType: (*TexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToPdf",
			Handler:    _Tex_ToPdf_Handler,
		},
		{
			MethodName: "ToWord",
			Handler:    _Tex_ToWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lily.proto",
}

const (
	Epub_Build_FullMethodName = "/palm.lily.v1.Epub/Build"
)

// EpubClient is the client API for Epub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpubClient interface {
	Build(ctx context.Context, in *EpubBuildRequest, opts ...grpc.CallOption) (*S3File, error)
}

type epubClient struct {
	cc grpc.ClientConnInterface
}

func NewEpubClient(cc grpc.ClientConnInterface) EpubClient {
	return &epubClient{cc}
}

func (c *epubClient) Build(ctx context.Context, in *EpubBuildRequest, opts ...grpc.CallOption) (*S3File, error) {
	out := new(S3File)
	err := c.cc.Invoke(ctx, Epub_Build_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpubServer is the server API for Epub service.
// All implementations must embed UnimplementedEpubServer
// for forward compatibility
type EpubServer interface {
	Build(context.Context, *EpubBuildRequest) (*S3File, error)
	mustEmbedUnimplementedEpubServer()
}

// UnimplementedEpubServer must be embedded to have forward compatible implementations.
type UnimplementedEpubServer struct {
}

func (UnimplementedEpubServer) Build(context.Context, *EpubBuildRequest) (*S3File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedEpubServer) mustEmbedUnimplementedEpubServer() {}

// UnsafeEpubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpubServer will
// result in compilation errors.
type UnsafeEpubServer interface {
	mustEmbedUnimplementedEpubServer()
}

func RegisterEpubServer(s grpc.ServiceRegistrar, srv EpubServer) {
	s.RegisterService(&Epub_ServiceDesc, srv)
}

func _Epub_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpubBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpubServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Epub_Build_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpubServer).Build(ctx, req.(*EpubBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Epub_ServiceDesc is the grpc.ServiceDesc for Epub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Epub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.lily.v1.Epub",
	HandlerType: (*EpubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Build",
			Handler:    _Epub_Build_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lily.proto",
}
