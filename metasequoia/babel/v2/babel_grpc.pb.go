// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: babel.proto

package v2

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const ()

// PaliClient is the client API for Pali service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaliClient interface {
}

type paliClient struct {
	cc grpc.ClientConnInterface
}

func NewPaliClient(cc grpc.ClientConnInterface) PaliClient {
	return &paliClient{cc}
}

// PaliServer is the server API for Pali service.
// All implementations must embed UnimplementedPaliServer
// for forward compatibility
type PaliServer interface {
	mustEmbedUnimplementedPaliServer()
}

// UnimplementedPaliServer must be embedded to have forward compatible implementations.
type UnimplementedPaliServer struct {
}

func (UnimplementedPaliServer) mustEmbedUnimplementedPaliServer() {}

// UnsafePaliServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaliServer will
// result in compilation errors.
type UnsafePaliServer interface {
	mustEmbedUnimplementedPaliServer()
}

func RegisterPaliServer(s grpc.ServiceRegistrar, srv PaliServer) {
	s.RegisterService(&Pali_ServiceDesc, srv)
}

// Pali_ServiceDesc is the grpc.ServiceDesc for Pali service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pali_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.babel.v1.Pali",
	HandlerType: (*PaliServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "babel.proto",
}

const ()

// TibetanClient is the client API for Tibetan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TibetanClient interface {
}

type tibetanClient struct {
	cc grpc.ClientConnInterface
}

func NewTibetanClient(cc grpc.ClientConnInterface) TibetanClient {
	return &tibetanClient{cc}
}

// TibetanServer is the server API for Tibetan service.
// All implementations must embed UnimplementedTibetanServer
// for forward compatibility
type TibetanServer interface {
	mustEmbedUnimplementedTibetanServer()
}

// UnimplementedTibetanServer must be embedded to have forward compatible implementations.
type UnimplementedTibetanServer struct {
}

func (UnimplementedTibetanServer) mustEmbedUnimplementedTibetanServer() {}

// UnsafeTibetanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TibetanServer will
// result in compilation errors.
type UnsafeTibetanServer interface {
	mustEmbedUnimplementedTibetanServer()
}

func RegisterTibetanServer(s grpc.ServiceRegistrar, srv TibetanServer) {
	s.RegisterService(&Tibetan_ServiceDesc, srv)
}

// Tibetan_ServiceDesc is the grpc.ServiceDesc for Tibetan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tibetan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.babel.v1.Tibetan",
	HandlerType: (*TibetanServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "babel.proto",
}

const ()

// SanskritClient is the client API for Sanskrit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SanskritClient interface {
}

type sanskritClient struct {
	cc grpc.ClientConnInterface
}

func NewSanskritClient(cc grpc.ClientConnInterface) SanskritClient {
	return &sanskritClient{cc}
}

// SanskritServer is the server API for Sanskrit service.
// All implementations must embed UnimplementedSanskritServer
// for forward compatibility
type SanskritServer interface {
	mustEmbedUnimplementedSanskritServer()
}

// UnimplementedSanskritServer must be embedded to have forward compatible implementations.
type UnimplementedSanskritServer struct {
}

func (UnimplementedSanskritServer) mustEmbedUnimplementedSanskritServer() {}

// UnsafeSanskritServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SanskritServer will
// result in compilation errors.
type UnsafeSanskritServer interface {
	mustEmbedUnimplementedSanskritServer()
}

func RegisterSanskritServer(s grpc.ServiceRegistrar, srv SanskritServer) {
	s.RegisterService(&Sanskrit_ServiceDesc, srv)
}

// Sanskrit_ServiceDesc is the grpc.ServiceDesc for Sanskrit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sanskrit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.babel.v1.Sanskrit",
	HandlerType: (*SanskritServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "babel.proto",
}
