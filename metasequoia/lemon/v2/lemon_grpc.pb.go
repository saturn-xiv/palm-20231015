// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: lemon.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Site_Layout_FullMethodName   = "/palm.lemon.v1.Site/Layout"
	Site_Rss_FullMethodName      = "/palm.lemon.v1.Site/Rss"
	Site_Sitemap_FullMethodName  = "/palm.lemon.v1.Site/Sitemap"
	Site_ShowPage_FullMethodName = "/palm.lemon.v1.Site/ShowPage"
	Site_HomePage_FullMethodName = "/palm.lemon.v1.Site/HomePage"
)

// SiteClient is the client API for Site service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteClient interface {
	Layout(ctx context.Context, in *SiteLayoutRequest, opts ...grpc.CallOption) (*SiteLayoutResponse, error)
	Rss(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*SiteRssResponse, error)
	Sitemap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SiteSitemapResponse, error)
	ShowPage(ctx context.Context, in *SiteShowPageRequest, opts ...grpc.CallOption) (*SiteShowPageResponse, error)
	HomePage(ctx context.Context, in *SiteHomePageRequest, opts ...grpc.CallOption) (*SiteHomePageResponse, error)
}

type siteClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteClient(cc grpc.ClientConnInterface) SiteClient {
	return &siteClient{cc}
}

func (c *siteClient) Layout(ctx context.Context, in *SiteLayoutRequest, opts ...grpc.CallOption) (*SiteLayoutResponse, error) {
	out := new(SiteLayoutResponse)
	err := c.cc.Invoke(ctx, Site_Layout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) Rss(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*SiteRssResponse, error) {
	out := new(SiteRssResponse)
	err := c.cc.Invoke(ctx, Site_Rss_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) Sitemap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SiteSitemapResponse, error) {
	out := new(SiteSitemapResponse)
	err := c.cc.Invoke(ctx, Site_Sitemap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) ShowPage(ctx context.Context, in *SiteShowPageRequest, opts ...grpc.CallOption) (*SiteShowPageResponse, error) {
	out := new(SiteShowPageResponse)
	err := c.cc.Invoke(ctx, Site_ShowPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) HomePage(ctx context.Context, in *SiteHomePageRequest, opts ...grpc.CallOption) (*SiteHomePageResponse, error) {
	out := new(SiteHomePageResponse)
	err := c.cc.Invoke(ctx, Site_HomePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServer is the server API for Site service.
// All implementations must embed UnimplementedSiteServer
// for forward compatibility
type SiteServer interface {
	Layout(context.Context, *SiteLayoutRequest) (*SiteLayoutResponse, error)
	Rss(context.Context, *durationpb.Duration) (*SiteRssResponse, error)
	Sitemap(context.Context, *emptypb.Empty) (*SiteSitemapResponse, error)
	ShowPage(context.Context, *SiteShowPageRequest) (*SiteShowPageResponse, error)
	HomePage(context.Context, *SiteHomePageRequest) (*SiteHomePageResponse, error)
	mustEmbedUnimplementedSiteServer()
}

// UnimplementedSiteServer must be embedded to have forward compatible implementations.
type UnimplementedSiteServer struct {
}

func (UnimplementedSiteServer) Layout(context.Context, *SiteLayoutRequest) (*SiteLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Layout not implemented")
}
func (UnimplementedSiteServer) Rss(context.Context, *durationpb.Duration) (*SiteRssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rss not implemented")
}
func (UnimplementedSiteServer) Sitemap(context.Context, *emptypb.Empty) (*SiteSitemapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sitemap not implemented")
}
func (UnimplementedSiteServer) ShowPage(context.Context, *SiteShowPageRequest) (*SiteShowPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPage not implemented")
}
func (UnimplementedSiteServer) HomePage(context.Context, *SiteHomePageRequest) (*SiteHomePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomePage not implemented")
}
func (UnimplementedSiteServer) mustEmbedUnimplementedSiteServer() {}

// UnsafeSiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteServer will
// result in compilation errors.
type UnsafeSiteServer interface {
	mustEmbedUnimplementedSiteServer()
}

func RegisterSiteServer(s grpc.ServiceRegistrar, srv SiteServer) {
	s.RegisterService(&Site_ServiceDesc, srv)
}

func _Site_Layout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).Layout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Site_Layout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).Layout(ctx, req.(*SiteLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_Rss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(durationpb.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).Rss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Site_Rss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).Rss(ctx, req.(*durationpb.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_Sitemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).Sitemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Site_Sitemap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).Sitemap(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_ShowPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteShowPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).ShowPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Site_ShowPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).ShowPage(ctx, req.(*SiteShowPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_HomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteHomePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).HomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Site_HomePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).HomePage(ctx, req.(*SiteHomePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Site_ServiceDesc is the grpc.ServiceDesc for Site service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Site_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.lemon.v1.Site",
	HandlerType: (*SiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Layout",
			Handler:    _Site_Layout_Handler,
		},
		{
			MethodName: "Rss",
			Handler:    _Site_Rss_Handler,
		},
		{
			MethodName: "Sitemap",
			Handler:    _Site_Sitemap_Handler,
		},
		{
			MethodName: "ShowPage",
			Handler:    _Site_ShowPage_Handler,
		},
		{
			MethodName: "HomePage",
			Handler:    _Site_HomePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lemon.proto",
}
