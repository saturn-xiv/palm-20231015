// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: orchid.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WechatMiniProgram_Login_FullMethodName       = "/palm.orchid.v1.WechatMiniProgram/Login"
	WechatMiniProgram_PhoneNumber_FullMethodName = "/palm.orchid.v1.WechatMiniProgram/PhoneNumber"
)

// WechatMiniProgramClient is the client API for WechatMiniProgram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatMiniProgramClient interface {
	Login(ctx context.Context, in *WechatMiniProgramLoginRequest, opts ...grpc.CallOption) (*WechatMiniProgramLoginResponse, error)
	PhoneNumber(ctx context.Context, in *WechatMiniProgramPhoneNumberRequest, opts ...grpc.CallOption) (*WechatMiniProgramPhoneNumberResponse, error)
}

type wechatMiniProgramClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatMiniProgramClient(cc grpc.ClientConnInterface) WechatMiniProgramClient {
	return &wechatMiniProgramClient{cc}
}

func (c *wechatMiniProgramClient) Login(ctx context.Context, in *WechatMiniProgramLoginRequest, opts ...grpc.CallOption) (*WechatMiniProgramLoginResponse, error) {
	out := new(WechatMiniProgramLoginResponse)
	err := c.cc.Invoke(ctx, WechatMiniProgram_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatMiniProgramClient) PhoneNumber(ctx context.Context, in *WechatMiniProgramPhoneNumberRequest, opts ...grpc.CallOption) (*WechatMiniProgramPhoneNumberResponse, error) {
	out := new(WechatMiniProgramPhoneNumberResponse)
	err := c.cc.Invoke(ctx, WechatMiniProgram_PhoneNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatMiniProgramServer is the server API for WechatMiniProgram service.
// All implementations must embed UnimplementedWechatMiniProgramServer
// for forward compatibility
type WechatMiniProgramServer interface {
	Login(context.Context, *WechatMiniProgramLoginRequest) (*WechatMiniProgramLoginResponse, error)
	PhoneNumber(context.Context, *WechatMiniProgramPhoneNumberRequest) (*WechatMiniProgramPhoneNumberResponse, error)
	mustEmbedUnimplementedWechatMiniProgramServer()
}

// UnimplementedWechatMiniProgramServer must be embedded to have forward compatible implementations.
type UnimplementedWechatMiniProgramServer struct {
}

func (UnimplementedWechatMiniProgramServer) Login(context.Context, *WechatMiniProgramLoginRequest) (*WechatMiniProgramLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWechatMiniProgramServer) PhoneNumber(context.Context, *WechatMiniProgramPhoneNumberRequest) (*WechatMiniProgramPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneNumber not implemented")
}
func (UnimplementedWechatMiniProgramServer) mustEmbedUnimplementedWechatMiniProgramServer() {}

// UnsafeWechatMiniProgramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatMiniProgramServer will
// result in compilation errors.
type UnsafeWechatMiniProgramServer interface {
	mustEmbedUnimplementedWechatMiniProgramServer()
}

func RegisterWechatMiniProgramServer(s grpc.ServiceRegistrar, srv WechatMiniProgramServer) {
	s.RegisterService(&WechatMiniProgram_ServiceDesc, srv)
}

func _WechatMiniProgram_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatMiniProgramLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatMiniProgramServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatMiniProgram_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatMiniProgramServer).Login(ctx, req.(*WechatMiniProgramLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatMiniProgram_PhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatMiniProgramPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatMiniProgramServer).PhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatMiniProgram_PhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatMiniProgramServer).PhoneNumber(ctx, req.(*WechatMiniProgramPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatMiniProgram_ServiceDesc is the grpc.ServiceDesc for WechatMiniProgram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatMiniProgram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.orchid.v1.WechatMiniProgram",
	HandlerType: (*WechatMiniProgramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _WechatMiniProgram_Login_Handler,
		},
		{
			MethodName: "PhoneNumber",
			Handler:    _WechatMiniProgram_PhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchid.proto",
}

const (
	WechatOauth2_QrConnect_FullMethodName = "/palm.orchid.v1.WechatOauth2/QrConnect"
	WechatOauth2_Login_FullMethodName     = "/palm.orchid.v1.WechatOauth2/Login"
)

// WechatOauth2Client is the client API for WechatOauth2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatOauth2Client interface {
	QrConnect(ctx context.Context, in *WechatOauth2QrConnectRequest, opts ...grpc.CallOption) (*WechatOauth2QrConnectResponse, error)
	Login(ctx context.Context, in *WechatOauth2LoginRequest, opts ...grpc.CallOption) (*WechatOauth2LoginResponse, error)
}

type wechatOauth2Client struct {
	cc grpc.ClientConnInterface
}

func NewWechatOauth2Client(cc grpc.ClientConnInterface) WechatOauth2Client {
	return &wechatOauth2Client{cc}
}

func (c *wechatOauth2Client) QrConnect(ctx context.Context, in *WechatOauth2QrConnectRequest, opts ...grpc.CallOption) (*WechatOauth2QrConnectResponse, error) {
	out := new(WechatOauth2QrConnectResponse)
	err := c.cc.Invoke(ctx, WechatOauth2_QrConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatOauth2Client) Login(ctx context.Context, in *WechatOauth2LoginRequest, opts ...grpc.CallOption) (*WechatOauth2LoginResponse, error) {
	out := new(WechatOauth2LoginResponse)
	err := c.cc.Invoke(ctx, WechatOauth2_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatOauth2Server is the server API for WechatOauth2 service.
// All implementations must embed UnimplementedWechatOauth2Server
// for forward compatibility
type WechatOauth2Server interface {
	QrConnect(context.Context, *WechatOauth2QrConnectRequest) (*WechatOauth2QrConnectResponse, error)
	Login(context.Context, *WechatOauth2LoginRequest) (*WechatOauth2LoginResponse, error)
	mustEmbedUnimplementedWechatOauth2Server()
}

// UnimplementedWechatOauth2Server must be embedded to have forward compatible implementations.
type UnimplementedWechatOauth2Server struct {
}

func (UnimplementedWechatOauth2Server) QrConnect(context.Context, *WechatOauth2QrConnectRequest) (*WechatOauth2QrConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QrConnect not implemented")
}
func (UnimplementedWechatOauth2Server) Login(context.Context, *WechatOauth2LoginRequest) (*WechatOauth2LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWechatOauth2Server) mustEmbedUnimplementedWechatOauth2Server() {}

// UnsafeWechatOauth2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatOauth2Server will
// result in compilation errors.
type UnsafeWechatOauth2Server interface {
	mustEmbedUnimplementedWechatOauth2Server()
}

func RegisterWechatOauth2Server(s grpc.ServiceRegistrar, srv WechatOauth2Server) {
	s.RegisterService(&WechatOauth2_ServiceDesc, srv)
}

func _WechatOauth2_QrConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatOauth2QrConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatOauth2Server).QrConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatOauth2_QrConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatOauth2Server).QrConnect(ctx, req.(*WechatOauth2QrConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatOauth2_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatOauth2LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatOauth2Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WechatOauth2_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatOauth2Server).Login(ctx, req.(*WechatOauth2LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatOauth2_ServiceDesc is the grpc.ServiceDesc for WechatOauth2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatOauth2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "palm.orchid.v1.WechatOauth2",
	HandlerType: (*WechatOauth2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QrConnect",
			Handler:    _WechatOauth2_QrConnect_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WechatOauth2_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchid.proto",
}
