// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ops-metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ops_2dmetrics_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ops_2dmetrics_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ops_2dmetrics_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ops_2dmetrics_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ops_2dmetrics_2eproto;
namespace palm {
namespace ops {
namespace metrics {
namespace v1 {
class ReportHeartbeatRequest;
struct ReportHeartbeatRequestDefaultTypeInternal;
extern ReportHeartbeatRequestDefaultTypeInternal _ReportHeartbeatRequest_default_instance_;
class ReportJournalRequest;
struct ReportJournalRequestDefaultTypeInternal;
extern ReportJournalRequestDefaultTypeInternal _ReportJournalRequest_default_instance_;
class ReportNginxRequest;
struct ReportNginxRequestDefaultTypeInternal;
extern ReportNginxRequestDefaultTypeInternal _ReportNginxRequest_default_instance_;
class ReportNginxRequest_Access;
struct ReportNginxRequest_AccessDefaultTypeInternal;
extern ReportNginxRequest_AccessDefaultTypeInternal _ReportNginxRequest_Access_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace ops
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace ops {
namespace metrics {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ReportHeartbeatRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.ops.metrics.v1.ReportHeartbeatRequest) */ {
 public:
  inline ReportHeartbeatRequest() : ReportHeartbeatRequest(nullptr) {}
  ~ReportHeartbeatRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReportHeartbeatRequest(::google::protobuf::internal::ConstantInitialized);

  ReportHeartbeatRequest(const ReportHeartbeatRequest& from);
  ReportHeartbeatRequest(ReportHeartbeatRequest&& from) noexcept
    : ReportHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline ReportHeartbeatRequest& operator=(const ReportHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportHeartbeatRequest& operator=(ReportHeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportHeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const ReportHeartbeatRequest*>(
               &_ReportHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportHeartbeatRequest& a, ReportHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportHeartbeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportHeartbeatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportHeartbeatRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportHeartbeatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportHeartbeatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReportHeartbeatRequest& from) {
    ReportHeartbeatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportHeartbeatRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.ops.metrics.v1.ReportHeartbeatRequest";
  }
  protected:
  explicit ReportHeartbeatRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 11,
  };
  // .google.protobuf.Timestamp created_at = 11;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // @@protoc_insertion_point(class_scope:palm.ops.metrics.v1.ReportHeartbeatRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* created_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ops_2dmetrics_2eproto;
};// -------------------------------------------------------------------

class ReportJournalRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.ops.metrics.v1.ReportJournalRequest) */ {
 public:
  inline ReportJournalRequest() : ReportJournalRequest(nullptr) {}
  ~ReportJournalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReportJournalRequest(::google::protobuf::internal::ConstantInitialized);

  ReportJournalRequest(const ReportJournalRequest& from);
  ReportJournalRequest(ReportJournalRequest&& from) noexcept
    : ReportJournalRequest() {
    *this = ::std::move(from);
  }

  inline ReportJournalRequest& operator=(const ReportJournalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportJournalRequest& operator=(ReportJournalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportJournalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportJournalRequest* internal_default_instance() {
    return reinterpret_cast<const ReportJournalRequest*>(
               &_ReportJournalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportJournalRequest& a, ReportJournalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportJournalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportJournalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportJournalRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportJournalRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportJournalRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReportJournalRequest& from) {
    ReportJournalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportJournalRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.ops.metrics.v1.ReportJournalRequest";
  }
  protected:
  explicit ReportJournalRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kUserFieldNumber = 2,
    kGroupFieldNumber = 3,
    kCommandFieldNumber = 4,
    kMessageFieldNumber = 9,
    kCreatedAtFieldNumber = 11,
  };
  // string hostname = 1;
  void clear_hostname() ;
  const std::string& hostname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(Arg_&& arg, Args_... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* ptr);

  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(
      const std::string& value);
  std::string* _internal_mutable_hostname();

  public:
  // string user = 2;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* ptr);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string group = 3;
  void clear_group() ;
  const std::string& group() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group(Arg_&& arg, Args_... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* ptr);

  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(
      const std::string& value);
  std::string* _internal_mutable_group();

  public:
  // string command = 4;
  void clear_command() ;
  const std::string& command() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_command(Arg_&& arg, Args_... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* ptr);

  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(
      const std::string& value);
  std::string* _internal_mutable_command();

  public:
  // string message = 9;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .google.protobuf.Timestamp created_at = 11;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // @@protoc_insertion_point(class_scope:palm.ops.metrics.v1.ReportJournalRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 6, 1, 80, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr hostname_;
    ::google::protobuf::internal::ArenaStringPtr user_;
    ::google::protobuf::internal::ArenaStringPtr group_;
    ::google::protobuf::internal::ArenaStringPtr command_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::Timestamp* created_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ops_2dmetrics_2eproto;
};// -------------------------------------------------------------------

class ReportNginxRequest_Access final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.ops.metrics.v1.ReportNginxRequest.Access) */ {
 public:
  inline ReportNginxRequest_Access() : ReportNginxRequest_Access(nullptr) {}
  ~ReportNginxRequest_Access() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReportNginxRequest_Access(::google::protobuf::internal::ConstantInitialized);

  ReportNginxRequest_Access(const ReportNginxRequest_Access& from);
  ReportNginxRequest_Access(ReportNginxRequest_Access&& from) noexcept
    : ReportNginxRequest_Access() {
    *this = ::std::move(from);
  }

  inline ReportNginxRequest_Access& operator=(const ReportNginxRequest_Access& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportNginxRequest_Access& operator=(ReportNginxRequest_Access&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportNginxRequest_Access& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportNginxRequest_Access* internal_default_instance() {
    return reinterpret_cast<const ReportNginxRequest_Access*>(
               &_ReportNginxRequest_Access_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReportNginxRequest_Access& a, ReportNginxRequest_Access& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportNginxRequest_Access* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportNginxRequest_Access* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportNginxRequest_Access* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportNginxRequest_Access>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportNginxRequest_Access& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReportNginxRequest_Access& from) {
    ReportNginxRequest_Access::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportNginxRequest_Access* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.ops.metrics.v1.ReportNginxRequest.Access";
  }
  protected:
  explicit ReportNginxRequest_Access(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIpFieldNumber = 1,
    kMethodFieldNumber = 2,
    kPathFieldNumber = 3,
    kHttpRefererFieldNumber = 8,
    kVersionFieldNumber = 4,
    kStatusFieldNumber = 5,
    kBodyBytesSentFieldNumber = 6,
    kRequestTimeFieldNumber = 7,
  };
  // string client_ip = 1;
  void clear_client_ip() ;
  const std::string& client_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_ip(Arg_&& arg, Args_... args);
  std::string* mutable_client_ip();
  PROTOBUF_NODISCARD std::string* release_client_ip();
  void set_allocated_client_ip(std::string* ptr);

  private:
  const std::string& _internal_client_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ip(
      const std::string& value);
  std::string* _internal_mutable_client_ip();

  public:
  // string method = 2;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* ptr);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string path = 3;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional string http_referer = 8;
  bool has_http_referer() const;
  void clear_http_referer() ;
  const std::string& http_referer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_http_referer(Arg_&& arg, Args_... args);
  std::string* mutable_http_referer();
  PROTOBUF_NODISCARD std::string* release_http_referer();
  void set_allocated_http_referer(std::string* ptr);

  private:
  const std::string& _internal_http_referer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_referer(
      const std::string& value);
  std::string* _internal_mutable_http_referer();

  public:
  // float version = 4;
  void clear_version() ;
  float version() const;
  void set_version(float value);

  private:
  float _internal_version() const;
  void _internal_set_version(float value);

  public:
  // uint32 status = 5;
  void clear_status() ;
  ::uint32_t status() const;
  void set_status(::uint32_t value);

  private:
  ::uint32_t _internal_status() const;
  void _internal_set_status(::uint32_t value);

  public:
  // uint64 body_bytes_sent = 6;
  void clear_body_bytes_sent() ;
  ::uint64_t body_bytes_sent() const;
  void set_body_bytes_sent(::uint64_t value);

  private:
  ::uint64_t _internal_body_bytes_sent() const;
  void _internal_set_body_bytes_sent(::uint64_t value);

  public:
  // float request_time = 7;
  void clear_request_time() ;
  float request_time() const;
  void set_request_time(float value);

  private:
  float _internal_request_time() const;
  void _internal_set_request_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:palm.ops.metrics.v1.ReportNginxRequest.Access)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 93, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr client_ip_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr http_referer_;
    float version_;
    ::uint32_t status_;
    ::uint64_t body_bytes_sent_;
    float request_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ops_2dmetrics_2eproto;
};// -------------------------------------------------------------------

class ReportNginxRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.ops.metrics.v1.ReportNginxRequest) */ {
 public:
  inline ReportNginxRequest() : ReportNginxRequest(nullptr) {}
  ~ReportNginxRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReportNginxRequest(::google::protobuf::internal::ConstantInitialized);

  ReportNginxRequest(const ReportNginxRequest& from);
  ReportNginxRequest(ReportNginxRequest&& from) noexcept
    : ReportNginxRequest() {
    *this = ::std::move(from);
  }

  inline ReportNginxRequest& operator=(const ReportNginxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportNginxRequest& operator=(ReportNginxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportNginxRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAccess = 1,
    kError = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const ReportNginxRequest* internal_default_instance() {
    return reinterpret_cast<const ReportNginxRequest*>(
               &_ReportNginxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReportNginxRequest& a, ReportNginxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportNginxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportNginxRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportNginxRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportNginxRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportNginxRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReportNginxRequest& from) {
    ReportNginxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportNginxRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.ops.metrics.v1.ReportNginxRequest";
  }
  protected:
  explicit ReportNginxRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportNginxRequest_Access Access;

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 9,
    kAccessFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .google.protobuf.Timestamp created_at = 9;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
  bool has_access() const;
  private:
  bool _internal_has_access() const;

  public:
  void clear_access() ;
  const ::palm::ops::metrics::v1::ReportNginxRequest_Access& access() const;
  PROTOBUF_NODISCARD ::palm::ops::metrics::v1::ReportNginxRequest_Access* release_access();
  ::palm::ops::metrics::v1::ReportNginxRequest_Access* mutable_access();
  void set_allocated_access(::palm::ops::metrics::v1::ReportNginxRequest_Access* value);
  void unsafe_arena_set_allocated_access(::palm::ops::metrics::v1::ReportNginxRequest_Access* value);
  ::palm::ops::metrics::v1::ReportNginxRequest_Access* unsafe_arena_release_access();

  private:
  const ::palm::ops::metrics::v1::ReportNginxRequest_Access& _internal_access() const;
  ::palm::ops::metrics::v1::ReportNginxRequest_Access* _internal_mutable_access();

  public:
  // string error = 2;
  bool has_error() const;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* ptr);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:palm.ops.metrics.v1.ReportNginxRequest)
 private:
  class _Internal;
  void set_has_access();
  void set_has_error();

  inline bool has_payload() const;
  inline void clear_has_payload();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3, 2, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* created_at_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::ops::metrics::v1::ReportNginxRequest_Access* access_;
      ::google::protobuf::internal::ArenaStringPtr error_;
    } payload_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ops_2dmetrics_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ReportHeartbeatRequest

// .google.protobuf.Timestamp created_at = 11;
inline bool ReportHeartbeatRequest::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ReportHeartbeatRequest::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ReportHeartbeatRequest::created_at() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportHeartbeatRequest.created_at)
  return _internal_created_at();
}
inline void ReportHeartbeatRequest::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.ops.metrics.v1.ReportHeartbeatRequest.created_at)
}
inline ::google::protobuf::Timestamp* ReportHeartbeatRequest::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ReportHeartbeatRequest::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportHeartbeatRequest.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ReportHeartbeatRequest::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* ReportHeartbeatRequest::mutable_created_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportHeartbeatRequest.created_at)
  return _msg;
}
inline void ReportHeartbeatRequest::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportHeartbeatRequest.created_at)
}

// -------------------------------------------------------------------

// ReportJournalRequest

// string hostname = 1;
inline void ReportJournalRequest::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& ReportJournalRequest::hostname() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportJournalRequest.hostname)
  return _internal_hostname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportJournalRequest::set_hostname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportJournalRequest.hostname)
}
inline std::string* ReportJournalRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportJournalRequest.hostname)
  return _s;
}
inline const std::string& ReportJournalRequest::_internal_hostname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hostname_.Get();
}
inline void ReportJournalRequest::_internal_set_hostname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::_internal_mutable_hostname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.hostname_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::release_hostname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportJournalRequest.hostname)
  return _impl_.hostname_.Release();
}
inline void ReportJournalRequest::set_allocated_hostname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hostname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hostname_.IsDefault()) {
          _impl_.hostname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.hostname)
}

// string user = 2;
inline void ReportJournalRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& ReportJournalRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportJournalRequest.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportJournalRequest::set_user(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportJournalRequest.user)
}
inline std::string* ReportJournalRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportJournalRequest.user)
  return _s;
}
inline const std::string& ReportJournalRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_.Get();
}
inline void ReportJournalRequest::_internal_set_user(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportJournalRequest.user)
  return _impl_.user_.Release();
}
inline void ReportJournalRequest::set_allocated_user(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.user)
}

// string group = 3;
inline void ReportJournalRequest::clear_group() {
  _impl_.group_.ClearToEmpty();
}
inline const std::string& ReportJournalRequest::group() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportJournalRequest.group)
  return _internal_group();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportJournalRequest::set_group(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.group_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportJournalRequest.group)
}
inline std::string* ReportJournalRequest::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportJournalRequest.group)
  return _s;
}
inline const std::string& ReportJournalRequest::_internal_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_.Get();
}
inline void ReportJournalRequest::_internal_set_group(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.group_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::_internal_mutable_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.group_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::release_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportJournalRequest.group)
  return _impl_.group_.Release();
}
inline void ReportJournalRequest::set_allocated_group(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.group_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_.IsDefault()) {
          _impl_.group_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.group)
}

// string command = 4;
inline void ReportJournalRequest::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& ReportJournalRequest::command() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportJournalRequest.command)
  return _internal_command();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportJournalRequest::set_command(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportJournalRequest.command)
}
inline std::string* ReportJournalRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportJournalRequest.command)
  return _s;
}
inline const std::string& ReportJournalRequest::_internal_command() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.command_.Get();
}
inline void ReportJournalRequest::_internal_set_command(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::_internal_mutable_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.command_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::release_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportJournalRequest.command)
  return _impl_.command_.Release();
}
inline void ReportJournalRequest::set_allocated_command(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.command_.IsDefault()) {
          _impl_.command_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.command)
}

// string message = 9;
inline void ReportJournalRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ReportJournalRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportJournalRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportJournalRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportJournalRequest.message)
}
inline std::string* ReportJournalRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportJournalRequest.message)
  return _s;
}
inline const std::string& ReportJournalRequest::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void ReportJournalRequest::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportJournalRequest::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportJournalRequest.message)
  return _impl_.message_.Release();
}
inline void ReportJournalRequest::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.message)
}

// .google.protobuf.Timestamp created_at = 11;
inline bool ReportJournalRequest::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ReportJournalRequest::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ReportJournalRequest::created_at() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportJournalRequest.created_at)
  return _internal_created_at();
}
inline void ReportJournalRequest::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.created_at)
}
inline ::google::protobuf::Timestamp* ReportJournalRequest::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ReportJournalRequest::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportJournalRequest.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ReportJournalRequest::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* ReportJournalRequest::mutable_created_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportJournalRequest.created_at)
  return _msg;
}
inline void ReportJournalRequest::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportJournalRequest.created_at)
}

// -------------------------------------------------------------------

// ReportNginxRequest_Access

// string client_ip = 1;
inline void ReportNginxRequest_Access::clear_client_ip() {
  _impl_.client_ip_.ClearToEmpty();
}
inline const std::string& ReportNginxRequest_Access::client_ip() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip)
  return _internal_client_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportNginxRequest_Access::set_client_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip)
}
inline std::string* ReportNginxRequest_Access::mutable_client_ip() {
  std::string* _s = _internal_mutable_client_ip();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip)
  return _s;
}
inline const std::string& ReportNginxRequest_Access::_internal_client_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_ip_.Get();
}
inline void ReportNginxRequest_Access::_internal_set_client_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::_internal_mutable_client_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.client_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::release_client_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip)
  return _impl_.client_ip_.Release();
}
inline void ReportNginxRequest_Access::set_allocated_client_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_ip_.IsDefault()) {
          _impl_.client_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.Access.client_ip)
}

// string method = 2;
inline void ReportNginxRequest_Access::clear_method() {
  _impl_.method_.ClearToEmpty();
}
inline const std::string& ReportNginxRequest_Access::method() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportNginxRequest_Access::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.method)
}
inline std::string* ReportNginxRequest_Access::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.Access.method)
  return _s;
}
inline const std::string& ReportNginxRequest_Access::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void ReportNginxRequest_Access::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.Access.method)
  return _impl_.method_.Release();
}
inline void ReportNginxRequest_Access::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.Access.method)
}

// string path = 3;
inline void ReportNginxRequest_Access::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ReportNginxRequest_Access::path() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportNginxRequest_Access::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.path)
}
inline std::string* ReportNginxRequest_Access::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.Access.path)
  return _s;
}
inline const std::string& ReportNginxRequest_Access::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void ReportNginxRequest_Access::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.Access.path)
  return _impl_.path_.Release();
}
inline void ReportNginxRequest_Access::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.Access.path)
}

// float version = 4;
inline void ReportNginxRequest_Access::clear_version() {
  _impl_.version_ = 0;
}
inline float ReportNginxRequest_Access::version() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.version)
  return _internal_version();
}
inline void ReportNginxRequest_Access::set_version(float value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.version)
}
inline float ReportNginxRequest_Access::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_;
}
inline void ReportNginxRequest_Access::_internal_set_version(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_ = value;
}

// uint32 status = 5;
inline void ReportNginxRequest_Access::clear_status() {
  _impl_.status_ = 0u;
}
inline ::uint32_t ReportNginxRequest_Access::status() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.status)
  return _internal_status();
}
inline void ReportNginxRequest_Access::set_status(::uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.status)
}
inline ::uint32_t ReportNginxRequest_Access::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void ReportNginxRequest_Access::_internal_set_status(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// uint64 body_bytes_sent = 6;
inline void ReportNginxRequest_Access::clear_body_bytes_sent() {
  _impl_.body_bytes_sent_ = ::uint64_t{0u};
}
inline ::uint64_t ReportNginxRequest_Access::body_bytes_sent() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.body_bytes_sent)
  return _internal_body_bytes_sent();
}
inline void ReportNginxRequest_Access::set_body_bytes_sent(::uint64_t value) {
  _internal_set_body_bytes_sent(value);
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.body_bytes_sent)
}
inline ::uint64_t ReportNginxRequest_Access::_internal_body_bytes_sent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.body_bytes_sent_;
}
inline void ReportNginxRequest_Access::_internal_set_body_bytes_sent(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_bytes_sent_ = value;
}

// float request_time = 7;
inline void ReportNginxRequest_Access::clear_request_time() {
  _impl_.request_time_ = 0;
}
inline float ReportNginxRequest_Access::request_time() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.request_time)
  return _internal_request_time();
}
inline void ReportNginxRequest_Access::set_request_time(float value) {
  _internal_set_request_time(value);
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.request_time)
}
inline float ReportNginxRequest_Access::_internal_request_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_time_;
}
inline void ReportNginxRequest_Access::_internal_set_request_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_time_ = value;
}

// optional string http_referer = 8;
inline bool ReportNginxRequest_Access::has_http_referer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReportNginxRequest_Access::clear_http_referer() {
  _impl_.http_referer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportNginxRequest_Access::http_referer() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer)
  return _internal_http_referer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportNginxRequest_Access::set_http_referer(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.http_referer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer)
}
inline std::string* ReportNginxRequest_Access::mutable_http_referer() {
  std::string* _s = _internal_mutable_http_referer();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer)
  return _s;
}
inline const std::string& ReportNginxRequest_Access::_internal_http_referer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.http_referer_.Get();
}
inline void ReportNginxRequest_Access::_internal_set_http_referer(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.http_referer_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::_internal_mutable_http_referer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.http_referer_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportNginxRequest_Access::release_http_referer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.http_referer_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.http_referer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ReportNginxRequest_Access::set_allocated_http_referer(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.http_referer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.http_referer_.IsDefault()) {
          _impl_.http_referer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.Access.http_referer)
}

// -------------------------------------------------------------------

// ReportNginxRequest

// .palm.ops.metrics.v1.ReportNginxRequest.Access access = 1;
inline bool ReportNginxRequest::has_access() const {
  return payload_case() == kAccess;
}
inline bool ReportNginxRequest::_internal_has_access() const {
  return payload_case() == kAccess;
}
inline void ReportNginxRequest::set_has_access() {
  _impl_._oneof_case_[0] = kAccess;
}
inline void ReportNginxRequest::clear_access() {
  if (payload_case() == kAccess) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.access_;
    }
    clear_has_payload();
  }
}
inline ::palm::ops::metrics::v1::ReportNginxRequest_Access* ReportNginxRequest::release_access() {
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.access)
  if (payload_case() == kAccess) {
    clear_has_payload();
    ::palm::ops::metrics::v1::ReportNginxRequest_Access* temp = _impl_.payload_.access_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::ops::metrics::v1::ReportNginxRequest_Access& ReportNginxRequest::_internal_access() const {
  return payload_case() == kAccess
      ? *_impl_.payload_.access_
      : reinterpret_cast<::palm::ops::metrics::v1::ReportNginxRequest_Access&>(::palm::ops::metrics::v1::_ReportNginxRequest_Access_default_instance_);
}
inline const ::palm::ops::metrics::v1::ReportNginxRequest_Access& ReportNginxRequest::access() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.access)
  return _internal_access();
}
inline ::palm::ops::metrics::v1::ReportNginxRequest_Access* ReportNginxRequest::unsafe_arena_release_access() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.ops.metrics.v1.ReportNginxRequest.access)
  if (payload_case() == kAccess) {
    clear_has_payload();
    ::palm::ops::metrics::v1::ReportNginxRequest_Access* temp = _impl_.payload_.access_;
    _impl_.payload_.access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReportNginxRequest::unsafe_arena_set_allocated_access(::palm::ops::metrics::v1::ReportNginxRequest_Access* access) {
  clear_payload();
  if (access) {
    set_has_access();
    _impl_.payload_.access_ = access;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.access)
}
inline ::palm::ops::metrics::v1::ReportNginxRequest_Access* ReportNginxRequest::_internal_mutable_access() {
  if (payload_case() != kAccess) {
    clear_payload();
    set_has_access();
    _impl_.payload_.access_ = CreateMaybeMessage< ::palm::ops::metrics::v1::ReportNginxRequest_Access >(GetArenaForAllocation());
  }
  return _impl_.payload_.access_;
}
inline ::palm::ops::metrics::v1::ReportNginxRequest_Access* ReportNginxRequest::mutable_access() {
  ::palm::ops::metrics::v1::ReportNginxRequest_Access* _msg = _internal_mutable_access();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.access)
  return _msg;
}

// string error = 2;
inline bool ReportNginxRequest::has_error() const {
  return payload_case() == kError;
}
inline void ReportNginxRequest::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void ReportNginxRequest::clear_error() {
  if (payload_case() == kError) {
    _impl_.payload_.error_.Destroy();
    clear_has_payload();
  }
}
inline const std::string& ReportNginxRequest::error() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportNginxRequest::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() != kError) {
    clear_payload();

    set_has_error();
    _impl_.payload_.error_.InitDefault();
  }
  _impl_.payload_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.ops.metrics.v1.ReportNginxRequest.error)
}
inline std::string* ReportNginxRequest::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.error)
  return _s;
}
inline const std::string& ReportNginxRequest::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (payload_case() != kError) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.payload_.error_.Get();
}
inline void ReportNginxRequest::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() != kError) {
    clear_payload();

    set_has_error();
    _impl_.payload_.error_.InitDefault();
  }
  _impl_.payload_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportNginxRequest::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() != kError) {
    clear_payload();

    set_has_error();
    _impl_.payload_.error_.InitDefault();
  }
  return _impl_.payload_.error_.Mutable( GetArenaForAllocation());
}
inline std::string* ReportNginxRequest::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.error)
  if (payload_case() != kError) {
    return nullptr;
  }
  clear_has_payload();
  return _impl_.payload_.error_.Release();
}
inline void ReportNginxRequest::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_payload()) {
    clear_payload();
  }
  if (value != nullptr) {
    set_has_error();
    _impl_.payload_.error_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.error)
}

// .google.protobuf.Timestamp created_at = 9;
inline bool ReportNginxRequest::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ReportNginxRequest::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ReportNginxRequest::created_at() const {
  // @@protoc_insertion_point(field_get:palm.ops.metrics.v1.ReportNginxRequest.created_at)
  return _internal_created_at();
}
inline void ReportNginxRequest::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.created_at)
}
inline ::google::protobuf::Timestamp* ReportNginxRequest::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ReportNginxRequest::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.ops.metrics.v1.ReportNginxRequest.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ReportNginxRequest::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* ReportNginxRequest::mutable_created_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.ops.metrics.v1.ReportNginxRequest.created_at)
  return _msg;
}
inline void ReportNginxRequest::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.ops.metrics.v1.ReportNginxRequest.created_at)
}

inline bool ReportNginxRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ReportNginxRequest::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ReportNginxRequest::PayloadCase ReportNginxRequest::payload_case() const {
  return ReportNginxRequest::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace ops
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ops_2dmetrics_2eproto_2epb_2eh
