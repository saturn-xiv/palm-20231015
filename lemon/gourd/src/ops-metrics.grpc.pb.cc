// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ops-metrics.proto

#include "ops-metrics.pb.h"
#include "ops-metrics.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace ops {
namespace metrics {
namespace v1 {

static const char* Report_method_names[] = {
  "/palm.ops.metrics.v1.Report/Heartbeat",
  "/palm.ops.metrics.v1.Report/Journal",
  "/palm.ops.metrics.v1.Report/Nginx",
};

std::unique_ptr< Report::Stub> Report::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Report::Stub> stub(new Report::Stub(channel, options));
  return stub;
}

Report::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Heartbeat_(Report_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Journal_(Report_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Nginx_(Report_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Report::Stub::Heartbeat(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportHeartbeatRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::metrics::v1::ReportHeartbeatRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void Report::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportHeartbeatRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::metrics::v1::ReportHeartbeatRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void Report::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportHeartbeatRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Report::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::metrics::v1::ReportHeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Report::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Report::Stub::Journal(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportJournalRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::metrics::v1::ReportJournalRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Journal_, context, request, response);
}

void Report::Stub::async::Journal(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportJournalRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::metrics::v1::ReportJournalRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Journal_, context, request, response, std::move(f));
}

void Report::Stub::async::Journal(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportJournalRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Journal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Report::Stub::PrepareAsyncJournalRaw(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportJournalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::metrics::v1::ReportJournalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Journal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Report::Stub::AsyncJournalRaw(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportJournalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJournalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Report::Stub::Nginx(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportNginxRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::metrics::v1::ReportNginxRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Nginx_, context, request, response);
}

void Report::Stub::async::Nginx(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportNginxRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::metrics::v1::ReportNginxRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Nginx_, context, request, response, std::move(f));
}

void Report::Stub::async::Nginx(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportNginxRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Nginx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Report::Stub::PrepareAsyncNginxRaw(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportNginxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::metrics::v1::ReportNginxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Nginx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Report::Stub::AsyncNginxRaw(::grpc::ClientContext* context, const ::palm::ops::metrics::v1::ReportNginxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNginxRaw(context, request, cq);
  result->StartCall();
  return result;
}

Report::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Report_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Report::Service, ::palm::ops::metrics::v1::ReportHeartbeatRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Report::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::metrics::v1::ReportHeartbeatRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Report_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Report::Service, ::palm::ops::metrics::v1::ReportJournalRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Report::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::metrics::v1::ReportJournalRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Journal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Report_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Report::Service, ::palm::ops::metrics::v1::ReportNginxRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Report::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::metrics::v1::ReportNginxRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Nginx(ctx, req, resp);
             }, this)));
}

Report::Service::~Service() {
}

::grpc::Status Report::Service::Heartbeat(::grpc::ServerContext* context, const ::palm::ops::metrics::v1::ReportHeartbeatRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Report::Service::Journal(::grpc::ServerContext* context, const ::palm::ops::metrics::v1::ReportJournalRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Report::Service::Nginx(::grpc::ServerContext* context, const ::palm::ops::metrics::v1::ReportNginxRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace ops
}  // namespace metrics
}  // namespace v1

