// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: morus.proto

#include "morus.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace palm {
namespace morus {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR MarkdownToHtmlRequest::MarkdownToHtmlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sanitize_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkdownToHtmlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkdownToHtmlRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkdownToHtmlRequestDefaultTypeInternal() {}
  union {
    MarkdownToHtmlRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkdownToHtmlRequestDefaultTypeInternal _MarkdownToHtmlRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarkdownToHtmlResponse::MarkdownToHtmlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarkdownToHtmlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarkdownToHtmlResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarkdownToHtmlResponseDefaultTypeInternal() {}
  union {
    MarkdownToHtmlResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarkdownToHtmlResponseDefaultTypeInternal _MarkdownToHtmlResponse_default_instance_;
}  // namespace v1
}  // namespace morus
}  // namespace palm
static ::_pb::Metadata file_level_metadata_morus_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_morus_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_morus_2eproto = nullptr;
const ::uint32_t TableStruct_morus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::morus::v1::MarkdownToHtmlRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::morus::v1::MarkdownToHtmlRequest, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::palm::morus::v1::MarkdownToHtmlRequest, _impl_.sanitize_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::morus::v1::MarkdownToHtmlResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::morus::v1::MarkdownToHtmlResponse, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::palm::morus::v1::MarkdownToHtmlRequest)},
        { 10, -1, -1, sizeof(::palm::morus::v1::MarkdownToHtmlResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::morus::v1::_MarkdownToHtmlRequest_default_instance_._instance,
    &::palm::morus::v1::_MarkdownToHtmlResponse_default_instance_._instance,
};
const char descriptor_table_protodef_morus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013morus.proto\022\rpalm.morus.v1\":\n\025Markdown"
    "ToHtmlRequest\022\017\n\007payload\030\001 \001(\t\022\020\n\010saniti"
    "ze\030\002 \001(\010\")\n\026MarkdownToHtmlResponse\022\017\n\007pa"
    "yload\030\001 \001(\t2c\n\010Markdown\022W\n\006ToHtml\022$.palm"
    ".morus.v1.MarkdownToHtmlRequest\032%.palm.m"
    "orus.v1.MarkdownToHtmlResponse\"\000B/\n+com."
    "github.saturn_xiv.palm.plugins.morus.v1P"
    "\001b\006proto3"
};
static ::absl::once_flag descriptor_table_morus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_morus_2eproto = {
    false,
    false,
    289,
    descriptor_table_protodef_morus_2eproto,
    "morus.proto",
    &descriptor_table_morus_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_morus_2eproto::offsets,
    file_level_metadata_morus_2eproto,
    file_level_enum_descriptors_morus_2eproto,
    file_level_service_descriptors_morus_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_morus_2eproto_getter() {
  return &descriptor_table_morus_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_morus_2eproto(&descriptor_table_morus_2eproto);
namespace palm {
namespace morus {
namespace v1 {
// ===================================================================

class MarkdownToHtmlRequest::_Internal {
 public:
};

MarkdownToHtmlRequest::MarkdownToHtmlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.morus.v1.MarkdownToHtmlRequest)
}
MarkdownToHtmlRequest::MarkdownToHtmlRequest(const MarkdownToHtmlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkdownToHtmlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.sanitize_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sanitize_ = from._impl_.sanitize_;
  // @@protoc_insertion_point(copy_constructor:palm.morus.v1.MarkdownToHtmlRequest)
}

inline void MarkdownToHtmlRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , decltype(_impl_.sanitize_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarkdownToHtmlRequest::~MarkdownToHtmlRequest() {
  // @@protoc_insertion_point(destructor:palm.morus.v1.MarkdownToHtmlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkdownToHtmlRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void MarkdownToHtmlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkdownToHtmlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.morus.v1.MarkdownToHtmlRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.sanitize_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkdownToHtmlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.morus.v1.MarkdownToHtmlRequest.payload"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool sanitize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.sanitize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarkdownToHtmlRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.morus.v1.MarkdownToHtmlRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.morus.v1.MarkdownToHtmlRequest.payload");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool sanitize = 2;
  if (this->_internal_sanitize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_sanitize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.morus.v1.MarkdownToHtmlRequest)
  return target;
}

::size_t MarkdownToHtmlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.morus.v1.MarkdownToHtmlRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payload());
  }

  // bool sanitize = 2;
  if (this->_internal_sanitize() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkdownToHtmlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkdownToHtmlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkdownToHtmlRequest::GetClassData() const { return &_class_data_; }


void MarkdownToHtmlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkdownToHtmlRequest*>(&to_msg);
  auto& from = static_cast<const MarkdownToHtmlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.morus.v1.MarkdownToHtmlRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_sanitize() != 0) {
    _this->_internal_set_sanitize(from._internal_sanitize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkdownToHtmlRequest::CopyFrom(const MarkdownToHtmlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.morus.v1.MarkdownToHtmlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkdownToHtmlRequest::IsInitialized() const {
  return true;
}

void MarkdownToHtmlRequest::InternalSwap(MarkdownToHtmlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);

  swap(_impl_.sanitize_, other->_impl_.sanitize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkdownToHtmlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_morus_2eproto_getter, &descriptor_table_morus_2eproto_once,
      file_level_metadata_morus_2eproto[0]);
}
// ===================================================================

class MarkdownToHtmlResponse::_Internal {
 public:
};

MarkdownToHtmlResponse::MarkdownToHtmlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.morus.v1.MarkdownToHtmlResponse)
}
MarkdownToHtmlResponse::MarkdownToHtmlResponse(const MarkdownToHtmlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarkdownToHtmlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.morus.v1.MarkdownToHtmlResponse)
}

inline void MarkdownToHtmlResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarkdownToHtmlResponse::~MarkdownToHtmlResponse() {
  // @@protoc_insertion_point(destructor:palm.morus.v1.MarkdownToHtmlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarkdownToHtmlResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void MarkdownToHtmlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarkdownToHtmlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.morus.v1.MarkdownToHtmlResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkdownToHtmlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.morus.v1.MarkdownToHtmlResponse.payload"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarkdownToHtmlResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.morus.v1.MarkdownToHtmlResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.morus.v1.MarkdownToHtmlResponse.payload");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.morus.v1.MarkdownToHtmlResponse)
  return target;
}

::size_t MarkdownToHtmlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.morus.v1.MarkdownToHtmlResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarkdownToHtmlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarkdownToHtmlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarkdownToHtmlResponse::GetClassData() const { return &_class_data_; }


void MarkdownToHtmlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarkdownToHtmlResponse*>(&to_msg);
  auto& from = static_cast<const MarkdownToHtmlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.morus.v1.MarkdownToHtmlResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarkdownToHtmlResponse::CopyFrom(const MarkdownToHtmlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.morus.v1.MarkdownToHtmlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkdownToHtmlResponse::IsInitialized() const {
  return true;
}

void MarkdownToHtmlResponse::InternalSwap(MarkdownToHtmlResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkdownToHtmlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_morus_2eproto_getter, &descriptor_table_morus_2eproto_once,
      file_level_metadata_morus_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace morus
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::morus::v1::MarkdownToHtmlRequest*
Arena::CreateMaybeMessage< ::palm::morus::v1::MarkdownToHtmlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::morus::v1::MarkdownToHtmlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::morus::v1::MarkdownToHtmlResponse*
Arena::CreateMaybeMessage< ::palm::morus::v1::MarkdownToHtmlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::morus::v1::MarkdownToHtmlResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
