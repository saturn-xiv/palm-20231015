// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: musa.proto

#include "musa.pb.h"
#include "musa.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace musa {
namespace v1 {

static const char* WechatPayNative_method_names[] = {
  "/palm.musa.v1.WechatPayNative/Prepay",
};

std::unique_ptr< WechatPayNative::Stub> WechatPayNative::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatPayNative::Stub> stub(new WechatPayNative::Stub(channel, options));
  return stub;
}

WechatPayNative::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Prepay_(WechatPayNative_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatPayNative::Stub::Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Prepay_, context, request, response);
}

void WechatPayNative::Stub::async::Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prepay_, context, request, response, std::move(f));
}

void WechatPayNative::Stub::async::Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prepay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* WechatPayNative::Stub::PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse, ::palm::musa::v1::WechatPayPrepayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Prepay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>* WechatPayNative::Stub::AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepayRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatPayNative::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayNative_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayNative::Service, ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayNative::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayPrepayRequest* req,
             ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* resp) {
               return service->Prepay(ctx, req, resp);
             }, this)));
}

WechatPayNative::Service::~Service() {
}

::grpc::Status WechatPayNative::Service::Prepay(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatPayJsapi_method_names[] = {
  "/palm.musa.v1.WechatPayJsapi/Prepay",
  "/palm.musa.v1.WechatPayJsapi/QueryOrderByOutTradeNo",
  "/palm.musa.v1.WechatPayJsapi/QueryOrderById",
  "/palm.musa.v1.WechatPayJsapi/CloseOrder",
};

std::unique_ptr< WechatPayJsapi::Stub> WechatPayJsapi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatPayJsapi::Stub> stub(new WechatPayJsapi::Stub(channel, options));
  return stub;
}

WechatPayJsapi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Prepay_(WechatPayJsapi_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryOrderByOutTradeNo_(WechatPayJsapi_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryOrderById_(WechatPayJsapi_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseOrder_(WechatPayJsapi_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatPayJsapi::Stub::Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Prepay_, context, request, response);
}

void WechatPayJsapi::Stub::async::Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prepay_, context, request, response, std::move(f));
}

void WechatPayJsapi::Stub::async::Prepay(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Prepay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* WechatPayJsapi::Stub::PrepareAsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse, ::palm::musa::v1::WechatPayPrepayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Prepay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayJsapiPrepayIdResponse>* WechatPayJsapi::Stub::AsyncPrepayRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayPrepayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatPayJsapi::Stub::QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::palm::musa::v1::WechatPayTradeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryOrderByOutTradeNo_, context, request, response);
}

void WechatPayJsapi::Stub::async::QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryOrderByOutTradeNo_, context, request, response, std::move(f));
}

void WechatPayJsapi::Stub::async::QueryOrderByOutTradeNo(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryOrderByOutTradeNo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* WechatPayJsapi::Stub::PrepareAsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayTradeResponse, ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryOrderByOutTradeNo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* WechatPayJsapi::Stub::AsyncQueryOrderByOutTradeNoRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryOrderByOutTradeNoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatPayJsapi::Stub::QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::palm::musa::v1::WechatPayTradeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryOrderById_, context, request, response);
}

void WechatPayJsapi::Stub::async::QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryOrderById_, context, request, response, std::move(f));
}

void WechatPayJsapi::Stub::async::QueryOrderById(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryOrderById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* WechatPayJsapi::Stub::PrepareAsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayTradeResponse, ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryOrderById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayTradeResponse>* WechatPayJsapi::Stub::AsyncQueryOrderByIdRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryOrderByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatPayJsapi::Stub::CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseOrder_, context, request, response);
}

void WechatPayJsapi::Stub::async::CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseOrder_, context, request, response, std::move(f));
}

void WechatPayJsapi::Stub::async::CloseOrder(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatPayJsapi::Stub::PrepareAsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::musa::v1::WechatPayCloseOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* WechatPayJsapi::Stub::AsyncCloseOrderRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatPayJsapi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayJsapi_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayJsapi::Service, ::palm::musa::v1::WechatPayPrepayRequest, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayJsapi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayPrepayRequest* req,
             ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* resp) {
               return service->Prepay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayJsapi_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayJsapi::Service, ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest, ::palm::musa::v1::WechatPayTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayJsapi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* req,
             ::palm::musa::v1::WechatPayTradeResponse* resp) {
               return service->QueryOrderByOutTradeNo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayJsapi_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayJsapi::Service, ::palm::musa::v1::WechatPayQueryOrderByIdRequest, ::palm::musa::v1::WechatPayTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayJsapi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* req,
             ::palm::musa::v1::WechatPayTradeResponse* resp) {
               return service->QueryOrderById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayJsapi_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayJsapi::Service, ::palm::musa::v1::WechatPayCloseOrderRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayJsapi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayCloseOrderRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CloseOrder(ctx, req, resp);
             }, this)));
}

WechatPayJsapi::Service::~Service() {
}

::grpc::Status WechatPayJsapi::Service::Prepay(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayPrepayRequest* request, ::palm::musa::v1::WechatPayJsapiPrepayIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatPayJsapi::Service::QueryOrderByOutTradeNo(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatPayJsapi::Service::QueryOrderById(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryOrderByIdRequest* request, ::palm::musa::v1::WechatPayTradeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatPayJsapi::Service::CloseOrder(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayCloseOrderRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatPayBill_method_names[] = {
  "/palm.musa.v1.WechatPayBill/Trade",
  "/palm.musa.v1.WechatPayBill/FundFlow",
};

std::unique_ptr< WechatPayBill::Stub> WechatPayBill::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatPayBill::Stub> stub(new WechatPayBill::Stub(channel, options));
  return stub;
}

WechatPayBill::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Trade_(WechatPayBill_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FundFlow_(WechatPayBill_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatPayBill::Stub::Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::palm::musa::v1::WechatPayBillResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Trade_, context, request, response);
}

void WechatPayBill::Stub::async::Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Trade_, context, request, response, std::move(f));
}

void WechatPayBill::Stub::async::Trade(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Trade_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* WechatPayBill::Stub::PrepareAsyncTradeRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayBillResponse, ::palm::musa::v1::WechatPayTradeBillRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Trade_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* WechatPayBill::Stub::AsyncTradeRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatPayBill::Stub::FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::palm::musa::v1::WechatPayBillResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FundFlow_, context, request, response);
}

void WechatPayBill::Stub::async::FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundFlow_, context, request, response, std::move(f));
}

void WechatPayBill::Stub::async::FundFlow(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundFlow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* WechatPayBill::Stub::PrepareAsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayBillResponse, ::palm::musa::v1::WechatPayFundFlowBillRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FundFlow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayBillResponse>* WechatPayBill::Stub::AsyncFundFlowRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFundFlowRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatPayBill::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayBill_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayBill::Service, ::palm::musa::v1::WechatPayTradeBillRequest, ::palm::musa::v1::WechatPayBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayBill::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayTradeBillRequest* req,
             ::palm::musa::v1::WechatPayBillResponse* resp) {
               return service->Trade(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayBill_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayBill::Service, ::palm::musa::v1::WechatPayFundFlowBillRequest, ::palm::musa::v1::WechatPayBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayBill::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayFundFlowBillRequest* req,
             ::palm::musa::v1::WechatPayBillResponse* resp) {
               return service->FundFlow(ctx, req, resp);
             }, this)));
}

WechatPayBill::Service::~Service() {
}

::grpc::Status WechatPayBill::Service::Trade(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayTradeBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatPayBill::Service::FundFlow(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayFundFlowBillRequest* request, ::palm::musa::v1::WechatPayBillResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatPayRefund_method_names[] = {
  "/palm.musa.v1.WechatPayRefund/Create",
  "/palm.musa.v1.WechatPayRefund/Query",
};

std::unique_ptr< WechatPayRefund::Stub> WechatPayRefund::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatPayRefund::Stub> stub(new WechatPayRefund::Stub(channel, options));
  return stub;
}

WechatPayRefund::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(WechatPayRefund_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(WechatPayRefund_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatPayRefund::Stub::Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::palm::musa::v1::WechatPayRefundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void WechatPayRefund::Stub::async::Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void WechatPayRefund::Stub::async::Create(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* WechatPayRefund::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayRefundResponse, ::palm::musa::v1::WechatPayCreateRefundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* WechatPayRefund::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatPayRefund::Stub::Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::palm::musa::v1::WechatPayRefundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Query_, context, request, response);
}

void WechatPayRefund::Stub::async::Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void WechatPayRefund::Stub::async::Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* WechatPayRefund::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayRefundResponse, ::palm::musa::v1::WechatPayQueryRefundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayRefundResponse>* WechatPayRefund::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatPayRefund::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayRefund_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayRefund::Service, ::palm::musa::v1::WechatPayCreateRefundRequest, ::palm::musa::v1::WechatPayRefundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayRefund::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayCreateRefundRequest* req,
             ::palm::musa::v1::WechatPayRefundResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayRefund_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayRefund::Service, ::palm::musa::v1::WechatPayQueryRefundRequest, ::palm::musa::v1::WechatPayRefundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayRefund::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayQueryRefundRequest* req,
             ::palm::musa::v1::WechatPayRefundResponse* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
}

WechatPayRefund::Service::~Service() {
}

::grpc::Status WechatPayRefund::Service::Create(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayCreateRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatPayRefund::Service::Query(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryRefundRequest* request, ::palm::musa::v1::WechatPayRefundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WechatPayTransfer_method_names[] = {
  "/palm.musa.v1.WechatPayTransfer/Execute",
  "/palm.musa.v1.WechatPayTransfer/Query",
};

std::unique_ptr< WechatPayTransfer::Stub> WechatPayTransfer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WechatPayTransfer::Stub> stub(new WechatPayTransfer::Stub(channel, options));
  return stub;
}

WechatPayTransfer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Execute_(WechatPayTransfer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(WechatPayTransfer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WechatPayTransfer::Stub::Execute(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteTransferRequest& request, ::palm::musa::v1::WechatPayExecuteTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayExecuteTransferRequest, ::palm::musa::v1::WechatPayExecuteTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void WechatPayTransfer::Stub::async::Execute(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteTransferRequest* request, ::palm::musa::v1::WechatPayExecuteTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayExecuteTransferRequest, ::palm::musa::v1::WechatPayExecuteTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void WechatPayTransfer::Stub::async::Execute(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteTransferRequest* request, ::palm::musa::v1::WechatPayExecuteTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteTransferResponse>* WechatPayTransfer::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteTransferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayExecuteTransferResponse, ::palm::musa::v1::WechatPayExecuteTransferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Execute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayExecuteTransferResponse>* WechatPayTransfer::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayExecuteTransferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WechatPayTransfer::Stub::Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferRequest& request, ::palm::musa::v1::WechatPayQueryTransferResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::musa::v1::WechatPayQueryTransferRequest, ::palm::musa::v1::WechatPayQueryTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Query_, context, request, response);
}

void WechatPayTransfer::Stub::async::Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferRequest* request, ::palm::musa::v1::WechatPayQueryTransferResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::musa::v1::WechatPayQueryTransferRequest, ::palm::musa::v1::WechatPayQueryTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void WechatPayTransfer::Stub::async::Query(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferRequest* request, ::palm::musa::v1::WechatPayQueryTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferResponse>* WechatPayTransfer::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::musa::v1::WechatPayQueryTransferResponse, ::palm::musa::v1::WechatPayQueryTransferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::musa::v1::WechatPayQueryTransferResponse>* WechatPayTransfer::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::palm::musa::v1::WechatPayQueryTransferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

WechatPayTransfer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayTransfer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayTransfer::Service, ::palm::musa::v1::WechatPayExecuteTransferRequest, ::palm::musa::v1::WechatPayExecuteTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayTransfer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayExecuteTransferRequest* req,
             ::palm::musa::v1::WechatPayExecuteTransferResponse* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WechatPayTransfer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WechatPayTransfer::Service, ::palm::musa::v1::WechatPayQueryTransferRequest, ::palm::musa::v1::WechatPayQueryTransferResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WechatPayTransfer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::musa::v1::WechatPayQueryTransferRequest* req,
             ::palm::musa::v1::WechatPayQueryTransferResponse* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
}

WechatPayTransfer::Service::~Service() {
}

::grpc::Status WechatPayTransfer::Service::Execute(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayExecuteTransferRequest* request, ::palm::musa::v1::WechatPayExecuteTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WechatPayTransfer::Service::Query(::grpc::ServerContext* context, const ::palm::musa::v1::WechatPayQueryTransferRequest* request, ::palm::musa::v1::WechatPayQueryTransferResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace musa
}  // namespace v1

