// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lily.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lily_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lily_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_lily_2eproto;
namespace palm {
namespace lily {
namespace v1 {
class EpubBuildRequest;
struct EpubBuildRequestDefaultTypeInternal;
extern EpubBuildRequestDefaultTypeInternal _EpubBuildRequest_default_instance_;
class ExcelLoadRequest;
struct ExcelLoadRequestDefaultTypeInternal;
extern ExcelLoadRequestDefaultTypeInternal _ExcelLoadRequest_default_instance_;
class ExcelQueryRequest;
struct ExcelQueryRequestDefaultTypeInternal;
extern ExcelQueryRequestDefaultTypeInternal _ExcelQueryRequest_default_instance_;
class ExcelQueryResponse;
struct ExcelQueryResponseDefaultTypeInternal;
extern ExcelQueryResponseDefaultTypeInternal _ExcelQueryResponse_default_instance_;
class ExcelQueryResponse_Item;
struct ExcelQueryResponse_ItemDefaultTypeInternal;
extern ExcelQueryResponse_ItemDefaultTypeInternal _ExcelQueryResponse_Item_default_instance_;
class HttpResponse;
struct HttpResponseDefaultTypeInternal;
extern HttpResponseDefaultTypeInternal _HttpResponse_default_instance_;
class TexToRequest;
struct TexToRequestDefaultTypeInternal;
extern TexToRequestDefaultTypeInternal _TexToRequest_default_instance_;
}  // namespace v1
}  // namespace lily
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template <>
::palm::lily::v1::EpubBuildRequest* Arena::CreateMaybeMessage<::palm::lily::v1::EpubBuildRequest>(Arena*);
template <>
::palm::lily::v1::ExcelLoadRequest* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelLoadRequest>(Arena*);
template <>
::palm::lily::v1::ExcelQueryRequest* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelQueryRequest>(Arena*);
template <>
::palm::lily::v1::ExcelQueryResponse* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelQueryResponse>(Arena*);
template <>
::palm::lily::v1::ExcelQueryResponse_Item* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelQueryResponse_Item>(Arena*);
template <>
::palm::lily::v1::HttpResponse* Arena::CreateMaybeMessage<::palm::lily::v1::HttpResponse>(Arena*);
template <>
::palm::lily::v1::TexToRequest* Arena::CreateMaybeMessage<::palm::lily::v1::TexToRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace palm {
namespace lily {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class HttpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.HttpResponse) */ {
 public:
  inline HttpResponse() : HttpResponse(nullptr) {}
  ~HttpResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HttpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HttpResponse(const HttpResponse& from);
  HttpResponse(HttpResponse&& from) noexcept
    : HttpResponse() {
    *this = ::std::move(from);
  }

  inline HttpResponse& operator=(const HttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpResponse& operator=(HttpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HttpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HttpResponse* internal_default_instance() {
    return reinterpret_cast<const HttpResponse*>(
               &_HttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HttpResponse& a, HttpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HttpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HttpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HttpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HttpResponse& from) {
    HttpResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.HttpResponse";
  }
  protected:
  explicit HttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // string content_type = 1;
  void clear_content_type() ;
  const std::string& content_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // bytes body = 2;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.HttpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelLoadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelLoadRequest) */ {
 public:
  inline ExcelLoadRequest() : ExcelLoadRequest(nullptr) {}
  ~ExcelLoadRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelLoadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelLoadRequest(const ExcelLoadRequest& from);
  ExcelLoadRequest(ExcelLoadRequest&& from) noexcept
    : ExcelLoadRequest() {
    *this = ::std::move(from);
  }

  inline ExcelLoadRequest& operator=(const ExcelLoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelLoadRequest& operator=(ExcelLoadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelLoadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelLoadRequest* internal_default_instance() {
    return reinterpret_cast<const ExcelLoadRequest*>(
               &_ExcelLoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExcelLoadRequest& a, ExcelLoadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelLoadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelLoadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelLoadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelLoadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelLoadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelLoadRequest& from) {
    ExcelLoadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelLoadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelLoadRequest";
  }
  protected:
  explicit ExcelLoadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelLoadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelQueryRequest) */ {
 public:
  inline ExcelQueryRequest() : ExcelQueryRequest(nullptr) {}
  ~ExcelQueryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelQueryRequest(const ExcelQueryRequest& from);
  ExcelQueryRequest(ExcelQueryRequest&& from) noexcept
    : ExcelQueryRequest() {
    *this = ::std::move(from);
  }

  inline ExcelQueryRequest& operator=(const ExcelQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelQueryRequest& operator=(ExcelQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelQueryRequest* internal_default_instance() {
    return reinterpret_cast<const ExcelQueryRequest*>(
               &_ExcelQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExcelQueryRequest& a, ExcelQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelQueryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelQueryRequest& from) {
    ExcelQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelQueryRequest";
  }
  protected:
  explicit ExcelQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelQueryResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelQueryResponse.Item) */ {
 public:
  inline ExcelQueryResponse_Item() : ExcelQueryResponse_Item(nullptr) {}
  ~ExcelQueryResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelQueryResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelQueryResponse_Item(const ExcelQueryResponse_Item& from);
  ExcelQueryResponse_Item(ExcelQueryResponse_Item&& from) noexcept
    : ExcelQueryResponse_Item() {
    *this = ::std::move(from);
  }

  inline ExcelQueryResponse_Item& operator=(const ExcelQueryResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelQueryResponse_Item& operator=(ExcelQueryResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelQueryResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelQueryResponse_Item* internal_default_instance() {
    return reinterpret_cast<const ExcelQueryResponse_Item*>(
               &_ExcelQueryResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExcelQueryResponse_Item& a, ExcelQueryResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelQueryResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelQueryResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelQueryResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelQueryResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelQueryResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelQueryResponse_Item& from) {
    ExcelQueryResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelQueryResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelQueryResponse.Item";
  }
  protected:
  explicit ExcelQueryResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // string v = 3;
  void clear_v() ;
  const std::string& v() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_v(Arg_&& arg, Args_... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* ptr);

  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(
      const std::string& value);
  std::string* _internal_mutable_v();

  public:
  // uint32 x = 1;
  void clear_x() ;
  ::uint32_t x() const;
  void set_x(::uint32_t value);

  private:
  ::uint32_t _internal_x() const;
  void _internal_set_x(::uint32_t value);

  public:
  // uint32 y = 2;
  void clear_y() ;
  ::uint32_t y() const;
  void set_y(::uint32_t value);

  private:
  ::uint32_t _internal_y() const;
  void _internal_set_y(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelQueryResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
    ::uint32_t x_;
    ::uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelQueryResponse) */ {
 public:
  inline ExcelQueryResponse() : ExcelQueryResponse(nullptr) {}
  ~ExcelQueryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelQueryResponse(const ExcelQueryResponse& from);
  ExcelQueryResponse(ExcelQueryResponse&& from) noexcept
    : ExcelQueryResponse() {
    *this = ::std::move(from);
  }

  inline ExcelQueryResponse& operator=(const ExcelQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelQueryResponse& operator=(ExcelQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelQueryResponse* internal_default_instance() {
    return reinterpret_cast<const ExcelQueryResponse*>(
               &_ExcelQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExcelQueryResponse& a, ExcelQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelQueryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelQueryResponse& from) {
    ExcelQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelQueryResponse";
  }
  protected:
  explicit ExcelQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExcelQueryResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.lily.v1.ExcelQueryResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::lily::v1::ExcelQueryResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelQueryResponse_Item >*
      mutable_items();
  private:
  const ::palm::lily::v1::ExcelQueryResponse_Item& _internal_items(int index) const;
  ::palm::lily::v1::ExcelQueryResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::lily::v1::ExcelQueryResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::lily::v1::ExcelQueryResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::lily::v1::ExcelQueryResponse_Item& items(int index) const;
  ::palm::lily::v1::ExcelQueryResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelQueryResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelQueryResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class TexToRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.TexToRequest) */ {
 public:
  inline TexToRequest() : TexToRequest(nullptr) {}
  ~TexToRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TexToRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TexToRequest(const TexToRequest& from);
  TexToRequest(TexToRequest&& from) noexcept
    : TexToRequest() {
    *this = ::std::move(from);
  }

  inline TexToRequest& operator=(const TexToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexToRequest& operator=(TexToRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TexToRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TexToRequest* internal_default_instance() {
    return reinterpret_cast<const TexToRequest*>(
               &_TexToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TexToRequest& a, TexToRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TexToRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TexToRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TexToRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TexToRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TexToRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TexToRequest& from) {
    TexToRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TexToRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.TexToRequest";
  }
  protected:
  explicit TexToRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
  };
  // string body = 1;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.TexToRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class EpubBuildRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lily.v1.EpubBuildRequest) */ {
 public:
  inline EpubBuildRequest() : EpubBuildRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EpubBuildRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpubBuildRequest(const EpubBuildRequest& from);
  EpubBuildRequest(EpubBuildRequest&& from) noexcept
    : EpubBuildRequest() {
    *this = ::std::move(from);
  }

  inline EpubBuildRequest& operator=(const EpubBuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpubBuildRequest& operator=(EpubBuildRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpubBuildRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpubBuildRequest* internal_default_instance() {
    return reinterpret_cast<const EpubBuildRequest*>(
               &_EpubBuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EpubBuildRequest& a, EpubBuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EpubBuildRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpubBuildRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpubBuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpubBuildRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EpubBuildRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EpubBuildRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.EpubBuildRequest";
  }
  protected:
  explicit EpubBuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lily.v1.EpubBuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_lily_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HttpResponse

// string content_type = 1;
inline void HttpResponse::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& HttpResponse::content_type() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.HttpResponse.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResponse::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.HttpResponse.content_type)
}
inline std::string* HttpResponse::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.HttpResponse.content_type)
  return _s;
}
inline const std::string& HttpResponse::_internal_content_type() const {
  return _impl_.content_type_.Get();
}
inline void HttpResponse::_internal_set_content_type(const std::string& value) {
  ;


  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResponse::_internal_mutable_content_type() {
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResponse::release_content_type() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.HttpResponse.content_type)
  return _impl_.content_type_.Release();
}
inline void HttpResponse::set_allocated_content_type(std::string* value) {
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.HttpResponse.content_type)
}

// bytes body = 2;
inline void HttpResponse::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& HttpResponse::body() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.HttpResponse.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HttpResponse::set_body(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.HttpResponse.body)
}
inline std::string* HttpResponse::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.HttpResponse.body)
  return _s;
}
inline const std::string& HttpResponse::_internal_body() const {
  return _impl_.body_.Get();
}
inline void HttpResponse::_internal_set_body(const std::string& value) {
  ;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* HttpResponse::_internal_mutable_body() {
  ;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* HttpResponse::release_body() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.HttpResponse.body)
  return _impl_.body_.Release();
}
inline void HttpResponse::set_allocated_body(std::string* value) {
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.HttpResponse.body)
}

// -------------------------------------------------------------------

// ExcelLoadRequest

// string id = 1;
inline void ExcelLoadRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ExcelLoadRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelLoadRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExcelLoadRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelLoadRequest.id)
}
inline std::string* ExcelLoadRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelLoadRequest.id)
  return _s;
}
inline const std::string& ExcelLoadRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ExcelLoadRequest::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelLoadRequest::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* ExcelLoadRequest::release_id() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelLoadRequest.id)
  return _impl_.id_.Release();
}
inline void ExcelLoadRequest::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelLoadRequest.id)
}

// bytes data = 2;
inline void ExcelLoadRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ExcelLoadRequest::data() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelLoadRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExcelLoadRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelLoadRequest.data)
}
inline std::string* ExcelLoadRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelLoadRequest.data)
  return _s;
}
inline const std::string& ExcelLoadRequest::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ExcelLoadRequest::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelLoadRequest::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ExcelLoadRequest::release_data() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelLoadRequest.data)
  return _impl_.data_.Release();
}
inline void ExcelLoadRequest::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelLoadRequest.data)
}

// -------------------------------------------------------------------

// ExcelQueryRequest

// string id = 1;
inline void ExcelQueryRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ExcelQueryRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelQueryRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExcelQueryRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelQueryRequest.id)
}
inline std::string* ExcelQueryRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelQueryRequest.id)
  return _s;
}
inline const std::string& ExcelQueryRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ExcelQueryRequest::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelQueryRequest::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* ExcelQueryRequest::release_id() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelQueryRequest.id)
  return _impl_.id_.Release();
}
inline void ExcelQueryRequest::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelQueryRequest.id)
}

// -------------------------------------------------------------------

// ExcelQueryResponse_Item

// uint32 x = 1;
inline void ExcelQueryResponse_Item::clear_x() {
  _impl_.x_ = 0u;
}
inline ::uint32_t ExcelQueryResponse_Item::x() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelQueryResponse.Item.x)
  return _internal_x();
}
inline void ExcelQueryResponse_Item::set_x(::uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelQueryResponse.Item.x)
}
inline ::uint32_t ExcelQueryResponse_Item::_internal_x() const {
  return _impl_.x_;
}
inline void ExcelQueryResponse_Item::_internal_set_x(::uint32_t value) {
  ;
  _impl_.x_ = value;
}

// uint32 y = 2;
inline void ExcelQueryResponse_Item::clear_y() {
  _impl_.y_ = 0u;
}
inline ::uint32_t ExcelQueryResponse_Item::y() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelQueryResponse.Item.y)
  return _internal_y();
}
inline void ExcelQueryResponse_Item::set_y(::uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelQueryResponse.Item.y)
}
inline ::uint32_t ExcelQueryResponse_Item::_internal_y() const {
  return _impl_.y_;
}
inline void ExcelQueryResponse_Item::_internal_set_y(::uint32_t value) {
  ;
  _impl_.y_ = value;
}

// string v = 3;
inline void ExcelQueryResponse_Item::clear_v() {
  _impl_.v_.ClearToEmpty();
}
inline const std::string& ExcelQueryResponse_Item::v() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelQueryResponse.Item.v)
  return _internal_v();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExcelQueryResponse_Item::set_v(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.v_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelQueryResponse.Item.v)
}
inline std::string* ExcelQueryResponse_Item::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelQueryResponse.Item.v)
  return _s;
}
inline const std::string& ExcelQueryResponse_Item::_internal_v() const {
  return _impl_.v_.Get();
}
inline void ExcelQueryResponse_Item::_internal_set_v(const std::string& value) {
  ;


  _impl_.v_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelQueryResponse_Item::_internal_mutable_v() {
  ;
  return _impl_.v_.Mutable( GetArenaForAllocation());
}
inline std::string* ExcelQueryResponse_Item::release_v() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelQueryResponse.Item.v)
  return _impl_.v_.Release();
}
inline void ExcelQueryResponse_Item::set_allocated_v(std::string* value) {
  _impl_.v_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.v_.IsDefault()) {
          _impl_.v_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelQueryResponse.Item.v)
}

// -------------------------------------------------------------------

// ExcelQueryResponse

// repeated .palm.lily.v1.ExcelQueryResponse.Item items = 1;
inline int ExcelQueryResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ExcelQueryResponse::items_size() const {
  return _internal_items_size();
}
inline void ExcelQueryResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::lily::v1::ExcelQueryResponse_Item* ExcelQueryResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelQueryResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelQueryResponse_Item >*
ExcelQueryResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.lily.v1.ExcelQueryResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::lily::v1::ExcelQueryResponse_Item& ExcelQueryResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::lily::v1::ExcelQueryResponse_Item& ExcelQueryResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelQueryResponse.items)
  return _internal_items(index);
}
inline ::palm::lily::v1::ExcelQueryResponse_Item* ExcelQueryResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::lily::v1::ExcelQueryResponse_Item* ExcelQueryResponse::add_items() {
  ::palm::lily::v1::ExcelQueryResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.lily.v1.ExcelQueryResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelQueryResponse_Item >&
ExcelQueryResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.lily.v1.ExcelQueryResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::lily::v1::ExcelQueryResponse_Item>&
ExcelQueryResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::lily::v1::ExcelQueryResponse_Item>*
ExcelQueryResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// TexToRequest

// string body = 1;
inline void TexToRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& TexToRequest::body() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TexToRequest.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TexToRequest::set_body(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TexToRequest.body)
}
inline std::string* TexToRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TexToRequest.body)
  return _s;
}
inline const std::string& TexToRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void TexToRequest::_internal_set_body(const std::string& value) {
  ;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* TexToRequest::_internal_mutable_body() {
  ;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* TexToRequest::release_body() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TexToRequest.body)
  return _impl_.body_.Release();
}
inline void TexToRequest::set_allocated_body(std::string* value) {
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TexToRequest.body)
}

// -------------------------------------------------------------------

// EpubBuildRequest

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lily
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh
