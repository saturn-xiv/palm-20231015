// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lily.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lily_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lily_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_lily_2eproto;
namespace palm {
namespace lily {
namespace v1 {
class EpubBuildRequest;
struct EpubBuildRequestDefaultTypeInternal;
extern EpubBuildRequestDefaultTypeInternal _EpubBuildRequest_default_instance_;
class ExcelModel;
struct ExcelModelDefaultTypeInternal;
extern ExcelModelDefaultTypeInternal _ExcelModel_default_instance_;
class ExcelModel_Sheet;
struct ExcelModel_SheetDefaultTypeInternal;
extern ExcelModel_SheetDefaultTypeInternal _ExcelModel_Sheet_default_instance_;
class ExcelModel_Sheet_Cell;
struct ExcelModel_Sheet_CellDefaultTypeInternal;
extern ExcelModel_Sheet_CellDefaultTypeInternal _ExcelModel_Sheet_Cell_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class TexToRequest;
struct TexToRequestDefaultTypeInternal;
extern TexToRequestDefaultTypeInternal _TexToRequest_default_instance_;
class TexToRequest_FilesEntry_DoNotUse;
struct TexToRequest_FilesEntry_DoNotUseDefaultTypeInternal;
extern TexToRequest_FilesEntry_DoNotUseDefaultTypeInternal _TexToRequest_FilesEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace lily
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace lily {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class File final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR File(::google::protobuf::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.File";
  }
  protected:
  explicit File(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kNameFieldNumber = 2,
    kContentTypeFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket() ;
  const std::string& bucket() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* ptr);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string content_type = 9;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.File)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr bucket_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelModel_Sheet_Cell final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelModel.Sheet.Cell) */ {
 public:
  inline ExcelModel_Sheet_Cell() : ExcelModel_Sheet_Cell(nullptr) {}
  ~ExcelModel_Sheet_Cell() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelModel_Sheet_Cell(::google::protobuf::internal::ConstantInitialized);

  ExcelModel_Sheet_Cell(const ExcelModel_Sheet_Cell& from);
  ExcelModel_Sheet_Cell(ExcelModel_Sheet_Cell&& from) noexcept
    : ExcelModel_Sheet_Cell() {
    *this = ::std::move(from);
  }

  inline ExcelModel_Sheet_Cell& operator=(const ExcelModel_Sheet_Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelModel_Sheet_Cell& operator=(ExcelModel_Sheet_Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelModel_Sheet_Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelModel_Sheet_Cell* internal_default_instance() {
    return reinterpret_cast<const ExcelModel_Sheet_Cell*>(
               &_ExcelModel_Sheet_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExcelModel_Sheet_Cell& a, ExcelModel_Sheet_Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelModel_Sheet_Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelModel_Sheet_Cell* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelModel_Sheet_Cell* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelModel_Sheet_Cell>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExcelModel_Sheet_Cell& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExcelModel_Sheet_Cell& from) {
    ExcelModel_Sheet_Cell::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelModel_Sheet_Cell* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelModel.Sheet.Cell";
  }
  protected:
  explicit ExcelModel_Sheet_Cell(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // string val = 3;
  void clear_val() ;
  const std::string& val() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_val(Arg_&& arg, Args_... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* ptr);

  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(
      const std::string& value);
  std::string* _internal_mutable_val();

  public:
  // uint32 row = 1;
  void clear_row() ;
  ::uint32_t row() const;
  void set_row(::uint32_t value);

  private:
  ::uint32_t _internal_row() const;
  void _internal_set_row(::uint32_t value);

  public:
  // uint32 col = 2;
  void clear_col() ;
  ::uint32_t col() const;
  void set_col(::uint32_t value);

  private:
  ::uint32_t _internal_col() const;
  void _internal_set_col(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelModel.Sheet.Cell)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr val_;
    ::uint32_t row_;
    ::uint32_t col_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelModel_Sheet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelModel.Sheet) */ {
 public:
  inline ExcelModel_Sheet() : ExcelModel_Sheet(nullptr) {}
  ~ExcelModel_Sheet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelModel_Sheet(::google::protobuf::internal::ConstantInitialized);

  ExcelModel_Sheet(const ExcelModel_Sheet& from);
  ExcelModel_Sheet(ExcelModel_Sheet&& from) noexcept
    : ExcelModel_Sheet() {
    *this = ::std::move(from);
  }

  inline ExcelModel_Sheet& operator=(const ExcelModel_Sheet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelModel_Sheet& operator=(ExcelModel_Sheet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelModel_Sheet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelModel_Sheet* internal_default_instance() {
    return reinterpret_cast<const ExcelModel_Sheet*>(
               &_ExcelModel_Sheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExcelModel_Sheet& a, ExcelModel_Sheet& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelModel_Sheet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelModel_Sheet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelModel_Sheet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelModel_Sheet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExcelModel_Sheet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExcelModel_Sheet& from) {
    ExcelModel_Sheet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelModel_Sheet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelModel.Sheet";
  }
  protected:
  explicit ExcelModel_Sheet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExcelModel_Sheet_Cell Cell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;

  public:
  void clear_cells() ;
  ::palm::lily::v1::ExcelModel_Sheet_Cell* mutable_cells(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >*
      mutable_cells();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet_Cell>& _internal_cells() const;
  ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet_Cell>* _internal_mutable_cells();
  public:
  const ::palm::lily::v1::ExcelModel_Sheet_Cell& cells(int index) const;
  ::palm::lily::v1::ExcelModel_Sheet_Cell* add_cells();
  const ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >&
      cells() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelModel.Sheet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell > cells_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class ExcelModel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelModel) */ {
 public:
  inline ExcelModel() : ExcelModel(nullptr) {}
  ~ExcelModel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExcelModel(::google::protobuf::internal::ConstantInitialized);

  ExcelModel(const ExcelModel& from);
  ExcelModel(ExcelModel&& from) noexcept
    : ExcelModel() {
    *this = ::std::move(from);
  }

  inline ExcelModel& operator=(const ExcelModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelModel& operator=(ExcelModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelModel* internal_default_instance() {
    return reinterpret_cast<const ExcelModel*>(
               &_ExcelModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExcelModel& a, ExcelModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelModel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelModel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelModel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExcelModel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExcelModel& from) {
    ExcelModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelModel* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.ExcelModel";
  }
  protected:
  explicit ExcelModel(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExcelModel_Sheet Sheet;

  // accessors -------------------------------------------------------

  enum : int {
    kSheetsFieldNumber = 1,
  };
  // repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
  int sheets_size() const;
  private:
  int _internal_sheets_size() const;

  public:
  void clear_sheets() ;
  ::palm::lily::v1::ExcelModel_Sheet* mutable_sheets(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >*
      mutable_sheets();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet>& _internal_sheets() const;
  ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet>* _internal_mutable_sheets();
  public:
  const ::palm::lily::v1::ExcelModel_Sheet& sheets(int index) const;
  ::palm::lily::v1::ExcelModel_Sheet* add_sheets();
  const ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >&
      sheets() const;
  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelModel)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet > sheets_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class TexToRequest_FilesEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TexToRequest_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::google::protobuf::internal::MapEntry<TexToRequest_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES> SuperType;
  TexToRequest_FilesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TexToRequest_FilesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TexToRequest_FilesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TexToRequest_FilesEntry_DoNotUse& other);
  static const TexToRequest_FilesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TexToRequest_FilesEntry_DoNotUse*>(&_TexToRequest_FilesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "palm.lily.v1.TexToRequest.FilesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TexToRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.TexToRequest) */ {
 public:
  inline TexToRequest() : TexToRequest(nullptr) {}
  ~TexToRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TexToRequest(::google::protobuf::internal::ConstantInitialized);

  TexToRequest(const TexToRequest& from);
  TexToRequest(TexToRequest&& from) noexcept
    : TexToRequest() {
    *this = ::std::move(from);
  }

  inline TexToRequest& operator=(const TexToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexToRequest& operator=(TexToRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TexToRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TexToRequest* internal_default_instance() {
    return reinterpret_cast<const TexToRequest*>(
               &_TexToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TexToRequest& a, TexToRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TexToRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TexToRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TexToRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TexToRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TexToRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TexToRequest& from) {
    TexToRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TexToRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.TexToRequest";
  }
  protected:
  explicit TexToRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // map<string, bytes> files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  const ::google::protobuf::Map<std::string, std::string>& files() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_files();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_files() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_files();

  public:
  // @@protoc_insertion_point(class_scope:palm.lily.v1.TexToRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<TexToRequest_FilesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES>
        files_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};// -------------------------------------------------------------------

class EpubBuildRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lily.v1.EpubBuildRequest) */ {
 public:
  inline EpubBuildRequest() : EpubBuildRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EpubBuildRequest(::google::protobuf::internal::ConstantInitialized);

  EpubBuildRequest(const EpubBuildRequest& from);
  EpubBuildRequest(EpubBuildRequest&& from) noexcept
    : EpubBuildRequest() {
    *this = ::std::move(from);
  }

  inline EpubBuildRequest& operator=(const EpubBuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpubBuildRequest& operator=(EpubBuildRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpubBuildRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpubBuildRequest* internal_default_instance() {
    return reinterpret_cast<const EpubBuildRequest*>(
               &_EpubBuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EpubBuildRequest& a, EpubBuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EpubBuildRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpubBuildRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpubBuildRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpubBuildRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EpubBuildRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EpubBuildRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lily.v1.EpubBuildRequest";
  }
  protected:
  explicit EpubBuildRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lily.v1.EpubBuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lily_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// File

// string bucket = 1;
inline void File::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& File::bucket() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.File.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void File::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.File.bucket)
}
inline std::string* File::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.File.bucket)
  return _s;
}
inline const std::string& File::_internal_bucket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bucket_.Get();
}
inline void File::_internal_set_bucket(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_bucket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bucket_.Mutable( GetArenaForAllocation());
}
inline std::string* File::release_bucket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lily.v1.File.bucket)
  return _impl_.bucket_.Release();
}
inline void File::set_allocated_bucket(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bucket_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.File.bucket)
}

// string name = 2;
inline void File::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.File.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void File::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* File::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lily.v1.File.name)
  return _impl_.name_.Release();
}
inline void File::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.File.name)
}

// string content_type = 9;
inline void File::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& File::content_type() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.File.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void File::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.File.content_type)
}
inline std::string* File::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.File.content_type)
  return _s;
}
inline const std::string& File::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_type_.Get();
}
inline void File::_internal_set_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* File::release_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lily.v1.File.content_type)
  return _impl_.content_type_.Release();
}
inline void File::set_allocated_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.File.content_type)
}

// -------------------------------------------------------------------

// ExcelModel_Sheet_Cell

// uint32 row = 1;
inline void ExcelModel_Sheet_Cell::clear_row() {
  _impl_.row_ = 0u;
}
inline ::uint32_t ExcelModel_Sheet_Cell::row() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.Cell.row)
  return _internal_row();
}
inline void ExcelModel_Sheet_Cell::set_row(::uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.Cell.row)
}
inline ::uint32_t ExcelModel_Sheet_Cell::_internal_row() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.row_;
}
inline void ExcelModel_Sheet_Cell::_internal_set_row(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.row_ = value;
}

// uint32 col = 2;
inline void ExcelModel_Sheet_Cell::clear_col() {
  _impl_.col_ = 0u;
}
inline ::uint32_t ExcelModel_Sheet_Cell::col() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.Cell.col)
  return _internal_col();
}
inline void ExcelModel_Sheet_Cell::set_col(::uint32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.Cell.col)
}
inline ::uint32_t ExcelModel_Sheet_Cell::_internal_col() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.col_;
}
inline void ExcelModel_Sheet_Cell::_internal_set_col(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.col_ = value;
}

// string val = 3;
inline void ExcelModel_Sheet_Cell::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& ExcelModel_Sheet_Cell::val() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.Cell.val)
  return _internal_val();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExcelModel_Sheet_Cell::set_val(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.val_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.Cell.val)
}
inline std::string* ExcelModel_Sheet_Cell::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.Sheet.Cell.val)
  return _s;
}
inline const std::string& ExcelModel_Sheet_Cell::_internal_val() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.val_.Get();
}
inline void ExcelModel_Sheet_Cell::_internal_set_val(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet_Cell::_internal_mutable_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.val_.Mutable( GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet_Cell::release_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelModel.Sheet.Cell.val)
  return _impl_.val_.Release();
}
inline void ExcelModel_Sheet_Cell::set_allocated_val(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.val_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.val_.IsDefault()) {
          _impl_.val_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelModel.Sheet.Cell.val)
}

// -------------------------------------------------------------------

// ExcelModel_Sheet

// string name = 1;
inline void ExcelModel_Sheet::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ExcelModel_Sheet::name() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExcelModel_Sheet::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.name)
}
inline std::string* ExcelModel_Sheet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.Sheet.name)
  return _s;
}
inline const std::string& ExcelModel_Sheet::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ExcelModel_Sheet::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelModel.Sheet.name)
  return _impl_.name_.Release();
}
inline void ExcelModel_Sheet::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelModel.Sheet.name)
}

// repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
inline int ExcelModel_Sheet::_internal_cells_size() const {
  return _internal_cells().size();
}
inline int ExcelModel_Sheet::cells_size() const {
  return _internal_cells_size();
}
inline void ExcelModel_Sheet::clear_cells() {
  _internal_mutable_cells()->Clear();
}
inline ::palm::lily::v1::ExcelModel_Sheet_Cell* ExcelModel_Sheet::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.Sheet.cells)
  return _internal_mutable_cells()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >*
ExcelModel_Sheet::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:palm.lily.v1.ExcelModel.Sheet.cells)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cells();
}
inline const ::palm::lily::v1::ExcelModel_Sheet_Cell& ExcelModel_Sheet::cells(int index) const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.cells)
    return _internal_cells().Get(index);
}
inline ::palm::lily::v1::ExcelModel_Sheet_Cell* ExcelModel_Sheet::add_cells() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::lily::v1::ExcelModel_Sheet_Cell* _add = _internal_mutable_cells()->Add();
  // @@protoc_insertion_point(field_add:palm.lily.v1.ExcelModel.Sheet.cells)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >&
ExcelModel_Sheet::cells() const {
  // @@protoc_insertion_point(field_list:palm.lily.v1.ExcelModel.Sheet.cells)
  return _internal_cells();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet_Cell>&
ExcelModel_Sheet::_internal_cells() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cells_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet_Cell>*
ExcelModel_Sheet::_internal_mutable_cells() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cells_;
}

// -------------------------------------------------------------------

// ExcelModel

// repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
inline int ExcelModel::_internal_sheets_size() const {
  return _internal_sheets().size();
}
inline int ExcelModel::sheets_size() const {
  return _internal_sheets_size();
}
inline void ExcelModel::clear_sheets() {
  _internal_mutable_sheets()->Clear();
}
inline ::palm::lily::v1::ExcelModel_Sheet* ExcelModel::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.sheets)
  return _internal_mutable_sheets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >*
ExcelModel::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:palm.lily.v1.ExcelModel.sheets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sheets();
}
inline const ::palm::lily::v1::ExcelModel_Sheet& ExcelModel::sheets(int index) const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.sheets)
    return _internal_sheets().Get(index);
}
inline ::palm::lily::v1::ExcelModel_Sheet* ExcelModel::add_sheets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::lily::v1::ExcelModel_Sheet* _add = _internal_mutable_sheets()->Add();
  // @@protoc_insertion_point(field_add:palm.lily.v1.ExcelModel.sheets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >&
ExcelModel::sheets() const {
  // @@protoc_insertion_point(field_list:palm.lily.v1.ExcelModel.sheets)
  return _internal_sheets();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet>&
ExcelModel::_internal_sheets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sheets_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::lily::v1::ExcelModel_Sheet>*
ExcelModel::_internal_mutable_sheets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sheets_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TexToRequest

// map<string, bytes> files = 1;
inline int TexToRequest::_internal_files_size() const {
  return _internal_files().size();
}
inline int TexToRequest::files_size() const {
  return _internal_files_size();
}
inline void TexToRequest::clear_files() {
  _impl_.files_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TexToRequest::_internal_files() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.files_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TexToRequest::files() const {
  // @@protoc_insertion_point(field_map:palm.lily.v1.TexToRequest.files)
  return _internal_files();
}
inline ::google::protobuf::Map<std::string, std::string>* TexToRequest::_internal_mutable_files() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.files_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TexToRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:palm.lily.v1.TexToRequest.files)
  return _internal_mutable_files();
}

// -------------------------------------------------------------------

// EpubBuildRequest

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lily
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lily_2eproto_2epb_2eh
