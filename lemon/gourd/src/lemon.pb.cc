// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lemon.proto

#include "lemon.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace palm {
namespace lemon {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR SiteLayoutRequest::SiteLayoutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locale_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.theme_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteLayoutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutRequestDefaultTypeInternal() {}
  union {
    SiteLayoutRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutRequestDefaultTypeInternal _SiteLayoutRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteLayoutResponse::SiteLayoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layout_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SiteLayoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteLayoutResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteLayoutResponseDefaultTypeInternal() {}
  union {
    SiteLayoutResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteRssResponse_ItemsEntry_DoNotUse::SiteRssResponse_ItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SiteRssResponse_ItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteRssResponse_ItemsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteRssResponse_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SiteRssResponse_ItemsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteRssResponse_ItemsEntry_DoNotUseDefaultTypeInternal _SiteRssResponse_ItemsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteRssResponse::SiteRssResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteRssResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteRssResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteRssResponseDefaultTypeInternal() {}
  union {
    SiteRssResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteRssResponseDefaultTypeInternal _SiteRssResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteSitemapResponse_ItemsEntry_DoNotUse::SiteSitemapResponse_ItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SiteSitemapResponse_ItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSitemapResponse_ItemsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSitemapResponse_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SiteSitemapResponse_ItemsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSitemapResponse_ItemsEntry_DoNotUseDefaultTypeInternal _SiteSitemapResponse_ItemsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteSitemapResponse::SiteSitemapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteSitemapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteSitemapResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteSitemapResponseDefaultTypeInternal() {}
  union {
    SiteSitemapResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteSitemapResponseDefaultTypeInternal _SiteSitemapResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteShowPageRequest::SiteShowPageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slug_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteShowPageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteShowPageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteShowPageRequestDefaultTypeInternal() {}
  union {
    SiteShowPageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteShowPageRequestDefaultTypeInternal _SiteShowPageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteShowPageResponse_Link::SiteShowPageResponse_Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slug_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteShowPageResponse_LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteShowPageResponse_LinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteShowPageResponse_LinkDefaultTypeInternal() {}
  union {
    SiteShowPageResponse_Link _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteShowPageResponse_LinkDefaultTypeInternal _SiteShowPageResponse_Link_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteShowPageResponse::SiteShowPageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.related_)*/{}
  , /*decltype(_impl_.page_)*/nullptr} {}
struct SiteShowPageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteShowPageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteShowPageResponseDefaultTypeInternal() {}
  union {
    SiteShowPageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteShowPageResponseDefaultTypeInternal _SiteShowPageResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteHomePageRequest::SiteHomePageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locale_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.theme_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SiteHomePageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteHomePageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteHomePageRequestDefaultTypeInternal() {}
  union {
    SiteHomePageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteHomePageRequestDefaultTypeInternal _SiteHomePageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SiteHomePageResponse::SiteHomePageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SiteHomePageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteHomePageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteHomePageResponseDefaultTypeInternal() {}
  union {
    SiteHomePageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteHomePageResponseDefaultTypeInternal _SiteHomePageResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CleanWhiteLayout::CleanWhiteLayout(
    ::_pbi::ConstantInitialized) {}
struct CleanWhiteLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanWhiteLayoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanWhiteLayoutDefaultTypeInternal() {}
  union {
    CleanWhiteLayout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanWhiteLayoutDefaultTypeInternal _CleanWhiteLayout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DocsyLayout::DocsyLayout(
    ::_pbi::ConstantInitialized) {}
struct DocsyLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocsyLayoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocsyLayoutDefaultTypeInternal() {}
  union {
    DocsyLayout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocsyLayoutDefaultTypeInternal _DocsyLayout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GantryLayout::GantryLayout(
    ::_pbi::ConstantInitialized) {}
struct GantryLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GantryLayoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GantryLayoutDefaultTypeInternal() {}
  union {
    GantryLayout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GantryLayoutDefaultTypeInternal _GantryLayout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HinodeLayout::HinodeLayout(
    ::_pbi::ConstantInitialized) {}
struct HinodeLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HinodeLayoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HinodeLayoutDefaultTypeInternal() {}
  union {
    HinodeLayout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HinodeLayoutDefaultTypeInternal _HinodeLayout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UniversalLayout::UniversalLayout(
    ::_pbi::ConstantInitialized) {}
struct UniversalLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UniversalLayoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UniversalLayoutDefaultTypeInternal() {}
  union {
    UniversalLayout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UniversalLayoutDefaultTypeInternal _UniversalLayout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR XCorporationLayout::XCorporationLayout(
    ::_pbi::ConstantInitialized) {}
struct XCorporationLayoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XCorporationLayoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~XCorporationLayoutDefaultTypeInternal() {}
  union {
    XCorporationLayout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XCorporationLayoutDefaultTypeInternal _XCorporationLayout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CleanWhiteHomePage::CleanWhiteHomePage(
    ::_pbi::ConstantInitialized) {}
struct CleanWhiteHomePageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanWhiteHomePageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanWhiteHomePageDefaultTypeInternal() {}
  union {
    CleanWhiteHomePage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanWhiteHomePageDefaultTypeInternal _CleanWhiteHomePage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DocsyHomePage::DocsyHomePage(
    ::_pbi::ConstantInitialized) {}
struct DocsyHomePageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocsyHomePageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocsyHomePageDefaultTypeInternal() {}
  union {
    DocsyHomePage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocsyHomePageDefaultTypeInternal _DocsyHomePage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GantryHomePage::GantryHomePage(
    ::_pbi::ConstantInitialized) {}
struct GantryHomePageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GantryHomePageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GantryHomePageDefaultTypeInternal() {}
  union {
    GantryHomePage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GantryHomePageDefaultTypeInternal _GantryHomePage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HinodeHomePage::HinodeHomePage(
    ::_pbi::ConstantInitialized) {}
struct HinodeHomePageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HinodeHomePageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HinodeHomePageDefaultTypeInternal() {}
  union {
    HinodeHomePage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HinodeHomePageDefaultTypeInternal _HinodeHomePage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UniversalHomePage::UniversalHomePage(
    ::_pbi::ConstantInitialized) {}
struct UniversalHomePageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UniversalHomePageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UniversalHomePageDefaultTypeInternal() {}
  union {
    UniversalHomePage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UniversalHomePageDefaultTypeInternal _UniversalHomePage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR XCorporationHomePage::XCorporationHomePage(
    ::_pbi::ConstantInitialized) {}
struct XCorporationHomePageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XCorporationHomePageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~XCorporationHomePageDefaultTypeInternal() {}
  union {
    XCorporationHomePage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XCorporationHomePageDefaultTypeInternal _XCorporationHomePage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Rss_Link::Rss_Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/nullptr} {}
struct Rss_LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rss_LinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rss_LinkDefaultTypeInternal() {}
  union {
    Rss_Link _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rss_LinkDefaultTypeInternal _Rss_Link_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Rss::Rss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_.home_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RssDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RssDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RssDefaultTypeInternal() {}
  union {
    Rss _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RssDefaultTypeInternal _Rss_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sitemap_Link::Sitemap_Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.change_freq_)*/ 0

  , /*decltype(_impl_.priority_)*/ 0
} {}
struct Sitemap_LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sitemap_LinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sitemap_LinkDefaultTypeInternal() {}
  union {
    Sitemap_Link _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sitemap_LinkDefaultTypeInternal _Sitemap_Link_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sitemap_UrlSet::Sitemap_UrlSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sitemap_UrlSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sitemap_UrlSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sitemap_UrlSetDefaultTypeInternal() {}
  union {
    Sitemap_UrlSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sitemap_UrlSetDefaultTypeInternal _Sitemap_UrlSet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sitemap_Index::Sitemap_Index(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sitemap_IndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sitemap_IndexDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sitemap_IndexDefaultTypeInternal() {}
  union {
    Sitemap_Index _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sitemap_IndexDefaultTypeInternal _Sitemap_Index_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sitemap::Sitemap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.home_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.body_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SitemapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SitemapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SitemapDefaultTypeInternal() {}
  union {
    Sitemap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SitemapDefaultTypeInternal _Sitemap_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Page::Page(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slug_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageDefaultTypeInternal() {}
  union {
    Page _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageDefaultTypeInternal _Page_default_instance_;
}  // namespace v1
}  // namespace lemon
}  // namespace palm
static ::_pb::Metadata file_level_metadata_lemon_2eproto[30];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_lemon_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_lemon_2eproto = nullptr;
const ::uint32_t TableStruct_lemon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutRequest, _impl_.locale_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutRequest, _impl_.theme_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutResponse, _impl_.layout_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteRssResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteRssResponse, _impl_.items_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteSitemapResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteSitemapResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageRequest, _impl_.slug_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse_Link, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse_Link, _impl_.slug_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse_Link, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse, _impl_.page_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteShowPageResponse, _impl_.related_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageRequest, _impl_.locale_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageRequest, _impl_.theme_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageResponse, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::CleanWhiteLayout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::DocsyLayout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::GantryLayout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::HinodeLayout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::UniversalLayout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::XCorporationLayout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::CleanWhiteHomePage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::DocsyHomePage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::GantryHomePage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::HinodeHomePage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::UniversalHomePage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::XCorporationHomePage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss_Link, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss_Link, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss_Link, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss_Link, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss_Link, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss_Link, _impl_.updated_at_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss, _impl_.home_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Rss, _impl_.links_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Link, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Link, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Link, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Link, _impl_.change_freq_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Link, _impl_.priority_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Link, _impl_.updated_at_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_UrlSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_UrlSet, _impl_.links_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Index, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap_Index, _impl_.links_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap, _impl_.home_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap, _impl_.body_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Page, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Page, _impl_.slug_),
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Page, _impl_.title_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::palm::lemon::v1::SiteLayoutRequest)},
        { 10, -1, -1, sizeof(::palm::lemon::v1::SiteLayoutResponse)},
        { 25, 35, -1, sizeof(::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse)},
        { 37, -1, -1, sizeof(::palm::lemon::v1::SiteRssResponse)},
        { 46, 56, -1, sizeof(::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse)},
        { 58, -1, -1, sizeof(::palm::lemon::v1::SiteSitemapResponse)},
        { 67, -1, -1, sizeof(::palm::lemon::v1::SiteShowPageRequest)},
        { 76, -1, -1, sizeof(::palm::lemon::v1::SiteShowPageResponse_Link)},
        { 86, 96, -1, sizeof(::palm::lemon::v1::SiteShowPageResponse)},
        { 98, -1, -1, sizeof(::palm::lemon::v1::SiteHomePageRequest)},
        { 108, -1, -1, sizeof(::palm::lemon::v1::SiteHomePageResponse)},
        { 123, -1, -1, sizeof(::palm::lemon::v1::CleanWhiteLayout)},
        { 131, -1, -1, sizeof(::palm::lemon::v1::DocsyLayout)},
        { 139, -1, -1, sizeof(::palm::lemon::v1::GantryLayout)},
        { 147, -1, -1, sizeof(::palm::lemon::v1::HinodeLayout)},
        { 155, -1, -1, sizeof(::palm::lemon::v1::UniversalLayout)},
        { 163, -1, -1, sizeof(::palm::lemon::v1::XCorporationLayout)},
        { 171, -1, -1, sizeof(::palm::lemon::v1::CleanWhiteHomePage)},
        { 179, -1, -1, sizeof(::palm::lemon::v1::DocsyHomePage)},
        { 187, -1, -1, sizeof(::palm::lemon::v1::GantryHomePage)},
        { 195, -1, -1, sizeof(::palm::lemon::v1::HinodeHomePage)},
        { 203, -1, -1, sizeof(::palm::lemon::v1::UniversalHomePage)},
        { 211, -1, -1, sizeof(::palm::lemon::v1::XCorporationHomePage)},
        { 219, 231, -1, sizeof(::palm::lemon::v1::Rss_Link)},
        { 235, -1, -1, sizeof(::palm::lemon::v1::Rss)},
        { 247, 259, -1, sizeof(::palm::lemon::v1::Sitemap_Link)},
        { 263, -1, -1, sizeof(::palm::lemon::v1::Sitemap_UrlSet)},
        { 272, -1, -1, sizeof(::palm::lemon::v1::Sitemap_Index)},
        { 281, -1, -1, sizeof(::palm::lemon::v1::Sitemap)},
        { 293, -1, -1, sizeof(::palm::lemon::v1::Page)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::lemon::v1::_SiteLayoutRequest_default_instance_._instance,
    &::palm::lemon::v1::_SiteLayoutResponse_default_instance_._instance,
    &::palm::lemon::v1::_SiteRssResponse_ItemsEntry_DoNotUse_default_instance_._instance,
    &::palm::lemon::v1::_SiteRssResponse_default_instance_._instance,
    &::palm::lemon::v1::_SiteSitemapResponse_ItemsEntry_DoNotUse_default_instance_._instance,
    &::palm::lemon::v1::_SiteSitemapResponse_default_instance_._instance,
    &::palm::lemon::v1::_SiteShowPageRequest_default_instance_._instance,
    &::palm::lemon::v1::_SiteShowPageResponse_Link_default_instance_._instance,
    &::palm::lemon::v1::_SiteShowPageResponse_default_instance_._instance,
    &::palm::lemon::v1::_SiteHomePageRequest_default_instance_._instance,
    &::palm::lemon::v1::_SiteHomePageResponse_default_instance_._instance,
    &::palm::lemon::v1::_CleanWhiteLayout_default_instance_._instance,
    &::palm::lemon::v1::_DocsyLayout_default_instance_._instance,
    &::palm::lemon::v1::_GantryLayout_default_instance_._instance,
    &::palm::lemon::v1::_HinodeLayout_default_instance_._instance,
    &::palm::lemon::v1::_UniversalLayout_default_instance_._instance,
    &::palm::lemon::v1::_XCorporationLayout_default_instance_._instance,
    &::palm::lemon::v1::_CleanWhiteHomePage_default_instance_._instance,
    &::palm::lemon::v1::_DocsyHomePage_default_instance_._instance,
    &::palm::lemon::v1::_GantryHomePage_default_instance_._instance,
    &::palm::lemon::v1::_HinodeHomePage_default_instance_._instance,
    &::palm::lemon::v1::_UniversalHomePage_default_instance_._instance,
    &::palm::lemon::v1::_XCorporationHomePage_default_instance_._instance,
    &::palm::lemon::v1::_Rss_Link_default_instance_._instance,
    &::palm::lemon::v1::_Rss_default_instance_._instance,
    &::palm::lemon::v1::_Sitemap_Link_default_instance_._instance,
    &::palm::lemon::v1::_Sitemap_UrlSet_default_instance_._instance,
    &::palm::lemon::v1::_Sitemap_Index_default_instance_._instance,
    &::palm::lemon::v1::_Sitemap_default_instance_._instance,
    &::palm::lemon::v1::_Page_default_instance_._instance,
};
const char descriptor_table_protodef_lemon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013lemon.proto\022\rpalm.lemon.v1\032\033google/pro"
    "tobuf/empty.proto\032\037google/protobuf/times"
    "tamp.proto\032\036google/protobuf/duration.pro"
    "to\"H\n\021SiteLayoutRequest\022\016\n\006locale\030\001 \001(\t\022"
    "#\n\005theme\030\002 \001(\0162\024.palm.lemon.v1.Theme\"\322\002\n"
    "\022SiteLayoutResponse\0226\n\013clean_white\030\001 \001(\013"
    "2\037.palm.lemon.v1.CleanWhiteLayoutH\000\022+\n\005d"
    "ocsy\030\002 \001(\0132\032.palm.lemon.v1.DocsyLayoutH\000"
    "\022-\n\006gantry\030\003 \001(\0132\033.palm.lemon.v1.GantryL"
    "ayoutH\000\022-\n\006hinode\030\004 \001(\0132\033.palm.lemon.v1."
    "HinodeLayoutH\000\0223\n\tuniversal\030\005 \001(\0132\036.palm"
    ".lemon.v1.UniversalLayoutH\000\022:\n\rx_corpora"
    "tion\030\006 \001(\0132!.palm.lemon.v1.XCorporationL"
    "ayoutH\000B\010\n\006layout\"\215\001\n\017SiteRssResponse\0228\n"
    "\005items\030\001 \003(\0132).palm.lemon.v1.SiteRssResp"
    "onse.ItemsEntry\032@\n\nItemsEntry\022\013\n\003key\030\001 \001"
    "(\t\022!\n\005value\030\002 \001(\0132\022.palm.lemon.v1.Rss:\0028"
    "\001\"\231\001\n\023SiteSitemapResponse\022<\n\005items\030\001 \003(\013"
    "2-.palm.lemon.v1.SiteSitemapResponse.Ite"
    "msEntry\032D\n\nItemsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005va"
    "lue\030\002 \001(\0132\026.palm.lemon.v1.Sitemap:\0028\001\"#\n"
    "\023SiteShowPageRequest\022\014\n\004slug\030\001 \001(\t\"\231\001\n\024S"
    "iteShowPageResponse\022!\n\004page\030\001 \001(\0132\023.palm"
    ".lemon.v1.Page\0229\n\007related\030\002 \003(\0132(.palm.l"
    "emon.v1.SiteShowPageResponse.Link\032#\n\004Lin"
    "k\022\014\n\004slug\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\"J\n\023SiteHo"
    "mePageRequest\022\016\n\006locale\030\001 \001(\t\022#\n\005theme\030\002"
    " \001(\0162\024.palm.lemon.v1.Theme\"\341\002\n\024SiteHomeP"
    "ageResponse\0228\n\013clean_white\030\001 \001(\0132!.palm."
    "lemon.v1.CleanWhiteHomePageH\000\022-\n\005docsy\030\002"
    " \001(\0132\034.palm.lemon.v1.DocsyHomePageH\000\022/\n\006"
    "gantry\030\003 \001(\0132\035.palm.lemon.v1.GantryHomeP"
    "ageH\000\022/\n\006hinode\030\004 \001(\0132\035.palm.lemon.v1.Hi"
    "nodeHomePageH\000\0225\n\tuniversal\030\005 \001(\0132 .palm"
    ".lemon.v1.UniversalHomePageH\000\022<\n\rx_corpo"
    "ration\030\006 \001(\0132#.palm.lemon.v1.XCorporatio"
    "nHomePageH\000B\t\n\007payload\"\022\n\020CleanWhiteLayo"
    "ut\"\r\n\013DocsyLayout\"\016\n\014GantryLayout\"\016\n\014Hin"
    "odeLayout\"\021\n\017UniversalLayout\"\024\n\022XCorpora"
    "tionLayout\"\024\n\022CleanWhiteHomePage\"\017\n\rDocs"
    "yHomePage\"\020\n\016GantryHomePage\"\020\n\016HinodeHom"
    "ePage\"\023\n\021UniversalHomePage\"\026\n\024XCorporati"
    "onHomePage\"\311\001\n\003Rss\022\014\n\004home\030\001 \001(\t\022\r\n\005titl"
    "e\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022&\n\005links\030\t "
    "\003(\0132\027.palm.lemon.v1.Rss.Link\032h\n\004Link\022\014\n\004"
    "path\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013description"
    "\030\003 \001(\t\022.\n\nupdated_at\030\t \001(\0132\032.google.prot"
    "obuf.Timestamp\"\304\003\n\007Sitemap\022\014\n\004home\030\001 \001(\t"
    "\022/\n\006urlset\030\013 \001(\0132\035.palm.lemon.v1.Sitemap"
    ".UrlSetH\000\022-\n\005index\030\014 \001(\0132\034.palm.lemon.v1"
    ".Sitemap.IndexH\000\032\364\001\n\004Link\022\014\n\004path\030\001 \001(\t\022"
    ";\n\013change_freq\030\002 \001(\0162&.palm.lemon.v1.Sit"
    "emap.Link.ChangeFreq\022\020\n\010priority\030\003 \001(\002\022."
    "\n\nupdated_at\030\t \001(\0132\032.google.protobuf.Tim"
    "estamp\"_\n\nChangeFreq\022\t\n\005Never\020\000\022\n\n\006Alway"
    "s\020\001\022\n\n\006Hourly\020\002\022\t\n\005Daily\020\003\022\n\n\006Weekly\020\004\022\013"
    "\n\007Monthly\020\005\022\n\n\006Yearly\020\006\0324\n\006UrlSet\022*\n\005lin"
    "ks\030\001 \003(\0132\033.palm.lemon.v1.Sitemap.Link\032\026\n"
    "\005Index\022\r\n\005links\030\001 \003(\tB\006\n\004body\"#\n\004Page\022\014\n"
    "\004slug\030\001 \001(\t\022\r\n\005title\030\002 \001(\t*[\n\005Theme\022\r\n\tU"
    "niversal\020\000\022\016\n\nCleanWhite\020\001\022\t\n\005Docsy\020\002\022\n\n"
    "\006Gantry\020\003\022\n\n\006Hinode\020\004\022\020\n\014XCorporation\020\0052"
    "\222\003\n\004Site\022O\n\006Layout\022 .palm.lemon.v1.SiteL"
    "ayoutRequest\032!.palm.lemon.v1.SiteLayoutR"
    "esponse\"\000\022B\n\003Rss\022\031.google.protobuf.Durat"
    "ion\032\036.palm.lemon.v1.SiteRssResponse\"\000\022G\n"
    "\007Sitemap\022\026.google.protobuf.Empty\032\".palm."
    "lemon.v1.SiteSitemapResponse\"\000\022U\n\010ShowPa"
    "ge\022\".palm.lemon.v1.SiteShowPageRequest\032#"
    ".palm.lemon.v1.SiteShowPageResponse\"\000\022U\n"
    "\010HomePage\022\".palm.lemon.v1.SiteHomePageRe"
    "quest\032#.palm.lemon.v1.SiteHomePageRespon"
    "se\"\000B/\n+com.github.saturn_xiv.palm.plugi"
    "ns.lemon.v1P\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_lemon_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_lemon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lemon_2eproto = {
    false,
    false,
    2941,
    descriptor_table_protodef_lemon_2eproto,
    "lemon.proto",
    &descriptor_table_lemon_2eproto_once,
    descriptor_table_lemon_2eproto_deps,
    3,
    30,
    schemas,
    file_default_instances,
    TableStruct_lemon_2eproto::offsets,
    file_level_metadata_lemon_2eproto,
    file_level_enum_descriptors_lemon_2eproto,
    file_level_service_descriptors_lemon_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lemon_2eproto_getter() {
  return &descriptor_table_lemon_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lemon_2eproto(&descriptor_table_lemon_2eproto);
namespace palm {
namespace lemon {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sitemap_Link_ChangeFreq_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lemon_2eproto);
  return file_level_enum_descriptors_lemon_2eproto[0];
}
bool Sitemap_Link_ChangeFreq_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Never;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Always;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Hourly;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Daily;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Weekly;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Monthly;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::Yearly;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::ChangeFreq_MIN;
constexpr Sitemap_Link_ChangeFreq Sitemap_Link::ChangeFreq_MAX;
constexpr int Sitemap_Link::ChangeFreq_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Theme_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lemon_2eproto);
  return file_level_enum_descriptors_lemon_2eproto[1];
}
bool Theme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class SiteLayoutRequest::_Internal {
 public:
};

SiteLayoutRequest::SiteLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteLayoutRequest)
}
SiteLayoutRequest::SiteLayoutRequest(const SiteLayoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locale_) {}

    , decltype(_impl_.theme_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.locale_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    _this->_impl_.locale_.Set(from._internal_locale(), _this->GetArenaForAllocation());
  }
  _this->_impl_.theme_ = from._impl_.theme_;
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteLayoutRequest)
}

inline void SiteLayoutRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.locale_) {}

    , decltype(_impl_.theme_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.locale_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteLayoutRequest::~SiteLayoutRequest() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteLayoutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locale_.Destroy();
}

void SiteLayoutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteLayoutRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locale_.ClearToEmpty();
  _impl_.theme_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string locale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.SiteLayoutRequest.locale"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.Theme theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_theme(static_cast<::palm::lemon::v1::Theme>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteLayoutRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteLayoutRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string locale = 1;
  if (!this->_internal_locale().empty()) {
    const std::string& _s = this->_internal_locale();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteLayoutRequest.locale");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .palm.lemon.v1.Theme theme = 2;
  if (this->_internal_theme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_theme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteLayoutRequest)
  return target;
}

::size_t SiteLayoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteLayoutRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string locale = 1;
  if (!this->_internal_locale().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_locale());
  }

  // .palm.lemon.v1.Theme theme = 2;
  if (this->_internal_theme() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_theme());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutRequest::GetClassData() const { return &_class_data_; }


void SiteLayoutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutRequest*>(&to_msg);
  auto& from = static_cast<const SiteLayoutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteLayoutRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_locale().empty()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (from._internal_theme() != 0) {
    _this->_internal_set_theme(from._internal_theme());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutRequest::CopyFrom(const SiteLayoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteLayoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutRequest::IsInitialized() const {
  return true;
}

void SiteLayoutRequest::InternalSwap(SiteLayoutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.locale_, lhs_arena,
                                       &other->_impl_.locale_, rhs_arena);
  swap(_impl_.theme_, other->_impl_.theme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[0]);
}
// ===================================================================

class SiteLayoutResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteLayoutResponse, _impl_._oneof_case_);
  static const ::palm::lemon::v1::CleanWhiteLayout& clean_white(const SiteLayoutResponse* msg);
  static const ::palm::lemon::v1::DocsyLayout& docsy(const SiteLayoutResponse* msg);
  static const ::palm::lemon::v1::GantryLayout& gantry(const SiteLayoutResponse* msg);
  static const ::palm::lemon::v1::HinodeLayout& hinode(const SiteLayoutResponse* msg);
  static const ::palm::lemon::v1::UniversalLayout& universal(const SiteLayoutResponse* msg);
  static const ::palm::lemon::v1::XCorporationLayout& x_corporation(const SiteLayoutResponse* msg);
};

const ::palm::lemon::v1::CleanWhiteLayout&
SiteLayoutResponse::_Internal::clean_white(const SiteLayoutResponse* msg) {
  return *msg->_impl_.layout_.clean_white_;
}
const ::palm::lemon::v1::DocsyLayout&
SiteLayoutResponse::_Internal::docsy(const SiteLayoutResponse* msg) {
  return *msg->_impl_.layout_.docsy_;
}
const ::palm::lemon::v1::GantryLayout&
SiteLayoutResponse::_Internal::gantry(const SiteLayoutResponse* msg) {
  return *msg->_impl_.layout_.gantry_;
}
const ::palm::lemon::v1::HinodeLayout&
SiteLayoutResponse::_Internal::hinode(const SiteLayoutResponse* msg) {
  return *msg->_impl_.layout_.hinode_;
}
const ::palm::lemon::v1::UniversalLayout&
SiteLayoutResponse::_Internal::universal(const SiteLayoutResponse* msg) {
  return *msg->_impl_.layout_.universal_;
}
const ::palm::lemon::v1::XCorporationLayout&
SiteLayoutResponse::_Internal::x_corporation(const SiteLayoutResponse* msg) {
  return *msg->_impl_.layout_.x_corporation_;
}
void SiteLayoutResponse::set_allocated_clean_white(::palm::lemon::v1::CleanWhiteLayout* clean_white) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_layout();
  if (clean_white) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clean_white);
    if (message_arena != submessage_arena) {
      clean_white = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clean_white, submessage_arena);
    }
    set_has_clean_white();
    _impl_.layout_.clean_white_ = clean_white;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutResponse.clean_white)
}
void SiteLayoutResponse::set_allocated_docsy(::palm::lemon::v1::DocsyLayout* docsy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_layout();
  if (docsy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(docsy);
    if (message_arena != submessage_arena) {
      docsy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, docsy, submessage_arena);
    }
    set_has_docsy();
    _impl_.layout_.docsy_ = docsy;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutResponse.docsy)
}
void SiteLayoutResponse::set_allocated_gantry(::palm::lemon::v1::GantryLayout* gantry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_layout();
  if (gantry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gantry);
    if (message_arena != submessage_arena) {
      gantry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gantry, submessage_arena);
    }
    set_has_gantry();
    _impl_.layout_.gantry_ = gantry;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutResponse.gantry)
}
void SiteLayoutResponse::set_allocated_hinode(::palm::lemon::v1::HinodeLayout* hinode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_layout();
  if (hinode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hinode);
    if (message_arena != submessage_arena) {
      hinode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hinode, submessage_arena);
    }
    set_has_hinode();
    _impl_.layout_.hinode_ = hinode;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutResponse.hinode)
}
void SiteLayoutResponse::set_allocated_universal(::palm::lemon::v1::UniversalLayout* universal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_layout();
  if (universal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(universal);
    if (message_arena != submessage_arena) {
      universal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, universal, submessage_arena);
    }
    set_has_universal();
    _impl_.layout_.universal_ = universal;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutResponse.universal)
}
void SiteLayoutResponse::set_allocated_x_corporation(::palm::lemon::v1::XCorporationLayout* x_corporation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_layout();
  if (x_corporation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(x_corporation);
    if (message_arena != submessage_arena) {
      x_corporation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x_corporation, submessage_arena);
    }
    set_has_x_corporation();
    _impl_.layout_.x_corporation_ = x_corporation;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutResponse.x_corporation)
}
SiteLayoutResponse::SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteLayoutResponse)
}
SiteLayoutResponse::SiteLayoutResponse(const SiteLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteLayoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layout_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_layout();
  switch (from.layout_case()) {
    case kCleanWhite: {
      _this->_internal_mutable_clean_white()->::palm::lemon::v1::CleanWhiteLayout::MergeFrom(
          from._internal_clean_white());
      break;
    }
    case kDocsy: {
      _this->_internal_mutable_docsy()->::palm::lemon::v1::DocsyLayout::MergeFrom(
          from._internal_docsy());
      break;
    }
    case kGantry: {
      _this->_internal_mutable_gantry()->::palm::lemon::v1::GantryLayout::MergeFrom(
          from._internal_gantry());
      break;
    }
    case kHinode: {
      _this->_internal_mutable_hinode()->::palm::lemon::v1::HinodeLayout::MergeFrom(
          from._internal_hinode());
      break;
    }
    case kUniversal: {
      _this->_internal_mutable_universal()->::palm::lemon::v1::UniversalLayout::MergeFrom(
          from._internal_universal());
      break;
    }
    case kXCorporation: {
      _this->_internal_mutable_x_corporation()->::palm::lemon::v1::XCorporationLayout::MergeFrom(
          from._internal_x_corporation());
      break;
    }
    case LAYOUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteLayoutResponse)
}

inline void SiteLayoutResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.layout_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_layout();
}

SiteLayoutResponse::~SiteLayoutResponse() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteLayoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteLayoutResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_layout()) {
    clear_layout();
  }
}

void SiteLayoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteLayoutResponse::clear_layout() {
// @@protoc_insertion_point(one_of_clear_start:palm.lemon.v1.SiteLayoutResponse)
  switch (layout_case()) {
    case kCleanWhite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.layout_.clean_white_;
      }
      break;
    }
    case kDocsy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.layout_.docsy_;
      }
      break;
    }
    case kGantry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.layout_.gantry_;
      }
      break;
    }
    case kHinode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.layout_.hinode_;
      }
      break;
    }
    case kUniversal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.layout_.universal_;
      }
      break;
    }
    case kXCorporation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.layout_.x_corporation_;
      }
      break;
    }
    case LAYOUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LAYOUT_NOT_SET;
}


void SiteLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteLayoutResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_layout();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteLayoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.lemon.v1.CleanWhiteLayout clean_white = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clean_white(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.DocsyLayout docsy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_docsy(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.GantryLayout gantry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gantry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.HinodeLayout hinode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hinode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.UniversalLayout universal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_universal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.XCorporationLayout x_corporation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_corporation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteLayoutResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteLayoutResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (layout_case()) {
    case kCleanWhite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::clean_white(this),
          _Internal::clean_white(this).GetCachedSize(), target, stream);
      break;
    }
    case kDocsy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::docsy(this),
          _Internal::docsy(this).GetCachedSize(), target, stream);
      break;
    }
    case kGantry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::gantry(this),
          _Internal::gantry(this).GetCachedSize(), target, stream);
      break;
    }
    case kHinode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::hinode(this),
          _Internal::hinode(this).GetCachedSize(), target, stream);
      break;
    }
    case kUniversal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::universal(this),
          _Internal::universal(this).GetCachedSize(), target, stream);
      break;
    }
    case kXCorporation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::x_corporation(this),
          _Internal::x_corporation(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteLayoutResponse)
  return target;
}

::size_t SiteLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteLayoutResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (layout_case()) {
    // .palm.lemon.v1.CleanWhiteLayout clean_white = 1;
    case kCleanWhite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_.clean_white_);
      break;
    }
    // .palm.lemon.v1.DocsyLayout docsy = 2;
    case kDocsy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_.docsy_);
      break;
    }
    // .palm.lemon.v1.GantryLayout gantry = 3;
    case kGantry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_.gantry_);
      break;
    }
    // .palm.lemon.v1.HinodeLayout hinode = 4;
    case kHinode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_.hinode_);
      break;
    }
    // .palm.lemon.v1.UniversalLayout universal = 5;
    case kUniversal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_.universal_);
      break;
    }
    // .palm.lemon.v1.XCorporationLayout x_corporation = 6;
    case kXCorporation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_.x_corporation_);
      break;
    }
    case LAYOUT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteLayoutResponse::GetClassData() const { return &_class_data_; }


void SiteLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteLayoutResponse*>(&to_msg);
  auto& from = static_cast<const SiteLayoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteLayoutResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.layout_case()) {
    case kCleanWhite: {
      _this->_internal_mutable_clean_white()->::palm::lemon::v1::CleanWhiteLayout::MergeFrom(
          from._internal_clean_white());
      break;
    }
    case kDocsy: {
      _this->_internal_mutable_docsy()->::palm::lemon::v1::DocsyLayout::MergeFrom(
          from._internal_docsy());
      break;
    }
    case kGantry: {
      _this->_internal_mutable_gantry()->::palm::lemon::v1::GantryLayout::MergeFrom(
          from._internal_gantry());
      break;
    }
    case kHinode: {
      _this->_internal_mutable_hinode()->::palm::lemon::v1::HinodeLayout::MergeFrom(
          from._internal_hinode());
      break;
    }
    case kUniversal: {
      _this->_internal_mutable_universal()->::palm::lemon::v1::UniversalLayout::MergeFrom(
          from._internal_universal());
      break;
    }
    case kXCorporation: {
      _this->_internal_mutable_x_corporation()->::palm::lemon::v1::XCorporationLayout::MergeFrom(
          from._internal_x_corporation());
      break;
    }
    case LAYOUT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteLayoutResponse::CopyFrom(const SiteLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteLayoutResponse::IsInitialized() const {
  return true;
}

void SiteLayoutResponse::InternalSwap(SiteLayoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.layout_, other->_impl_.layout_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteLayoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[1]);
}
// ===================================================================

SiteRssResponse_ItemsEntry_DoNotUse::SiteRssResponse_ItemsEntry_DoNotUse() {}
SiteRssResponse_ItemsEntry_DoNotUse::SiteRssResponse_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SiteRssResponse_ItemsEntry_DoNotUse::MergeFrom(const SiteRssResponse_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SiteRssResponse_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[2]);
}
// ===================================================================

class SiteRssResponse::_Internal {
 public:
};

SiteRssResponse::SiteRssResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteRssResponse)
}
SiteRssResponse::SiteRssResponse(const SiteRssResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteRssResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteRssResponse)
}

inline void SiteRssResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteRssResponse::~SiteRssResponse() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteRssResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteRssResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~MapField();
}

void SiteRssResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteRssResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteRssResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteRssResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .palm.lemon.v1.Rss> items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteRssResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteRssResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .palm.lemon.v1.Rss> items = 1;
  if (!this->_internal_items().empty()) {
    using MapType = ::_pb::Map<std::string, ::palm::lemon::v1::Rss>;
    using WireHelper = SiteRssResponse_ItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_items();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteRssResponse.items");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteRssResponse)
  return target;
}

::size_t SiteRssResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteRssResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .palm.lemon.v1.Rss> items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::palm::lemon::v1::Rss >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += SiteRssResponse_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteRssResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteRssResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteRssResponse::GetClassData() const { return &_class_data_; }


void SiteRssResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteRssResponse*>(&to_msg);
  auto& from = static_cast<const SiteRssResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteRssResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteRssResponse::CopyFrom(const SiteRssResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteRssResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteRssResponse::IsInitialized() const {
  return true;
}

void SiteRssResponse::InternalSwap(SiteRssResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteRssResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[3]);
}
// ===================================================================

SiteSitemapResponse_ItemsEntry_DoNotUse::SiteSitemapResponse_ItemsEntry_DoNotUse() {}
SiteSitemapResponse_ItemsEntry_DoNotUse::SiteSitemapResponse_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SiteSitemapResponse_ItemsEntry_DoNotUse::MergeFrom(const SiteSitemapResponse_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SiteSitemapResponse_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[4]);
}
// ===================================================================

class SiteSitemapResponse::_Internal {
 public:
};

SiteSitemapResponse::SiteSitemapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteSitemapResponse)
}
SiteSitemapResponse::SiteSitemapResponse(const SiteSitemapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteSitemapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteSitemapResponse)
}

inline void SiteSitemapResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SiteSitemapResponse::~SiteSitemapResponse() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteSitemapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteSitemapResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~MapField();
}

void SiteSitemapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteSitemapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteSitemapResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteSitemapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .palm.lemon.v1.Sitemap> items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteSitemapResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteSitemapResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .palm.lemon.v1.Sitemap> items = 1;
  if (!this->_internal_items().empty()) {
    using MapType = ::_pb::Map<std::string, ::palm::lemon::v1::Sitemap>;
    using WireHelper = SiteSitemapResponse_ItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_items();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteSitemapResponse.items");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteSitemapResponse)
  return target;
}

::size_t SiteSitemapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteSitemapResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .palm.lemon.v1.Sitemap> items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::palm::lemon::v1::Sitemap >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += SiteSitemapResponse_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteSitemapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteSitemapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteSitemapResponse::GetClassData() const { return &_class_data_; }


void SiteSitemapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteSitemapResponse*>(&to_msg);
  auto& from = static_cast<const SiteSitemapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteSitemapResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteSitemapResponse::CopyFrom(const SiteSitemapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteSitemapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteSitemapResponse::IsInitialized() const {
  return true;
}

void SiteSitemapResponse::InternalSwap(SiteSitemapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteSitemapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[5]);
}
// ===================================================================

class SiteShowPageRequest::_Internal {
 public:
};

SiteShowPageRequest::SiteShowPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteShowPageRequest)
}
SiteShowPageRequest::SiteShowPageRequest(const SiteShowPageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteShowPageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slug_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slug().empty()) {
    _this->_impl_.slug_.Set(from._internal_slug(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteShowPageRequest)
}

inline void SiteShowPageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.slug_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteShowPageRequest::~SiteShowPageRequest() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteShowPageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteShowPageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slug_.Destroy();
}

void SiteShowPageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteShowPageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteShowPageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slug_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteShowPageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string slug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_slug();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.SiteShowPageRequest.slug"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteShowPageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteShowPageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string slug = 1;
  if (!this->_internal_slug().empty()) {
    const std::string& _s = this->_internal_slug();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteShowPageRequest.slug");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteShowPageRequest)
  return target;
}

::size_t SiteShowPageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteShowPageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slug = 1;
  if (!this->_internal_slug().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_slug());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteShowPageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteShowPageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteShowPageRequest::GetClassData() const { return &_class_data_; }


void SiteShowPageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteShowPageRequest*>(&to_msg);
  auto& from = static_cast<const SiteShowPageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteShowPageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slug().empty()) {
    _this->_internal_set_slug(from._internal_slug());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteShowPageRequest::CopyFrom(const SiteShowPageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteShowPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteShowPageRequest::IsInitialized() const {
  return true;
}

void SiteShowPageRequest::InternalSwap(SiteShowPageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slug_, lhs_arena,
                                       &other->_impl_.slug_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteShowPageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[6]);
}
// ===================================================================

class SiteShowPageResponse_Link::_Internal {
 public:
};

SiteShowPageResponse_Link::SiteShowPageResponse_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteShowPageResponse.Link)
}
SiteShowPageResponse_Link::SiteShowPageResponse_Link(const SiteShowPageResponse_Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteShowPageResponse_Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slug_) {}

    , decltype(_impl_.title_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slug().empty()) {
    _this->_impl_.slug_.Set(from._internal_slug(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteShowPageResponse.Link)
}

inline void SiteShowPageResponse_Link::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.slug_) {}

    , decltype(_impl_.title_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteShowPageResponse_Link::~SiteShowPageResponse_Link() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteShowPageResponse.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteShowPageResponse_Link::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slug_.Destroy();
  _impl_.title_.Destroy();
}

void SiteShowPageResponse_Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteShowPageResponse_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteShowPageResponse.Link)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slug_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteShowPageResponse_Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string slug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_slug();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.SiteShowPageResponse.Link.slug"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.SiteShowPageResponse.Link.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteShowPageResponse_Link::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteShowPageResponse.Link)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string slug = 1;
  if (!this->_internal_slug().empty()) {
    const std::string& _s = this->_internal_slug();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteShowPageResponse.Link.slug");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteShowPageResponse.Link.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteShowPageResponse.Link)
  return target;
}

::size_t SiteShowPageResponse_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteShowPageResponse.Link)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slug = 1;
  if (!this->_internal_slug().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_slug());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteShowPageResponse_Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteShowPageResponse_Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteShowPageResponse_Link::GetClassData() const { return &_class_data_; }


void SiteShowPageResponse_Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteShowPageResponse_Link*>(&to_msg);
  auto& from = static_cast<const SiteShowPageResponse_Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteShowPageResponse.Link)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slug().empty()) {
    _this->_internal_set_slug(from._internal_slug());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteShowPageResponse_Link::CopyFrom(const SiteShowPageResponse_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteShowPageResponse.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteShowPageResponse_Link::IsInitialized() const {
  return true;
}

void SiteShowPageResponse_Link::InternalSwap(SiteShowPageResponse_Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slug_, lhs_arena,
                                       &other->_impl_.slug_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteShowPageResponse_Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[7]);
}
// ===================================================================

class SiteShowPageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteShowPageResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SiteShowPageResponse, _impl_._has_bits_);
  static const ::palm::lemon::v1::Page& page(const SiteShowPageResponse* msg);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::lemon::v1::Page&
SiteShowPageResponse::_Internal::page(const SiteShowPageResponse* msg) {
  return *msg->_impl_.page_;
}
SiteShowPageResponse::SiteShowPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteShowPageResponse)
}
SiteShowPageResponse::SiteShowPageResponse(const SiteShowPageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteShowPageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.related_){from._impl_.related_}
    , decltype(_impl_.page_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.page_ = new ::palm::lemon::v1::Page(*from._impl_.page_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteShowPageResponse)
}

inline void SiteShowPageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.related_){arena}
    , decltype(_impl_.page_){nullptr}
  };
}

SiteShowPageResponse::~SiteShowPageResponse() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteShowPageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteShowPageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_related()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.page_;
}

void SiteShowPageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteShowPageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteShowPageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_related()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.page_ != nullptr);
    _impl_.page_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteShowPageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.lemon.v1.Page page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_page(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.lemon.v1.SiteShowPageResponse.Link related = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteShowPageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteShowPageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .palm.lemon.v1.Page page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::page(this),
        _Internal::page(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.lemon.v1.SiteShowPageResponse.Link related = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_related_size()); i < n; i++) {
    const auto& repfield = this->_internal_related(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteShowPageResponse)
  return target;
}

::size_t SiteShowPageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteShowPageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lemon.v1.SiteShowPageResponse.Link related = 2;
  total_size += 1UL * this->_internal_related_size();
  for (const auto& msg : this->_internal_related()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.lemon.v1.Page page = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.page_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteShowPageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteShowPageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteShowPageResponse::GetClassData() const { return &_class_data_; }


void SiteShowPageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteShowPageResponse*>(&to_msg);
  auto& from = static_cast<const SiteShowPageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteShowPageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_related()->MergeFrom(from._internal_related());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_page()->::palm::lemon::v1::Page::MergeFrom(
        from._internal_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteShowPageResponse::CopyFrom(const SiteShowPageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteShowPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteShowPageResponse::IsInitialized() const {
  return true;
}

void SiteShowPageResponse::InternalSwap(SiteShowPageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_related()->InternalSwap(other->_internal_mutable_related());
  swap(_impl_.page_, other->_impl_.page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteShowPageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[8]);
}
// ===================================================================

class SiteHomePageRequest::_Internal {
 public:
};

SiteHomePageRequest::SiteHomePageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteHomePageRequest)
}
SiteHomePageRequest::SiteHomePageRequest(const SiteHomePageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteHomePageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locale_) {}

    , decltype(_impl_.theme_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.locale_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locale().empty()) {
    _this->_impl_.locale_.Set(from._internal_locale(), _this->GetArenaForAllocation());
  }
  _this->_impl_.theme_ = from._impl_.theme_;
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteHomePageRequest)
}

inline void SiteHomePageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.locale_) {}

    , decltype(_impl_.theme_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.locale_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SiteHomePageRequest::~SiteHomePageRequest() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteHomePageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteHomePageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locale_.Destroy();
}

void SiteHomePageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteHomePageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteHomePageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locale_.ClearToEmpty();
  _impl_.theme_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteHomePageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string locale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.SiteHomePageRequest.locale"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.Theme theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_theme(static_cast<::palm::lemon::v1::Theme>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteHomePageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteHomePageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string locale = 1;
  if (!this->_internal_locale().empty()) {
    const std::string& _s = this->_internal_locale();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.SiteHomePageRequest.locale");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .palm.lemon.v1.Theme theme = 2;
  if (this->_internal_theme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_theme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteHomePageRequest)
  return target;
}

::size_t SiteHomePageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteHomePageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string locale = 1;
  if (!this->_internal_locale().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_locale());
  }

  // .palm.lemon.v1.Theme theme = 2;
  if (this->_internal_theme() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_theme());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteHomePageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteHomePageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteHomePageRequest::GetClassData() const { return &_class_data_; }


void SiteHomePageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteHomePageRequest*>(&to_msg);
  auto& from = static_cast<const SiteHomePageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteHomePageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_locale().empty()) {
    _this->_internal_set_locale(from._internal_locale());
  }
  if (from._internal_theme() != 0) {
    _this->_internal_set_theme(from._internal_theme());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteHomePageRequest::CopyFrom(const SiteHomePageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteHomePageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteHomePageRequest::IsInitialized() const {
  return true;
}

void SiteHomePageRequest::InternalSwap(SiteHomePageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.locale_, lhs_arena,
                                       &other->_impl_.locale_, rhs_arena);
  swap(_impl_.theme_, other->_impl_.theme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteHomePageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[9]);
}
// ===================================================================

class SiteHomePageResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::SiteHomePageResponse, _impl_._oneof_case_);
  static const ::palm::lemon::v1::CleanWhiteHomePage& clean_white(const SiteHomePageResponse* msg);
  static const ::palm::lemon::v1::DocsyHomePage& docsy(const SiteHomePageResponse* msg);
  static const ::palm::lemon::v1::GantryHomePage& gantry(const SiteHomePageResponse* msg);
  static const ::palm::lemon::v1::HinodeHomePage& hinode(const SiteHomePageResponse* msg);
  static const ::palm::lemon::v1::UniversalHomePage& universal(const SiteHomePageResponse* msg);
  static const ::palm::lemon::v1::XCorporationHomePage& x_corporation(const SiteHomePageResponse* msg);
};

const ::palm::lemon::v1::CleanWhiteHomePage&
SiteHomePageResponse::_Internal::clean_white(const SiteHomePageResponse* msg) {
  return *msg->_impl_.payload_.clean_white_;
}
const ::palm::lemon::v1::DocsyHomePage&
SiteHomePageResponse::_Internal::docsy(const SiteHomePageResponse* msg) {
  return *msg->_impl_.payload_.docsy_;
}
const ::palm::lemon::v1::GantryHomePage&
SiteHomePageResponse::_Internal::gantry(const SiteHomePageResponse* msg) {
  return *msg->_impl_.payload_.gantry_;
}
const ::palm::lemon::v1::HinodeHomePage&
SiteHomePageResponse::_Internal::hinode(const SiteHomePageResponse* msg) {
  return *msg->_impl_.payload_.hinode_;
}
const ::palm::lemon::v1::UniversalHomePage&
SiteHomePageResponse::_Internal::universal(const SiteHomePageResponse* msg) {
  return *msg->_impl_.payload_.universal_;
}
const ::palm::lemon::v1::XCorporationHomePage&
SiteHomePageResponse::_Internal::x_corporation(const SiteHomePageResponse* msg) {
  return *msg->_impl_.payload_.x_corporation_;
}
void SiteHomePageResponse::set_allocated_clean_white(::palm::lemon::v1::CleanWhiteHomePage* clean_white) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (clean_white) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clean_white);
    if (message_arena != submessage_arena) {
      clean_white = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clean_white, submessage_arena);
    }
    set_has_clean_white();
    _impl_.payload_.clean_white_ = clean_white;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageResponse.clean_white)
}
void SiteHomePageResponse::set_allocated_docsy(::palm::lemon::v1::DocsyHomePage* docsy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (docsy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(docsy);
    if (message_arena != submessage_arena) {
      docsy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, docsy, submessage_arena);
    }
    set_has_docsy();
    _impl_.payload_.docsy_ = docsy;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageResponse.docsy)
}
void SiteHomePageResponse::set_allocated_gantry(::palm::lemon::v1::GantryHomePage* gantry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gantry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gantry);
    if (message_arena != submessage_arena) {
      gantry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gantry, submessage_arena);
    }
    set_has_gantry();
    _impl_.payload_.gantry_ = gantry;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageResponse.gantry)
}
void SiteHomePageResponse::set_allocated_hinode(::palm::lemon::v1::HinodeHomePage* hinode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (hinode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hinode);
    if (message_arena != submessage_arena) {
      hinode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hinode, submessage_arena);
    }
    set_has_hinode();
    _impl_.payload_.hinode_ = hinode;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageResponse.hinode)
}
void SiteHomePageResponse::set_allocated_universal(::palm::lemon::v1::UniversalHomePage* universal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (universal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(universal);
    if (message_arena != submessage_arena) {
      universal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, universal, submessage_arena);
    }
    set_has_universal();
    _impl_.payload_.universal_ = universal;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageResponse.universal)
}
void SiteHomePageResponse::set_allocated_x_corporation(::palm::lemon::v1::XCorporationHomePage* x_corporation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (x_corporation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(x_corporation);
    if (message_arena != submessage_arena) {
      x_corporation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x_corporation, submessage_arena);
    }
    set_has_x_corporation();
    _impl_.payload_.x_corporation_ = x_corporation;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageResponse.x_corporation)
}
SiteHomePageResponse::SiteHomePageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.SiteHomePageResponse)
}
SiteHomePageResponse::SiteHomePageResponse(const SiteHomePageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SiteHomePageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kCleanWhite: {
      _this->_internal_mutable_clean_white()->::palm::lemon::v1::CleanWhiteHomePage::MergeFrom(
          from._internal_clean_white());
      break;
    }
    case kDocsy: {
      _this->_internal_mutable_docsy()->::palm::lemon::v1::DocsyHomePage::MergeFrom(
          from._internal_docsy());
      break;
    }
    case kGantry: {
      _this->_internal_mutable_gantry()->::palm::lemon::v1::GantryHomePage::MergeFrom(
          from._internal_gantry());
      break;
    }
    case kHinode: {
      _this->_internal_mutable_hinode()->::palm::lemon::v1::HinodeHomePage::MergeFrom(
          from._internal_hinode());
      break;
    }
    case kUniversal: {
      _this->_internal_mutable_universal()->::palm::lemon::v1::UniversalHomePage::MergeFrom(
          from._internal_universal());
      break;
    }
    case kXCorporation: {
      _this->_internal_mutable_x_corporation()->::palm::lemon::v1::XCorporationHomePage::MergeFrom(
          from._internal_x_corporation());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.SiteHomePageResponse)
}

inline void SiteHomePageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

SiteHomePageResponse::~SiteHomePageResponse() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.SiteHomePageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SiteHomePageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void SiteHomePageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SiteHomePageResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:palm.lemon.v1.SiteHomePageResponse)
  switch (payload_case()) {
    case kCleanWhite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.clean_white_;
      }
      break;
    }
    case kDocsy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.docsy_;
      }
      break;
    }
    case kGantry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.gantry_;
      }
      break;
    }
    case kHinode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.hinode_;
      }
      break;
    }
    case kUniversal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.universal_;
      }
      break;
    }
    case kXCorporation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.x_corporation_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void SiteHomePageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.SiteHomePageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteHomePageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.lemon.v1.CleanWhiteHomePage clean_white = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clean_white(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.DocsyHomePage docsy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_docsy(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.GantryHomePage gantry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gantry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.HinodeHomePage hinode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hinode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.UniversalHomePage universal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_universal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.XCorporationHomePage x_corporation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_x_corporation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SiteHomePageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.SiteHomePageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (payload_case()) {
    case kCleanWhite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::clean_white(this),
          _Internal::clean_white(this).GetCachedSize(), target, stream);
      break;
    }
    case kDocsy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::docsy(this),
          _Internal::docsy(this).GetCachedSize(), target, stream);
      break;
    }
    case kGantry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::gantry(this),
          _Internal::gantry(this).GetCachedSize(), target, stream);
      break;
    }
    case kHinode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::hinode(this),
          _Internal::hinode(this).GetCachedSize(), target, stream);
      break;
    }
    case kUniversal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::universal(this),
          _Internal::universal(this).GetCachedSize(), target, stream);
      break;
    }
    case kXCorporation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::x_corporation(this),
          _Internal::x_corporation(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.SiteHomePageResponse)
  return target;
}

::size_t SiteHomePageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.SiteHomePageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .palm.lemon.v1.CleanWhiteHomePage clean_white = 1;
    case kCleanWhite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.clean_white_);
      break;
    }
    // .palm.lemon.v1.DocsyHomePage docsy = 2;
    case kDocsy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.docsy_);
      break;
    }
    // .palm.lemon.v1.GantryHomePage gantry = 3;
    case kGantry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.gantry_);
      break;
    }
    // .palm.lemon.v1.HinodeHomePage hinode = 4;
    case kHinode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.hinode_);
      break;
    }
    // .palm.lemon.v1.UniversalHomePage universal = 5;
    case kUniversal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.universal_);
      break;
    }
    // .palm.lemon.v1.XCorporationHomePage x_corporation = 6;
    case kXCorporation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.x_corporation_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteHomePageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SiteHomePageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteHomePageResponse::GetClassData() const { return &_class_data_; }


void SiteHomePageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SiteHomePageResponse*>(&to_msg);
  auto& from = static_cast<const SiteHomePageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.SiteHomePageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kCleanWhite: {
      _this->_internal_mutable_clean_white()->::palm::lemon::v1::CleanWhiteHomePage::MergeFrom(
          from._internal_clean_white());
      break;
    }
    case kDocsy: {
      _this->_internal_mutable_docsy()->::palm::lemon::v1::DocsyHomePage::MergeFrom(
          from._internal_docsy());
      break;
    }
    case kGantry: {
      _this->_internal_mutable_gantry()->::palm::lemon::v1::GantryHomePage::MergeFrom(
          from._internal_gantry());
      break;
    }
    case kHinode: {
      _this->_internal_mutable_hinode()->::palm::lemon::v1::HinodeHomePage::MergeFrom(
          from._internal_hinode());
      break;
    }
    case kUniversal: {
      _this->_internal_mutable_universal()->::palm::lemon::v1::UniversalHomePage::MergeFrom(
          from._internal_universal());
      break;
    }
    case kXCorporation: {
      _this->_internal_mutable_x_corporation()->::palm::lemon::v1::XCorporationHomePage::MergeFrom(
          from._internal_x_corporation());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteHomePageResponse::CopyFrom(const SiteHomePageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.SiteHomePageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteHomePageResponse::IsInitialized() const {
  return true;
}

void SiteHomePageResponse::InternalSwap(SiteHomePageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteHomePageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[10]);
}
// ===================================================================

class CleanWhiteLayout::_Internal {
 public:
};

CleanWhiteLayout::CleanWhiteLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.CleanWhiteLayout)
}
CleanWhiteLayout::CleanWhiteLayout(const CleanWhiteLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CleanWhiteLayout* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.CleanWhiteLayout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanWhiteLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanWhiteLayout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CleanWhiteLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[11]);
}
// ===================================================================

class DocsyLayout::_Internal {
 public:
};

DocsyLayout::DocsyLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.DocsyLayout)
}
DocsyLayout::DocsyLayout(const DocsyLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DocsyLayout* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.DocsyLayout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocsyLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocsyLayout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DocsyLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[12]);
}
// ===================================================================

class GantryLayout::_Internal {
 public:
};

GantryLayout::GantryLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.GantryLayout)
}
GantryLayout::GantryLayout(const GantryLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GantryLayout* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.GantryLayout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GantryLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GantryLayout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GantryLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[13]);
}
// ===================================================================

class HinodeLayout::_Internal {
 public:
};

HinodeLayout::HinodeLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.HinodeLayout)
}
HinodeLayout::HinodeLayout(const HinodeLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HinodeLayout* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.HinodeLayout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HinodeLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HinodeLayout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HinodeLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[14]);
}
// ===================================================================

class UniversalLayout::_Internal {
 public:
};

UniversalLayout::UniversalLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.UniversalLayout)
}
UniversalLayout::UniversalLayout(const UniversalLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UniversalLayout* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.UniversalLayout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UniversalLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UniversalLayout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UniversalLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[15]);
}
// ===================================================================

class XCorporationLayout::_Internal {
 public:
};

XCorporationLayout::XCorporationLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.XCorporationLayout)
}
XCorporationLayout::XCorporationLayout(const XCorporationLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  XCorporationLayout* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.XCorporationLayout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XCorporationLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XCorporationLayout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata XCorporationLayout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[16]);
}
// ===================================================================

class CleanWhiteHomePage::_Internal {
 public:
};

CleanWhiteHomePage::CleanWhiteHomePage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.CleanWhiteHomePage)
}
CleanWhiteHomePage::CleanWhiteHomePage(const CleanWhiteHomePage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CleanWhiteHomePage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.CleanWhiteHomePage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanWhiteHomePage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanWhiteHomePage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CleanWhiteHomePage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[17]);
}
// ===================================================================

class DocsyHomePage::_Internal {
 public:
};

DocsyHomePage::DocsyHomePage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.DocsyHomePage)
}
DocsyHomePage::DocsyHomePage(const DocsyHomePage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DocsyHomePage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.DocsyHomePage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocsyHomePage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocsyHomePage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DocsyHomePage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[18]);
}
// ===================================================================

class GantryHomePage::_Internal {
 public:
};

GantryHomePage::GantryHomePage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.GantryHomePage)
}
GantryHomePage::GantryHomePage(const GantryHomePage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GantryHomePage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.GantryHomePage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GantryHomePage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GantryHomePage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GantryHomePage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[19]);
}
// ===================================================================

class HinodeHomePage::_Internal {
 public:
};

HinodeHomePage::HinodeHomePage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.HinodeHomePage)
}
HinodeHomePage::HinodeHomePage(const HinodeHomePage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HinodeHomePage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.HinodeHomePage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HinodeHomePage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HinodeHomePage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HinodeHomePage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[20]);
}
// ===================================================================

class UniversalHomePage::_Internal {
 public:
};

UniversalHomePage::UniversalHomePage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.UniversalHomePage)
}
UniversalHomePage::UniversalHomePage(const UniversalHomePage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UniversalHomePage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.UniversalHomePage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UniversalHomePage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UniversalHomePage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UniversalHomePage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[21]);
}
// ===================================================================

class XCorporationHomePage::_Internal {
 public:
};

XCorporationHomePage::XCorporationHomePage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.XCorporationHomePage)
}
XCorporationHomePage::XCorporationHomePage(const XCorporationHomePage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  XCorporationHomePage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.XCorporationHomePage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XCorporationHomePage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XCorporationHomePage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata XCorporationHomePage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[22]);
}
// ===================================================================

class Rss_Link::_Internal {
 public:
  using HasBits = decltype(std::declval<Rss_Link>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Rss_Link, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Rss_Link* msg);
  static void set_has_updated_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Rss_Link::_Internal::updated_at(const Rss_Link* msg) {
  return *msg->_impl_.updated_at_;
}
void Rss_Link::clear_updated_at() {
  if (_impl_.updated_at_ != nullptr) _impl_.updated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Rss_Link::Rss_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Rss.Link)
}
Rss_Link::Rss_Link(const Rss_Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rss_Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.updated_at_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Rss.Link)
}

inline void Rss_Link::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.updated_at_){nullptr}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rss_Link::~Rss_Link() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Rss.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rss_Link::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void Rss_Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rss_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Rss.Link)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.updated_at_ != nullptr);
    _impl_.updated_at_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rss_Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Rss.Link.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Rss.Link.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Rss.Link.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Rss_Link::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Rss.Link)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Rss.Link.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Rss.Link.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Rss.Link.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp updated_at = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Rss.Link)
  return target;
}

::size_t Rss_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Rss.Link)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rss_Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rss_Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rss_Link::GetClassData() const { return &_class_data_; }


void Rss_Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rss_Link*>(&to_msg);
  auto& from = static_cast<const Rss_Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Rss.Link)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rss_Link::CopyFrom(const Rss_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Rss.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rss_Link::IsInitialized() const {
  return true;
}

void Rss_Link::InternalSwap(Rss_Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.updated_at_, other->_impl_.updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rss_Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[23]);
}
// ===================================================================

class Rss::_Internal {
 public:
};

Rss::Rss(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Rss)
}
Rss::Rss(const Rss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rss* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){from._impl_.links_}
    , decltype(_impl_.home_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.home_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Rss)
}

inline void Rss::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){arena}
    , decltype(_impl_.home_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.home_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rss::~Rss() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Rss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rss::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_links()->~RepeatedPtrField();
  _impl_.home_.Destroy();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void Rss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rss::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Rss)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_links()->Clear();
  _impl_.home_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Rss.home"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Rss.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Rss.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.lemon.v1.Rss.Link links = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Rss::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Rss)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    const std::string& _s = this->_internal_home();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Rss.home");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Rss.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Rss.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .palm.lemon.v1.Rss.Link links = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Rss)
  return target;
}

::size_t Rss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Rss)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lemon.v1.Rss.Link links = 9;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_internal_links()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string home = 1;
  if (!this->_internal_home().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_home());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rss::GetClassData() const { return &_class_data_; }


void Rss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rss*>(&to_msg);
  auto& from = static_cast<const Rss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Rss)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_links()->MergeFrom(from._internal_links());
  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rss::CopyFrom(const Rss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Rss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rss::IsInitialized() const {
  return true;
}

void Rss::InternalSwap(Rss* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_links()->InternalSwap(other->_internal_mutable_links());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.home_, lhs_arena,
                                       &other->_impl_.home_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[24]);
}
// ===================================================================

class Sitemap_Link::_Internal {
 public:
  using HasBits = decltype(std::declval<Sitemap_Link>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Sitemap_Link, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Sitemap_Link* msg);
  static void set_has_updated_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Sitemap_Link::_Internal::updated_at(const Sitemap_Link* msg) {
  return *msg->_impl_.updated_at_;
}
void Sitemap_Link::clear_updated_at() {
  if (_impl_.updated_at_ != nullptr) _impl_.updated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Sitemap_Link::Sitemap_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Sitemap.Link)
}
Sitemap_Link::Sitemap_Link(const Sitemap_Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sitemap_Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.change_freq_) {}

    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.change_freq_, &from._impl_.change_freq_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.change_freq_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Sitemap.Link)
}

inline void Sitemap_Link::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.change_freq_) { 0 }

    , decltype(_impl_.priority_) { 0 }

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sitemap_Link::~Sitemap_Link() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Sitemap.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sitemap_Link::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void Sitemap_Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sitemap_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Sitemap.Link)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.updated_at_ != nullptr);
    _impl_.updated_at_->Clear();
  }
  ::memset(&_impl_.change_freq_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.change_freq_)) + sizeof(_impl_.priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sitemap_Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Sitemap.Link.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.Sitemap.Link.ChangeFreq change_freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_change_freq(static_cast<::palm::lemon::v1::Sitemap_Link_ChangeFreq>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // float priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sitemap_Link::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Sitemap.Link)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Sitemap.Link.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .palm.lemon.v1.Sitemap.Link.ChangeFreq change_freq = 2;
  if (this->_internal_change_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_change_freq(), target);
  }

  // float priority = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_priority = this->_internal_priority();
  ::uint32_t raw_priority;
  memcpy(&raw_priority, &tmp_priority, sizeof(tmp_priority));
  if (raw_priority != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_priority(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp updated_at = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Sitemap.Link)
  return target;
}

::size_t Sitemap_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Sitemap.Link)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .palm.lemon.v1.Sitemap.Link.ChangeFreq change_freq = 2;
  if (this->_internal_change_freq() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_change_freq());
  }

  // float priority = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_priority = this->_internal_priority();
  ::uint32_t raw_priority;
  memcpy(&raw_priority, &tmp_priority, sizeof(tmp_priority));
  if (raw_priority != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sitemap_Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sitemap_Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sitemap_Link::GetClassData() const { return &_class_data_; }


void Sitemap_Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sitemap_Link*>(&to_msg);
  auto& from = static_cast<const Sitemap_Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Sitemap.Link)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_change_freq() != 0) {
    _this->_internal_set_change_freq(from._internal_change_freq());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_priority = from._internal_priority();
  ::uint32_t raw_priority;
  memcpy(&raw_priority, &tmp_priority, sizeof(tmp_priority));
  if (raw_priority != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sitemap_Link::CopyFrom(const Sitemap_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Sitemap.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sitemap_Link::IsInitialized() const {
  return true;
}

void Sitemap_Link::InternalSwap(Sitemap_Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sitemap_Link, _impl_.priority_)
      + sizeof(Sitemap_Link::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(Sitemap_Link, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sitemap_Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[25]);
}
// ===================================================================

class Sitemap_UrlSet::_Internal {
 public:
};

Sitemap_UrlSet::Sitemap_UrlSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Sitemap.UrlSet)
}
Sitemap_UrlSet::Sitemap_UrlSet(const Sitemap_UrlSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sitemap_UrlSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){from._impl_.links_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Sitemap.UrlSet)
}

inline void Sitemap_UrlSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sitemap_UrlSet::~Sitemap_UrlSet() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Sitemap.UrlSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sitemap_UrlSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_links()->~RepeatedPtrField();
}

void Sitemap_UrlSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sitemap_UrlSet::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Sitemap.UrlSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_links()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sitemap_UrlSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.lemon.v1.Sitemap.Link links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sitemap_UrlSet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Sitemap.UrlSet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.lemon.v1.Sitemap.Link links = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Sitemap.UrlSet)
  return target;
}

::size_t Sitemap_UrlSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Sitemap.UrlSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lemon.v1.Sitemap.Link links = 1;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_internal_links()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sitemap_UrlSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sitemap_UrlSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sitemap_UrlSet::GetClassData() const { return &_class_data_; }


void Sitemap_UrlSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sitemap_UrlSet*>(&to_msg);
  auto& from = static_cast<const Sitemap_UrlSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Sitemap.UrlSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_links()->MergeFrom(from._internal_links());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sitemap_UrlSet::CopyFrom(const Sitemap_UrlSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Sitemap.UrlSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sitemap_UrlSet::IsInitialized() const {
  return true;
}

void Sitemap_UrlSet::InternalSwap(Sitemap_UrlSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_links()->InternalSwap(other->_internal_mutable_links());
}

::PROTOBUF_NAMESPACE_ID::Metadata Sitemap_UrlSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[26]);
}
// ===================================================================

class Sitemap_Index::_Internal {
 public:
};

Sitemap_Index::Sitemap_Index(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Sitemap.Index)
}
Sitemap_Index::Sitemap_Index(const Sitemap_Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sitemap_Index* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){from._impl_.links_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Sitemap.Index)
}

inline void Sitemap_Index::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sitemap_Index::~Sitemap_Index() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Sitemap.Index)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sitemap_Index::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_links()->~RepeatedPtrField();
}

void Sitemap_Index::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sitemap_Index::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Sitemap.Index)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_links()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sitemap_Index::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_links();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Sitemap.Index.links"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sitemap_Index::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Sitemap.Index)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string links = 1;
  for (int i = 0, n = this->_internal_links_size(); i < n; ++i) {
    const auto& s = this->_internal_links(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Sitemap.Index.links");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Sitemap.Index)
  return target;
}

::size_t Sitemap_Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Sitemap.Index)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string links = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_links().size());
  for (int i = 0, n = _internal_links().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_links().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sitemap_Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sitemap_Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sitemap_Index::GetClassData() const { return &_class_data_; }


void Sitemap_Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sitemap_Index*>(&to_msg);
  auto& from = static_cast<const Sitemap_Index&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Sitemap.Index)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_links()->MergeFrom(from._internal_links());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sitemap_Index::CopyFrom(const Sitemap_Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Sitemap.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sitemap_Index::IsInitialized() const {
  return true;
}

void Sitemap_Index::InternalSwap(Sitemap_Index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_links()->InternalSwap(
      other->_internal_mutable_links());
}

::PROTOBUF_NAMESPACE_ID::Metadata Sitemap_Index::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[27]);
}
// ===================================================================

class Sitemap::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::palm::lemon::v1::Sitemap, _impl_._oneof_case_);
  static const ::palm::lemon::v1::Sitemap_UrlSet& urlset(const Sitemap* msg);
  static const ::palm::lemon::v1::Sitemap_Index& index(const Sitemap* msg);
};

const ::palm::lemon::v1::Sitemap_UrlSet&
Sitemap::_Internal::urlset(const Sitemap* msg) {
  return *msg->_impl_.body_.urlset_;
}
const ::palm::lemon::v1::Sitemap_Index&
Sitemap::_Internal::index(const Sitemap* msg) {
  return *msg->_impl_.body_.index_;
}
void Sitemap::set_allocated_urlset(::palm::lemon::v1::Sitemap_UrlSet* urlset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (urlset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(urlset);
    if (message_arena != submessage_arena) {
      urlset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urlset, submessage_arena);
    }
    set_has_urlset();
    _impl_.body_.urlset_ = urlset;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Sitemap.urlset)
}
void Sitemap::set_allocated_index(::palm::lemon::v1::Sitemap_Index* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index);
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    set_has_index();
    _impl_.body_.index_ = index;
  }
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Sitemap.index)
}
Sitemap::Sitemap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Sitemap)
}
Sitemap::Sitemap(const Sitemap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sitemap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.home_) {}

    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.home_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), _this->GetArenaForAllocation());
  }
  clear_has_body();
  switch (from.body_case()) {
    case kUrlset: {
      _this->_internal_mutable_urlset()->::palm::lemon::v1::Sitemap_UrlSet::MergeFrom(
          from._internal_urlset());
      break;
    }
    case kIndex: {
      _this->_internal_mutable_index()->::palm::lemon::v1::Sitemap_Index::MergeFrom(
          from._internal_index());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Sitemap)
}

inline void Sitemap::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.home_) {}

    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.home_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_body();
}

Sitemap::~Sitemap() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Sitemap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sitemap::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.home_.Destroy();
  if (has_body()) {
    clear_body();
  }
}

void Sitemap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sitemap::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:palm.lemon.v1.Sitemap)
  switch (body_case()) {
    case kUrlset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.urlset_;
      }
      break;
    }
    case kIndex: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.body_.index_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = BODY_NOT_SET;
}


void Sitemap::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Sitemap)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_.ClearToEmpty();
  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sitemap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Sitemap.home"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.Sitemap.UrlSet urlset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_urlset(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.lemon.v1.Sitemap.Index index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sitemap::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Sitemap)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    const std::string& _s = this->_internal_home();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Sitemap.home");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (body_case()) {
    case kUrlset: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::urlset(this),
          _Internal::urlset(this).GetCachedSize(), target, stream);
      break;
    }
    case kIndex: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::index(this),
          _Internal::index(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Sitemap)
  return target;
}

::size_t Sitemap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Sitemap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string home = 1;
  if (!this->_internal_home().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_home());
  }

  switch (body_case()) {
    // .palm.lemon.v1.Sitemap.UrlSet urlset = 11;
    case kUrlset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.urlset_);
      break;
    }
    // .palm.lemon.v1.Sitemap.Index index = 12;
    case kIndex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_.index_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sitemap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sitemap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sitemap::GetClassData() const { return &_class_data_; }


void Sitemap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sitemap*>(&to_msg);
  auto& from = static_cast<const Sitemap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Sitemap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  switch (from.body_case()) {
    case kUrlset: {
      _this->_internal_mutable_urlset()->::palm::lemon::v1::Sitemap_UrlSet::MergeFrom(
          from._internal_urlset());
      break;
    }
    case kIndex: {
      _this->_internal_mutable_index()->::palm::lemon::v1::Sitemap_Index::MergeFrom(
          from._internal_index());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sitemap::CopyFrom(const Sitemap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Sitemap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sitemap::IsInitialized() const {
  return true;
}

void Sitemap::InternalSwap(Sitemap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.home_, lhs_arena,
                                       &other->_impl_.home_, rhs_arena);
  swap(_impl_.body_, other->_impl_.body_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sitemap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[28]);
}
// ===================================================================

class Page::_Internal {
 public:
};

Page::Page(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lemon.v1.Page)
}
Page::Page(const Page& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Page* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slug_) {}

    , decltype(_impl_.title_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slug().empty()) {
    _this->_impl_.slug_.Set(from._internal_slug(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lemon.v1.Page)
}

inline void Page::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.slug_) {}

    , decltype(_impl_.title_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slug_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slug_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:palm.lemon.v1.Page)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Page::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slug_.Destroy();
  _impl_.title_.Destroy();
}

void Page::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lemon.v1.Page)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slug_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Page::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string slug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_slug();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Page.slug"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lemon.v1.Page.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Page::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lemon.v1.Page)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string slug = 1;
  if (!this->_internal_slug().empty()) {
    const std::string& _s = this->_internal_slug();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Page.slug");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lemon.v1.Page.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lemon.v1.Page)
  return target;
}

::size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lemon.v1.Page)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slug = 1;
  if (!this->_internal_slug().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_slug());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Page::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Page::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Page::GetClassData() const { return &_class_data_; }


void Page::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Page*>(&to_msg);
  auto& from = static_cast<const Page&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lemon.v1.Page)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slug().empty()) {
    _this->_internal_set_slug(from._internal_slug());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lemon.v1.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  return true;
}

void Page::InternalSwap(Page* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slug_, lhs_arena,
                                       &other->_impl_.slug_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Page::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lemon_2eproto_getter, &descriptor_table_lemon_2eproto_once,
      file_level_metadata_lemon_2eproto[29]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lemon
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteLayoutRequest*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteLayoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteLayoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteLayoutResponse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteRssResponse_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteRssResponse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteRssResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteRssResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteSitemapResponse_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteSitemapResponse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteSitemapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteSitemapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteShowPageRequest*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteShowPageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteShowPageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteShowPageResponse_Link*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteShowPageResponse_Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteShowPageResponse_Link >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteShowPageResponse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteShowPageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteShowPageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteHomePageRequest*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteHomePageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteHomePageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::SiteHomePageResponse*
Arena::CreateMaybeMessage< ::palm::lemon::v1::SiteHomePageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::SiteHomePageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::CleanWhiteLayout*
Arena::CreateMaybeMessage< ::palm::lemon::v1::CleanWhiteLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::CleanWhiteLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::DocsyLayout*
Arena::CreateMaybeMessage< ::palm::lemon::v1::DocsyLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::DocsyLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::GantryLayout*
Arena::CreateMaybeMessage< ::palm::lemon::v1::GantryLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::GantryLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::HinodeLayout*
Arena::CreateMaybeMessage< ::palm::lemon::v1::HinodeLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::HinodeLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::UniversalLayout*
Arena::CreateMaybeMessage< ::palm::lemon::v1::UniversalLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::UniversalLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::XCorporationLayout*
Arena::CreateMaybeMessage< ::palm::lemon::v1::XCorporationLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::XCorporationLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::CleanWhiteHomePage*
Arena::CreateMaybeMessage< ::palm::lemon::v1::CleanWhiteHomePage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::CleanWhiteHomePage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::DocsyHomePage*
Arena::CreateMaybeMessage< ::palm::lemon::v1::DocsyHomePage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::DocsyHomePage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::GantryHomePage*
Arena::CreateMaybeMessage< ::palm::lemon::v1::GantryHomePage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::GantryHomePage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::HinodeHomePage*
Arena::CreateMaybeMessage< ::palm::lemon::v1::HinodeHomePage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::HinodeHomePage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::UniversalHomePage*
Arena::CreateMaybeMessage< ::palm::lemon::v1::UniversalHomePage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::UniversalHomePage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::XCorporationHomePage*
Arena::CreateMaybeMessage< ::palm::lemon::v1::XCorporationHomePage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::XCorporationHomePage >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Rss_Link*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Rss_Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Rss_Link >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Rss*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Rss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Rss >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Sitemap_Link*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Sitemap_Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Sitemap_Link >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Sitemap_UrlSet*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Sitemap_UrlSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Sitemap_UrlSet >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Sitemap_Index*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Sitemap_Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Sitemap_Index >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Sitemap*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Sitemap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Sitemap >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lemon::v1::Page*
Arena::CreateMaybeMessage< ::palm::lemon::v1::Page >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lemon::v1::Page >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
