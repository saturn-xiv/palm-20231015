// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: metasequoia.proto

#include "metasequoia.pb.h"
#include "metasequoia.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace metasequoia {
namespace v1 {

static const char* User_method_names[] = {
  "/palm.metasequoia.v1.User/SignInByPassword",
  "/palm.metasequoia.v1.User/SignUpByEmail",
  "/palm.metasequoia.v1.User/ConfirmByEmail",
  "/palm.metasequoia.v1.User/ConfirmByToken",
  "/palm.metasequoia.v1.User/UnlockByEmail",
  "/palm.metasequoia.v1.User/UnlockByToken",
  "/palm.metasequoia.v1.User/ForgotPassword",
  "/palm.metasequoia.v1.User/ResetPassword",
  "/palm.metasequoia.v1.User/Refresh",
  "/palm.metasequoia.v1.User/Logs",
  "/palm.metasequoia.v1.User/SetProfile",
  "/palm.metasequoia.v1.User/GetProfile",
  "/palm.metasequoia.v1.User/ChangePassword",
  "/palm.metasequoia.v1.User/SignOut",
  "/palm.metasequoia.v1.User/Index",
  "/palm.metasequoia.v1.User/Show",
  "/palm.metasequoia.v1.User/Disable",
  "/palm.metasequoia.v1.User/Enable",
  "/palm.metasequoia.v1.User/Lock",
  "/palm.metasequoia.v1.User/Unlock",
  "/palm.metasequoia.v1.User/Confirm",
  "/palm.metasequoia.v1.User/Delete",
  "/palm.metasequoia.v1.User/SetPassword",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignInByPassword_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUpByEmail_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByEmail_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByToken_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByEmail_(User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByToken_(User_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgotPassword_(User_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(User_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Refresh_(User_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logs_(User_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfile_(User_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfile_(User_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(User_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignOut_(User_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(User_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(User_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(User_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(User_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Lock_(User_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unlock_(User_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Confirm_(User_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(User_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPassword_(User_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::SignInByPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest& request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignInByPassword_, context, request, response);
}

void User::Stub::async::SignInByPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByPassword_, context, request, response, std::move(f));
}

void User::Stub::async::SignInByPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::PrepareAsyncSignInByPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserSignInResponse, ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignInByPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::AsyncSignInByPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInByPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignUpByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignUpByEmail_, context, request, response);
}

void User::Stub::async::SignUpByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUpByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::SignUpByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUpByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignUpByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignUpByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignUpByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignUpByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByEmail_, context, request, response);
}

void User::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ConfirmByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByToken_, context, request, response);
}

void User::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, std::move(f));
}

void User::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UnlockByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByEmail_, context, request, response);
}

void User::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UnlockByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByToken_, context, request, response);
}

void User::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, std::move(f));
}

void User::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ForgotPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForgotPassword_, context, request, response);
}

void User::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, std::move(f));
}

void User::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForgotPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForgotPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ResetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void User::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void User::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserResetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Duration, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Refresh_, context, request, response);
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::metasequoia::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Duration, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, std::move(f));
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::metasequoia::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::PrepareAsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserSignInResponse, ::google::protobuf::Duration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Refresh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserSignInResponse>* User::Stub::AsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Logs(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest& request, ::palm::metasequoia::v1::UserLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserLogsRequest, ::palm::metasequoia::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logs_, context, request, response);
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest* request, ::palm::metasequoia::v1::UserLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserLogsRequest, ::palm::metasequoia::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, std::move(f));
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest* request, ::palm::metasequoia::v1::UserLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserLogsResponse>* User::Stub::PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserLogsResponse, ::palm::metasequoia::v1::UserLogsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserLogsResponse>* User::Stub::AsyncLogsRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserLogsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SetProfile(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfile_, context, request, response);
}

void User::Stub::async::SetProfile(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfile_, context, request, response, std::move(f));
}

void User::Stub::async::SetProfile(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSetProfileRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSetProfileRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::GetProfile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::UserProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProfile_, context, request, response);
}

void User::Stub::async::GetProfile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfile_, context, request, response, std::move(f));
}

void User::Stub::async::GetProfile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserProfile>* User::Stub::PrepareAsyncGetProfileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserProfile>* User::Stub::AsyncGetProfileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ChangePassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void User::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void User::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignOut_, context, request, response);
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, std::move(f));
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::UserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse>* User::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserIndexResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse>* User::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void User::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void User::Stub::async::Show(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse_Item>* User::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::UserIndexResponse_Item, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::UserIndexResponse_Item>* User::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Disable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Enable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Lock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Lock_, context, request, response);
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, std::move(f));
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Lock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncLockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Unlock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unlock_, context, request, response);
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, std::move(f));
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Confirm(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Confirm_, context, request, response);
}

void User::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, std::move(f));
}

void User::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Confirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Delete(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void User::Stub::async::Delete(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void User::Stub::async::Delete(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPassword_, context, request, response);
}

void User::Stub::async::SetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPassword_, context, request, response, std::move(f));
}

void User::Stub::async::SetPassword(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::UserSetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSetPasswordRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserSignInByPasswordRequest, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserSignInByPasswordRequest* req,
             ::palm::metasequoia::v1::UserSignInResponse* resp) {
               return service->SignInByPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserSignUpByEmailRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserSignUpByEmailRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SignUpByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ForgotPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserResetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Duration, ::palm::metasequoia::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Duration* req,
             ::palm::metasequoia::v1::UserSignInResponse* resp) {
               return service->Refresh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserLogsRequest, ::palm::metasequoia::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserLogsRequest* req,
             ::palm::metasequoia::v1::UserLogsResponse* resp) {
               return service->Logs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::UserProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::UserProfile* resp) {
               return service->GetProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserChangePasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SignOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::UserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::UserIndexResponse_Item* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Lock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Unlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Confirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::metasequoia::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserSetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetPassword(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::SignInByPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserSignInByPasswordRequest* request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignUpByEmail(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserSignUpByEmailRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ConfirmByEmail(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ConfirmByToken(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UnlockByEmail(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UnlockByToken(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ForgotPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ResetPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Refresh(::grpc::ServerContext* context, const ::google::protobuf::Duration* request, ::palm::metasequoia::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Logs(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserLogsRequest* request, ::palm::metasequoia::v1::UserLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SetProfile(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::GetProfile(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ChangePassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignOut(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Index(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::UserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Show(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Disable(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Enable(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Lock(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Unlock(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Confirm(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Delete(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SetPassword(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Rbac_method_names[] = {
  "/palm.metasequoia.v1.Rbac/Can",
  "/palm.metasequoia.v1.Rbac/Has",
  "/palm.metasequoia.v1.Rbac/GetRolesForUser",
  "/palm.metasequoia.v1.Rbac/GetImplicitRolesForUser",
  "/palm.metasequoia.v1.Rbac/AddRolesForUser",
  "/palm.metasequoia.v1.Rbac/DeleteRolesForUser",
  "/palm.metasequoia.v1.Rbac/AddPermissionsForRole",
  "/palm.metasequoia.v1.Rbac/DeletePermissionsForRole",
  "/palm.metasequoia.v1.Rbac/GetPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/GetImplicitPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/AddPermissionsForUser",
  "/palm.metasequoia.v1.Rbac/DeletePermissionsForUser",
};

std::unique_ptr< Rbac::Stub> Rbac::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rbac::Stub> stub(new Rbac::Stub(channel, options));
  return stub;
}

Rbac::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Can_(Rbac_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Has_(Rbac_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesForUser_(Rbac_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitRolesForUser_(Rbac_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRolesForUser_(Rbac_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRolesForUser_(Rbac_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForRole_(Rbac_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForRole_(Rbac_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionsForUser_(Rbac_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitPermissionsForUser_(Rbac_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionsForUser_(Rbac_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForUser_(Rbac_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rbac::Stub::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Can_, context, request, response);
}

void Rbac::Stub::async::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, std::move(f));
}

void Rbac::Stub::async::Can(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Can_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncCanRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacCanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Can_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncCanRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacCanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Has_, context, request, response);
}

void Rbac::Stub::async::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, std::move(f));
}

void Rbac::Stub::async::Has(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Has_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncHasRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacHasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Has_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncHasRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacHasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRolesForUser_, context, request, response);
}

void Rbac::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacRolesResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitRolesForUser_, context, request, response);
}

void Rbac::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacRolesResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacRolesResponse>* Rbac::Stub::AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRolesForUser_, context, request, response);
}

void Rbac::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRolesForUser_, context, request, response);
}

void Rbac::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForRole_, context, request, response);
}

void Rbac::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddPermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddPermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForRole_, context, request, response);
}

void Rbac::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeletePermissionsForRole(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeletePermissionsForRoleRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacPermissionsResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::RbacPermissionsResponse, ::palm::metasequoia::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::RbacPermissionsResponse>* Rbac::Stub::AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::AddPermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncAddPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rbac::Stub::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForUser_, context, request, response);
}

void Rbac::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, std::move(f));
}

void Rbac::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Rbac::Stub::AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Rbac::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacCanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacCanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Can(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacHasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacHasRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Has(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacRolesResponse* resp) {
               return service->GetRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacRolesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacRolesResponse* resp) {
               return service->GetImplicitRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacRolesForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacRolesForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForRoleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacPermissionsResponse* resp) {
               return service->GetPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::UserQueryRequest, ::palm::metasequoia::v1::RbacPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::UserQueryRequest* req,
             ::palm::metasequoia::v1::RbacPermissionsResponse* resp) {
               return service->GetImplicitPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rbac_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rbac::Service, ::palm::metasequoia::v1::RbacPermissionsForUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rbac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeletePermissionsForUser(ctx, req, resp);
             }, this)));
}

Rbac::Service::~Service() {
}

::grpc::Status Rbac::Service::Can(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacCanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::Has(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacHasRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacRolesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacRolesForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddPermissionsForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeletePermissionsForRole(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForRoleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::UserQueryRequest* request, ::palm::metasequoia::v1::RbacPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::AddPermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rbac::Service::DeletePermissionsForUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::RbacPermissionsForUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Setting_method_names[] = {
  "/palm.metasequoia.v1.Setting/Set",
  "/palm.metasequoia.v1.Setting/Get",
  "/palm.metasequoia.v1.Setting/ByUser",
  "/palm.metasequoia.v1.Setting/My",
  "/palm.metasequoia.v1.Setting/Global",
};

std::unique_ptr< Setting::Stub> Setting::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Setting::Stub> stub(new Setting::Stub(channel, options));
  return stub;
}

Setting::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Set_(Setting_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Setting_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByUser_(Setting_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_My_(Setting_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Global_(Setting_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Setting::Stub::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SettingSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Setting::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SettingSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void Setting::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Setting::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Setting::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest& request, ::palm::metasequoia::v1::SettingsResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SettingGetRequest, ::palm::metasequoia::v1::SettingsResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Setting::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest* request, ::palm::metasequoia::v1::SettingsResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SettingGetRequest, ::palm::metasequoia::v1::SettingsResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Setting::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest* request, ::palm::metasequoia::v1::SettingsResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse_Item>* Setting::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse_Item, ::palm::metasequoia::v1::SettingGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse_Item>* Setting::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::ByUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest& request, ::palm::metasequoia::v1::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::SettingByUserRequest, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByUser_, context, request, response);
}

void Setting::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest* request, ::palm::metasequoia::v1::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::SettingByUserRequest, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, std::move(f));
}

void Setting::Stub::async::ByUser(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest* request, ::palm::metasequoia::v1::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::PrepareAsyncByUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse, ::palm::metasequoia::v1::SettingByUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::AsyncByUserRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::SettingByUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::My(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_My_, context, request, response);
}

void Setting::Stub::async::My(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_My_, context, request, response, std::move(f));
}

void Setting::Stub::async::My(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_My_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::PrepareAsyncMyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_My_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::AsyncMyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Setting::Stub::Global(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::metasequoia::v1::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Global_, context, request, response);
}

void Setting::Stub::async::Global(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Global_, context, request, response, std::move(f));
}

void Setting::Stub::async::Global(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Global_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::PrepareAsyncGlobalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::SettingsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Global_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::SettingsResponse>* Setting::Stub::AsyncGlobalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGlobalRaw(context, request, cq);
  result->StartCall();
  return result;
}

Setting::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::palm::metasequoia::v1::SettingSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SettingSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::palm::metasequoia::v1::SettingGetRequest, ::palm::metasequoia::v1::SettingsResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SettingGetRequest* req,
             ::palm::metasequoia::v1::SettingsResponse_Item* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::palm::metasequoia::v1::SettingByUserRequest, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::SettingByUserRequest* req,
             ::palm::metasequoia::v1::SettingsResponse* resp) {
               return service->ByUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SettingsResponse* resp) {
               return service->My(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Setting_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Setting::Service, ::google::protobuf::Empty, ::palm::metasequoia::v1::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Setting::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::metasequoia::v1::SettingsResponse* resp) {
               return service->Global(ctx, req, resp);
             }, this)));
}

Setting::Service::~Service() {
}

::grpc::Status Setting::Service::Set(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SettingSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::Get(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SettingGetRequest* request, ::palm::metasequoia::v1::SettingsResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::ByUser(::grpc::ServerContext* context, const ::palm::metasequoia::v1::SettingByUserRequest* request, ::palm::metasequoia::v1::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::My(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Setting::Service::Global(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::metasequoia::v1::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Locale_method_names[] = {
  "/palm.metasequoia.v1.Locale/Set",
  "/palm.metasequoia.v1.Locale/Get",
  "/palm.metasequoia.v1.Locale/ByLang",
};

std::unique_ptr< Locale::Stub> Locale::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Locale::Stub> stub(new Locale::Stub(channel, options));
  return stub;
}

Locale::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Set_(Locale_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Locale_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByLang_(Locale_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Locale::Stub::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void Locale::Stub::async::Set(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::metasequoia::v1::LocaleSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest& request, ::palm::metasequoia::v1::LocalesResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::LocaleGetRequest, ::palm::metasequoia::v1::LocalesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Locale::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest* request, ::palm::metasequoia::v1::LocalesResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::LocaleGetRequest, ::palm::metasequoia::v1::LocalesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Locale::Stub::async::Get(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest* request, ::palm::metasequoia::v1::LocalesResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse_Item>* Locale::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::LocalesResponse_Item, ::palm::metasequoia::v1::LocaleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse_Item>* Locale::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ByLang(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest& request, ::palm::metasequoia::v1::LocalesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::metasequoia::v1::LocaleByLangRequest, ::palm::metasequoia::v1::LocalesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByLang_, context, request, response);
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest* request, ::palm::metasequoia::v1::LocalesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::metasequoia::v1::LocaleByLangRequest, ::palm::metasequoia::v1::LocalesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, std::move(f));
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest* request, ::palm::metasequoia::v1::LocalesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse>* Locale::Stub::PrepareAsyncByLangRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::metasequoia::v1::LocalesResponse, ::palm::metasequoia::v1::LocaleByLangRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByLang_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::metasequoia::v1::LocalesResponse>* Locale::Stub::AsyncByLangRaw(::grpc::ClientContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByLangRaw(context, request, cq);
  result->StartCall();
  return result;
}

Locale::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::metasequoia::v1::LocaleSetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::LocaleSetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::metasequoia::v1::LocaleGetRequest, ::palm::metasequoia::v1::LocalesResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::LocaleGetRequest* req,
             ::palm::metasequoia::v1::LocalesResponse_Item* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::metasequoia::v1::LocaleByLangRequest, ::palm::metasequoia::v1::LocalesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::metasequoia::v1::LocaleByLangRequest* req,
             ::palm::metasequoia::v1::LocalesResponse* resp) {
               return service->ByLang(ctx, req, resp);
             }, this)));
}

Locale::Service::~Service() {
}

::grpc::Status Locale::Service::Set(::grpc::ServerContext* context, const ::palm::metasequoia::v1::LocaleSetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Get(::grpc::ServerContext* context, const ::palm::metasequoia::v1::LocaleGetRequest* request, ::palm::metasequoia::v1::LocalesResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ByLang(::grpc::ServerContext* context, const ::palm::metasequoia::v1::LocaleByLangRequest* request, ::palm::metasequoia::v1::LocalesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace metasequoia
}  // namespace v1

