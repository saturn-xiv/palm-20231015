// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: musa.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_musa_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_musa_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_musa_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_musa_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_musa_2eproto;
namespace palm {
namespace musa {
namespace v1 {
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class WechatPayBillDate;
struct WechatPayBillDateDefaultTypeInternal;
extern WechatPayBillDateDefaultTypeInternal _WechatPayBillDate_default_instance_;
class WechatPayBillResponse;
struct WechatPayBillResponseDefaultTypeInternal;
extern WechatPayBillResponseDefaultTypeInternal _WechatPayBillResponse_default_instance_;
class WechatPayCloseOrderRequest;
struct WechatPayCloseOrderRequestDefaultTypeInternal;
extern WechatPayCloseOrderRequestDefaultTypeInternal _WechatPayCloseOrderRequest_default_instance_;
class WechatPayCreateRefundRequest;
struct WechatPayCreateRefundRequestDefaultTypeInternal;
extern WechatPayCreateRefundRequestDefaultTypeInternal _WechatPayCreateRefundRequest_default_instance_;
class WechatPayCreateRefundRequest_Amount;
struct WechatPayCreateRefundRequest_AmountDefaultTypeInternal;
extern WechatPayCreateRefundRequest_AmountDefaultTypeInternal _WechatPayCreateRefundRequest_Amount_default_instance_;
class WechatPayCreateTransferRequest;
struct WechatPayCreateTransferRequestDefaultTypeInternal;
extern WechatPayCreateTransferRequestDefaultTypeInternal _WechatPayCreateTransferRequest_default_instance_;
class WechatPayCreateTransferRequest_Batch;
struct WechatPayCreateTransferRequest_BatchDefaultTypeInternal;
extern WechatPayCreateTransferRequest_BatchDefaultTypeInternal _WechatPayCreateTransferRequest_Batch_default_instance_;
class WechatPayCreateTransferRequest_Detail;
struct WechatPayCreateTransferRequest_DetailDefaultTypeInternal;
extern WechatPayCreateTransferRequest_DetailDefaultTypeInternal _WechatPayCreateTransferRequest_Detail_default_instance_;
class WechatPayCreateTransferResponse;
struct WechatPayCreateTransferResponseDefaultTypeInternal;
extern WechatPayCreateTransferResponseDefaultTypeInternal _WechatPayCreateTransferResponse_default_instance_;
class WechatPayCreateTransferResponse_Detail;
struct WechatPayCreateTransferResponse_DetailDefaultTypeInternal;
extern WechatPayCreateTransferResponse_DetailDefaultTypeInternal _WechatPayCreateTransferResponse_Detail_default_instance_;
class WechatPayCreateTransferResponse_Succeeded;
struct WechatPayCreateTransferResponse_SucceededDefaultTypeInternal;
extern WechatPayCreateTransferResponse_SucceededDefaultTypeInternal _WechatPayCreateTransferResponse_Succeeded_default_instance_;
class WechatPayFundFlowBillRequest;
struct WechatPayFundFlowBillRequestDefaultTypeInternal;
extern WechatPayFundFlowBillRequestDefaultTypeInternal _WechatPayFundFlowBillRequest_default_instance_;
class WechatPayJsapiPrepayIdResponse;
struct WechatPayJsapiPrepayIdResponseDefaultTypeInternal;
extern WechatPayJsapiPrepayIdResponseDefaultTypeInternal _WechatPayJsapiPrepayIdResponse_default_instance_;
class WechatPayNativeQrCodeUrlResponse;
struct WechatPayNativeQrCodeUrlResponseDefaultTypeInternal;
extern WechatPayNativeQrCodeUrlResponseDefaultTypeInternal _WechatPayNativeQrCodeUrlResponse_default_instance_;
class WechatPayPrepayRequest;
struct WechatPayPrepayRequestDefaultTypeInternal;
extern WechatPayPrepayRequestDefaultTypeInternal _WechatPayPrepayRequest_default_instance_;
class WechatPayPrepayRequest_Amount;
struct WechatPayPrepayRequest_AmountDefaultTypeInternal;
extern WechatPayPrepayRequest_AmountDefaultTypeInternal _WechatPayPrepayRequest_Amount_default_instance_;
class WechatPayQueryOrderByIdRequest;
struct WechatPayQueryOrderByIdRequestDefaultTypeInternal;
extern WechatPayQueryOrderByIdRequestDefaultTypeInternal _WechatPayQueryOrderByIdRequest_default_instance_;
class WechatPayQueryOrderByOutTradeNoRequest;
struct WechatPayQueryOrderByOutTradeNoRequestDefaultTypeInternal;
extern WechatPayQueryOrderByOutTradeNoRequestDefaultTypeInternal _WechatPayQueryOrderByOutTradeNoRequest_default_instance_;
class WechatPayQueryRefundRequest;
struct WechatPayQueryRefundRequestDefaultTypeInternal;
extern WechatPayQueryRefundRequestDefaultTypeInternal _WechatPayQueryRefundRequest_default_instance_;
class WechatPayQueryTransferRequest;
struct WechatPayQueryTransferRequestDefaultTypeInternal;
extern WechatPayQueryTransferRequestDefaultTypeInternal _WechatPayQueryTransferRequest_default_instance_;
class WechatPayQueryTransferResponse;
struct WechatPayQueryTransferResponseDefaultTypeInternal;
extern WechatPayQueryTransferResponseDefaultTypeInternal _WechatPayQueryTransferResponse_default_instance_;
class WechatPayQueryTransferResponse_Batch;
struct WechatPayQueryTransferResponse_BatchDefaultTypeInternal;
extern WechatPayQueryTransferResponse_BatchDefaultTypeInternal _WechatPayQueryTransferResponse_Batch_default_instance_;
class WechatPayQueryTransferResponse_Detail;
struct WechatPayQueryTransferResponse_DetailDefaultTypeInternal;
extern WechatPayQueryTransferResponse_DetailDefaultTypeInternal _WechatPayQueryTransferResponse_Detail_default_instance_;
class WechatPayRefundResponse;
struct WechatPayRefundResponseDefaultTypeInternal;
extern WechatPayRefundResponseDefaultTypeInternal _WechatPayRefundResponse_default_instance_;
class WechatPayTradeBillRequest;
struct WechatPayTradeBillRequestDefaultTypeInternal;
extern WechatPayTradeBillRequestDefaultTypeInternal _WechatPayTradeBillRequest_default_instance_;
class WechatPayTradeResponse;
struct WechatPayTradeResponseDefaultTypeInternal;
extern WechatPayTradeResponseDefaultTypeInternal _WechatPayTradeResponse_default_instance_;
}  // namespace v1
}  // namespace musa
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template <>
::palm::musa::v1::Error* Arena::CreateMaybeMessage<::palm::musa::v1::Error>(Arena*);
template <>
::palm::musa::v1::WechatPayBillDate* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayBillDate>(Arena*);
template <>
::palm::musa::v1::WechatPayBillResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayBillResponse>(Arena*);
template <>
::palm::musa::v1::WechatPayCloseOrderRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCloseOrderRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateRefundRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateRefundRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateRefundRequest_Amount* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateRefundRequest_Amount>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateTransferRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateTransferRequest_Batch* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferRequest_Batch>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateTransferRequest_Detail* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferRequest_Detail>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateTransferResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferResponse>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateTransferResponse_Detail* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferResponse_Detail>(Arena*);
template <>
::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded>(Arena*);
template <>
::palm::musa::v1::WechatPayFundFlowBillRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayFundFlowBillRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayJsapiPrepayIdResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayJsapiPrepayIdResponse>(Arena*);
template <>
::palm::musa::v1::WechatPayNativeQrCodeUrlResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayNativeQrCodeUrlResponse>(Arena*);
template <>
::palm::musa::v1::WechatPayPrepayRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayPrepayRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayPrepayRequest_Amount* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayPrepayRequest_Amount>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryOrderByIdRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryOrderByIdRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryOrderByOutTradeNoRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryRefundRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryRefundRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryTransferRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryTransferRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryTransferResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryTransferResponse>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryTransferResponse_Batch* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryTransferResponse_Batch>(Arena*);
template <>
::palm::musa::v1::WechatPayQueryTransferResponse_Detail* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayQueryTransferResponse_Detail>(Arena*);
template <>
::palm::musa::v1::WechatPayRefundResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayRefundResponse>(Arena*);
template <>
::palm::musa::v1::WechatPayTradeBillRequest* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayTradeBillRequest>(Arena*);
template <>
::palm::musa::v1::WechatPayTradeResponse* Arena::CreateMaybeMessage<::palm::musa::v1::WechatPayTradeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace palm {
namespace musa {
namespace v1 {
enum WechatPayTradeBillRequest_BillType : int {
  WechatPayTradeBillRequest_BillType_ALL = 0,
  WechatPayTradeBillRequest_BillType_SUCCESS = 1,
  WechatPayTradeBillRequest_BillType_REFUND = 2,
  WechatPayTradeBillRequest_BillType_WechatPayTradeBillRequest_BillType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatPayTradeBillRequest_BillType_WechatPayTradeBillRequest_BillType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatPayTradeBillRequest_BillType_IsValid(int value);
constexpr WechatPayTradeBillRequest_BillType WechatPayTradeBillRequest_BillType_BillType_MIN = static_cast<WechatPayTradeBillRequest_BillType>(0);
constexpr WechatPayTradeBillRequest_BillType WechatPayTradeBillRequest_BillType_BillType_MAX = static_cast<WechatPayTradeBillRequest_BillType>(2);
constexpr int WechatPayTradeBillRequest_BillType_BillType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatPayTradeBillRequest_BillType_descriptor();
template <typename T>
const std::string& WechatPayTradeBillRequest_BillType_Name(T value) {
  static_assert(std::is_same<T, WechatPayTradeBillRequest_BillType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BillType_Name().");
  return WechatPayTradeBillRequest_BillType_Name(static_cast<WechatPayTradeBillRequest_BillType>(value));
}
template <>
inline const std::string& WechatPayTradeBillRequest_BillType_Name(WechatPayTradeBillRequest_BillType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatPayTradeBillRequest_BillType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool WechatPayTradeBillRequest_BillType_Parse(absl::string_view name, WechatPayTradeBillRequest_BillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatPayTradeBillRequest_BillType>(
      WechatPayTradeBillRequest_BillType_descriptor(), name, value);
}
enum WechatPayFundFlowBillRequest_AccountType : int {
  WechatPayFundFlowBillRequest_AccountType_BASIC = 0,
  WechatPayFundFlowBillRequest_AccountType_OPERATION = 1,
  WechatPayFundFlowBillRequest_AccountType_FEES = 2,
  WechatPayFundFlowBillRequest_AccountType_WechatPayFundFlowBillRequest_AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatPayFundFlowBillRequest_AccountType_WechatPayFundFlowBillRequest_AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatPayFundFlowBillRequest_AccountType_IsValid(int value);
constexpr WechatPayFundFlowBillRequest_AccountType WechatPayFundFlowBillRequest_AccountType_AccountType_MIN = static_cast<WechatPayFundFlowBillRequest_AccountType>(0);
constexpr WechatPayFundFlowBillRequest_AccountType WechatPayFundFlowBillRequest_AccountType_AccountType_MAX = static_cast<WechatPayFundFlowBillRequest_AccountType>(2);
constexpr int WechatPayFundFlowBillRequest_AccountType_AccountType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatPayFundFlowBillRequest_AccountType_descriptor();
template <typename T>
const std::string& WechatPayFundFlowBillRequest_AccountType_Name(T value) {
  static_assert(std::is_same<T, WechatPayFundFlowBillRequest_AccountType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AccountType_Name().");
  return WechatPayFundFlowBillRequest_AccountType_Name(static_cast<WechatPayFundFlowBillRequest_AccountType>(value));
}
template <>
inline const std::string& WechatPayFundFlowBillRequest_AccountType_Name(WechatPayFundFlowBillRequest_AccountType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatPayFundFlowBillRequest_AccountType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool WechatPayFundFlowBillRequest_AccountType_Parse(absl::string_view name, WechatPayFundFlowBillRequest_AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatPayFundFlowBillRequest_AccountType>(
      WechatPayFundFlowBillRequest_AccountType_descriptor(), name, value);
}
enum WechatPayQueryTransferRequest_DetailStatus : int {
  WechatPayQueryTransferRequest_DetailStatus_ALL = 0,
  WechatPayQueryTransferRequest_DetailStatus_SUCCESS = 1,
  WechatPayQueryTransferRequest_DetailStatus_FAIL = 2,
  WechatPayQueryTransferRequest_DetailStatus_WechatPayQueryTransferRequest_DetailStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatPayQueryTransferRequest_DetailStatus_WechatPayQueryTransferRequest_DetailStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatPayQueryTransferRequest_DetailStatus_IsValid(int value);
constexpr WechatPayQueryTransferRequest_DetailStatus WechatPayQueryTransferRequest_DetailStatus_DetailStatus_MIN = static_cast<WechatPayQueryTransferRequest_DetailStatus>(0);
constexpr WechatPayQueryTransferRequest_DetailStatus WechatPayQueryTransferRequest_DetailStatus_DetailStatus_MAX = static_cast<WechatPayQueryTransferRequest_DetailStatus>(2);
constexpr int WechatPayQueryTransferRequest_DetailStatus_DetailStatus_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatPayQueryTransferRequest_DetailStatus_descriptor();
template <typename T>
const std::string& WechatPayQueryTransferRequest_DetailStatus_Name(T value) {
  static_assert(std::is_same<T, WechatPayQueryTransferRequest_DetailStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DetailStatus_Name().");
  return WechatPayQueryTransferRequest_DetailStatus_Name(static_cast<WechatPayQueryTransferRequest_DetailStatus>(value));
}
template <>
inline const std::string& WechatPayQueryTransferRequest_DetailStatus_Name(WechatPayQueryTransferRequest_DetailStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatPayQueryTransferRequest_DetailStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool WechatPayQueryTransferRequest_DetailStatus_Parse(absl::string_view name, WechatPayQueryTransferRequest_DetailStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatPayQueryTransferRequest_DetailStatus>(
      WechatPayQueryTransferRequest_DetailStatus_descriptor(), name, value);
}
enum WechatPayCurrency : int {
  CNY = 0,
  WechatPayCurrency_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatPayCurrency_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatPayCurrency_IsValid(int value);
constexpr WechatPayCurrency WechatPayCurrency_MIN = static_cast<WechatPayCurrency>(0);
constexpr WechatPayCurrency WechatPayCurrency_MAX = static_cast<WechatPayCurrency>(0);
constexpr int WechatPayCurrency_ARRAYSIZE = 0 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatPayCurrency_descriptor();
template <typename T>
const std::string& WechatPayCurrency_Name(T value) {
  static_assert(std::is_same<T, WechatPayCurrency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WechatPayCurrency_Name().");
  return WechatPayCurrency_Name(static_cast<WechatPayCurrency>(value));
}
template <>
inline const std::string& WechatPayCurrency_Name(WechatPayCurrency value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatPayCurrency_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool WechatPayCurrency_Parse(absl::string_view name, WechatPayCurrency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatPayCurrency>(
      WechatPayCurrency_descriptor(), name, value);
}
enum WechatPayNotifyAction : int {
  TRANSCATION = 0,
  REFUND = 1,
  WechatPayNotifyAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatPayNotifyAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatPayNotifyAction_IsValid(int value);
constexpr WechatPayNotifyAction WechatPayNotifyAction_MIN = static_cast<WechatPayNotifyAction>(0);
constexpr WechatPayNotifyAction WechatPayNotifyAction_MAX = static_cast<WechatPayNotifyAction>(1);
constexpr int WechatPayNotifyAction_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatPayNotifyAction_descriptor();
template <typename T>
const std::string& WechatPayNotifyAction_Name(T value) {
  static_assert(std::is_same<T, WechatPayNotifyAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WechatPayNotifyAction_Name().");
  return WechatPayNotifyAction_Name(static_cast<WechatPayNotifyAction>(value));
}
template <>
inline const std::string& WechatPayNotifyAction_Name(WechatPayNotifyAction value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatPayNotifyAction_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool WechatPayNotifyAction_Parse(absl::string_view name, WechatPayNotifyAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatPayNotifyAction>(
      WechatPayNotifyAction_descriptor(), name, value);
}
enum WechatPayTarType : int {
  GZIP = 0,
  WechatPayTarType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatPayTarType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatPayTarType_IsValid(int value);
constexpr WechatPayTarType WechatPayTarType_MIN = static_cast<WechatPayTarType>(0);
constexpr WechatPayTarType WechatPayTarType_MAX = static_cast<WechatPayTarType>(0);
constexpr int WechatPayTarType_ARRAYSIZE = 0 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatPayTarType_descriptor();
template <typename T>
const std::string& WechatPayTarType_Name(T value) {
  static_assert(std::is_same<T, WechatPayTarType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WechatPayTarType_Name().");
  return WechatPayTarType_Name(static_cast<WechatPayTarType>(value));
}
template <>
inline const std::string& WechatPayTarType_Name(WechatPayTarType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatPayTarType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool WechatPayTarType_Parse(absl::string_view name, WechatPayTarType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatPayTarType>(
      WechatPayTarType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WechatPayPrepayRequest_Amount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayPrepayRequest.Amount) */ {
 public:
  inline WechatPayPrepayRequest_Amount() : WechatPayPrepayRequest_Amount(nullptr) {}
  ~WechatPayPrepayRequest_Amount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayPrepayRequest_Amount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayPrepayRequest_Amount(const WechatPayPrepayRequest_Amount& from);
  WechatPayPrepayRequest_Amount(WechatPayPrepayRequest_Amount&& from) noexcept
    : WechatPayPrepayRequest_Amount() {
    *this = ::std::move(from);
  }

  inline WechatPayPrepayRequest_Amount& operator=(const WechatPayPrepayRequest_Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayPrepayRequest_Amount& operator=(WechatPayPrepayRequest_Amount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayPrepayRequest_Amount& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayPrepayRequest_Amount* internal_default_instance() {
    return reinterpret_cast<const WechatPayPrepayRequest_Amount*>(
               &_WechatPayPrepayRequest_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WechatPayPrepayRequest_Amount& a, WechatPayPrepayRequest_Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayPrepayRequest_Amount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayPrepayRequest_Amount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayPrepayRequest_Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayPrepayRequest_Amount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayPrepayRequest_Amount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayPrepayRequest_Amount& from) {
    WechatPayPrepayRequest_Amount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayPrepayRequest_Amount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayPrepayRequest.Amount";
  }
  protected:
  explicit WechatPayPrepayRequest_Amount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kCurrencyFieldNumber = 2,
  };
  // int32 total = 1;
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // .palm.musa.v1.WechatPayCurrency currency = 2;
  void clear_currency() ;
  ::palm::musa::v1::WechatPayCurrency currency() const;
  void set_currency(::palm::musa::v1::WechatPayCurrency value);

  private:
  ::palm::musa::v1::WechatPayCurrency _internal_currency() const;
  void _internal_set_currency(::palm::musa::v1::WechatPayCurrency value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayPrepayRequest.Amount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t total_;
    int currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayPrepayRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayPrepayRequest) */ {
 public:
  inline WechatPayPrepayRequest() : WechatPayPrepayRequest(nullptr) {}
  ~WechatPayPrepayRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayPrepayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayPrepayRequest(const WechatPayPrepayRequest& from);
  WechatPayPrepayRequest(WechatPayPrepayRequest&& from) noexcept
    : WechatPayPrepayRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayPrepayRequest& operator=(const WechatPayPrepayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayPrepayRequest& operator=(WechatPayPrepayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayPrepayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayPrepayRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayPrepayRequest*>(
               &_WechatPayPrepayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WechatPayPrepayRequest& a, WechatPayPrepayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayPrepayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayPrepayRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayPrepayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayPrepayRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayPrepayRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayPrepayRequest& from) {
    WechatPayPrepayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayPrepayRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayPrepayRequest";
  }
  protected:
  explicit WechatPayPrepayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatPayPrepayRequest_Amount Amount;

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kPayerOpenIdFieldNumber = 2,
    kDescriptionFieldNumber = 9,
    kNotifyHostFieldNumber = 11,
    kAmountFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // optional string payer_open_id = 2;
  bool has_payer_open_id() const;
  void clear_payer_open_id() ;
  const std::string& payer_open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payer_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_payer_open_id();
  PROTOBUF_NODISCARD std::string* release_payer_open_id();
  void set_allocated_payer_open_id(std::string* ptr);

  private:
  const std::string& _internal_payer_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer_open_id(
      const std::string& value);
  std::string* _internal_mutable_payer_open_id();

  public:
  // string description = 9;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string notify_host = 11;
  void clear_notify_host() ;
  const std::string& notify_host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notify_host(Arg_&& arg, Args_... args);
  std::string* mutable_notify_host();
  PROTOBUF_NODISCARD std::string* release_notify_host();
  void set_allocated_notify_host(std::string* ptr);

  private:
  const std::string& _internal_notify_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_host(
      const std::string& value);
  std::string* _internal_mutable_notify_host();

  public:
  // .palm.musa.v1.WechatPayPrepayRequest.Amount amount = 3;
  bool has_amount() const;
  void clear_amount() ;
  const ::palm::musa::v1::WechatPayPrepayRequest_Amount& amount() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayPrepayRequest_Amount* release_amount();
  ::palm::musa::v1::WechatPayPrepayRequest_Amount* mutable_amount();
  void set_allocated_amount(::palm::musa::v1::WechatPayPrepayRequest_Amount* amount);
  private:
  const ::palm::musa::v1::WechatPayPrepayRequest_Amount& _internal_amount() const;
  ::palm::musa::v1::WechatPayPrepayRequest_Amount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::palm::musa::v1::WechatPayPrepayRequest_Amount* amount);
  ::palm::musa::v1::WechatPayPrepayRequest_Amount* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayPrepayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_host_;
    ::palm::musa::v1::WechatPayPrepayRequest_Amount* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCloseOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCloseOrderRequest) */ {
 public:
  inline WechatPayCloseOrderRequest() : WechatPayCloseOrderRequest(nullptr) {}
  ~WechatPayCloseOrderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCloseOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCloseOrderRequest(const WechatPayCloseOrderRequest& from);
  WechatPayCloseOrderRequest(WechatPayCloseOrderRequest&& from) noexcept
    : WechatPayCloseOrderRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayCloseOrderRequest& operator=(const WechatPayCloseOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCloseOrderRequest& operator=(WechatPayCloseOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCloseOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCloseOrderRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayCloseOrderRequest*>(
               &_WechatPayCloseOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WechatPayCloseOrderRequest& a, WechatPayCloseOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCloseOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCloseOrderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCloseOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCloseOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCloseOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCloseOrderRequest& from) {
    WechatPayCloseOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCloseOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCloseOrderRequest";
  }
  protected:
  explicit WechatPayCloseOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutTradeNoFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string out_trade_no = 1;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* ptr);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* ptr);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCloseOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_trade_no_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Error& from) {
    Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayNativeQrCodeUrlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayNativeQrCodeUrlResponse) */ {
 public:
  inline WechatPayNativeQrCodeUrlResponse() : WechatPayNativeQrCodeUrlResponse(nullptr) {}
  ~WechatPayNativeQrCodeUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayNativeQrCodeUrlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayNativeQrCodeUrlResponse(const WechatPayNativeQrCodeUrlResponse& from);
  WechatPayNativeQrCodeUrlResponse(WechatPayNativeQrCodeUrlResponse&& from) noexcept
    : WechatPayNativeQrCodeUrlResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayNativeQrCodeUrlResponse& operator=(const WechatPayNativeQrCodeUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayNativeQrCodeUrlResponse& operator=(WechatPayNativeQrCodeUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayNativeQrCodeUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayNativeQrCodeUrlResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayNativeQrCodeUrlResponse*>(
               &_WechatPayNativeQrCodeUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WechatPayNativeQrCodeUrlResponse& a, WechatPayNativeQrCodeUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayNativeQrCodeUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayNativeQrCodeUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayNativeQrCodeUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayNativeQrCodeUrlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayNativeQrCodeUrlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayNativeQrCodeUrlResponse& from) {
    WechatPayNativeQrCodeUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayNativeQrCodeUrlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayNativeQrCodeUrlResponse";
  }
  protected:
  explicit WechatPayNativeQrCodeUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kOutTradeNoFieldNumber = 2,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string out_trade_no = 2;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* ptr);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayNativeQrCodeUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_trade_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayTradeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayTradeResponse) */ {
 public:
  inline WechatPayTradeResponse() : WechatPayTradeResponse(nullptr) {}
  ~WechatPayTradeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayTradeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayTradeResponse(const WechatPayTradeResponse& from);
  WechatPayTradeResponse(WechatPayTradeResponse&& from) noexcept
    : WechatPayTradeResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayTradeResponse& operator=(const WechatPayTradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayTradeResponse& operator=(WechatPayTradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayTradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayTradeResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayTradeResponse*>(
               &_WechatPayTradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WechatPayTradeResponse& a, WechatPayTradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayTradeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayTradeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayTradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayTradeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayTradeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayTradeResponse& from) {
    WechatPayTradeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayTradeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayTradeResponse";
  }
  protected:
  explicit WechatPayTradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeStateFieldNumber = 1,
    kTradeStateDescFieldNumber = 2,
  };
  // string trade_state = 1;
  void clear_trade_state() ;
  const std::string& trade_state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trade_state(Arg_&& arg, Args_... args);
  std::string* mutable_trade_state();
  PROTOBUF_NODISCARD std::string* release_trade_state();
  void set_allocated_trade_state(std::string* ptr);

  private:
  const std::string& _internal_trade_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_state(
      const std::string& value);
  std::string* _internal_mutable_trade_state();

  public:
  // string trade_state_desc = 2;
  void clear_trade_state_desc() ;
  const std::string& trade_state_desc() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trade_state_desc(Arg_&& arg, Args_... args);
  std::string* mutable_trade_state_desc();
  PROTOBUF_NODISCARD std::string* release_trade_state_desc();
  void set_allocated_trade_state_desc(std::string* ptr);

  private:
  const std::string& _internal_trade_state_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_state_desc(
      const std::string& value);
  std::string* _internal_mutable_trade_state_desc();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayTradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_state_desc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryOrderByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryOrderByIdRequest) */ {
 public:
  inline WechatPayQueryOrderByIdRequest() : WechatPayQueryOrderByIdRequest(nullptr) {}
  ~WechatPayQueryOrderByIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryOrderByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryOrderByIdRequest(const WechatPayQueryOrderByIdRequest& from);
  WechatPayQueryOrderByIdRequest(WechatPayQueryOrderByIdRequest&& from) noexcept
    : WechatPayQueryOrderByIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryOrderByIdRequest& operator=(const WechatPayQueryOrderByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryOrderByIdRequest& operator=(WechatPayQueryOrderByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryOrderByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryOrderByIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryOrderByIdRequest*>(
               &_WechatPayQueryOrderByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WechatPayQueryOrderByIdRequest& a, WechatPayQueryOrderByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryOrderByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryOrderByIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryOrderByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryOrderByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryOrderByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryOrderByIdRequest& from) {
    WechatPayQueryOrderByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryOrderByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryOrderByIdRequest";
  }
  protected:
  explicit WechatPayQueryOrderByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
  };
  // string transaction_id = 1;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* ptr);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryOrderByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryOrderByOutTradeNoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest) */ {
 public:
  inline WechatPayQueryOrderByOutTradeNoRequest() : WechatPayQueryOrderByOutTradeNoRequest(nullptr) {}
  ~WechatPayQueryOrderByOutTradeNoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryOrderByOutTradeNoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryOrderByOutTradeNoRequest(const WechatPayQueryOrderByOutTradeNoRequest& from);
  WechatPayQueryOrderByOutTradeNoRequest(WechatPayQueryOrderByOutTradeNoRequest&& from) noexcept
    : WechatPayQueryOrderByOutTradeNoRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryOrderByOutTradeNoRequest& operator=(const WechatPayQueryOrderByOutTradeNoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryOrderByOutTradeNoRequest& operator=(WechatPayQueryOrderByOutTradeNoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryOrderByOutTradeNoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryOrderByOutTradeNoRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryOrderByOutTradeNoRequest*>(
               &_WechatPayQueryOrderByOutTradeNoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WechatPayQueryOrderByOutTradeNoRequest& a, WechatPayQueryOrderByOutTradeNoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryOrderByOutTradeNoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryOrderByOutTradeNoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryOrderByOutTradeNoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryOrderByOutTradeNoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryOrderByOutTradeNoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryOrderByOutTradeNoRequest& from) {
    WechatPayQueryOrderByOutTradeNoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryOrderByOutTradeNoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest";
  }
  protected:
  explicit WechatPayQueryOrderByOutTradeNoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutTradeNoFieldNumber = 1,
  };
  // string out_trade_no = 1;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* ptr);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_trade_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayJsapiPrepayIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayJsapiPrepayIdResponse) */ {
 public:
  inline WechatPayJsapiPrepayIdResponse() : WechatPayJsapiPrepayIdResponse(nullptr) {}
  ~WechatPayJsapiPrepayIdResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayJsapiPrepayIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayJsapiPrepayIdResponse(const WechatPayJsapiPrepayIdResponse& from);
  WechatPayJsapiPrepayIdResponse(WechatPayJsapiPrepayIdResponse&& from) noexcept
    : WechatPayJsapiPrepayIdResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayJsapiPrepayIdResponse& operator=(const WechatPayJsapiPrepayIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayJsapiPrepayIdResponse& operator=(WechatPayJsapiPrepayIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayJsapiPrepayIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayJsapiPrepayIdResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayJsapiPrepayIdResponse*>(
               &_WechatPayJsapiPrepayIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WechatPayJsapiPrepayIdResponse& a, WechatPayJsapiPrepayIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayJsapiPrepayIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayJsapiPrepayIdResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayJsapiPrepayIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayJsapiPrepayIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayJsapiPrepayIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayJsapiPrepayIdResponse& from) {
    WechatPayJsapiPrepayIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayJsapiPrepayIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayJsapiPrepayIdResponse";
  }
  protected:
  explicit WechatPayJsapiPrepayIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kTimeStampFieldNumber = 2,
    kNonceStrFieldNumber = 3,
    kPackageFieldNumber = 4,
    kSignTypeFieldNumber = 5,
    kPaySignFieldNumber = 6,
    kOutTradeNoFieldNumber = 11,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string time_stamp = 2;
  void clear_time_stamp() ;
  const std::string& time_stamp() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time_stamp(Arg_&& arg, Args_... args);
  std::string* mutable_time_stamp();
  PROTOBUF_NODISCARD std::string* release_time_stamp();
  void set_allocated_time_stamp(std::string* ptr);

  private:
  const std::string& _internal_time_stamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_stamp(
      const std::string& value);
  std::string* _internal_mutable_time_stamp();

  public:
  // string nonce_str = 3;
  void clear_nonce_str() ;
  const std::string& nonce_str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce_str(Arg_&& arg, Args_... args);
  std::string* mutable_nonce_str();
  PROTOBUF_NODISCARD std::string* release_nonce_str();
  void set_allocated_nonce_str(std::string* ptr);

  private:
  const std::string& _internal_nonce_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce_str(
      const std::string& value);
  std::string* _internal_mutable_nonce_str();

  public:
  // string package = 4;
  void clear_package() ;
  const std::string& package() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_package(Arg_&& arg, Args_... args);
  std::string* mutable_package();
  PROTOBUF_NODISCARD std::string* release_package();
  void set_allocated_package(std::string* ptr);

  private:
  const std::string& _internal_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package(
      const std::string& value);
  std::string* _internal_mutable_package();

  public:
  // string sign_type = 5;
  void clear_sign_type() ;
  const std::string& sign_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sign_type(Arg_&& arg, Args_... args);
  std::string* mutable_sign_type();
  PROTOBUF_NODISCARD std::string* release_sign_type();
  void set_allocated_sign_type(std::string* ptr);

  private:
  const std::string& _internal_sign_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_type(
      const std::string& value);
  std::string* _internal_mutable_sign_type();

  public:
  // string pay_sign = 6;
  void clear_pay_sign() ;
  const std::string& pay_sign() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pay_sign(Arg_&& arg, Args_... args);
  std::string* mutable_pay_sign();
  PROTOBUF_NODISCARD std::string* release_pay_sign();
  void set_allocated_pay_sign(std::string* ptr);

  private:
  const std::string& _internal_pay_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pay_sign(
      const std::string& value);
  std::string* _internal_mutable_pay_sign();

  public:
  // string out_trade_no = 11;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* ptr);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayJsapiPrepayIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_stamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_str_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_trade_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayBillDate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayBillDate) */ {
 public:
  inline WechatPayBillDate() : WechatPayBillDate(nullptr) {}
  ~WechatPayBillDate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayBillDate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayBillDate(const WechatPayBillDate& from);
  WechatPayBillDate(WechatPayBillDate&& from) noexcept
    : WechatPayBillDate() {
    *this = ::std::move(from);
  }

  inline WechatPayBillDate& operator=(const WechatPayBillDate& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayBillDate& operator=(WechatPayBillDate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayBillDate& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayBillDate* internal_default_instance() {
    return reinterpret_cast<const WechatPayBillDate*>(
               &_WechatPayBillDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WechatPayBillDate& a, WechatPayBillDate& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayBillDate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayBillDate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayBillDate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayBillDate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayBillDate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayBillDate& from) {
    WechatPayBillDate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayBillDate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayBillDate";
  }
  protected:
  explicit WechatPayBillDate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // int32 year = 1;
  void clear_year() ;
  ::int32_t year() const;
  void set_year(::int32_t value);

  private:
  ::int32_t _internal_year() const;
  void _internal_set_year(::int32_t value);

  public:
  // int32 month = 2;
  void clear_month() ;
  ::int32_t month() const;
  void set_month(::int32_t value);

  private:
  ::int32_t _internal_month() const;
  void _internal_set_month(::int32_t value);

  public:
  // int32 day = 3;
  void clear_day() ;
  ::int32_t day() const;
  void set_day(::int32_t value);

  private:
  ::int32_t _internal_day() const;
  void _internal_set_day(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayBillDate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t year_;
    ::int32_t month_;
    ::int32_t day_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayBillResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayBillResponse) */ {
 public:
  inline WechatPayBillResponse() : WechatPayBillResponse(nullptr) {}
  ~WechatPayBillResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayBillResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayBillResponse(const WechatPayBillResponse& from);
  WechatPayBillResponse(WechatPayBillResponse&& from) noexcept
    : WechatPayBillResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayBillResponse& operator=(const WechatPayBillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayBillResponse& operator=(WechatPayBillResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayBillResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayBillResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayBillResponse*>(
               &_WechatPayBillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WechatPayBillResponse& a, WechatPayBillResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayBillResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayBillResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayBillResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayBillResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayBillResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayBillResponse& from) {
    WechatPayBillResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayBillResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayBillResponse";
  }
  protected:
  explicit WechatPayBillResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayBillResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayTradeBillRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayTradeBillRequest) */ {
 public:
  inline WechatPayTradeBillRequest() : WechatPayTradeBillRequest(nullptr) {}
  ~WechatPayTradeBillRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayTradeBillRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayTradeBillRequest(const WechatPayTradeBillRequest& from);
  WechatPayTradeBillRequest(WechatPayTradeBillRequest&& from) noexcept
    : WechatPayTradeBillRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayTradeBillRequest& operator=(const WechatPayTradeBillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayTradeBillRequest& operator=(WechatPayTradeBillRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayTradeBillRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayTradeBillRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayTradeBillRequest*>(
               &_WechatPayTradeBillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WechatPayTradeBillRequest& a, WechatPayTradeBillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayTradeBillRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayTradeBillRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayTradeBillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayTradeBillRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayTradeBillRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayTradeBillRequest& from) {
    WechatPayTradeBillRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayTradeBillRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayTradeBillRequest";
  }
  protected:
  explicit WechatPayTradeBillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BillType = WechatPayTradeBillRequest_BillType;
  static constexpr BillType ALL = WechatPayTradeBillRequest_BillType_ALL;
  static constexpr BillType SUCCESS = WechatPayTradeBillRequest_BillType_SUCCESS;
  static constexpr BillType REFUND = WechatPayTradeBillRequest_BillType_REFUND;
  static inline bool BillType_IsValid(int value) {
    return WechatPayTradeBillRequest_BillType_IsValid(value);
  }
  static constexpr BillType BillType_MIN = WechatPayTradeBillRequest_BillType_BillType_MIN;
  static constexpr BillType BillType_MAX = WechatPayTradeBillRequest_BillType_BillType_MAX;
  static constexpr int BillType_ARRAYSIZE = WechatPayTradeBillRequest_BillType_BillType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BillType_descriptor() {
    return WechatPayTradeBillRequest_BillType_descriptor();
  }
  template <typename T>
  static inline const std::string& BillType_Name(T value) {
    return WechatPayTradeBillRequest_BillType_Name(value);
  }
  static inline bool BillType_Parse(absl::string_view name, BillType* value) {
    return WechatPayTradeBillRequest_BillType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBillDateFieldNumber = 1,
    kBillTypeFieldNumber = 2,
  };
  // .palm.musa.v1.WechatPayBillDate bill_date = 1;
  bool has_bill_date() const;
  void clear_bill_date() ;
  const ::palm::musa::v1::WechatPayBillDate& bill_date() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayBillDate* release_bill_date();
  ::palm::musa::v1::WechatPayBillDate* mutable_bill_date();
  void set_allocated_bill_date(::palm::musa::v1::WechatPayBillDate* bill_date);
  private:
  const ::palm::musa::v1::WechatPayBillDate& _internal_bill_date() const;
  ::palm::musa::v1::WechatPayBillDate* _internal_mutable_bill_date();
  public:
  void unsafe_arena_set_allocated_bill_date(
      ::palm::musa::v1::WechatPayBillDate* bill_date);
  ::palm::musa::v1::WechatPayBillDate* unsafe_arena_release_bill_date();
  // .palm.musa.v1.WechatPayTradeBillRequest.BillType bill_type = 2;
  void clear_bill_type() ;
  ::palm::musa::v1::WechatPayTradeBillRequest_BillType bill_type() const;
  void set_bill_type(::palm::musa::v1::WechatPayTradeBillRequest_BillType value);

  private:
  ::palm::musa::v1::WechatPayTradeBillRequest_BillType _internal_bill_type() const;
  void _internal_set_bill_type(::palm::musa::v1::WechatPayTradeBillRequest_BillType value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayTradeBillRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::palm::musa::v1::WechatPayBillDate* bill_date_;
    int bill_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayFundFlowBillRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayFundFlowBillRequest) */ {
 public:
  inline WechatPayFundFlowBillRequest() : WechatPayFundFlowBillRequest(nullptr) {}
  ~WechatPayFundFlowBillRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayFundFlowBillRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayFundFlowBillRequest(const WechatPayFundFlowBillRequest& from);
  WechatPayFundFlowBillRequest(WechatPayFundFlowBillRequest&& from) noexcept
    : WechatPayFundFlowBillRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayFundFlowBillRequest& operator=(const WechatPayFundFlowBillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayFundFlowBillRequest& operator=(WechatPayFundFlowBillRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayFundFlowBillRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayFundFlowBillRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayFundFlowBillRequest*>(
               &_WechatPayFundFlowBillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WechatPayFundFlowBillRequest& a, WechatPayFundFlowBillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayFundFlowBillRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayFundFlowBillRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayFundFlowBillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayFundFlowBillRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayFundFlowBillRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayFundFlowBillRequest& from) {
    WechatPayFundFlowBillRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayFundFlowBillRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayFundFlowBillRequest";
  }
  protected:
  explicit WechatPayFundFlowBillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AccountType = WechatPayFundFlowBillRequest_AccountType;
  static constexpr AccountType BASIC = WechatPayFundFlowBillRequest_AccountType_BASIC;
  static constexpr AccountType OPERATION = WechatPayFundFlowBillRequest_AccountType_OPERATION;
  static constexpr AccountType FEES = WechatPayFundFlowBillRequest_AccountType_FEES;
  static inline bool AccountType_IsValid(int value) {
    return WechatPayFundFlowBillRequest_AccountType_IsValid(value);
  }
  static constexpr AccountType AccountType_MIN = WechatPayFundFlowBillRequest_AccountType_AccountType_MIN;
  static constexpr AccountType AccountType_MAX = WechatPayFundFlowBillRequest_AccountType_AccountType_MAX;
  static constexpr int AccountType_ARRAYSIZE = WechatPayFundFlowBillRequest_AccountType_AccountType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
    return WechatPayFundFlowBillRequest_AccountType_descriptor();
  }
  template <typename T>
  static inline const std::string& AccountType_Name(T value) {
    return WechatPayFundFlowBillRequest_AccountType_Name(value);
  }
  static inline bool AccountType_Parse(absl::string_view name, AccountType* value) {
    return WechatPayFundFlowBillRequest_AccountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBillDateFieldNumber = 1,
    kAccountTypeFieldNumber = 2,
  };
  // .palm.musa.v1.WechatPayBillDate bill_date = 1;
  bool has_bill_date() const;
  void clear_bill_date() ;
  const ::palm::musa::v1::WechatPayBillDate& bill_date() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayBillDate* release_bill_date();
  ::palm::musa::v1::WechatPayBillDate* mutable_bill_date();
  void set_allocated_bill_date(::palm::musa::v1::WechatPayBillDate* bill_date);
  private:
  const ::palm::musa::v1::WechatPayBillDate& _internal_bill_date() const;
  ::palm::musa::v1::WechatPayBillDate* _internal_mutable_bill_date();
  public:
  void unsafe_arena_set_allocated_bill_date(
      ::palm::musa::v1::WechatPayBillDate* bill_date);
  ::palm::musa::v1::WechatPayBillDate* unsafe_arena_release_bill_date();
  // .palm.musa.v1.WechatPayFundFlowBillRequest.AccountType account_type = 2;
  void clear_account_type() ;
  ::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType account_type() const;
  void set_account_type(::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType value);

  private:
  ::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType _internal_account_type() const;
  void _internal_set_account_type(::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayFundFlowBillRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::palm::musa::v1::WechatPayBillDate* bill_date_;
    int account_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateRefundRequest_Amount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateRefundRequest.Amount) */ {
 public:
  inline WechatPayCreateRefundRequest_Amount() : WechatPayCreateRefundRequest_Amount(nullptr) {}
  ~WechatPayCreateRefundRequest_Amount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateRefundRequest_Amount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateRefundRequest_Amount(const WechatPayCreateRefundRequest_Amount& from);
  WechatPayCreateRefundRequest_Amount(WechatPayCreateRefundRequest_Amount&& from) noexcept
    : WechatPayCreateRefundRequest_Amount() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateRefundRequest_Amount& operator=(const WechatPayCreateRefundRequest_Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateRefundRequest_Amount& operator=(WechatPayCreateRefundRequest_Amount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateRefundRequest_Amount& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateRefundRequest_Amount* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateRefundRequest_Amount*>(
               &_WechatPayCreateRefundRequest_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WechatPayCreateRefundRequest_Amount& a, WechatPayCreateRefundRequest_Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateRefundRequest_Amount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateRefundRequest_Amount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateRefundRequest_Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateRefundRequest_Amount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateRefundRequest_Amount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateRefundRequest_Amount& from) {
    WechatPayCreateRefundRequest_Amount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateRefundRequest_Amount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateRefundRequest.Amount";
  }
  protected:
  explicit WechatPayCreateRefundRequest_Amount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kRefundFieldNumber = 2,
    kCurrencyFieldNumber = 3,
  };
  // int32 total = 1;
  void clear_total() ;
  ::int32_t total() const;
  void set_total(::int32_t value);

  private:
  ::int32_t _internal_total() const;
  void _internal_set_total(::int32_t value);

  public:
  // int32 refund = 2;
  void clear_refund() ;
  ::int32_t refund() const;
  void set_refund(::int32_t value);

  private:
  ::int32_t _internal_refund() const;
  void _internal_set_refund(::int32_t value);

  public:
  // .palm.musa.v1.WechatPayCurrency currency = 3;
  void clear_currency() ;
  ::palm::musa::v1::WechatPayCurrency currency() const;
  void set_currency(::palm::musa::v1::WechatPayCurrency value);

  private:
  ::palm::musa::v1::WechatPayCurrency _internal_currency() const;
  void _internal_set_currency(::palm::musa::v1::WechatPayCurrency value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateRefundRequest.Amount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t total_;
    ::int32_t refund_;
    int currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateRefundRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateRefundRequest) */ {
 public:
  inline WechatPayCreateRefundRequest() : WechatPayCreateRefundRequest(nullptr) {}
  ~WechatPayCreateRefundRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateRefundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateRefundRequest(const WechatPayCreateRefundRequest& from);
  WechatPayCreateRefundRequest(WechatPayCreateRefundRequest&& from) noexcept
    : WechatPayCreateRefundRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateRefundRequest& operator=(const WechatPayCreateRefundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateRefundRequest& operator=(WechatPayCreateRefundRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateRefundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateRefundRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateRefundRequest*>(
               &_WechatPayCreateRefundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WechatPayCreateRefundRequest& a, WechatPayCreateRefundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateRefundRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateRefundRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateRefundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateRefundRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateRefundRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateRefundRequest& from) {
    WechatPayCreateRefundRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateRefundRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateRefundRequest";
  }
  protected:
  explicit WechatPayCreateRefundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatPayCreateRefundRequest_Amount Amount;

  // accessors -------------------------------------------------------

  enum : int {
    kOutTradeNoFieldNumber = 1,
    kReasonFieldNumber = 2,
    kNotifyHostFieldNumber = 11,
    kAmountFieldNumber = 3,
  };
  // string out_trade_no = 1;
  void clear_out_trade_no() ;
  const std::string& out_trade_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_trade_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_trade_no();
  PROTOBUF_NODISCARD std::string* release_out_trade_no();
  void set_allocated_out_trade_no(std::string* ptr);

  private:
  const std::string& _internal_out_trade_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_trade_no(
      const std::string& value);
  std::string* _internal_mutable_out_trade_no();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* ptr);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string notify_host = 11;
  void clear_notify_host() ;
  const std::string& notify_host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notify_host(Arg_&& arg, Args_... args);
  std::string* mutable_notify_host();
  PROTOBUF_NODISCARD std::string* release_notify_host();
  void set_allocated_notify_host(std::string* ptr);

  private:
  const std::string& _internal_notify_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notify_host(
      const std::string& value);
  std::string* _internal_mutable_notify_host();

  public:
  // .palm.musa.v1.WechatPayCreateRefundRequest.Amount amount = 3;
  bool has_amount() const;
  void clear_amount() ;
  const ::palm::musa::v1::WechatPayCreateRefundRequest_Amount& amount() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* release_amount();
  ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* mutable_amount();
  void set_allocated_amount(::palm::musa::v1::WechatPayCreateRefundRequest_Amount* amount);
  private:
  const ::palm::musa::v1::WechatPayCreateRefundRequest_Amount& _internal_amount() const;
  ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* amount);
  ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateRefundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_trade_no_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notify_host_;
    ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryRefundRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryRefundRequest) */ {
 public:
  inline WechatPayQueryRefundRequest() : WechatPayQueryRefundRequest(nullptr) {}
  ~WechatPayQueryRefundRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryRefundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryRefundRequest(const WechatPayQueryRefundRequest& from);
  WechatPayQueryRefundRequest(WechatPayQueryRefundRequest&& from) noexcept
    : WechatPayQueryRefundRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryRefundRequest& operator=(const WechatPayQueryRefundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryRefundRequest& operator=(WechatPayQueryRefundRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryRefundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryRefundRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryRefundRequest*>(
               &_WechatPayQueryRefundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(WechatPayQueryRefundRequest& a, WechatPayQueryRefundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryRefundRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryRefundRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryRefundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryRefundRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryRefundRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryRefundRequest& from) {
    WechatPayQueryRefundRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryRefundRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryRefundRequest";
  }
  protected:
  explicit WechatPayQueryRefundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutRefundNoFieldNumber = 1,
  };
  // string out_refund_no = 1;
  void clear_out_refund_no() ;
  const std::string& out_refund_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_refund_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_refund_no();
  PROTOBUF_NODISCARD std::string* release_out_refund_no();
  void set_allocated_out_refund_no(std::string* ptr);

  private:
  const std::string& _internal_out_refund_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_refund_no(
      const std::string& value);
  std::string* _internal_mutable_out_refund_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryRefundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_refund_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayRefundResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayRefundResponse) */ {
 public:
  inline WechatPayRefundResponse() : WechatPayRefundResponse(nullptr) {}
  ~WechatPayRefundResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayRefundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayRefundResponse(const WechatPayRefundResponse& from);
  WechatPayRefundResponse(WechatPayRefundResponse&& from) noexcept
    : WechatPayRefundResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayRefundResponse& operator=(const WechatPayRefundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayRefundResponse& operator=(WechatPayRefundResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayRefundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayRefundResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayRefundResponse*>(
               &_WechatPayRefundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WechatPayRefundResponse& a, WechatPayRefundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayRefundResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayRefundResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayRefundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayRefundResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayRefundResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayRefundResponse& from) {
    WechatPayRefundResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayRefundResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayRefundResponse";
  }
  protected:
  explicit WechatPayRefundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutRefundNoFieldNumber = 1,
    kChannelFieldNumber = 2,
    kStatusFieldNumber = 3,
    kUserReceivedAccountFieldNumber = 4,
    kCreateTimeFieldNumber = 99,
  };
  // string out_refund_no = 1;
  void clear_out_refund_no() ;
  const std::string& out_refund_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_refund_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_refund_no();
  PROTOBUF_NODISCARD std::string* release_out_refund_no();
  void set_allocated_out_refund_no(std::string* ptr);

  private:
  const std::string& _internal_out_refund_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_refund_no(
      const std::string& value);
  std::string* _internal_mutable_out_refund_no();

  public:
  // string channel = 2;
  void clear_channel() ;
  const std::string& channel() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* ptr);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string user_received_account = 4;
  void clear_user_received_account() ;
  const std::string& user_received_account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_received_account(Arg_&& arg, Args_... args);
  std::string* mutable_user_received_account();
  PROTOBUF_NODISCARD std::string* release_user_received_account();
  void set_allocated_user_received_account(std::string* ptr);

  private:
  const std::string& _internal_user_received_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_received_account(
      const std::string& value);
  std::string* _internal_mutable_user_received_account();

  public:
  // string create_time = 99;
  void clear_create_time() ;
  const std::string& create_time() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_create_time(Arg_&& arg, Args_... args);
  std::string* mutable_create_time();
  PROTOBUF_NODISCARD std::string* release_create_time();
  void set_allocated_create_time(std::string* ptr);

  private:
  const std::string& _internal_create_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_time(
      const std::string& value);
  std::string* _internal_mutable_create_time();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayRefundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_refund_no_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_received_account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateTransferRequest_Batch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateTransferRequest.Batch) */ {
 public:
  inline WechatPayCreateTransferRequest_Batch() : WechatPayCreateTransferRequest_Batch(nullptr) {}
  ~WechatPayCreateTransferRequest_Batch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateTransferRequest_Batch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateTransferRequest_Batch(const WechatPayCreateTransferRequest_Batch& from);
  WechatPayCreateTransferRequest_Batch(WechatPayCreateTransferRequest_Batch&& from) noexcept
    : WechatPayCreateTransferRequest_Batch() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateTransferRequest_Batch& operator=(const WechatPayCreateTransferRequest_Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateTransferRequest_Batch& operator=(WechatPayCreateTransferRequest_Batch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateTransferRequest_Batch& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateTransferRequest_Batch* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateTransferRequest_Batch*>(
               &_WechatPayCreateTransferRequest_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WechatPayCreateTransferRequest_Batch& a, WechatPayCreateTransferRequest_Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateTransferRequest_Batch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateTransferRequest_Batch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateTransferRequest_Batch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateTransferRequest_Batch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateTransferRequest_Batch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateTransferRequest_Batch& from) {
    WechatPayCreateTransferRequest_Batch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateTransferRequest_Batch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateTransferRequest.Batch";
  }
  protected:
  explicit WechatPayCreateTransferRequest_Batch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRemarkFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string remark = 2;
  void clear_remark() ;
  const std::string& remark() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remark(Arg_&& arg, Args_... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* ptr);

  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(
      const std::string& value);
  std::string* _internal_mutable_remark();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateTransferRequest.Batch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateTransferRequest_Detail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateTransferRequest.Detail) */ {
 public:
  inline WechatPayCreateTransferRequest_Detail() : WechatPayCreateTransferRequest_Detail(nullptr) {}
  ~WechatPayCreateTransferRequest_Detail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateTransferRequest_Detail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateTransferRequest_Detail(const WechatPayCreateTransferRequest_Detail& from);
  WechatPayCreateTransferRequest_Detail(WechatPayCreateTransferRequest_Detail&& from) noexcept
    : WechatPayCreateTransferRequest_Detail() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateTransferRequest_Detail& operator=(const WechatPayCreateTransferRequest_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateTransferRequest_Detail& operator=(WechatPayCreateTransferRequest_Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateTransferRequest_Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateTransferRequest_Detail* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateTransferRequest_Detail*>(
               &_WechatPayCreateTransferRequest_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WechatPayCreateTransferRequest_Detail& a, WechatPayCreateTransferRequest_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateTransferRequest_Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateTransferRequest_Detail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateTransferRequest_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateTransferRequest_Detail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateTransferRequest_Detail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateTransferRequest_Detail& from) {
    WechatPayCreateTransferRequest_Detail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateTransferRequest_Detail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateTransferRequest.Detail";
  }
  protected:
  explicit WechatPayCreateTransferRequest_Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kRemarkFieldNumber = 4,
    kAmountFieldNumber = 3,
  };
  // string open_id = 1;
  void clear_open_id() ;
  const std::string& open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string remark = 4;
  void clear_remark() ;
  const std::string& remark() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_remark(Arg_&& arg, Args_... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* ptr);

  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(
      const std::string& value);
  std::string* _internal_mutable_remark();

  public:
  // int64 amount = 3;
  void clear_amount() ;
  ::int64_t amount() const;
  void set_amount(::int64_t value);

  private:
  ::int64_t _internal_amount() const;
  void _internal_set_amount(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateTransferRequest.Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
    ::int64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateTransferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateTransferRequest) */ {
 public:
  inline WechatPayCreateTransferRequest() : WechatPayCreateTransferRequest(nullptr) {}
  ~WechatPayCreateTransferRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateTransferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateTransferRequest(const WechatPayCreateTransferRequest& from);
  WechatPayCreateTransferRequest(WechatPayCreateTransferRequest&& from) noexcept
    : WechatPayCreateTransferRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateTransferRequest& operator=(const WechatPayCreateTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateTransferRequest& operator=(WechatPayCreateTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateTransferRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateTransferRequest*>(
               &_WechatPayCreateTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WechatPayCreateTransferRequest& a, WechatPayCreateTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateTransferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateTransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateTransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateTransferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateTransferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateTransferRequest& from) {
    WechatPayCreateTransferRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateTransferRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateTransferRequest";
  }
  protected:
  explicit WechatPayCreateTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatPayCreateTransferRequest_Batch Batch;
  typedef WechatPayCreateTransferRequest_Detail Detail;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kSceneIdFieldNumber = 9,
    kOutBatchNoFieldNumber = 11,
    kBatchFieldNumber = 2,
  };
  // repeated .palm.musa.v1.WechatPayCreateTransferRequest.Detail details = 3;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferRequest_Detail >*
      mutable_details();
  private:
  const ::palm::musa::v1::WechatPayCreateTransferRequest_Detail& _internal_details(int index) const;
  ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* _internal_add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferRequest_Detail>& _internal_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferRequest_Detail>* _internal_mutable_details();
  public:
  const ::palm::musa::v1::WechatPayCreateTransferRequest_Detail& details(int index) const;
  ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferRequest_Detail >&
      details() const;
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string scene_id = 9;
  void clear_scene_id() ;
  const std::string& scene_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scene_id(Arg_&& arg, Args_... args);
  std::string* mutable_scene_id();
  PROTOBUF_NODISCARD std::string* release_scene_id();
  void set_allocated_scene_id(std::string* ptr);

  private:
  const std::string& _internal_scene_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scene_id(
      const std::string& value);
  std::string* _internal_mutable_scene_id();

  public:
  // optional string out_batch_no = 11;
  bool has_out_batch_no() const;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* ptr);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // .palm.musa.v1.WechatPayCreateTransferRequest.Batch batch = 2;
  bool has_batch() const;
  void clear_batch() ;
  const ::palm::musa::v1::WechatPayCreateTransferRequest_Batch& batch() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* release_batch();
  ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* mutable_batch();
  void set_allocated_batch(::palm::musa::v1::WechatPayCreateTransferRequest_Batch* batch);
  private:
  const ::palm::musa::v1::WechatPayCreateTransferRequest_Batch& _internal_batch() const;
  ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* _internal_mutable_batch();
  public:
  void unsafe_arena_set_allocated_batch(
      ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* batch);
  ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* unsafe_arena_release_batch();
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateTransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferRequest_Detail > details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_batch_no_;
    ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* batch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateTransferResponse_Detail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateTransferResponse.Detail) */ {
 public:
  inline WechatPayCreateTransferResponse_Detail() : WechatPayCreateTransferResponse_Detail(nullptr) {}
  ~WechatPayCreateTransferResponse_Detail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateTransferResponse_Detail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateTransferResponse_Detail(const WechatPayCreateTransferResponse_Detail& from);
  WechatPayCreateTransferResponse_Detail(WechatPayCreateTransferResponse_Detail&& from) noexcept
    : WechatPayCreateTransferResponse_Detail() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateTransferResponse_Detail& operator=(const WechatPayCreateTransferResponse_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateTransferResponse_Detail& operator=(WechatPayCreateTransferResponse_Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateTransferResponse_Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateTransferResponse_Detail* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateTransferResponse_Detail*>(
               &_WechatPayCreateTransferResponse_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WechatPayCreateTransferResponse_Detail& a, WechatPayCreateTransferResponse_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateTransferResponse_Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateTransferResponse_Detail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateTransferResponse_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateTransferResponse_Detail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateTransferResponse_Detail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateTransferResponse_Detail& from) {
    WechatPayCreateTransferResponse_Detail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateTransferResponse_Detail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateTransferResponse.Detail";
  }
  protected:
  explicit WechatPayCreateTransferResponse_Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenIdFieldNumber = 1,
    kOutDetailNoFieldNumber = 2,
  };
  // string open_id = 1;
  void clear_open_id() ;
  const std::string& open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string out_detail_no = 2;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* ptr);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateTransferResponse.Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_detail_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateTransferResponse_Succeeded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded) */ {
 public:
  inline WechatPayCreateTransferResponse_Succeeded() : WechatPayCreateTransferResponse_Succeeded(nullptr) {}
  ~WechatPayCreateTransferResponse_Succeeded() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateTransferResponse_Succeeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateTransferResponse_Succeeded(const WechatPayCreateTransferResponse_Succeeded& from);
  WechatPayCreateTransferResponse_Succeeded(WechatPayCreateTransferResponse_Succeeded&& from) noexcept
    : WechatPayCreateTransferResponse_Succeeded() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateTransferResponse_Succeeded& operator=(const WechatPayCreateTransferResponse_Succeeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateTransferResponse_Succeeded& operator=(WechatPayCreateTransferResponse_Succeeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateTransferResponse_Succeeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayCreateTransferResponse_Succeeded* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateTransferResponse_Succeeded*>(
               &_WechatPayCreateTransferResponse_Succeeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WechatPayCreateTransferResponse_Succeeded& a, WechatPayCreateTransferResponse_Succeeded& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateTransferResponse_Succeeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateTransferResponse_Succeeded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateTransferResponse_Succeeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateTransferResponse_Succeeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateTransferResponse_Succeeded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateTransferResponse_Succeeded& from) {
    WechatPayCreateTransferResponse_Succeeded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateTransferResponse_Succeeded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateTransferResponse.Succeeded";
  }
  protected:
  explicit WechatPayCreateTransferResponse_Succeeded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchIdFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
  };
  // string batch_id = 1;
  void clear_batch_id() ;
  const std::string& batch_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_batch_id(Arg_&& arg, Args_... args);
  std::string* mutable_batch_id();
  PROTOBUF_NODISCARD std::string* release_batch_id();
  void set_allocated_batch_id(std::string* ptr);

  private:
  const std::string& _internal_batch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_batch_id(
      const std::string& value);
  std::string* _internal_mutable_batch_id();

  public:
  // string create_time = 2;
  void clear_create_time() ;
  const std::string& create_time() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_create_time(Arg_&& arg, Args_... args);
  std::string* mutable_create_time();
  PROTOBUF_NODISCARD std::string* release_create_time();
  void set_allocated_create_time(std::string* ptr);

  private:
  const std::string& _internal_create_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_time(
      const std::string& value);
  std::string* _internal_mutable_create_time();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr batch_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayCreateTransferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayCreateTransferResponse) */ {
 public:
  inline WechatPayCreateTransferResponse() : WechatPayCreateTransferResponse(nullptr) {}
  ~WechatPayCreateTransferResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayCreateTransferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayCreateTransferResponse(const WechatPayCreateTransferResponse& from);
  WechatPayCreateTransferResponse(WechatPayCreateTransferResponse&& from) noexcept
    : WechatPayCreateTransferResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayCreateTransferResponse& operator=(const WechatPayCreateTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayCreateTransferResponse& operator=(WechatPayCreateTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayCreateTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSucceeded = 11,
    kError = 12,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const WechatPayCreateTransferResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayCreateTransferResponse*>(
               &_WechatPayCreateTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WechatPayCreateTransferResponse& a, WechatPayCreateTransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayCreateTransferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayCreateTransferResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayCreateTransferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayCreateTransferResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayCreateTransferResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayCreateTransferResponse& from) {
    WechatPayCreateTransferResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayCreateTransferResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayCreateTransferResponse";
  }
  protected:
  explicit WechatPayCreateTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatPayCreateTransferResponse_Detail Detail;
  typedef WechatPayCreateTransferResponse_Succeeded Succeeded;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kOutBatchNoFieldNumber = 1,
    kSucceededFieldNumber = 11,
    kErrorFieldNumber = 12,
  };
  // repeated .palm.musa.v1.WechatPayCreateTransferResponse.Detail details = 2;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferResponse_Detail >*
      mutable_details();
  private:
  const ::palm::musa::v1::WechatPayCreateTransferResponse_Detail& _internal_details(int index) const;
  ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* _internal_add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferResponse_Detail>& _internal_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferResponse_Detail>* _internal_mutable_details();
  public:
  const ::palm::musa::v1::WechatPayCreateTransferResponse_Detail& details(int index) const;
  ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferResponse_Detail >&
      details() const;
  // string out_batch_no = 1;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* ptr);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // .palm.musa.v1.WechatPayCreateTransferResponse.Succeeded succeeded = 11;
  bool has_succeeded() const;
  private:
  bool _internal_has_succeeded() const;

  public:
  void clear_succeeded() ;
  const ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded& succeeded() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* release_succeeded();
  ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* mutable_succeeded();
  void set_allocated_succeeded(::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* succeeded);
  private:
  const ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded& _internal_succeeded() const;
  ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* _internal_mutable_succeeded();
  public:
  void unsafe_arena_set_allocated_succeeded(
      ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* succeeded);
  ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* unsafe_arena_release_succeeded();
  // .palm.musa.v1.Error error = 12;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::palm::musa::v1::Error& error() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::Error* release_error();
  ::palm::musa::v1::Error* mutable_error();
  void set_allocated_error(::palm::musa::v1::Error* error);
  private:
  const ::palm::musa::v1::Error& _internal_error() const;
  ::palm::musa::v1::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::palm::musa::v1::Error* error);
  ::palm::musa::v1::Error* unsafe_arena_release_error();
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayCreateTransferResponse)
 private:
  class _Internal;
  void set_has_succeeded();
  void set_has_error();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferResponse_Detail > details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_batch_no_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* succeeded_;
      ::palm::musa::v1::Error* error_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryTransferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryTransferRequest) */ {
 public:
  inline WechatPayQueryTransferRequest() : WechatPayQueryTransferRequest(nullptr) {}
  ~WechatPayQueryTransferRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryTransferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryTransferRequest(const WechatPayQueryTransferRequest& from);
  WechatPayQueryTransferRequest(WechatPayQueryTransferRequest&& from) noexcept
    : WechatPayQueryTransferRequest() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryTransferRequest& operator=(const WechatPayQueryTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryTransferRequest& operator=(WechatPayQueryTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryTransferRequest* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryTransferRequest*>(
               &_WechatPayQueryTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WechatPayQueryTransferRequest& a, WechatPayQueryTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryTransferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryTransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryTransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryTransferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryTransferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryTransferRequest& from) {
    WechatPayQueryTransferRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryTransferRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryTransferRequest";
  }
  protected:
  explicit WechatPayQueryTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DetailStatus = WechatPayQueryTransferRequest_DetailStatus;
  static constexpr DetailStatus ALL = WechatPayQueryTransferRequest_DetailStatus_ALL;
  static constexpr DetailStatus SUCCESS = WechatPayQueryTransferRequest_DetailStatus_SUCCESS;
  static constexpr DetailStatus FAIL = WechatPayQueryTransferRequest_DetailStatus_FAIL;
  static inline bool DetailStatus_IsValid(int value) {
    return WechatPayQueryTransferRequest_DetailStatus_IsValid(value);
  }
  static constexpr DetailStatus DetailStatus_MIN = WechatPayQueryTransferRequest_DetailStatus_DetailStatus_MIN;
  static constexpr DetailStatus DetailStatus_MAX = WechatPayQueryTransferRequest_DetailStatus_DetailStatus_MAX;
  static constexpr int DetailStatus_ARRAYSIZE = WechatPayQueryTransferRequest_DetailStatus_DetailStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetailStatus_descriptor() {
    return WechatPayQueryTransferRequest_DetailStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& DetailStatus_Name(T value) {
    return WechatPayQueryTransferRequest_DetailStatus_Name(value);
  }
  static inline bool DetailStatus_Parse(absl::string_view name, DetailStatus* value) {
    return WechatPayQueryTransferRequest_DetailStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutBatchNoFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
    kDetailStatusFieldNumber = 9,
  };
  // string out_batch_no = 1;
  void clear_out_batch_no() ;
  const std::string& out_batch_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_batch_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_batch_no();
  PROTOBUF_NODISCARD std::string* release_out_batch_no();
  void set_allocated_out_batch_no(std::string* ptr);

  private:
  const std::string& _internal_out_batch_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_batch_no(
      const std::string& value);
  std::string* _internal_mutable_out_batch_no();

  public:
  // int32 offset = 2;
  void clear_offset() ;
  ::int32_t offset() const;
  void set_offset(::int32_t value);

  private:
  ::int32_t _internal_offset() const;
  void _internal_set_offset(::int32_t value);

  public:
  // int32 limit = 3;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // .palm.musa.v1.WechatPayQueryTransferRequest.DetailStatus detail_status = 9;
  void clear_detail_status() ;
  ::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus detail_status() const;
  void set_detail_status(::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus value);

  private:
  ::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus _internal_detail_status() const;
  void _internal_set_detail_status(::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus value);

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryTransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_batch_no_;
    ::int32_t offset_;
    ::int32_t limit_;
    int detail_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryTransferResponse_Detail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryTransferResponse.Detail) */ {
 public:
  inline WechatPayQueryTransferResponse_Detail() : WechatPayQueryTransferResponse_Detail(nullptr) {}
  ~WechatPayQueryTransferResponse_Detail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryTransferResponse_Detail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryTransferResponse_Detail(const WechatPayQueryTransferResponse_Detail& from);
  WechatPayQueryTransferResponse_Detail(WechatPayQueryTransferResponse_Detail&& from) noexcept
    : WechatPayQueryTransferResponse_Detail() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryTransferResponse_Detail& operator=(const WechatPayQueryTransferResponse_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryTransferResponse_Detail& operator=(WechatPayQueryTransferResponse_Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryTransferResponse_Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryTransferResponse_Detail* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryTransferResponse_Detail*>(
               &_WechatPayQueryTransferResponse_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WechatPayQueryTransferResponse_Detail& a, WechatPayQueryTransferResponse_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryTransferResponse_Detail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryTransferResponse_Detail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryTransferResponse_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryTransferResponse_Detail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryTransferResponse_Detail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryTransferResponse_Detail& from) {
    WechatPayQueryTransferResponse_Detail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryTransferResponse_Detail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryTransferResponse.Detail";
  }
  protected:
  explicit WechatPayQueryTransferResponse_Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutDetailNoFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string out_detail_no = 1;
  void clear_out_detail_no() ;
  const std::string& out_detail_no() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_out_detail_no(Arg_&& arg, Args_... args);
  std::string* mutable_out_detail_no();
  PROTOBUF_NODISCARD std::string* release_out_detail_no();
  void set_allocated_out_detail_no(std::string* ptr);

  private:
  const std::string& _internal_out_detail_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_detail_no(
      const std::string& value);
  std::string* _internal_mutable_out_detail_no();

  public:
  // string status = 2;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryTransferResponse.Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_detail_no_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryTransferResponse_Batch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryTransferResponse.Batch) */ {
 public:
  inline WechatPayQueryTransferResponse_Batch() : WechatPayQueryTransferResponse_Batch(nullptr) {}
  ~WechatPayQueryTransferResponse_Batch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryTransferResponse_Batch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryTransferResponse_Batch(const WechatPayQueryTransferResponse_Batch& from);
  WechatPayQueryTransferResponse_Batch(WechatPayQueryTransferResponse_Batch&& from) noexcept
    : WechatPayQueryTransferResponse_Batch() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryTransferResponse_Batch& operator=(const WechatPayQueryTransferResponse_Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryTransferResponse_Batch& operator=(WechatPayQueryTransferResponse_Batch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryTransferResponse_Batch& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryTransferResponse_Batch* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryTransferResponse_Batch*>(
               &_WechatPayQueryTransferResponse_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WechatPayQueryTransferResponse_Batch& a, WechatPayQueryTransferResponse_Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryTransferResponse_Batch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryTransferResponse_Batch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryTransferResponse_Batch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryTransferResponse_Batch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryTransferResponse_Batch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryTransferResponse_Batch& from) {
    WechatPayQueryTransferResponse_Batch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryTransferResponse_Batch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryTransferResponse.Batch";
  }
  protected:
  explicit WechatPayQueryTransferResponse_Batch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCloseReasonFieldNumber = 9,
  };
  // string status = 1;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional string close_reason = 9;
  bool has_close_reason() const;
  void clear_close_reason() ;
  const std::string& close_reason() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_close_reason(Arg_&& arg, Args_... args);
  std::string* mutable_close_reason();
  PROTOBUF_NODISCARD std::string* release_close_reason();
  void set_allocated_close_reason(std::string* ptr);

  private:
  const std::string& _internal_close_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_close_reason(
      const std::string& value);
  std::string* _internal_mutable_close_reason();

  public:
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryTransferResponse.Batch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};// -------------------------------------------------------------------

class WechatPayQueryTransferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.musa.v1.WechatPayQueryTransferResponse) */ {
 public:
  inline WechatPayQueryTransferResponse() : WechatPayQueryTransferResponse(nullptr) {}
  ~WechatPayQueryTransferResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatPayQueryTransferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayQueryTransferResponse(const WechatPayQueryTransferResponse& from);
  WechatPayQueryTransferResponse(WechatPayQueryTransferResponse&& from) noexcept
    : WechatPayQueryTransferResponse() {
    *this = ::std::move(from);
  }

  inline WechatPayQueryTransferResponse& operator=(const WechatPayQueryTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayQueryTransferResponse& operator=(WechatPayQueryTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayQueryTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayQueryTransferResponse* internal_default_instance() {
    return reinterpret_cast<const WechatPayQueryTransferResponse*>(
               &_WechatPayQueryTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WechatPayQueryTransferResponse& a, WechatPayQueryTransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayQueryTransferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayQueryTransferResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayQueryTransferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayQueryTransferResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatPayQueryTransferResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatPayQueryTransferResponse& from) {
    WechatPayQueryTransferResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatPayQueryTransferResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.musa.v1.WechatPayQueryTransferResponse";
  }
  protected:
  explicit WechatPayQueryTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatPayQueryTransferResponse_Detail Detail;
  typedef WechatPayQueryTransferResponse_Batch Batch;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 9,
    kBatchFieldNumber = 1,
  };
  // repeated .palm.musa.v1.WechatPayQueryTransferResponse.Detail details = 9;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayQueryTransferResponse_Detail >*
      mutable_details();
  private:
  const ::palm::musa::v1::WechatPayQueryTransferResponse_Detail& _internal_details(int index) const;
  ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* _internal_add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayQueryTransferResponse_Detail>& _internal_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayQueryTransferResponse_Detail>* _internal_mutable_details();
  public:
  const ::palm::musa::v1::WechatPayQueryTransferResponse_Detail& details(int index) const;
  ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayQueryTransferResponse_Detail >&
      details() const;
  // .palm.musa.v1.WechatPayQueryTransferResponse.Batch batch = 1;
  bool has_batch() const;
  void clear_batch() ;
  const ::palm::musa::v1::WechatPayQueryTransferResponse_Batch& batch() const;
  PROTOBUF_NODISCARD ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* release_batch();
  ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* mutable_batch();
  void set_allocated_batch(::palm::musa::v1::WechatPayQueryTransferResponse_Batch* batch);
  private:
  const ::palm::musa::v1::WechatPayQueryTransferResponse_Batch& _internal_batch() const;
  ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* _internal_mutable_batch();
  public:
  void unsafe_arena_set_allocated_batch(
      ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* batch);
  ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* unsafe_arena_release_batch();
  // @@protoc_insertion_point(class_scope:palm.musa.v1.WechatPayQueryTransferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayQueryTransferResponse_Detail > details_;
    ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* batch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_musa_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WechatPayPrepayRequest_Amount

// int32 total = 1;
inline void WechatPayPrepayRequest_Amount::clear_total() {
  _impl_.total_ = 0;
}
inline ::int32_t WechatPayPrepayRequest_Amount::total() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.Amount.total)
  return _internal_total();
}
inline void WechatPayPrepayRequest_Amount::set_total(::int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayPrepayRequest.Amount.total)
}
inline ::int32_t WechatPayPrepayRequest_Amount::_internal_total() const {
  return _impl_.total_;
}
inline void WechatPayPrepayRequest_Amount::_internal_set_total(::int32_t value) {
  ;
  _impl_.total_ = value;
}

// .palm.musa.v1.WechatPayCurrency currency = 2;
inline void WechatPayPrepayRequest_Amount::clear_currency() {
  _impl_.currency_ = 0;
}
inline ::palm::musa::v1::WechatPayCurrency WechatPayPrepayRequest_Amount::currency() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.Amount.currency)
  return _internal_currency();
}
inline void WechatPayPrepayRequest_Amount::set_currency(::palm::musa::v1::WechatPayCurrency value) {
   _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayPrepayRequest.Amount.currency)
}
inline ::palm::musa::v1::WechatPayCurrency WechatPayPrepayRequest_Amount::_internal_currency() const {
  return static_cast<::palm::musa::v1::WechatPayCurrency>(_impl_.currency_);
}
inline void WechatPayPrepayRequest_Amount::_internal_set_currency(::palm::musa::v1::WechatPayCurrency value) {
  ;
  _impl_.currency_ = value;
}

// -------------------------------------------------------------------

// WechatPayPrepayRequest

// string app_id = 1;
inline void WechatPayPrepayRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatPayPrepayRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayPrepayRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayPrepayRequest.app_id)
}
inline std::string* WechatPayPrepayRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayPrepayRequest.app_id)
  return _s;
}
inline const std::string& WechatPayPrepayRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatPayPrepayRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayPrepayRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatPayPrepayRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayPrepayRequest.app_id)
}

// optional string payer_open_id = 2;
inline bool WechatPayPrepayRequest::has_payer_open_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatPayPrepayRequest::clear_payer_open_id() {
  _impl_.payer_open_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatPayPrepayRequest::payer_open_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.payer_open_id)
  return _internal_payer_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayPrepayRequest::set_payer_open_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.payer_open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayPrepayRequest.payer_open_id)
}
inline std::string* WechatPayPrepayRequest::mutable_payer_open_id() {
  std::string* _s = _internal_mutable_payer_open_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayPrepayRequest.payer_open_id)
  return _s;
}
inline const std::string& WechatPayPrepayRequest::_internal_payer_open_id() const {
  return _impl_.payer_open_id_.Get();
}
inline void WechatPayPrepayRequest::_internal_set_payer_open_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.payer_open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::_internal_mutable_payer_open_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.payer_open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::release_payer_open_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayPrepayRequest.payer_open_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.payer_open_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payer_open_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatPayPrepayRequest::set_allocated_payer_open_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.payer_open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payer_open_id_.IsDefault()) {
          _impl_.payer_open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayPrepayRequest.payer_open_id)
}

// .palm.musa.v1.WechatPayPrepayRequest.Amount amount = 3;
inline bool WechatPayPrepayRequest::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline void WechatPayPrepayRequest::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::musa::v1::WechatPayPrepayRequest_Amount& WechatPayPrepayRequest::_internal_amount() const {
  const ::palm::musa::v1::WechatPayPrepayRequest_Amount* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::musa::v1::WechatPayPrepayRequest_Amount&>(
      ::palm::musa::v1::_WechatPayPrepayRequest_Amount_default_instance_);
}
inline const ::palm::musa::v1::WechatPayPrepayRequest_Amount& WechatPayPrepayRequest::amount() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.amount)
  return _internal_amount();
}
inline void WechatPayPrepayRequest::unsafe_arena_set_allocated_amount(
    ::palm::musa::v1::WechatPayPrepayRequest_Amount* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayPrepayRequest.amount)
}
inline ::palm::musa::v1::WechatPayPrepayRequest_Amount* WechatPayPrepayRequest::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::musa::v1::WechatPayPrepayRequest_Amount* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::musa::v1::WechatPayPrepayRequest_Amount* WechatPayPrepayRequest::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayPrepayRequest.amount)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::musa::v1::WechatPayPrepayRequest_Amount* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::palm::musa::v1::WechatPayPrepayRequest_Amount* WechatPayPrepayRequest::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::musa::v1::WechatPayPrepayRequest_Amount>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::palm::musa::v1::WechatPayPrepayRequest_Amount* WechatPayPrepayRequest::mutable_amount() {
  ::palm::musa::v1::WechatPayPrepayRequest_Amount* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayPrepayRequest.amount)
  return _msg;
}
inline void WechatPayPrepayRequest::set_allocated_amount(::palm::musa::v1::WechatPayPrepayRequest_Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayPrepayRequest.amount)
}

// string description = 9;
inline void WechatPayPrepayRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& WechatPayPrepayRequest::description() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayPrepayRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayPrepayRequest.description)
}
inline std::string* WechatPayPrepayRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayPrepayRequest.description)
  return _s;
}
inline const std::string& WechatPayPrepayRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void WechatPayPrepayRequest::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::release_description() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayPrepayRequest.description)
  return _impl_.description_.Release();
}
inline void WechatPayPrepayRequest::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayPrepayRequest.description)
}

// string notify_host = 11;
inline void WechatPayPrepayRequest::clear_notify_host() {
  _impl_.notify_host_.ClearToEmpty();
}
inline const std::string& WechatPayPrepayRequest::notify_host() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayPrepayRequest.notify_host)
  return _internal_notify_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayPrepayRequest::set_notify_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.notify_host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayPrepayRequest.notify_host)
}
inline std::string* WechatPayPrepayRequest::mutable_notify_host() {
  std::string* _s = _internal_mutable_notify_host();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayPrepayRequest.notify_host)
  return _s;
}
inline const std::string& WechatPayPrepayRequest::_internal_notify_host() const {
  return _impl_.notify_host_.Get();
}
inline void WechatPayPrepayRequest::_internal_set_notify_host(const std::string& value) {
  ;


  _impl_.notify_host_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::_internal_mutable_notify_host() {
  ;
  return _impl_.notify_host_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayPrepayRequest::release_notify_host() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayPrepayRequest.notify_host)
  return _impl_.notify_host_.Release();
}
inline void WechatPayPrepayRequest::set_allocated_notify_host(std::string* value) {
  _impl_.notify_host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.notify_host_.IsDefault()) {
          _impl_.notify_host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayPrepayRequest.notify_host)
}

// -------------------------------------------------------------------

// WechatPayCloseOrderRequest

// string out_trade_no = 1;
inline void WechatPayCloseOrderRequest::clear_out_trade_no() {
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& WechatPayCloseOrderRequest::out_trade_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCloseOrderRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCloseOrderRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCloseOrderRequest.out_trade_no)
}
inline std::string* WechatPayCloseOrderRequest::mutable_out_trade_no() {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCloseOrderRequest.out_trade_no)
  return _s;
}
inline const std::string& WechatPayCloseOrderRequest::_internal_out_trade_no() const {
  return _impl_.out_trade_no_.Get();
}
inline void WechatPayCloseOrderRequest::_internal_set_out_trade_no(const std::string& value) {
  ;


  _impl_.out_trade_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCloseOrderRequest::_internal_mutable_out_trade_no() {
  ;
  return _impl_.out_trade_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCloseOrderRequest::release_out_trade_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCloseOrderRequest.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void WechatPayCloseOrderRequest::set_allocated_out_trade_no(std::string* value) {
  _impl_.out_trade_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCloseOrderRequest.out_trade_no)
}

// string reason = 2;
inline void WechatPayCloseOrderRequest::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& WechatPayCloseOrderRequest::reason() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCloseOrderRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCloseOrderRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCloseOrderRequest.reason)
}
inline std::string* WechatPayCloseOrderRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCloseOrderRequest.reason)
  return _s;
}
inline const std::string& WechatPayCloseOrderRequest::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void WechatPayCloseOrderRequest::_internal_set_reason(const std::string& value) {
  ;


  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCloseOrderRequest::_internal_mutable_reason() {
  ;
  return _impl_.reason_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCloseOrderRequest::release_reason() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCloseOrderRequest.reason)
  return _impl_.reason_.Release();
}
inline void WechatPayCloseOrderRequest::set_allocated_reason(std::string* value) {
  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCloseOrderRequest.reason)
}

// -------------------------------------------------------------------

// Error

// string code = 1;
inline void Error::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Error::code() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.Error.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.Error.code)
}
inline std::string* Error::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.Error.code)
  return _s;
}
inline const std::string& Error::_internal_code() const {
  return _impl_.code_.Get();
}
inline void Error::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* Error::release_code() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.Error.code)
  return _impl_.code_.Release();
}
inline void Error::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.Error.code)
}

// string message = 2;
inline void Error::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.Error.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.Error.message)
}
inline std::string* Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.Error.message)
  return _s;
}
inline const std::string& Error::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.Error.message)
  return _impl_.message_.Release();
}
inline void Error::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.Error.message)
}

// -------------------------------------------------------------------

// WechatPayNativeQrCodeUrlResponse

// string url = 1;
inline void WechatPayNativeQrCodeUrlResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& WechatPayNativeQrCodeUrlResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayNativeQrCodeUrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.url)
}
inline std::string* WechatPayNativeQrCodeUrlResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.url)
  return _s;
}
inline const std::string& WechatPayNativeQrCodeUrlResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void WechatPayNativeQrCodeUrlResponse::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayNativeQrCodeUrlResponse::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayNativeQrCodeUrlResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.url)
  return _impl_.url_.Release();
}
inline void WechatPayNativeQrCodeUrlResponse::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.url)
}

// string out_trade_no = 2;
inline void WechatPayNativeQrCodeUrlResponse::clear_out_trade_no() {
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& WechatPayNativeQrCodeUrlResponse::out_trade_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayNativeQrCodeUrlResponse::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.out_trade_no)
}
inline std::string* WechatPayNativeQrCodeUrlResponse::mutable_out_trade_no() {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.out_trade_no)
  return _s;
}
inline const std::string& WechatPayNativeQrCodeUrlResponse::_internal_out_trade_no() const {
  return _impl_.out_trade_no_.Get();
}
inline void WechatPayNativeQrCodeUrlResponse::_internal_set_out_trade_no(const std::string& value) {
  ;


  _impl_.out_trade_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayNativeQrCodeUrlResponse::_internal_mutable_out_trade_no() {
  ;
  return _impl_.out_trade_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayNativeQrCodeUrlResponse::release_out_trade_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void WechatPayNativeQrCodeUrlResponse::set_allocated_out_trade_no(std::string* value) {
  _impl_.out_trade_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayNativeQrCodeUrlResponse.out_trade_no)
}

// -------------------------------------------------------------------

// WechatPayTradeResponse

// string trade_state = 1;
inline void WechatPayTradeResponse::clear_trade_state() {
  _impl_.trade_state_.ClearToEmpty();
}
inline const std::string& WechatPayTradeResponse::trade_state() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayTradeResponse.trade_state)
  return _internal_trade_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayTradeResponse::set_trade_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trade_state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayTradeResponse.trade_state)
}
inline std::string* WechatPayTradeResponse::mutable_trade_state() {
  std::string* _s = _internal_mutable_trade_state();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayTradeResponse.trade_state)
  return _s;
}
inline const std::string& WechatPayTradeResponse::_internal_trade_state() const {
  return _impl_.trade_state_.Get();
}
inline void WechatPayTradeResponse::_internal_set_trade_state(const std::string& value) {
  ;


  _impl_.trade_state_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayTradeResponse::_internal_mutable_trade_state() {
  ;
  return _impl_.trade_state_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayTradeResponse::release_trade_state() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayTradeResponse.trade_state)
  return _impl_.trade_state_.Release();
}
inline void WechatPayTradeResponse::set_allocated_trade_state(std::string* value) {
  _impl_.trade_state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trade_state_.IsDefault()) {
          _impl_.trade_state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayTradeResponse.trade_state)
}

// string trade_state_desc = 2;
inline void WechatPayTradeResponse::clear_trade_state_desc() {
  _impl_.trade_state_desc_.ClearToEmpty();
}
inline const std::string& WechatPayTradeResponse::trade_state_desc() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayTradeResponse.trade_state_desc)
  return _internal_trade_state_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayTradeResponse::set_trade_state_desc(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trade_state_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayTradeResponse.trade_state_desc)
}
inline std::string* WechatPayTradeResponse::mutable_trade_state_desc() {
  std::string* _s = _internal_mutable_trade_state_desc();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayTradeResponse.trade_state_desc)
  return _s;
}
inline const std::string& WechatPayTradeResponse::_internal_trade_state_desc() const {
  return _impl_.trade_state_desc_.Get();
}
inline void WechatPayTradeResponse::_internal_set_trade_state_desc(const std::string& value) {
  ;


  _impl_.trade_state_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayTradeResponse::_internal_mutable_trade_state_desc() {
  ;
  return _impl_.trade_state_desc_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayTradeResponse::release_trade_state_desc() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayTradeResponse.trade_state_desc)
  return _impl_.trade_state_desc_.Release();
}
inline void WechatPayTradeResponse::set_allocated_trade_state_desc(std::string* value) {
  _impl_.trade_state_desc_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trade_state_desc_.IsDefault()) {
          _impl_.trade_state_desc_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayTradeResponse.trade_state_desc)
}

// -------------------------------------------------------------------

// WechatPayQueryOrderByIdRequest

// string transaction_id = 1;
inline void WechatPayQueryOrderByIdRequest::clear_transaction_id() {
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& WechatPayQueryOrderByIdRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryOrderByIdRequest.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryOrderByIdRequest::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryOrderByIdRequest.transaction_id)
}
inline std::string* WechatPayQueryOrderByIdRequest::mutable_transaction_id() {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryOrderByIdRequest.transaction_id)
  return _s;
}
inline const std::string& WechatPayQueryOrderByIdRequest::_internal_transaction_id() const {
  return _impl_.transaction_id_.Get();
}
inline void WechatPayQueryOrderByIdRequest::_internal_set_transaction_id(const std::string& value) {
  ;


  _impl_.transaction_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryOrderByIdRequest::_internal_mutable_transaction_id() {
  ;
  return _impl_.transaction_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryOrderByIdRequest::release_transaction_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryOrderByIdRequest.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void WechatPayQueryOrderByIdRequest::set_allocated_transaction_id(std::string* value) {
  _impl_.transaction_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.transaction_id_.IsDefault()) {
          _impl_.transaction_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryOrderByIdRequest.transaction_id)
}

// -------------------------------------------------------------------

// WechatPayQueryOrderByOutTradeNoRequest

// string out_trade_no = 1;
inline void WechatPayQueryOrderByOutTradeNoRequest::clear_out_trade_no() {
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& WechatPayQueryOrderByOutTradeNoRequest::out_trade_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryOrderByOutTradeNoRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest.out_trade_no)
}
inline std::string* WechatPayQueryOrderByOutTradeNoRequest::mutable_out_trade_no() {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest.out_trade_no)
  return _s;
}
inline const std::string& WechatPayQueryOrderByOutTradeNoRequest::_internal_out_trade_no() const {
  return _impl_.out_trade_no_.Get();
}
inline void WechatPayQueryOrderByOutTradeNoRequest::_internal_set_out_trade_no(const std::string& value) {
  ;


  _impl_.out_trade_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryOrderByOutTradeNoRequest::_internal_mutable_out_trade_no() {
  ;
  return _impl_.out_trade_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryOrderByOutTradeNoRequest::release_out_trade_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void WechatPayQueryOrderByOutTradeNoRequest::set_allocated_out_trade_no(std::string* value) {
  _impl_.out_trade_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest.out_trade_no)
}

// -------------------------------------------------------------------

// WechatPayJsapiPrepayIdResponse

// string app_id = 1;
inline void WechatPayJsapiPrepayIdResponse::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::app_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.app_id)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.app_id)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.app_id)
}

// string time_stamp = 2;
inline void WechatPayJsapiPrepayIdResponse::clear_time_stamp() {
  _impl_.time_stamp_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::time_stamp() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.time_stamp)
  return _internal_time_stamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_time_stamp(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.time_stamp_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.time_stamp)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_time_stamp() {
  std::string* _s = _internal_mutable_time_stamp();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.time_stamp)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_time_stamp() const {
  return _impl_.time_stamp_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_time_stamp(const std::string& value) {
  ;


  _impl_.time_stamp_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_time_stamp() {
  ;
  return _impl_.time_stamp_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_time_stamp() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.time_stamp)
  return _impl_.time_stamp_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_time_stamp(std::string* value) {
  _impl_.time_stamp_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.time_stamp_.IsDefault()) {
          _impl_.time_stamp_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.time_stamp)
}

// string nonce_str = 3;
inline void WechatPayJsapiPrepayIdResponse::clear_nonce_str() {
  _impl_.nonce_str_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::nonce_str() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.nonce_str)
  return _internal_nonce_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_nonce_str(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nonce_str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.nonce_str)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_nonce_str() {
  std::string* _s = _internal_mutable_nonce_str();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.nonce_str)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_nonce_str() const {
  return _impl_.nonce_str_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_nonce_str(const std::string& value) {
  ;


  _impl_.nonce_str_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_nonce_str() {
  ;
  return _impl_.nonce_str_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_nonce_str() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.nonce_str)
  return _impl_.nonce_str_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_nonce_str(std::string* value) {
  _impl_.nonce_str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_str_.IsDefault()) {
          _impl_.nonce_str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.nonce_str)
}

// string package = 4;
inline void WechatPayJsapiPrepayIdResponse::clear_package() {
  _impl_.package_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::package() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.package)
  return _internal_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_package(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.package_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.package)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_package() {
  std::string* _s = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.package)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_package() const {
  return _impl_.package_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_package(const std::string& value) {
  ;


  _impl_.package_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_package() {
  ;
  return _impl_.package_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_package() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.package)
  return _impl_.package_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_package(std::string* value) {
  _impl_.package_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.package_.IsDefault()) {
          _impl_.package_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.package)
}

// string sign_type = 5;
inline void WechatPayJsapiPrepayIdResponse::clear_sign_type() {
  _impl_.sign_type_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::sign_type() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.sign_type)
  return _internal_sign_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_sign_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sign_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.sign_type)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_sign_type() {
  std::string* _s = _internal_mutable_sign_type();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.sign_type)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_sign_type() const {
  return _impl_.sign_type_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_sign_type(const std::string& value) {
  ;


  _impl_.sign_type_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_sign_type() {
  ;
  return _impl_.sign_type_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_sign_type() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.sign_type)
  return _impl_.sign_type_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_sign_type(std::string* value) {
  _impl_.sign_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sign_type_.IsDefault()) {
          _impl_.sign_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.sign_type)
}

// string pay_sign = 6;
inline void WechatPayJsapiPrepayIdResponse::clear_pay_sign() {
  _impl_.pay_sign_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::pay_sign() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.pay_sign)
  return _internal_pay_sign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_pay_sign(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pay_sign_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.pay_sign)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_pay_sign() {
  std::string* _s = _internal_mutable_pay_sign();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.pay_sign)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_pay_sign() const {
  return _impl_.pay_sign_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_pay_sign(const std::string& value) {
  ;


  _impl_.pay_sign_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_pay_sign() {
  ;
  return _impl_.pay_sign_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_pay_sign() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.pay_sign)
  return _impl_.pay_sign_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_pay_sign(std::string* value) {
  _impl_.pay_sign_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pay_sign_.IsDefault()) {
          _impl_.pay_sign_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.pay_sign)
}

// string out_trade_no = 11;
inline void WechatPayJsapiPrepayIdResponse::clear_out_trade_no() {
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& WechatPayJsapiPrepayIdResponse::out_trade_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayJsapiPrepayIdResponse.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayJsapiPrepayIdResponse::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayJsapiPrepayIdResponse.out_trade_no)
}
inline std::string* WechatPayJsapiPrepayIdResponse::mutable_out_trade_no() {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayJsapiPrepayIdResponse.out_trade_no)
  return _s;
}
inline const std::string& WechatPayJsapiPrepayIdResponse::_internal_out_trade_no() const {
  return _impl_.out_trade_no_.Get();
}
inline void WechatPayJsapiPrepayIdResponse::_internal_set_out_trade_no(const std::string& value) {
  ;


  _impl_.out_trade_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::_internal_mutable_out_trade_no() {
  ;
  return _impl_.out_trade_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayJsapiPrepayIdResponse::release_out_trade_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayJsapiPrepayIdResponse.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void WechatPayJsapiPrepayIdResponse::set_allocated_out_trade_no(std::string* value) {
  _impl_.out_trade_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayJsapiPrepayIdResponse.out_trade_no)
}

// -------------------------------------------------------------------

// WechatPayBillDate

// int32 year = 1;
inline void WechatPayBillDate::clear_year() {
  _impl_.year_ = 0;
}
inline ::int32_t WechatPayBillDate::year() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayBillDate.year)
  return _internal_year();
}
inline void WechatPayBillDate::set_year(::int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayBillDate.year)
}
inline ::int32_t WechatPayBillDate::_internal_year() const {
  return _impl_.year_;
}
inline void WechatPayBillDate::_internal_set_year(::int32_t value) {
  ;
  _impl_.year_ = value;
}

// int32 month = 2;
inline void WechatPayBillDate::clear_month() {
  _impl_.month_ = 0;
}
inline ::int32_t WechatPayBillDate::month() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayBillDate.month)
  return _internal_month();
}
inline void WechatPayBillDate::set_month(::int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayBillDate.month)
}
inline ::int32_t WechatPayBillDate::_internal_month() const {
  return _impl_.month_;
}
inline void WechatPayBillDate::_internal_set_month(::int32_t value) {
  ;
  _impl_.month_ = value;
}

// int32 day = 3;
inline void WechatPayBillDate::clear_day() {
  _impl_.day_ = 0;
}
inline ::int32_t WechatPayBillDate::day() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayBillDate.day)
  return _internal_day();
}
inline void WechatPayBillDate::set_day(::int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayBillDate.day)
}
inline ::int32_t WechatPayBillDate::_internal_day() const {
  return _impl_.day_;
}
inline void WechatPayBillDate::_internal_set_day(::int32_t value) {
  ;
  _impl_.day_ = value;
}

// -------------------------------------------------------------------

// WechatPayBillResponse

// bytes content = 1;
inline void WechatPayBillResponse::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& WechatPayBillResponse::content() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayBillResponse.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayBillResponse::set_content(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayBillResponse.content)
}
inline std::string* WechatPayBillResponse::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayBillResponse.content)
  return _s;
}
inline const std::string& WechatPayBillResponse::_internal_content() const {
  return _impl_.content_.Get();
}
inline void WechatPayBillResponse::_internal_set_content(const std::string& value) {
  ;


  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayBillResponse::_internal_mutable_content() {
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayBillResponse::release_content() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayBillResponse.content)
  return _impl_.content_.Release();
}
inline void WechatPayBillResponse::set_allocated_content(std::string* value) {
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayBillResponse.content)
}

// -------------------------------------------------------------------

// WechatPayTradeBillRequest

// .palm.musa.v1.WechatPayBillDate bill_date = 1;
inline bool WechatPayTradeBillRequest::has_bill_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bill_date_ != nullptr);
  return value;
}
inline void WechatPayTradeBillRequest::clear_bill_date() {
  if (_impl_.bill_date_ != nullptr) _impl_.bill_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::musa::v1::WechatPayBillDate& WechatPayTradeBillRequest::_internal_bill_date() const {
  const ::palm::musa::v1::WechatPayBillDate* p = _impl_.bill_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::musa::v1::WechatPayBillDate&>(
      ::palm::musa::v1::_WechatPayBillDate_default_instance_);
}
inline const ::palm::musa::v1::WechatPayBillDate& WechatPayTradeBillRequest::bill_date() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayTradeBillRequest.bill_date)
  return _internal_bill_date();
}
inline void WechatPayTradeBillRequest::unsafe_arena_set_allocated_bill_date(
    ::palm::musa::v1::WechatPayBillDate* bill_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bill_date_);
  }
  _impl_.bill_date_ = bill_date;
  if (bill_date) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayTradeBillRequest.bill_date)
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayTradeBillRequest::release_bill_date() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayBillDate* temp = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayTradeBillRequest::unsafe_arena_release_bill_date() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayTradeBillRequest.bill_date)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayBillDate* temp = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
  return temp;
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayTradeBillRequest::_internal_mutable_bill_date() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bill_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::musa::v1::WechatPayBillDate>(GetArenaForAllocation());
    _impl_.bill_date_ = p;
  }
  return _impl_.bill_date_;
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayTradeBillRequest::mutable_bill_date() {
  ::palm::musa::v1::WechatPayBillDate* _msg = _internal_mutable_bill_date();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayTradeBillRequest.bill_date)
  return _msg;
}
inline void WechatPayTradeBillRequest::set_allocated_bill_date(::palm::musa::v1::WechatPayBillDate* bill_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bill_date_;
  }
  if (bill_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bill_date);
    if (message_arena != submessage_arena) {
      bill_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bill_date, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bill_date_ = bill_date;
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayTradeBillRequest.bill_date)
}

// .palm.musa.v1.WechatPayTradeBillRequest.BillType bill_type = 2;
inline void WechatPayTradeBillRequest::clear_bill_type() {
  _impl_.bill_type_ = 0;
}
inline ::palm::musa::v1::WechatPayTradeBillRequest_BillType WechatPayTradeBillRequest::bill_type() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayTradeBillRequest.bill_type)
  return _internal_bill_type();
}
inline void WechatPayTradeBillRequest::set_bill_type(::palm::musa::v1::WechatPayTradeBillRequest_BillType value) {
   _internal_set_bill_type(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayTradeBillRequest.bill_type)
}
inline ::palm::musa::v1::WechatPayTradeBillRequest_BillType WechatPayTradeBillRequest::_internal_bill_type() const {
  return static_cast<::palm::musa::v1::WechatPayTradeBillRequest_BillType>(_impl_.bill_type_);
}
inline void WechatPayTradeBillRequest::_internal_set_bill_type(::palm::musa::v1::WechatPayTradeBillRequest_BillType value) {
  ;
  _impl_.bill_type_ = value;
}

// -------------------------------------------------------------------

// WechatPayFundFlowBillRequest

// .palm.musa.v1.WechatPayBillDate bill_date = 1;
inline bool WechatPayFundFlowBillRequest::has_bill_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bill_date_ != nullptr);
  return value;
}
inline void WechatPayFundFlowBillRequest::clear_bill_date() {
  if (_impl_.bill_date_ != nullptr) _impl_.bill_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::musa::v1::WechatPayBillDate& WechatPayFundFlowBillRequest::_internal_bill_date() const {
  const ::palm::musa::v1::WechatPayBillDate* p = _impl_.bill_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::musa::v1::WechatPayBillDate&>(
      ::palm::musa::v1::_WechatPayBillDate_default_instance_);
}
inline const ::palm::musa::v1::WechatPayBillDate& WechatPayFundFlowBillRequest::bill_date() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayFundFlowBillRequest.bill_date)
  return _internal_bill_date();
}
inline void WechatPayFundFlowBillRequest::unsafe_arena_set_allocated_bill_date(
    ::palm::musa::v1::WechatPayBillDate* bill_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bill_date_);
  }
  _impl_.bill_date_ = bill_date;
  if (bill_date) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayFundFlowBillRequest.bill_date)
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayFundFlowBillRequest::release_bill_date() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayBillDate* temp = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayFundFlowBillRequest::unsafe_arena_release_bill_date() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayFundFlowBillRequest.bill_date)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayBillDate* temp = _impl_.bill_date_;
  _impl_.bill_date_ = nullptr;
  return temp;
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayFundFlowBillRequest::_internal_mutable_bill_date() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bill_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::musa::v1::WechatPayBillDate>(GetArenaForAllocation());
    _impl_.bill_date_ = p;
  }
  return _impl_.bill_date_;
}
inline ::palm::musa::v1::WechatPayBillDate* WechatPayFundFlowBillRequest::mutable_bill_date() {
  ::palm::musa::v1::WechatPayBillDate* _msg = _internal_mutable_bill_date();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayFundFlowBillRequest.bill_date)
  return _msg;
}
inline void WechatPayFundFlowBillRequest::set_allocated_bill_date(::palm::musa::v1::WechatPayBillDate* bill_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bill_date_;
  }
  if (bill_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bill_date);
    if (message_arena != submessage_arena) {
      bill_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bill_date, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bill_date_ = bill_date;
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayFundFlowBillRequest.bill_date)
}

// .palm.musa.v1.WechatPayFundFlowBillRequest.AccountType account_type = 2;
inline void WechatPayFundFlowBillRequest::clear_account_type() {
  _impl_.account_type_ = 0;
}
inline ::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType WechatPayFundFlowBillRequest::account_type() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayFundFlowBillRequest.account_type)
  return _internal_account_type();
}
inline void WechatPayFundFlowBillRequest::set_account_type(::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType value) {
   _internal_set_account_type(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayFundFlowBillRequest.account_type)
}
inline ::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType WechatPayFundFlowBillRequest::_internal_account_type() const {
  return static_cast<::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType>(_impl_.account_type_);
}
inline void WechatPayFundFlowBillRequest::_internal_set_account_type(::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType value) {
  ;
  _impl_.account_type_ = value;
}

// -------------------------------------------------------------------

// WechatPayCreateRefundRequest_Amount

// int32 total = 1;
inline void WechatPayCreateRefundRequest_Amount::clear_total() {
  _impl_.total_ = 0;
}
inline ::int32_t WechatPayCreateRefundRequest_Amount::total() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.Amount.total)
  return _internal_total();
}
inline void WechatPayCreateRefundRequest_Amount::set_total(::int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateRefundRequest.Amount.total)
}
inline ::int32_t WechatPayCreateRefundRequest_Amount::_internal_total() const {
  return _impl_.total_;
}
inline void WechatPayCreateRefundRequest_Amount::_internal_set_total(::int32_t value) {
  ;
  _impl_.total_ = value;
}

// int32 refund = 2;
inline void WechatPayCreateRefundRequest_Amount::clear_refund() {
  _impl_.refund_ = 0;
}
inline ::int32_t WechatPayCreateRefundRequest_Amount::refund() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.Amount.refund)
  return _internal_refund();
}
inline void WechatPayCreateRefundRequest_Amount::set_refund(::int32_t value) {
  _internal_set_refund(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateRefundRequest.Amount.refund)
}
inline ::int32_t WechatPayCreateRefundRequest_Amount::_internal_refund() const {
  return _impl_.refund_;
}
inline void WechatPayCreateRefundRequest_Amount::_internal_set_refund(::int32_t value) {
  ;
  _impl_.refund_ = value;
}

// .palm.musa.v1.WechatPayCurrency currency = 3;
inline void WechatPayCreateRefundRequest_Amount::clear_currency() {
  _impl_.currency_ = 0;
}
inline ::palm::musa::v1::WechatPayCurrency WechatPayCreateRefundRequest_Amount::currency() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.Amount.currency)
  return _internal_currency();
}
inline void WechatPayCreateRefundRequest_Amount::set_currency(::palm::musa::v1::WechatPayCurrency value) {
   _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateRefundRequest.Amount.currency)
}
inline ::palm::musa::v1::WechatPayCurrency WechatPayCreateRefundRequest_Amount::_internal_currency() const {
  return static_cast<::palm::musa::v1::WechatPayCurrency>(_impl_.currency_);
}
inline void WechatPayCreateRefundRequest_Amount::_internal_set_currency(::palm::musa::v1::WechatPayCurrency value) {
  ;
  _impl_.currency_ = value;
}

// -------------------------------------------------------------------

// WechatPayCreateRefundRequest

// string out_trade_no = 1;
inline void WechatPayCreateRefundRequest::clear_out_trade_no() {
  _impl_.out_trade_no_.ClearToEmpty();
}
inline const std::string& WechatPayCreateRefundRequest::out_trade_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.out_trade_no)
  return _internal_out_trade_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateRefundRequest::set_out_trade_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_trade_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateRefundRequest.out_trade_no)
}
inline std::string* WechatPayCreateRefundRequest::mutable_out_trade_no() {
  std::string* _s = _internal_mutable_out_trade_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateRefundRequest.out_trade_no)
  return _s;
}
inline const std::string& WechatPayCreateRefundRequest::_internal_out_trade_no() const {
  return _impl_.out_trade_no_.Get();
}
inline void WechatPayCreateRefundRequest::_internal_set_out_trade_no(const std::string& value) {
  ;


  _impl_.out_trade_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateRefundRequest::_internal_mutable_out_trade_no() {
  ;
  return _impl_.out_trade_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateRefundRequest::release_out_trade_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateRefundRequest.out_trade_no)
  return _impl_.out_trade_no_.Release();
}
inline void WechatPayCreateRefundRequest::set_allocated_out_trade_no(std::string* value) {
  _impl_.out_trade_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_trade_no_.IsDefault()) {
          _impl_.out_trade_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateRefundRequest.out_trade_no)
}

// string reason = 2;
inline void WechatPayCreateRefundRequest::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& WechatPayCreateRefundRequest::reason() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateRefundRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateRefundRequest.reason)
}
inline std::string* WechatPayCreateRefundRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateRefundRequest.reason)
  return _s;
}
inline const std::string& WechatPayCreateRefundRequest::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void WechatPayCreateRefundRequest::_internal_set_reason(const std::string& value) {
  ;


  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateRefundRequest::_internal_mutable_reason() {
  ;
  return _impl_.reason_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateRefundRequest::release_reason() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateRefundRequest.reason)
  return _impl_.reason_.Release();
}
inline void WechatPayCreateRefundRequest::set_allocated_reason(std::string* value) {
  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateRefundRequest.reason)
}

// .palm.musa.v1.WechatPayCreateRefundRequest.Amount amount = 3;
inline bool WechatPayCreateRefundRequest::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline void WechatPayCreateRefundRequest::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::musa::v1::WechatPayCreateRefundRequest_Amount& WechatPayCreateRefundRequest::_internal_amount() const {
  const ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::musa::v1::WechatPayCreateRefundRequest_Amount&>(
      ::palm::musa::v1::_WechatPayCreateRefundRequest_Amount_default_instance_);
}
inline const ::palm::musa::v1::WechatPayCreateRefundRequest_Amount& WechatPayCreateRefundRequest::amount() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.amount)
  return _internal_amount();
}
inline void WechatPayCreateRefundRequest::unsafe_arena_set_allocated_amount(
    ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayCreateRefundRequest.amount)
}
inline ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* WechatPayCreateRefundRequest::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* WechatPayCreateRefundRequest::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateRefundRequest.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* WechatPayCreateRefundRequest::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::musa::v1::WechatPayCreateRefundRequest_Amount>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* WechatPayCreateRefundRequest::mutable_amount() {
  ::palm::musa::v1::WechatPayCreateRefundRequest_Amount* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateRefundRequest.amount)
  return _msg;
}
inline void WechatPayCreateRefundRequest::set_allocated_amount(::palm::musa::v1::WechatPayCreateRefundRequest_Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateRefundRequest.amount)
}

// string notify_host = 11;
inline void WechatPayCreateRefundRequest::clear_notify_host() {
  _impl_.notify_host_.ClearToEmpty();
}
inline const std::string& WechatPayCreateRefundRequest::notify_host() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateRefundRequest.notify_host)
  return _internal_notify_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateRefundRequest::set_notify_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.notify_host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateRefundRequest.notify_host)
}
inline std::string* WechatPayCreateRefundRequest::mutable_notify_host() {
  std::string* _s = _internal_mutable_notify_host();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateRefundRequest.notify_host)
  return _s;
}
inline const std::string& WechatPayCreateRefundRequest::_internal_notify_host() const {
  return _impl_.notify_host_.Get();
}
inline void WechatPayCreateRefundRequest::_internal_set_notify_host(const std::string& value) {
  ;


  _impl_.notify_host_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateRefundRequest::_internal_mutable_notify_host() {
  ;
  return _impl_.notify_host_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateRefundRequest::release_notify_host() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateRefundRequest.notify_host)
  return _impl_.notify_host_.Release();
}
inline void WechatPayCreateRefundRequest::set_allocated_notify_host(std::string* value) {
  _impl_.notify_host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.notify_host_.IsDefault()) {
          _impl_.notify_host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateRefundRequest.notify_host)
}

// -------------------------------------------------------------------

// WechatPayQueryRefundRequest

// string out_refund_no = 1;
inline void WechatPayQueryRefundRequest::clear_out_refund_no() {
  _impl_.out_refund_no_.ClearToEmpty();
}
inline const std::string& WechatPayQueryRefundRequest::out_refund_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryRefundRequest.out_refund_no)
  return _internal_out_refund_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryRefundRequest::set_out_refund_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_refund_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryRefundRequest.out_refund_no)
}
inline std::string* WechatPayQueryRefundRequest::mutable_out_refund_no() {
  std::string* _s = _internal_mutable_out_refund_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryRefundRequest.out_refund_no)
  return _s;
}
inline const std::string& WechatPayQueryRefundRequest::_internal_out_refund_no() const {
  return _impl_.out_refund_no_.Get();
}
inline void WechatPayQueryRefundRequest::_internal_set_out_refund_no(const std::string& value) {
  ;


  _impl_.out_refund_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryRefundRequest::_internal_mutable_out_refund_no() {
  ;
  return _impl_.out_refund_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryRefundRequest::release_out_refund_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryRefundRequest.out_refund_no)
  return _impl_.out_refund_no_.Release();
}
inline void WechatPayQueryRefundRequest::set_allocated_out_refund_no(std::string* value) {
  _impl_.out_refund_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_refund_no_.IsDefault()) {
          _impl_.out_refund_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryRefundRequest.out_refund_no)
}

// -------------------------------------------------------------------

// WechatPayRefundResponse

// string out_refund_no = 1;
inline void WechatPayRefundResponse::clear_out_refund_no() {
  _impl_.out_refund_no_.ClearToEmpty();
}
inline const std::string& WechatPayRefundResponse::out_refund_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayRefundResponse.out_refund_no)
  return _internal_out_refund_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayRefundResponse::set_out_refund_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_refund_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayRefundResponse.out_refund_no)
}
inline std::string* WechatPayRefundResponse::mutable_out_refund_no() {
  std::string* _s = _internal_mutable_out_refund_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayRefundResponse.out_refund_no)
  return _s;
}
inline const std::string& WechatPayRefundResponse::_internal_out_refund_no() const {
  return _impl_.out_refund_no_.Get();
}
inline void WechatPayRefundResponse::_internal_set_out_refund_no(const std::string& value) {
  ;


  _impl_.out_refund_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::_internal_mutable_out_refund_no() {
  ;
  return _impl_.out_refund_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::release_out_refund_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayRefundResponse.out_refund_no)
  return _impl_.out_refund_no_.Release();
}
inline void WechatPayRefundResponse::set_allocated_out_refund_no(std::string* value) {
  _impl_.out_refund_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_refund_no_.IsDefault()) {
          _impl_.out_refund_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayRefundResponse.out_refund_no)
}

// string channel = 2;
inline void WechatPayRefundResponse::clear_channel() {
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& WechatPayRefundResponse::channel() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayRefundResponse.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayRefundResponse::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayRefundResponse.channel)
}
inline std::string* WechatPayRefundResponse::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayRefundResponse.channel)
  return _s;
}
inline const std::string& WechatPayRefundResponse::_internal_channel() const {
  return _impl_.channel_.Get();
}
inline void WechatPayRefundResponse::_internal_set_channel(const std::string& value) {
  ;


  _impl_.channel_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::_internal_mutable_channel() {
  ;
  return _impl_.channel_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::release_channel() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayRefundResponse.channel)
  return _impl_.channel_.Release();
}
inline void WechatPayRefundResponse::set_allocated_channel(std::string* value) {
  _impl_.channel_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_.IsDefault()) {
          _impl_.channel_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayRefundResponse.channel)
}

// string status = 3;
inline void WechatPayRefundResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& WechatPayRefundResponse::status() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayRefundResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayRefundResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayRefundResponse.status)
}
inline std::string* WechatPayRefundResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayRefundResponse.status)
  return _s;
}
inline const std::string& WechatPayRefundResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void WechatPayRefundResponse::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::release_status() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayRefundResponse.status)
  return _impl_.status_.Release();
}
inline void WechatPayRefundResponse::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayRefundResponse.status)
}

// string user_received_account = 4;
inline void WechatPayRefundResponse::clear_user_received_account() {
  _impl_.user_received_account_.ClearToEmpty();
}
inline const std::string& WechatPayRefundResponse::user_received_account() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayRefundResponse.user_received_account)
  return _internal_user_received_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayRefundResponse::set_user_received_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_received_account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayRefundResponse.user_received_account)
}
inline std::string* WechatPayRefundResponse::mutable_user_received_account() {
  std::string* _s = _internal_mutable_user_received_account();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayRefundResponse.user_received_account)
  return _s;
}
inline const std::string& WechatPayRefundResponse::_internal_user_received_account() const {
  return _impl_.user_received_account_.Get();
}
inline void WechatPayRefundResponse::_internal_set_user_received_account(const std::string& value) {
  ;


  _impl_.user_received_account_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::_internal_mutable_user_received_account() {
  ;
  return _impl_.user_received_account_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::release_user_received_account() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayRefundResponse.user_received_account)
  return _impl_.user_received_account_.Release();
}
inline void WechatPayRefundResponse::set_allocated_user_received_account(std::string* value) {
  _impl_.user_received_account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_received_account_.IsDefault()) {
          _impl_.user_received_account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayRefundResponse.user_received_account)
}

// string create_time = 99;
inline void WechatPayRefundResponse::clear_create_time() {
  _impl_.create_time_.ClearToEmpty();
}
inline const std::string& WechatPayRefundResponse::create_time() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayRefundResponse.create_time)
  return _internal_create_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayRefundResponse::set_create_time(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.create_time_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayRefundResponse.create_time)
}
inline std::string* WechatPayRefundResponse::mutable_create_time() {
  std::string* _s = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayRefundResponse.create_time)
  return _s;
}
inline const std::string& WechatPayRefundResponse::_internal_create_time() const {
  return _impl_.create_time_.Get();
}
inline void WechatPayRefundResponse::_internal_set_create_time(const std::string& value) {
  ;


  _impl_.create_time_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::_internal_mutable_create_time() {
  ;
  return _impl_.create_time_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayRefundResponse::release_create_time() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayRefundResponse.create_time)
  return _impl_.create_time_.Release();
}
inline void WechatPayRefundResponse::set_allocated_create_time(std::string* value) {
  _impl_.create_time_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.create_time_.IsDefault()) {
          _impl_.create_time_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayRefundResponse.create_time)
}

// -------------------------------------------------------------------

// WechatPayCreateTransferRequest_Batch

// string name = 1;
inline void WechatPayCreateTransferRequest_Batch::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest_Batch::name() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.Batch.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest_Batch::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.Batch.name)
}
inline std::string* WechatPayCreateTransferRequest_Batch::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.Batch.name)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest_Batch::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WechatPayCreateTransferRequest_Batch::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Batch::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Batch::release_name() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.Batch.name)
  return _impl_.name_.Release();
}
inline void WechatPayCreateTransferRequest_Batch::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.Batch.name)
}

// string remark = 2;
inline void WechatPayCreateTransferRequest_Batch::clear_remark() {
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest_Batch::remark() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.Batch.remark)
  return _internal_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest_Batch::set_remark(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.remark_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.Batch.remark)
}
inline std::string* WechatPayCreateTransferRequest_Batch::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.Batch.remark)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest_Batch::_internal_remark() const {
  return _impl_.remark_.Get();
}
inline void WechatPayCreateTransferRequest_Batch::_internal_set_remark(const std::string& value) {
  ;


  _impl_.remark_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Batch::_internal_mutable_remark() {
  ;
  return _impl_.remark_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Batch::release_remark() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.Batch.remark)
  return _impl_.remark_.Release();
}
inline void WechatPayCreateTransferRequest_Batch::set_allocated_remark(std::string* value) {
  _impl_.remark_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remark_.IsDefault()) {
          _impl_.remark_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.Batch.remark)
}

// -------------------------------------------------------------------

// WechatPayCreateTransferRequest_Detail

// string open_id = 1;
inline void WechatPayCreateTransferRequest_Detail::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest_Detail::open_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.Detail.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest_Detail::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.Detail.open_id)
}
inline std::string* WechatPayCreateTransferRequest_Detail::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.Detail.open_id)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest_Detail::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void WechatPayCreateTransferRequest_Detail::_internal_set_open_id(const std::string& value) {
  ;


  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Detail::_internal_mutable_open_id() {
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Detail::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.Detail.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatPayCreateTransferRequest_Detail::set_allocated_open_id(std::string* value) {
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.Detail.open_id)
}

// string username = 2;
inline void WechatPayCreateTransferRequest_Detail::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest_Detail::username() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.Detail.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest_Detail::set_username(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.Detail.username)
}
inline std::string* WechatPayCreateTransferRequest_Detail::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.Detail.username)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest_Detail::_internal_username() const {
  return _impl_.username_.Get();
}
inline void WechatPayCreateTransferRequest_Detail::_internal_set_username(const std::string& value) {
  ;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Detail::_internal_mutable_username() {
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Detail::release_username() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.Detail.username)
  return _impl_.username_.Release();
}
inline void WechatPayCreateTransferRequest_Detail::set_allocated_username(std::string* value) {
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.Detail.username)
}

// int64 amount = 3;
inline void WechatPayCreateTransferRequest_Detail::clear_amount() {
  _impl_.amount_ = ::int64_t{0};
}
inline ::int64_t WechatPayCreateTransferRequest_Detail::amount() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.Detail.amount)
  return _internal_amount();
}
inline void WechatPayCreateTransferRequest_Detail::set_amount(::int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.Detail.amount)
}
inline ::int64_t WechatPayCreateTransferRequest_Detail::_internal_amount() const {
  return _impl_.amount_;
}
inline void WechatPayCreateTransferRequest_Detail::_internal_set_amount(::int64_t value) {
  ;
  _impl_.amount_ = value;
}

// string remark = 4;
inline void WechatPayCreateTransferRequest_Detail::clear_remark() {
  _impl_.remark_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest_Detail::remark() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.Detail.remark)
  return _internal_remark();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest_Detail::set_remark(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.remark_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.Detail.remark)
}
inline std::string* WechatPayCreateTransferRequest_Detail::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.Detail.remark)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest_Detail::_internal_remark() const {
  return _impl_.remark_.Get();
}
inline void WechatPayCreateTransferRequest_Detail::_internal_set_remark(const std::string& value) {
  ;


  _impl_.remark_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Detail::_internal_mutable_remark() {
  ;
  return _impl_.remark_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest_Detail::release_remark() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.Detail.remark)
  return _impl_.remark_.Release();
}
inline void WechatPayCreateTransferRequest_Detail::set_allocated_remark(std::string* value) {
  _impl_.remark_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.remark_.IsDefault()) {
          _impl_.remark_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.Detail.remark)
}

// -------------------------------------------------------------------

// WechatPayCreateTransferRequest

// string app_id = 1;
inline void WechatPayCreateTransferRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.app_id)
}
inline std::string* WechatPayCreateTransferRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.app_id)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatPayCreateTransferRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatPayCreateTransferRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.app_id)
}

// .palm.musa.v1.WechatPayCreateTransferRequest.Batch batch = 2;
inline bool WechatPayCreateTransferRequest::has_batch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.batch_ != nullptr);
  return value;
}
inline void WechatPayCreateTransferRequest::clear_batch() {
  if (_impl_.batch_ != nullptr) _impl_.batch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::musa::v1::WechatPayCreateTransferRequest_Batch& WechatPayCreateTransferRequest::_internal_batch() const {
  const ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* p = _impl_.batch_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::musa::v1::WechatPayCreateTransferRequest_Batch&>(
      ::palm::musa::v1::_WechatPayCreateTransferRequest_Batch_default_instance_);
}
inline const ::palm::musa::v1::WechatPayCreateTransferRequest_Batch& WechatPayCreateTransferRequest::batch() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.batch)
  return _internal_batch();
}
inline void WechatPayCreateTransferRequest::unsafe_arena_set_allocated_batch(
    ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* batch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batch_);
  }
  _impl_.batch_ = batch;
  if (batch) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.batch)
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* WechatPayCreateTransferRequest::release_batch() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* temp = _impl_.batch_;
  _impl_.batch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* WechatPayCreateTransferRequest::unsafe_arena_release_batch() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.batch)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* temp = _impl_.batch_;
  _impl_.batch_ = nullptr;
  return temp;
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* WechatPayCreateTransferRequest::_internal_mutable_batch() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::musa::v1::WechatPayCreateTransferRequest_Batch>(GetArenaForAllocation());
    _impl_.batch_ = p;
  }
  return _impl_.batch_;
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* WechatPayCreateTransferRequest::mutable_batch() {
  ::palm::musa::v1::WechatPayCreateTransferRequest_Batch* _msg = _internal_mutable_batch();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.batch)
  return _msg;
}
inline void WechatPayCreateTransferRequest::set_allocated_batch(::palm::musa::v1::WechatPayCreateTransferRequest_Batch* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.batch_;
  }
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch);
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.batch_ = batch;
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.batch)
}

// repeated .palm.musa.v1.WechatPayCreateTransferRequest.Detail details = 3;
inline int WechatPayCreateTransferRequest::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int WechatPayCreateTransferRequest::details_size() const {
  return _internal_details_size();
}
inline void WechatPayCreateTransferRequest::clear_details() {
  _internal_mutable_details()->Clear();
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* WechatPayCreateTransferRequest::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.details)
  return _internal_mutable_details()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferRequest_Detail >*
WechatPayCreateTransferRequest::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:palm.musa.v1.WechatPayCreateTransferRequest.details)
  return _internal_mutable_details();
}
inline const ::palm::musa::v1::WechatPayCreateTransferRequest_Detail& WechatPayCreateTransferRequest::_internal_details(int index) const {
  return _internal_details().Get(index);
}
inline const ::palm::musa::v1::WechatPayCreateTransferRequest_Detail& WechatPayCreateTransferRequest::details(int index) const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.details)
  return _internal_details(index);
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* WechatPayCreateTransferRequest::_internal_add_details() {
  return _internal_mutable_details()->Add();
}
inline ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* WechatPayCreateTransferRequest::add_details() {
  ::palm::musa::v1::WechatPayCreateTransferRequest_Detail* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:palm.musa.v1.WechatPayCreateTransferRequest.details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferRequest_Detail >&
WechatPayCreateTransferRequest::details() const {
  // @@protoc_insertion_point(field_list:palm.musa.v1.WechatPayCreateTransferRequest.details)
  return _internal_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferRequest_Detail>&
WechatPayCreateTransferRequest::_internal_details() const {
  return _impl_.details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferRequest_Detail>*
WechatPayCreateTransferRequest::_internal_mutable_details() {
  return &_impl_.details_;
}

// string scene_id = 9;
inline void WechatPayCreateTransferRequest::clear_scene_id() {
  _impl_.scene_id_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.scene_id)
  return _internal_scene_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest::set_scene_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.scene_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.scene_id)
}
inline std::string* WechatPayCreateTransferRequest::mutable_scene_id() {
  std::string* _s = _internal_mutable_scene_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.scene_id)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest::_internal_scene_id() const {
  return _impl_.scene_id_.Get();
}
inline void WechatPayCreateTransferRequest::_internal_set_scene_id(const std::string& value) {
  ;


  _impl_.scene_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest::_internal_mutable_scene_id() {
  ;
  return _impl_.scene_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.scene_id)
  return _impl_.scene_id_.Release();
}
inline void WechatPayCreateTransferRequest::set_allocated_scene_id(std::string* value) {
  _impl_.scene_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scene_id_.IsDefault()) {
          _impl_.scene_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.scene_id)
}

// optional string out_batch_no = 11;
inline bool WechatPayCreateTransferRequest::has_out_batch_no() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatPayCreateTransferRequest::clear_out_batch_no() {
  _impl_.out_batch_no_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatPayCreateTransferRequest::out_batch_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferRequest.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferRequest::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferRequest.out_batch_no)
}
inline std::string* WechatPayCreateTransferRequest::mutable_out_batch_no() {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferRequest.out_batch_no)
  return _s;
}
inline const std::string& WechatPayCreateTransferRequest::_internal_out_batch_no() const {
  return _impl_.out_batch_no_.Get();
}
inline void WechatPayCreateTransferRequest::_internal_set_out_batch_no(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.out_batch_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest::_internal_mutable_out_batch_no() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.out_batch_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferRequest::release_out_batch_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferRequest.out_batch_no)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.out_batch_no_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.out_batch_no_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatPayCreateTransferRequest::set_allocated_out_batch_no(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.out_batch_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferRequest.out_batch_no)
}

// -------------------------------------------------------------------

// WechatPayCreateTransferResponse_Detail

// string open_id = 1;
inline void WechatPayCreateTransferResponse_Detail::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferResponse_Detail::open_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.Detail.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferResponse_Detail::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferResponse.Detail.open_id)
}
inline std::string* WechatPayCreateTransferResponse_Detail::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.Detail.open_id)
  return _s;
}
inline const std::string& WechatPayCreateTransferResponse_Detail::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void WechatPayCreateTransferResponse_Detail::_internal_set_open_id(const std::string& value) {
  ;


  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Detail::_internal_mutable_open_id() {
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Detail::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.Detail.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatPayCreateTransferResponse_Detail::set_allocated_open_id(std::string* value) {
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.Detail.open_id)
}

// string out_detail_no = 2;
inline void WechatPayCreateTransferResponse_Detail::clear_out_detail_no() {
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferResponse_Detail::out_detail_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.Detail.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferResponse_Detail::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferResponse.Detail.out_detail_no)
}
inline std::string* WechatPayCreateTransferResponse_Detail::mutable_out_detail_no() {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.Detail.out_detail_no)
  return _s;
}
inline const std::string& WechatPayCreateTransferResponse_Detail::_internal_out_detail_no() const {
  return _impl_.out_detail_no_.Get();
}
inline void WechatPayCreateTransferResponse_Detail::_internal_set_out_detail_no(const std::string& value) {
  ;


  _impl_.out_detail_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Detail::_internal_mutable_out_detail_no() {
  ;
  return _impl_.out_detail_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Detail::release_out_detail_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.Detail.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void WechatPayCreateTransferResponse_Detail::set_allocated_out_detail_no(std::string* value) {
  _impl_.out_detail_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.Detail.out_detail_no)
}

// -------------------------------------------------------------------

// WechatPayCreateTransferResponse_Succeeded

// string batch_id = 1;
inline void WechatPayCreateTransferResponse_Succeeded::clear_batch_id() {
  _impl_.batch_id_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferResponse_Succeeded::batch_id() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.batch_id)
  return _internal_batch_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferResponse_Succeeded::set_batch_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.batch_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.batch_id)
}
inline std::string* WechatPayCreateTransferResponse_Succeeded::mutable_batch_id() {
  std::string* _s = _internal_mutable_batch_id();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.batch_id)
  return _s;
}
inline const std::string& WechatPayCreateTransferResponse_Succeeded::_internal_batch_id() const {
  return _impl_.batch_id_.Get();
}
inline void WechatPayCreateTransferResponse_Succeeded::_internal_set_batch_id(const std::string& value) {
  ;


  _impl_.batch_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Succeeded::_internal_mutable_batch_id() {
  ;
  return _impl_.batch_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Succeeded::release_batch_id() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.batch_id)
  return _impl_.batch_id_.Release();
}
inline void WechatPayCreateTransferResponse_Succeeded::set_allocated_batch_id(std::string* value) {
  _impl_.batch_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.batch_id_.IsDefault()) {
          _impl_.batch_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.batch_id)
}

// string create_time = 2;
inline void WechatPayCreateTransferResponse_Succeeded::clear_create_time() {
  _impl_.create_time_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferResponse_Succeeded::create_time() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.create_time)
  return _internal_create_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferResponse_Succeeded::set_create_time(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.create_time_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.create_time)
}
inline std::string* WechatPayCreateTransferResponse_Succeeded::mutable_create_time() {
  std::string* _s = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.create_time)
  return _s;
}
inline const std::string& WechatPayCreateTransferResponse_Succeeded::_internal_create_time() const {
  return _impl_.create_time_.Get();
}
inline void WechatPayCreateTransferResponse_Succeeded::_internal_set_create_time(const std::string& value) {
  ;


  _impl_.create_time_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Succeeded::_internal_mutable_create_time() {
  ;
  return _impl_.create_time_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse_Succeeded::release_create_time() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.create_time)
  return _impl_.create_time_.Release();
}
inline void WechatPayCreateTransferResponse_Succeeded::set_allocated_create_time(std::string* value) {
  _impl_.create_time_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.create_time_.IsDefault()) {
          _impl_.create_time_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.Succeeded.create_time)
}

// -------------------------------------------------------------------

// WechatPayCreateTransferResponse

// string out_batch_no = 1;
inline void WechatPayCreateTransferResponse::clear_out_batch_no() {
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& WechatPayCreateTransferResponse::out_batch_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayCreateTransferResponse::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayCreateTransferResponse.out_batch_no)
}
inline std::string* WechatPayCreateTransferResponse::mutable_out_batch_no() {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.out_batch_no)
  return _s;
}
inline const std::string& WechatPayCreateTransferResponse::_internal_out_batch_no() const {
  return _impl_.out_batch_no_.Get();
}
inline void WechatPayCreateTransferResponse::_internal_set_out_batch_no(const std::string& value) {
  ;


  _impl_.out_batch_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse::_internal_mutable_out_batch_no() {
  ;
  return _impl_.out_batch_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayCreateTransferResponse::release_out_batch_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void WechatPayCreateTransferResponse::set_allocated_out_batch_no(std::string* value) {
  _impl_.out_batch_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.out_batch_no)
}

// repeated .palm.musa.v1.WechatPayCreateTransferResponse.Detail details = 2;
inline int WechatPayCreateTransferResponse::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int WechatPayCreateTransferResponse::details_size() const {
  return _internal_details_size();
}
inline void WechatPayCreateTransferResponse::clear_details() {
  _internal_mutable_details()->Clear();
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* WechatPayCreateTransferResponse::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.details)
  return _internal_mutable_details()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferResponse_Detail >*
WechatPayCreateTransferResponse::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:palm.musa.v1.WechatPayCreateTransferResponse.details)
  return _internal_mutable_details();
}
inline const ::palm::musa::v1::WechatPayCreateTransferResponse_Detail& WechatPayCreateTransferResponse::_internal_details(int index) const {
  return _internal_details().Get(index);
}
inline const ::palm::musa::v1::WechatPayCreateTransferResponse_Detail& WechatPayCreateTransferResponse::details(int index) const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.details)
  return _internal_details(index);
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* WechatPayCreateTransferResponse::_internal_add_details() {
  return _internal_mutable_details()->Add();
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* WechatPayCreateTransferResponse::add_details() {
  ::palm::musa::v1::WechatPayCreateTransferResponse_Detail* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:palm.musa.v1.WechatPayCreateTransferResponse.details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayCreateTransferResponse_Detail >&
WechatPayCreateTransferResponse::details() const {
  // @@protoc_insertion_point(field_list:palm.musa.v1.WechatPayCreateTransferResponse.details)
  return _internal_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferResponse_Detail>&
WechatPayCreateTransferResponse::_internal_details() const {
  return _impl_.details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayCreateTransferResponse_Detail>*
WechatPayCreateTransferResponse::_internal_mutable_details() {
  return &_impl_.details_;
}

// .palm.musa.v1.WechatPayCreateTransferResponse.Succeeded succeeded = 11;
inline bool WechatPayCreateTransferResponse::has_succeeded() const {
  return payload_case() == kSucceeded;
}
inline bool WechatPayCreateTransferResponse::_internal_has_succeeded() const {
  return payload_case() == kSucceeded;
}
inline void WechatPayCreateTransferResponse::set_has_succeeded() {
  _impl_._oneof_case_[0] = kSucceeded;
}
inline void WechatPayCreateTransferResponse::clear_succeeded() {
  if (payload_case() == kSucceeded) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.succeeded_;
    }
    clear_has_payload();
  }
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* WechatPayCreateTransferResponse::release_succeeded() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.succeeded)
  if (payload_case() == kSucceeded) {
    clear_has_payload();
    ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* temp = _impl_.payload_.succeeded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.succeeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded& WechatPayCreateTransferResponse::_internal_succeeded() const {
  return payload_case() == kSucceeded
      ? *_impl_.payload_.succeeded_
      : reinterpret_cast<::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded&>(::palm::musa::v1::_WechatPayCreateTransferResponse_Succeeded_default_instance_);
}
inline const ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded& WechatPayCreateTransferResponse::succeeded() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.succeeded)
  return _internal_succeeded();
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* WechatPayCreateTransferResponse::unsafe_arena_release_succeeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.musa.v1.WechatPayCreateTransferResponse.succeeded)
  if (payload_case() == kSucceeded) {
    clear_has_payload();
    ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* temp = _impl_.payload_.succeeded_;
    _impl_.payload_.succeeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WechatPayCreateTransferResponse::unsafe_arena_set_allocated_succeeded(::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* succeeded) {
  clear_payload();
  if (succeeded) {
    set_has_succeeded();
    _impl_.payload_.succeeded_ = succeeded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.succeeded)
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* WechatPayCreateTransferResponse::_internal_mutable_succeeded() {
  if (payload_case() != kSucceeded) {
    clear_payload();
    set_has_succeeded();
    _impl_.payload_.succeeded_ = CreateMaybeMessage< ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded >(GetArenaForAllocation());
  }
  return _impl_.payload_.succeeded_;
}
inline ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* WechatPayCreateTransferResponse::mutable_succeeded() {
  ::palm::musa::v1::WechatPayCreateTransferResponse_Succeeded* _msg = _internal_mutable_succeeded();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.succeeded)
  return _msg;
}

// .palm.musa.v1.Error error = 12;
inline bool WechatPayCreateTransferResponse::has_error() const {
  return payload_case() == kError;
}
inline bool WechatPayCreateTransferResponse::_internal_has_error() const {
  return payload_case() == kError;
}
inline void WechatPayCreateTransferResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void WechatPayCreateTransferResponse::clear_error() {
  if (payload_case() == kError) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.error_;
    }
    clear_has_payload();
  }
}
inline ::palm::musa::v1::Error* WechatPayCreateTransferResponse::release_error() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayCreateTransferResponse.error)
  if (payload_case() == kError) {
    clear_has_payload();
    ::palm::musa::v1::Error* temp = _impl_.payload_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::musa::v1::Error& WechatPayCreateTransferResponse::_internal_error() const {
  return payload_case() == kError
      ? *_impl_.payload_.error_
      : reinterpret_cast<::palm::musa::v1::Error&>(::palm::musa::v1::_Error_default_instance_);
}
inline const ::palm::musa::v1::Error& WechatPayCreateTransferResponse::error() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayCreateTransferResponse.error)
  return _internal_error();
}
inline ::palm::musa::v1::Error* WechatPayCreateTransferResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.musa.v1.WechatPayCreateTransferResponse.error)
  if (payload_case() == kError) {
    clear_has_payload();
    ::palm::musa::v1::Error* temp = _impl_.payload_.error_;
    _impl_.payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WechatPayCreateTransferResponse::unsafe_arena_set_allocated_error(::palm::musa::v1::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    _impl_.payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayCreateTransferResponse.error)
}
inline ::palm::musa::v1::Error* WechatPayCreateTransferResponse::_internal_mutable_error() {
  if (payload_case() != kError) {
    clear_payload();
    set_has_error();
    _impl_.payload_.error_ = CreateMaybeMessage< ::palm::musa::v1::Error >(GetArenaForAllocation());
  }
  return _impl_.payload_.error_;
}
inline ::palm::musa::v1::Error* WechatPayCreateTransferResponse::mutable_error() {
  ::palm::musa::v1::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayCreateTransferResponse.error)
  return _msg;
}

inline bool WechatPayCreateTransferResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void WechatPayCreateTransferResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline WechatPayCreateTransferResponse::PayloadCase WechatPayCreateTransferResponse::payload_case() const {
  return WechatPayCreateTransferResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WechatPayQueryTransferRequest

// string out_batch_no = 1;
inline void WechatPayQueryTransferRequest::clear_out_batch_no() {
  _impl_.out_batch_no_.ClearToEmpty();
}
inline const std::string& WechatPayQueryTransferRequest::out_batch_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferRequest.out_batch_no)
  return _internal_out_batch_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryTransferRequest::set_out_batch_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_batch_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferRequest.out_batch_no)
}
inline std::string* WechatPayQueryTransferRequest::mutable_out_batch_no() {
  std::string* _s = _internal_mutable_out_batch_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferRequest.out_batch_no)
  return _s;
}
inline const std::string& WechatPayQueryTransferRequest::_internal_out_batch_no() const {
  return _impl_.out_batch_no_.Get();
}
inline void WechatPayQueryTransferRequest::_internal_set_out_batch_no(const std::string& value) {
  ;


  _impl_.out_batch_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferRequest::_internal_mutable_out_batch_no() {
  ;
  return _impl_.out_batch_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferRequest::release_out_batch_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferRequest.out_batch_no)
  return _impl_.out_batch_no_.Release();
}
inline void WechatPayQueryTransferRequest::set_allocated_out_batch_no(std::string* value) {
  _impl_.out_batch_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_batch_no_.IsDefault()) {
          _impl_.out_batch_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferRequest.out_batch_no)
}

// int32 offset = 2;
inline void WechatPayQueryTransferRequest::clear_offset() {
  _impl_.offset_ = 0;
}
inline ::int32_t WechatPayQueryTransferRequest::offset() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferRequest.offset)
  return _internal_offset();
}
inline void WechatPayQueryTransferRequest::set_offset(::int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferRequest.offset)
}
inline ::int32_t WechatPayQueryTransferRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline void WechatPayQueryTransferRequest::_internal_set_offset(::int32_t value) {
  ;
  _impl_.offset_ = value;
}

// int32 limit = 3;
inline void WechatPayQueryTransferRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline ::int32_t WechatPayQueryTransferRequest::limit() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferRequest.limit)
  return _internal_limit();
}
inline void WechatPayQueryTransferRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferRequest.limit)
}
inline ::int32_t WechatPayQueryTransferRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline void WechatPayQueryTransferRequest::_internal_set_limit(::int32_t value) {
  ;
  _impl_.limit_ = value;
}

// .palm.musa.v1.WechatPayQueryTransferRequest.DetailStatus detail_status = 9;
inline void WechatPayQueryTransferRequest::clear_detail_status() {
  _impl_.detail_status_ = 0;
}
inline ::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus WechatPayQueryTransferRequest::detail_status() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferRequest.detail_status)
  return _internal_detail_status();
}
inline void WechatPayQueryTransferRequest::set_detail_status(::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus value) {
   _internal_set_detail_status(value);
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferRequest.detail_status)
}
inline ::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus WechatPayQueryTransferRequest::_internal_detail_status() const {
  return static_cast<::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus>(_impl_.detail_status_);
}
inline void WechatPayQueryTransferRequest::_internal_set_detail_status(::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus value) {
  ;
  _impl_.detail_status_ = value;
}

// -------------------------------------------------------------------

// WechatPayQueryTransferResponse_Detail

// string out_detail_no = 1;
inline void WechatPayQueryTransferResponse_Detail::clear_out_detail_no() {
  _impl_.out_detail_no_.ClearToEmpty();
}
inline const std::string& WechatPayQueryTransferResponse_Detail::out_detail_no() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.Detail.out_detail_no)
  return _internal_out_detail_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryTransferResponse_Detail::set_out_detail_no(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.out_detail_no_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferResponse.Detail.out_detail_no)
}
inline std::string* WechatPayQueryTransferResponse_Detail::mutable_out_detail_no() {
  std::string* _s = _internal_mutable_out_detail_no();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.Detail.out_detail_no)
  return _s;
}
inline const std::string& WechatPayQueryTransferResponse_Detail::_internal_out_detail_no() const {
  return _impl_.out_detail_no_.Get();
}
inline void WechatPayQueryTransferResponse_Detail::_internal_set_out_detail_no(const std::string& value) {
  ;


  _impl_.out_detail_no_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Detail::_internal_mutable_out_detail_no() {
  ;
  return _impl_.out_detail_no_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Detail::release_out_detail_no() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferResponse.Detail.out_detail_no)
  return _impl_.out_detail_no_.Release();
}
inline void WechatPayQueryTransferResponse_Detail::set_allocated_out_detail_no(std::string* value) {
  _impl_.out_detail_no_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.out_detail_no_.IsDefault()) {
          _impl_.out_detail_no_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.Detail.out_detail_no)
}

// string status = 2;
inline void WechatPayQueryTransferResponse_Detail::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& WechatPayQueryTransferResponse_Detail::status() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.Detail.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryTransferResponse_Detail::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferResponse.Detail.status)
}
inline std::string* WechatPayQueryTransferResponse_Detail::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.Detail.status)
  return _s;
}
inline const std::string& WechatPayQueryTransferResponse_Detail::_internal_status() const {
  return _impl_.status_.Get();
}
inline void WechatPayQueryTransferResponse_Detail::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Detail::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Detail::release_status() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferResponse.Detail.status)
  return _impl_.status_.Release();
}
inline void WechatPayQueryTransferResponse_Detail::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.Detail.status)
}

// -------------------------------------------------------------------

// WechatPayQueryTransferResponse_Batch

// string status = 1;
inline void WechatPayQueryTransferResponse_Batch::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& WechatPayQueryTransferResponse_Batch::status() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.Batch.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryTransferResponse_Batch::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferResponse.Batch.status)
}
inline std::string* WechatPayQueryTransferResponse_Batch::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.Batch.status)
  return _s;
}
inline const std::string& WechatPayQueryTransferResponse_Batch::_internal_status() const {
  return _impl_.status_.Get();
}
inline void WechatPayQueryTransferResponse_Batch::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Batch::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Batch::release_status() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferResponse.Batch.status)
  return _impl_.status_.Release();
}
inline void WechatPayQueryTransferResponse_Batch::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.Batch.status)
}

// string type = 2;
inline void WechatPayQueryTransferResponse_Batch::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& WechatPayQueryTransferResponse_Batch::type() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.Batch.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryTransferResponse_Batch::set_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferResponse.Batch.type)
}
inline std::string* WechatPayQueryTransferResponse_Batch::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.Batch.type)
  return _s;
}
inline const std::string& WechatPayQueryTransferResponse_Batch::_internal_type() const {
  return _impl_.type_.Get();
}
inline void WechatPayQueryTransferResponse_Batch::_internal_set_type(const std::string& value) {
  ;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Batch::_internal_mutable_type() {
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Batch::release_type() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferResponse.Batch.type)
  return _impl_.type_.Release();
}
inline void WechatPayQueryTransferResponse_Batch::set_allocated_type(std::string* value) {
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.Batch.type)
}

// optional string close_reason = 9;
inline bool WechatPayQueryTransferResponse_Batch::has_close_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatPayQueryTransferResponse_Batch::clear_close_reason() {
  _impl_.close_reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatPayQueryTransferResponse_Batch::close_reason() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.Batch.close_reason)
  return _internal_close_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatPayQueryTransferResponse_Batch::set_close_reason(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.close_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.musa.v1.WechatPayQueryTransferResponse.Batch.close_reason)
}
inline std::string* WechatPayQueryTransferResponse_Batch::mutable_close_reason() {
  std::string* _s = _internal_mutable_close_reason();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.Batch.close_reason)
  return _s;
}
inline const std::string& WechatPayQueryTransferResponse_Batch::_internal_close_reason() const {
  return _impl_.close_reason_.Get();
}
inline void WechatPayQueryTransferResponse_Batch::_internal_set_close_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.close_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Batch::_internal_mutable_close_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.close_reason_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatPayQueryTransferResponse_Batch::release_close_reason() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferResponse.Batch.close_reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.close_reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.close_reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatPayQueryTransferResponse_Batch::set_allocated_close_reason(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.close_reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.close_reason_.IsDefault()) {
          _impl_.close_reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.Batch.close_reason)
}

// -------------------------------------------------------------------

// WechatPayQueryTransferResponse

// .palm.musa.v1.WechatPayQueryTransferResponse.Batch batch = 1;
inline bool WechatPayQueryTransferResponse::has_batch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.batch_ != nullptr);
  return value;
}
inline void WechatPayQueryTransferResponse::clear_batch() {
  if (_impl_.batch_ != nullptr) _impl_.batch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::musa::v1::WechatPayQueryTransferResponse_Batch& WechatPayQueryTransferResponse::_internal_batch() const {
  const ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* p = _impl_.batch_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::musa::v1::WechatPayQueryTransferResponse_Batch&>(
      ::palm::musa::v1::_WechatPayQueryTransferResponse_Batch_default_instance_);
}
inline const ::palm::musa::v1::WechatPayQueryTransferResponse_Batch& WechatPayQueryTransferResponse::batch() const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.batch)
  return _internal_batch();
}
inline void WechatPayQueryTransferResponse::unsafe_arena_set_allocated_batch(
    ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* batch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batch_);
  }
  _impl_.batch_ = batch;
  if (batch) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.batch)
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* WechatPayQueryTransferResponse::release_batch() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* temp = _impl_.batch_;
  _impl_.batch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* WechatPayQueryTransferResponse::unsafe_arena_release_batch() {
  // @@protoc_insertion_point(field_release:palm.musa.v1.WechatPayQueryTransferResponse.batch)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* temp = _impl_.batch_;
  _impl_.batch_ = nullptr;
  return temp;
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* WechatPayQueryTransferResponse::_internal_mutable_batch() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.batch_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::musa::v1::WechatPayQueryTransferResponse_Batch>(GetArenaForAllocation());
    _impl_.batch_ = p;
  }
  return _impl_.batch_;
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* WechatPayQueryTransferResponse::mutable_batch() {
  ::palm::musa::v1::WechatPayQueryTransferResponse_Batch* _msg = _internal_mutable_batch();
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.batch)
  return _msg;
}
inline void WechatPayQueryTransferResponse::set_allocated_batch(::palm::musa::v1::WechatPayQueryTransferResponse_Batch* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.batch_;
  }
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(batch);
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.batch_ = batch;
  // @@protoc_insertion_point(field_set_allocated:palm.musa.v1.WechatPayQueryTransferResponse.batch)
}

// repeated .palm.musa.v1.WechatPayQueryTransferResponse.Detail details = 9;
inline int WechatPayQueryTransferResponse::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int WechatPayQueryTransferResponse::details_size() const {
  return _internal_details_size();
}
inline void WechatPayQueryTransferResponse::clear_details() {
  _internal_mutable_details()->Clear();
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* WechatPayQueryTransferResponse::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:palm.musa.v1.WechatPayQueryTransferResponse.details)
  return _internal_mutable_details()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayQueryTransferResponse_Detail >*
WechatPayQueryTransferResponse::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:palm.musa.v1.WechatPayQueryTransferResponse.details)
  return _internal_mutable_details();
}
inline const ::palm::musa::v1::WechatPayQueryTransferResponse_Detail& WechatPayQueryTransferResponse::_internal_details(int index) const {
  return _internal_details().Get(index);
}
inline const ::palm::musa::v1::WechatPayQueryTransferResponse_Detail& WechatPayQueryTransferResponse::details(int index) const {
  // @@protoc_insertion_point(field_get:palm.musa.v1.WechatPayQueryTransferResponse.details)
  return _internal_details(index);
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* WechatPayQueryTransferResponse::_internal_add_details() {
  return _internal_mutable_details()->Add();
}
inline ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* WechatPayQueryTransferResponse::add_details() {
  ::palm::musa::v1::WechatPayQueryTransferResponse_Detail* _add = _internal_add_details();
  // @@protoc_insertion_point(field_add:palm.musa.v1.WechatPayQueryTransferResponse.details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::musa::v1::WechatPayQueryTransferResponse_Detail >&
WechatPayQueryTransferResponse::details() const {
  // @@protoc_insertion_point(field_list:palm.musa.v1.WechatPayQueryTransferResponse.details)
  return _internal_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayQueryTransferResponse_Detail>&
WechatPayQueryTransferResponse::_internal_details() const {
  return _impl_.details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::musa::v1::WechatPayQueryTransferResponse_Detail>*
WechatPayQueryTransferResponse::_internal_mutable_details() {
  return &_impl_.details_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace musa
}  // namespace palm


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::palm::musa::v1::WechatPayTradeBillRequest_BillType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::musa::v1::WechatPayTradeBillRequest_BillType>() {
  return ::palm::musa::v1::WechatPayTradeBillRequest_BillType_descriptor();
}
template <>
struct is_proto_enum<::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType>() {
  return ::palm::musa::v1::WechatPayFundFlowBillRequest_AccountType_descriptor();
}
template <>
struct is_proto_enum<::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus>() {
  return ::palm::musa::v1::WechatPayQueryTransferRequest_DetailStatus_descriptor();
}
template <>
struct is_proto_enum<::palm::musa::v1::WechatPayCurrency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::musa::v1::WechatPayCurrency>() {
  return ::palm::musa::v1::WechatPayCurrency_descriptor();
}
template <>
struct is_proto_enum<::palm::musa::v1::WechatPayNotifyAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::musa::v1::WechatPayNotifyAction>() {
  return ::palm::musa::v1::WechatPayNotifyAction_descriptor();
}
template <>
struct is_proto_enum<::palm::musa::v1::WechatPayTarType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::musa::v1::WechatPayTarType>() {
  return ::palm::musa::v1::WechatPayTarType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_musa_2eproto_2epb_2eh
