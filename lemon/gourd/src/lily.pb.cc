// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lily.proto

#include "lily.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace palm {
namespace lily {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR HttpResponse::HttpResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.body_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HttpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HttpResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HttpResponseDefaultTypeInternal() {}
  union {
    HttpResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HttpResponseDefaultTypeInternal _HttpResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelLoadRequest::ExcelLoadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelLoadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelLoadRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelLoadRequestDefaultTypeInternal() {}
  union {
    ExcelLoadRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelLoadRequestDefaultTypeInternal _ExcelLoadRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelQueryRequest::ExcelQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelQueryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelQueryRequestDefaultTypeInternal() {}
  union {
    ExcelQueryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelQueryRequestDefaultTypeInternal _ExcelQueryRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelQueryResponse_Item::ExcelQueryResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.x_)*/ 0u

  , /*decltype(_impl_.y_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelQueryResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelQueryResponse_ItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelQueryResponse_ItemDefaultTypeInternal() {}
  union {
    ExcelQueryResponse_Item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelQueryResponse_ItemDefaultTypeInternal _ExcelQueryResponse_Item_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelQueryResponse::ExcelQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelQueryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelQueryResponseDefaultTypeInternal() {}
  union {
    ExcelQueryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelQueryResponseDefaultTypeInternal _ExcelQueryResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TexToRequest::TexToRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TexToRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TexToRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TexToRequestDefaultTypeInternal() {}
  union {
    TexToRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TexToRequestDefaultTypeInternal _TexToRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EpubBuildRequest::EpubBuildRequest(
    ::_pbi::ConstantInitialized) {}
struct EpubBuildRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpubBuildRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpubBuildRequestDefaultTypeInternal() {}
  union {
    EpubBuildRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpubBuildRequestDefaultTypeInternal _EpubBuildRequest_default_instance_;
}  // namespace v1
}  // namespace lily
}  // namespace palm
static ::_pb::Metadata file_level_metadata_lily_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_lily_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_lily_2eproto = nullptr;
const ::uint32_t TableStruct_lily_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::HttpResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::HttpResponse, _impl_.content_type_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::HttpResponse, _impl_.body_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelLoadRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelLoadRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelLoadRequest, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryRequest, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryResponse_Item, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryResponse_Item, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryResponse_Item, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryResponse_Item, _impl_.v_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelQueryResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest, _impl_.body_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::EpubBuildRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::palm::lily::v1::HttpResponse)},
        { 10, -1, -1, sizeof(::palm::lily::v1::ExcelLoadRequest)},
        { 20, -1, -1, sizeof(::palm::lily::v1::ExcelQueryRequest)},
        { 29, -1, -1, sizeof(::palm::lily::v1::ExcelQueryResponse_Item)},
        { 40, -1, -1, sizeof(::palm::lily::v1::ExcelQueryResponse)},
        { 49, -1, -1, sizeof(::palm::lily::v1::TexToRequest)},
        { 58, -1, -1, sizeof(::palm::lily::v1::EpubBuildRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::lily::v1::_HttpResponse_default_instance_._instance,
    &::palm::lily::v1::_ExcelLoadRequest_default_instance_._instance,
    &::palm::lily::v1::_ExcelQueryRequest_default_instance_._instance,
    &::palm::lily::v1::_ExcelQueryResponse_Item_default_instance_._instance,
    &::palm::lily::v1::_ExcelQueryResponse_default_instance_._instance,
    &::palm::lily::v1::_TexToRequest_default_instance_._instance,
    &::palm::lily::v1::_EpubBuildRequest_default_instance_._instance,
};
const char descriptor_table_protodef_lily_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nlily.proto\022\014palm.lily.v1\032\033google/proto"
    "buf/empty.proto\"2\n\014HttpResponse\022\024\n\014conte"
    "nt_type\030\001 \001(\t\022\014\n\004body\030\002 \001(\014\",\n\020ExcelLoad"
    "Request\022\n\n\002id\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"\037\n\021Exc"
    "elQueryRequest\022\n\n\002id\030\001 \001(\t\"s\n\022ExcelQuery"
    "Response\0224\n\005items\030\001 \003(\0132%.palm.lily.v1.E"
    "xcelQueryResponse.Item\032\'\n\004Item\022\t\n\001x\030\001 \001("
    "\r\022\t\n\001y\030\002 \001(\r\022\t\n\001v\030\003 \001(\t\"\034\n\014TexToRequest\022"
    "\014\n\004body\030\001 \001(\t\"\022\n\020EpubBuildRequest2\227\001\n\005Ex"
    "cel\022@\n\004Load\022\036.palm.lily.v1.ExcelLoadRequ"
    "est\032\026.google.protobuf.Empty\"\000\022L\n\005Query\022\037"
    ".palm.lily.v1.ExcelQueryRequest\032 .palm.l"
    "ily.v1.ExcelQueryResponse\"\0002\215\001\n\003Tex\022A\n\005T"
    "oPdf\022\032.palm.lily.v1.TexToRequest\032\032.palm."
    "lily.v1.HttpResponse\"\000\022C\n\007ToWords\022\032.palm"
    ".lily.v1.TexToRequest\032\032.palm.lily.v1.Htt"
    "pResponse\"\0002M\n\004Epub\022E\n\005Build\022\036.palm.lily"
    ".v1.EpubBuildRequest\032\032.palm.lily.v1.Http"
    "Response\"\000B.\n*com.github.saturn_xiv.palm"
    ".plugins.lily.v1P\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_lily_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_lily_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lily_2eproto = {
    false,
    false,
    786,
    descriptor_table_protodef_lily_2eproto,
    "lily.proto",
    &descriptor_table_lily_2eproto_once,
    descriptor_table_lily_2eproto_deps,
    1,
    7,
    schemas,
    file_default_instances,
    TableStruct_lily_2eproto::offsets,
    file_level_metadata_lily_2eproto,
    file_level_enum_descriptors_lily_2eproto,
    file_level_service_descriptors_lily_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lily_2eproto_getter() {
  return &descriptor_table_lily_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lily_2eproto(&descriptor_table_lily_2eproto);
namespace palm {
namespace lily {
namespace v1 {
// ===================================================================

class HttpResponse::_Internal {
 public:
};

HttpResponse::HttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.HttpResponse)
}
HttpResponse::HttpResponse(const HttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HttpResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_type_) {}

    , decltype(_impl_.body_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.HttpResponse)
}

inline void HttpResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.content_type_) {}

    , decltype(_impl_.body_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.HttpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HttpResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_type_.Destroy();
  _impl_.body_.Destroy();
}

void HttpResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.HttpResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_type_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.HttpResponse.content_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HttpResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.HttpResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_type = 1;
  if (!this->_internal_content_type().empty()) {
    const std::string& _s = this->_internal_content_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.HttpResponse.content_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    const std::string& _s = this->_internal_body();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.HttpResponse)
  return target;
}

::size_t HttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.HttpResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content_type = 1;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_content_type());
  }

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HttpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpResponse::GetClassData() const { return &_class_data_; }


void HttpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HttpResponse*>(&to_msg);
  auto& from = static_cast<const HttpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.HttpResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  return true;
}

void HttpResponse::InternalSwap(HttpResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_type_, lhs_arena,
                                       &other->_impl_.content_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, lhs_arena,
                                       &other->_impl_.body_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[0]);
}
// ===================================================================

class ExcelLoadRequest::_Internal {
 public:
};

ExcelLoadRequest::ExcelLoadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelLoadRequest)
}
ExcelLoadRequest::ExcelLoadRequest(const ExcelLoadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelLoadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelLoadRequest)
}

inline void ExcelLoadRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExcelLoadRequest::~ExcelLoadRequest() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelLoadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelLoadRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.data_.Destroy();
}

void ExcelLoadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelLoadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelLoadRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelLoadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.ExcelLoadRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelLoadRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelLoadRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.ExcelLoadRequest.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelLoadRequest)
  return target;
}

::size_t ExcelLoadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelLoadRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelLoadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelLoadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelLoadRequest::GetClassData() const { return &_class_data_; }


void ExcelLoadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelLoadRequest*>(&to_msg);
  auto& from = static_cast<const ExcelLoadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelLoadRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelLoadRequest::CopyFrom(const ExcelLoadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelLoadRequest::IsInitialized() const {
  return true;
}

void ExcelLoadRequest::InternalSwap(ExcelLoadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelLoadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[1]);
}
// ===================================================================

class ExcelQueryRequest::_Internal {
 public:
};

ExcelQueryRequest::ExcelQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelQueryRequest)
}
ExcelQueryRequest::ExcelQueryRequest(const ExcelQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelQueryRequest)
}

inline void ExcelQueryRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExcelQueryRequest::~ExcelQueryRequest() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelQueryRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void ExcelQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelQueryRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.ExcelQueryRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelQueryRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelQueryRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.ExcelQueryRequest.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelQueryRequest)
  return target;
}

::size_t ExcelQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelQueryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelQueryRequest::GetClassData() const { return &_class_data_; }


void ExcelQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelQueryRequest*>(&to_msg);
  auto& from = static_cast<const ExcelQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelQueryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelQueryRequest::CopyFrom(const ExcelQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelQueryRequest::IsInitialized() const {
  return true;
}

void ExcelQueryRequest::InternalSwap(ExcelQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[2]);
}
// ===================================================================

class ExcelQueryResponse_Item::_Internal {
 public:
};

ExcelQueryResponse_Item::ExcelQueryResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelQueryResponse.Item)
}
ExcelQueryResponse_Item::ExcelQueryResponse_Item(const ExcelQueryResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelQueryResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v_) {}

    , decltype(_impl_.x_) {}

    , decltype(_impl_.y_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.v_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    _this->_impl_.v_.Set(from._internal_v(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelQueryResponse.Item)
}

inline void ExcelQueryResponse_Item::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.v_) {}

    , decltype(_impl_.x_) { 0u }

    , decltype(_impl_.y_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.v_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExcelQueryResponse_Item::~ExcelQueryResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelQueryResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelQueryResponse_Item::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v_.Destroy();
}

void ExcelQueryResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelQueryResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelQueryResponse.Item)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelQueryResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.ExcelQueryResponse.Item.v"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelQueryResponse_Item::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelQueryResponse.Item)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_y(), target);
  }

  // string v = 3;
  if (!this->_internal_v().empty()) {
    const std::string& _s = this->_internal_v();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.ExcelQueryResponse.Item.v");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelQueryResponse.Item)
  return target;
}

::size_t ExcelQueryResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelQueryResponse.Item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v = 3;
  if (!this->_internal_v().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_v());
  }

  // uint32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelQueryResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelQueryResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelQueryResponse_Item::GetClassData() const { return &_class_data_; }


void ExcelQueryResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelQueryResponse_Item*>(&to_msg);
  auto& from = static_cast<const ExcelQueryResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelQueryResponse.Item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_v().empty()) {
    _this->_internal_set_v(from._internal_v());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelQueryResponse_Item::CopyFrom(const ExcelQueryResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelQueryResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelQueryResponse_Item::IsInitialized() const {
  return true;
}

void ExcelQueryResponse_Item::InternalSwap(ExcelQueryResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.v_, lhs_arena,
                                       &other->_impl_.v_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExcelQueryResponse_Item, _impl_.y_)
      + sizeof(ExcelQueryResponse_Item::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ExcelQueryResponse_Item, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelQueryResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[3]);
}
// ===================================================================

class ExcelQueryResponse::_Internal {
 public:
};

ExcelQueryResponse::ExcelQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelQueryResponse)
}
ExcelQueryResponse::ExcelQueryResponse(const ExcelQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelQueryResponse)
}

inline void ExcelQueryResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExcelQueryResponse::~ExcelQueryResponse() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelQueryResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void ExcelQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelQueryResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.lily.v1.ExcelQueryResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelQueryResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelQueryResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.lily.v1.ExcelQueryResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelQueryResponse)
  return target;
}

::size_t ExcelQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelQueryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lily.v1.ExcelQueryResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelQueryResponse::GetClassData() const { return &_class_data_; }


void ExcelQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelQueryResponse*>(&to_msg);
  auto& from = static_cast<const ExcelQueryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelQueryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelQueryResponse::CopyFrom(const ExcelQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelQueryResponse::IsInitialized() const {
  return true;
}

void ExcelQueryResponse::InternalSwap(ExcelQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelQueryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[4]);
}
// ===================================================================

class TexToRequest::_Internal {
 public:
};

TexToRequest::TexToRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.TexToRequest)
}
TexToRequest::TexToRequest(const TexToRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TexToRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.TexToRequest)
}

inline void TexToRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.body_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TexToRequest::~TexToRequest() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.TexToRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TexToRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
}

void TexToRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TexToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.TexToRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TexToRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.TexToRequest.body"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TexToRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.TexToRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    const std::string& _s = this->_internal_body();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.TexToRequest.body");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.TexToRequest)
  return target;
}

::size_t TexToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.TexToRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 1;
  if (!this->_internal_body().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TexToRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TexToRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TexToRequest::GetClassData() const { return &_class_data_; }


void TexToRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TexToRequest*>(&to_msg);
  auto& from = static_cast<const TexToRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.TexToRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TexToRequest::CopyFrom(const TexToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.TexToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexToRequest::IsInitialized() const {
  return true;
}

void TexToRequest::InternalSwap(TexToRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, lhs_arena,
                                       &other->_impl_.body_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TexToRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[5]);
}
// ===================================================================

class EpubBuildRequest::_Internal {
 public:
};

EpubBuildRequest::EpubBuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.EpubBuildRequest)
}
EpubBuildRequest::EpubBuildRequest(const EpubBuildRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EpubBuildRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.EpubBuildRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpubBuildRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpubBuildRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EpubBuildRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lily
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::lily::v1::HttpResponse*
Arena::CreateMaybeMessage< ::palm::lily::v1::HttpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::HttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelLoadRequest*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelLoadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelLoadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelQueryRequest*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelQueryResponse_Item*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelQueryResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelQueryResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelQueryResponse*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::TexToRequest*
Arena::CreateMaybeMessage< ::palm::lily::v1::TexToRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::TexToRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::EpubBuildRequest*
Arena::CreateMaybeMessage< ::palm::lily::v1::EpubBuildRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::EpubBuildRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
