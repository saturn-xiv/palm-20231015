// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lily.proto

#include "lily.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace palm {
namespace lily {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelModel_Sheet_Cell::ExcelModel_Sheet_Cell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.row_)*/ 0u

  , /*decltype(_impl_.col_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelModel_Sheet_CellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelModel_Sheet_CellDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelModel_Sheet_CellDefaultTypeInternal() {}
  union {
    ExcelModel_Sheet_Cell _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelModel_Sheet_CellDefaultTypeInternal _ExcelModel_Sheet_Cell_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelModel_Sheet::ExcelModel_Sheet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cells_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelModel_SheetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelModel_SheetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelModel_SheetDefaultTypeInternal() {}
  union {
    ExcelModel_Sheet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelModel_SheetDefaultTypeInternal _ExcelModel_Sheet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExcelModel::ExcelModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sheets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExcelModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExcelModelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExcelModelDefaultTypeInternal() {}
  union {
    ExcelModel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExcelModelDefaultTypeInternal _ExcelModel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TexToRequest_File::TexToRequest_File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TexToRequest_FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TexToRequest_FileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TexToRequest_FileDefaultTypeInternal() {}
  union {
    TexToRequest_File _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TexToRequest_FileDefaultTypeInternal _TexToRequest_File_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TexToRequest::TexToRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TexToRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TexToRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TexToRequestDefaultTypeInternal() {}
  union {
    TexToRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TexToRequestDefaultTypeInternal _TexToRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EpubBuildRequest::EpubBuildRequest(
    ::_pbi::ConstantInitialized) {}
struct EpubBuildRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpubBuildRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpubBuildRequestDefaultTypeInternal() {}
  union {
    EpubBuildRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpubBuildRequestDefaultTypeInternal _EpubBuildRequest_default_instance_;
}  // namespace v1
}  // namespace lily
}  // namespace palm
static ::_pb::Metadata file_level_metadata_lily_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_lily_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_lily_2eproto = nullptr;
const ::uint32_t TableStruct_lily_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::File, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::File, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::File, _impl_.content_type_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::File, _impl_.payload_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet_Cell, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet_Cell, _impl_.row_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet_Cell, _impl_.col_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet_Cell, _impl_.val_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel_Sheet, _impl_.cells_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::ExcelModel, _impl_.sheets_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest_File, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest_File, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest_File, _impl_.content_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::TexToRequest, _impl_.files_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::lily::v1::EpubBuildRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::palm::lily::v1::File)},
        { 12, -1, -1, sizeof(::palm::lily::v1::ExcelModel_Sheet_Cell)},
        { 23, -1, -1, sizeof(::palm::lily::v1::ExcelModel_Sheet)},
        { 33, -1, -1, sizeof(::palm::lily::v1::ExcelModel)},
        { 42, -1, -1, sizeof(::palm::lily::v1::TexToRequest_File)},
        { 52, -1, -1, sizeof(::palm::lily::v1::TexToRequest)},
        { 61, -1, -1, sizeof(::palm::lily::v1::EpubBuildRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::lily::v1::_File_default_instance_._instance,
    &::palm::lily::v1::_ExcelModel_Sheet_Cell_default_instance_._instance,
    &::palm::lily::v1::_ExcelModel_Sheet_default_instance_._instance,
    &::palm::lily::v1::_ExcelModel_default_instance_._instance,
    &::palm::lily::v1::_TexToRequest_File_default_instance_._instance,
    &::palm::lily::v1::_TexToRequest_default_instance_._instance,
    &::palm::lily::v1::_EpubBuildRequest_default_instance_._instance,
};
const char descriptor_table_protodef_lily_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nlily.proto\022\014palm.lily.v1\"C\n\004File\022\031\n\014co"
    "ntent_type\030\001 \001(\tH\000\210\001\001\022\017\n\007payload\030\002 \001(\014B\017"
    "\n\r_content_type\"\266\001\n\nExcelModel\022.\n\006sheets"
    "\030\001 \003(\0132\036.palm.lily.v1.ExcelModel.Sheet\032x"
    "\n\005Sheet\022\014\n\004name\030\001 \001(\t\0222\n\005cells\030\002 \003(\0132#.p"
    "alm.lily.v1.ExcelModel.Sheet.Cell\032-\n\004Cel"
    "l\022\013\n\003row\030\001 \001(\r\022\013\n\003col\030\002 \001(\r\022\013\n\003val\030\003 \001(\t"
    "\"e\n\014TexToRequest\022.\n\005files\030\001 \003(\0132\037.palm.l"
    "ily.v1.TexToRequest.File\032%\n\004File\022\014\n\004name"
    "\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\"\022\n\020EpubBuildRequ"
    "est2|\n\005Excel\0227\n\005Parse\022\022.palm.lily.v1.Fil"
    "e\032\030.palm.lily.v1.ExcelModel\"\000\022:\n\010Generat"
    "e\022\030.palm.lily.v1.ExcelModel\032\022.palm.lily."
    "v1.File\"\0002|\n\003Tex\0229\n\005ToPdf\022\032.palm.lily.v1"
    ".TexToRequest\032\022.palm.lily.v1.File\"\000\022:\n\006T"
    "oWord\022\032.palm.lily.v1.TexToRequest\032\022.palm"
    ".lily.v1.File\"\0002E\n\004Epub\022=\n\005Build\022\036.palm."
    "lily.v1.EpubBuildRequest\032\022.palm.lily.v1."
    "File\"\000B.\n*com.github.saturn_xiv.palm.plu"
    "gins.lily.v1P\001b\006proto3"
};
static ::absl::once_flag descriptor_table_lily_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lily_2eproto = {
    false,
    false,
    782,
    descriptor_table_protodef_lily_2eproto,
    "lily.proto",
    &descriptor_table_lily_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_lily_2eproto::offsets,
    file_level_metadata_lily_2eproto,
    file_level_enum_descriptors_lily_2eproto,
    file_level_service_descriptors_lily_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lily_2eproto_getter() {
  return &descriptor_table_lily_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lily_2eproto(&descriptor_table_lily_2eproto);
namespace palm {
namespace lily {
namespace v1 {
// ===================================================================

class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(File, _impl_._has_bits_);
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_type_) {}

    , decltype(_impl_.payload_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.File)
}

inline void File::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_type_) {}

    , decltype(_impl_.payload_) {}

  };
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_type_.Destroy();
  _impl_.payload_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.File)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_type_.ClearNonDefaultToEmpty();
  }
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.File.content_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* File::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.File)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string content_type = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_content_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.File.content_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.File)
  return target;
}

::size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.File)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string content_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_content_type());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }


void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<File*>(&to_msg);
  auto& from = static_cast<const File&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.File)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_type_, lhs_arena,
                                       &other->_impl_.content_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[0]);
}
// ===================================================================

class ExcelModel_Sheet_Cell::_Internal {
 public:
};

ExcelModel_Sheet_Cell::ExcelModel_Sheet_Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelModel.Sheet.Cell)
}
ExcelModel_Sheet_Cell::ExcelModel_Sheet_Cell(const ExcelModel_Sheet_Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelModel_Sheet_Cell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_) {}

    , decltype(_impl_.row_) {}

    , decltype(_impl_.col_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.val_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_val().empty()) {
    _this->_impl_.val_.Set(from._internal_val(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.col_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.col_));
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelModel.Sheet.Cell)
}

inline void ExcelModel_Sheet_Cell::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.val_) {}

    , decltype(_impl_.row_) { 0u }

    , decltype(_impl_.col_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.val_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExcelModel_Sheet_Cell::~ExcelModel_Sheet_Cell() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelModel.Sheet.Cell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelModel_Sheet_Cell::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.Destroy();
}

void ExcelModel_Sheet_Cell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelModel_Sheet_Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelModel.Sheet.Cell)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.ClearToEmpty();
  ::memset(&_impl_.row_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.col_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelModel_Sheet_Cell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.ExcelModel.Sheet.Cell.val"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelModel_Sheet_Cell::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelModel.Sheet.Cell)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_row(), target);
  }

  // uint32 col = 2;
  if (this->_internal_col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_col(), target);
  }

  // string val = 3;
  if (!this->_internal_val().empty()) {
    const std::string& _s = this->_internal_val();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.ExcelModel.Sheet.Cell.val");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelModel.Sheet.Cell)
  return target;
}

::size_t ExcelModel_Sheet_Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelModel.Sheet.Cell)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string val = 3;
  if (!this->_internal_val().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_val());
  }

  // uint32 row = 1;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_row());
  }

  // uint32 col = 2;
  if (this->_internal_col() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_col());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelModel_Sheet_Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelModel_Sheet_Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelModel_Sheet_Cell::GetClassData() const { return &_class_data_; }


void ExcelModel_Sheet_Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelModel_Sheet_Cell*>(&to_msg);
  auto& from = static_cast<const ExcelModel_Sheet_Cell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelModel.Sheet.Cell)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_val().empty()) {
    _this->_internal_set_val(from._internal_val());
  }
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_col() != 0) {
    _this->_internal_set_col(from._internal_col());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelModel_Sheet_Cell::CopyFrom(const ExcelModel_Sheet_Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelModel.Sheet.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelModel_Sheet_Cell::IsInitialized() const {
  return true;
}

void ExcelModel_Sheet_Cell::InternalSwap(ExcelModel_Sheet_Cell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.val_, lhs_arena,
                                       &other->_impl_.val_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExcelModel_Sheet_Cell, _impl_.col_)
      + sizeof(ExcelModel_Sheet_Cell::_impl_.col_)
      - PROTOBUF_FIELD_OFFSET(ExcelModel_Sheet_Cell, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelModel_Sheet_Cell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[1]);
}
// ===================================================================

class ExcelModel_Sheet::_Internal {
 public:
};

ExcelModel_Sheet::ExcelModel_Sheet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelModel.Sheet)
}
ExcelModel_Sheet::ExcelModel_Sheet(const ExcelModel_Sheet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelModel_Sheet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cells_){from._impl_.cells_}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelModel.Sheet)
}

inline void ExcelModel_Sheet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.cells_){arena}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExcelModel_Sheet::~ExcelModel_Sheet() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelModel.Sheet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelModel_Sheet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cells()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ExcelModel_Sheet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelModel_Sheet::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelModel.Sheet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cells()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelModel_Sheet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.ExcelModel.Sheet.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelModel_Sheet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelModel.Sheet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.ExcelModel.Sheet.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelModel.Sheet)
  return target;
}

::size_t ExcelModel_Sheet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelModel.Sheet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->_internal_cells()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelModel_Sheet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelModel_Sheet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelModel_Sheet::GetClassData() const { return &_class_data_; }


void ExcelModel_Sheet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelModel_Sheet*>(&to_msg);
  auto& from = static_cast<const ExcelModel_Sheet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelModel.Sheet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cells()->MergeFrom(from._internal_cells());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelModel_Sheet::CopyFrom(const ExcelModel_Sheet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelModel.Sheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelModel_Sheet::IsInitialized() const {
  return true;
}

void ExcelModel_Sheet::InternalSwap(ExcelModel_Sheet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_cells()->InternalSwap(other->_internal_mutable_cells());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelModel_Sheet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[2]);
}
// ===================================================================

class ExcelModel::_Internal {
 public:
};

ExcelModel::ExcelModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.ExcelModel)
}
ExcelModel::ExcelModel(const ExcelModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExcelModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sheets_){from._impl_.sheets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.ExcelModel)
}

inline void ExcelModel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sheets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExcelModel::~ExcelModel() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.ExcelModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExcelModel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_sheets()->~RepeatedPtrField();
}

void ExcelModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExcelModel::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.ExcelModel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sheets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExcelModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExcelModel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.ExcelModel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sheets_size()); i < n; i++) {
    const auto& repfield = this->_internal_sheets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.ExcelModel)
  return target;
}

::size_t ExcelModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.ExcelModel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
  total_size += 1UL * this->_internal_sheets_size();
  for (const auto& msg : this->_internal_sheets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExcelModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExcelModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExcelModel::GetClassData() const { return &_class_data_; }


void ExcelModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExcelModel*>(&to_msg);
  auto& from = static_cast<const ExcelModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.ExcelModel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sheets()->MergeFrom(from._internal_sheets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExcelModel::CopyFrom(const ExcelModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.ExcelModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcelModel::IsInitialized() const {
  return true;
}

void ExcelModel::InternalSwap(ExcelModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_sheets()->InternalSwap(other->_internal_mutable_sheets());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExcelModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[3]);
}
// ===================================================================

class TexToRequest_File::_Internal {
 public:
};

TexToRequest_File::TexToRequest_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.TexToRequest.File)
}
TexToRequest_File::TexToRequest_File(const TexToRequest_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TexToRequest_File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.content_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.TexToRequest.File)
}

inline void TexToRequest_File::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.content_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TexToRequest_File::~TexToRequest_File() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.TexToRequest.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TexToRequest_File::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.content_.Destroy();
}

void TexToRequest_File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TexToRequest_File::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.TexToRequest.File)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TexToRequest_File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.lily.v1.TexToRequest.File.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TexToRequest_File::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.TexToRequest.File)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.lily.v1.TexToRequest.File.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.TexToRequest.File)
  return target;
}

::size_t TexToRequest_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.TexToRequest.File)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TexToRequest_File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TexToRequest_File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TexToRequest_File::GetClassData() const { return &_class_data_; }


void TexToRequest_File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TexToRequest_File*>(&to_msg);
  auto& from = static_cast<const TexToRequest_File&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.TexToRequest.File)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TexToRequest_File::CopyFrom(const TexToRequest_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.TexToRequest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexToRequest_File::IsInitialized() const {
  return true;
}

void TexToRequest_File::InternalSwap(TexToRequest_File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TexToRequest_File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[4]);
}
// ===================================================================

class TexToRequest::_Internal {
 public:
};

TexToRequest::TexToRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.TexToRequest)
}
TexToRequest::TexToRequest(const TexToRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TexToRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.TexToRequest)
}

inline void TexToRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TexToRequest::~TexToRequest() {
  // @@protoc_insertion_point(destructor:palm.lily.v1.TexToRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TexToRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_files()->~RepeatedPtrField();
}

void TexToRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TexToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.lily.v1.TexToRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_files()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TexToRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.lily.v1.TexToRequest.File files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TexToRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.lily.v1.TexToRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.lily.v1.TexToRequest.File files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.lily.v1.TexToRequest)
  return target;
}

::size_t TexToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.lily.v1.TexToRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.lily.v1.TexToRequest.File files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_internal_files()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TexToRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TexToRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TexToRequest::GetClassData() const { return &_class_data_; }


void TexToRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TexToRequest*>(&to_msg);
  auto& from = static_cast<const TexToRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.lily.v1.TexToRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_files()->MergeFrom(from._internal_files());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TexToRequest::CopyFrom(const TexToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.lily.v1.TexToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexToRequest::IsInitialized() const {
  return true;
}

void TexToRequest::InternalSwap(TexToRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_files()->InternalSwap(other->_internal_mutable_files());
}

::PROTOBUF_NAMESPACE_ID::Metadata TexToRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[5]);
}
// ===================================================================

class EpubBuildRequest::_Internal {
 public:
};

EpubBuildRequest::EpubBuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.lily.v1.EpubBuildRequest)
}
EpubBuildRequest::EpubBuildRequest(const EpubBuildRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EpubBuildRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.lily.v1.EpubBuildRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpubBuildRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpubBuildRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EpubBuildRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lily_2eproto_getter, &descriptor_table_lily_2eproto_once,
      file_level_metadata_lily_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lily
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::lily::v1::File*
Arena::CreateMaybeMessage< ::palm::lily::v1::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::File >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelModel_Sheet_Cell*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelModel_Sheet_Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelModel_Sheet_Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelModel_Sheet*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelModel_Sheet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelModel_Sheet >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::ExcelModel*
Arena::CreateMaybeMessage< ::palm::lily::v1::ExcelModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::ExcelModel >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::TexToRequest_File*
Arena::CreateMaybeMessage< ::palm::lily::v1::TexToRequest_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::TexToRequest_File >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::TexToRequest*
Arena::CreateMaybeMessage< ::palm::lily::v1::TexToRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::TexToRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::lily::v1::EpubBuildRequest*
Arena::CreateMaybeMessage< ::palm::lily::v1::EpubBuildRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::lily::v1::EpubBuildRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
