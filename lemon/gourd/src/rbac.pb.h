// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rbac_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rbac_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_rbac_2eproto;
namespace palm {
namespace rbac {
namespace v1 {
class CasbinSyncTask;
struct CasbinSyncTaskDefaultTypeInternal;
extern CasbinSyncTaskDefaultTypeInternal _CasbinSyncTask_default_instance_;
class HasPermissionForUserRequest;
struct HasPermissionForUserRequestDefaultTypeInternal;
extern HasPermissionForUserRequestDefaultTypeInternal _HasPermissionForUserRequest_default_instance_;
class HasRoleForUserRequest;
struct HasRoleForUserRequestDefaultTypeInternal;
extern HasRoleForUserRequestDefaultTypeInternal _HasRoleForUserRequest_default_instance_;
class OperationsResponse;
struct OperationsResponseDefaultTypeInternal;
extern OperationsResponseDefaultTypeInternal _OperationsResponse_default_instance_;
class PermissionsResponse;
struct PermissionsResponseDefaultTypeInternal;
extern PermissionsResponseDefaultTypeInternal _PermissionsResponse_default_instance_;
class PermissionsResponse_Item;
struct PermissionsResponse_ItemDefaultTypeInternal;
extern PermissionsResponse_ItemDefaultTypeInternal _PermissionsResponse_Item_default_instance_;
class ResourcesResponse;
struct ResourcesResponseDefaultTypeInternal;
extern ResourcesResponseDefaultTypeInternal _ResourcesResponse_default_instance_;
class ResourcesResponse_Item;
struct ResourcesResponse_ItemDefaultTypeInternal;
extern ResourcesResponse_ItemDefaultTypeInternal _ResourcesResponse_Item_default_instance_;
class RolePermissionsRequest;
struct RolePermissionsRequestDefaultTypeInternal;
extern RolePermissionsRequestDefaultTypeInternal _RolePermissionsRequest_default_instance_;
class RoleRequest;
struct RoleRequestDefaultTypeInternal;
extern RoleRequestDefaultTypeInternal _RoleRequest_default_instance_;
class RolesResponse;
struct RolesResponseDefaultTypeInternal;
extern RolesResponseDefaultTypeInternal _RolesResponse_default_instance_;
class UpdatePermissionsForRoleRequest;
struct UpdatePermissionsForRoleRequestDefaultTypeInternal;
extern UpdatePermissionsForRoleRequestDefaultTypeInternal _UpdatePermissionsForRoleRequest_default_instance_;
class UpdatePermissionsForUserRequest;
struct UpdatePermissionsForUserRequestDefaultTypeInternal;
extern UpdatePermissionsForUserRequestDefaultTypeInternal _UpdatePermissionsForUserRequest_default_instance_;
class UserPermissionsRequest;
struct UserPermissionsRequestDefaultTypeInternal;
extern UserPermissionsRequestDefaultTypeInternal _UserPermissionsRequest_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserRolesRequest;
struct UserRolesRequestDefaultTypeInternal;
extern UserRolesRequestDefaultTypeInternal _UserRolesRequest_default_instance_;
class UsersResponse;
struct UsersResponseDefaultTypeInternal;
extern UsersResponseDefaultTypeInternal _UsersResponse_default_instance_;
class UsersResponse_Item;
struct UsersResponse_ItemDefaultTypeInternal;
extern UsersResponse_ItemDefaultTypeInternal _UsersResponse_Item_default_instance_;
}  // namespace v1
}  // namespace rbac
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template <>
::palm::rbac::v1::CasbinSyncTask* Arena::CreateMaybeMessage<::palm::rbac::v1::CasbinSyncTask>(Arena*);
template <>
::palm::rbac::v1::HasPermissionForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::HasPermissionForUserRequest>(Arena*);
template <>
::palm::rbac::v1::HasRoleForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::HasRoleForUserRequest>(Arena*);
template <>
::palm::rbac::v1::OperationsResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::OperationsResponse>(Arena*);
template <>
::palm::rbac::v1::PermissionsResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::PermissionsResponse>(Arena*);
template <>
::palm::rbac::v1::PermissionsResponse_Item* Arena::CreateMaybeMessage<::palm::rbac::v1::PermissionsResponse_Item>(Arena*);
template <>
::palm::rbac::v1::ResourcesResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::ResourcesResponse>(Arena*);
template <>
::palm::rbac::v1::ResourcesResponse_Item* Arena::CreateMaybeMessage<::palm::rbac::v1::ResourcesResponse_Item>(Arena*);
template <>
::palm::rbac::v1::RolePermissionsRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::RolePermissionsRequest>(Arena*);
template <>
::palm::rbac::v1::RoleRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::RoleRequest>(Arena*);
template <>
::palm::rbac::v1::RolesResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::RolesResponse>(Arena*);
template <>
::palm::rbac::v1::UpdatePermissionsForRoleRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::UpdatePermissionsForRoleRequest>(Arena*);
template <>
::palm::rbac::v1::UpdatePermissionsForUserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::UpdatePermissionsForUserRequest>(Arena*);
template <>
::palm::rbac::v1::UserPermissionsRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::UserPermissionsRequest>(Arena*);
template <>
::palm::rbac::v1::UserRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::UserRequest>(Arena*);
template <>
::palm::rbac::v1::UserRolesRequest* Arena::CreateMaybeMessage<::palm::rbac::v1::UserRolesRequest>(Arena*);
template <>
::palm::rbac::v1::UsersResponse* Arena::CreateMaybeMessage<::palm::rbac::v1::UsersResponse>(Arena*);
template <>
::palm::rbac::v1::UsersResponse_Item* Arena::CreateMaybeMessage<::palm::rbac::v1::UsersResponse_Item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace palm {
namespace rbac {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class CasbinSyncTask final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.rbac.v1.CasbinSyncTask) */ {
 public:
  inline CasbinSyncTask() : CasbinSyncTask(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CasbinSyncTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CasbinSyncTask(const CasbinSyncTask& from);
  CasbinSyncTask(CasbinSyncTask&& from) noexcept
    : CasbinSyncTask() {
    *this = ::std::move(from);
  }

  inline CasbinSyncTask& operator=(const CasbinSyncTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasbinSyncTask& operator=(CasbinSyncTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CasbinSyncTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const CasbinSyncTask* internal_default_instance() {
    return reinterpret_cast<const CasbinSyncTask*>(
               &_CasbinSyncTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CasbinSyncTask& a, CasbinSyncTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CasbinSyncTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasbinSyncTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CasbinSyncTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CasbinSyncTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CasbinSyncTask& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CasbinSyncTask& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.CasbinSyncTask";
  }
  protected:
  explicit CasbinSyncTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.rbac.v1.CasbinSyncTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UsersResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UsersResponse.Item) */ {
 public:
  inline UsersResponse_Item() : UsersResponse_Item(nullptr) {}
  ~UsersResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UsersResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersResponse_Item(const UsersResponse_Item& from);
  UsersResponse_Item(UsersResponse_Item&& from) noexcept
    : UsersResponse_Item() {
    *this = ::std::move(from);
  }

  inline UsersResponse_Item& operator=(const UsersResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersResponse_Item& operator=(UsersResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersResponse_Item* internal_default_instance() {
    return reinterpret_cast<const UsersResponse_Item*>(
               &_UsersResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsersResponse_Item& a, UsersResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsersResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UsersResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UsersResponse_Item& from) {
    UsersResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UsersResponse.Item";
  }
  protected:
  explicit UsersResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kRealNameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string real_name = 3;
  void clear_real_name() ;
  const std::string& real_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string email = 4;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UsersResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UsersResponse) */ {
 public:
  inline UsersResponse() : UsersResponse(nullptr) {}
  ~UsersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersResponse(const UsersResponse& from);
  UsersResponse(UsersResponse&& from) noexcept
    : UsersResponse() {
    *this = ::std::move(from);
  }

  inline UsersResponse& operator=(const UsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersResponse& operator=(UsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersResponse* internal_default_instance() {
    return reinterpret_cast<const UsersResponse*>(
               &_UsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UsersResponse& a, UsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UsersResponse& from) {
    UsersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UsersResponse";
  }
  protected:
  explicit UsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UsersResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.UsersResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::rbac::v1::UsersResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::UsersResponse_Item >*
      mutable_items();
  private:
  const ::palm::rbac::v1::UsersResponse_Item& _internal_items(int index) const;
  ::palm::rbac::v1::UsersResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::UsersResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::UsersResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::rbac::v1::UsersResponse_Item& items(int index) const;
  ::palm::rbac::v1::UsersResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::UsersResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::UsersResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class ResourcesResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.ResourcesResponse.Item) */ {
 public:
  inline ResourcesResponse_Item() : ResourcesResponse_Item(nullptr) {}
  ~ResourcesResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResourcesResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourcesResponse_Item(const ResourcesResponse_Item& from);
  ResourcesResponse_Item(ResourcesResponse_Item&& from) noexcept
    : ResourcesResponse_Item() {
    *this = ::std::move(from);
  }

  inline ResourcesResponse_Item& operator=(const ResourcesResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcesResponse_Item& operator=(ResourcesResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourcesResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourcesResponse_Item* internal_default_instance() {
    return reinterpret_cast<const ResourcesResponse_Item*>(
               &_ResourcesResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResourcesResponse_Item& a, ResourcesResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcesResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcesResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourcesResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourcesResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourcesResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourcesResponse_Item& from) {
    ResourcesResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcesResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.ResourcesResponse.Item";
  }
  protected:
  explicit ResourcesResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.ResourcesResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class ResourcesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.ResourcesResponse) */ {
 public:
  inline ResourcesResponse() : ResourcesResponse(nullptr) {}
  ~ResourcesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResourcesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourcesResponse(const ResourcesResponse& from);
  ResourcesResponse(ResourcesResponse&& from) noexcept
    : ResourcesResponse() {
    *this = ::std::move(from);
  }

  inline ResourcesResponse& operator=(const ResourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcesResponse& operator=(ResourcesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourcesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourcesResponse* internal_default_instance() {
    return reinterpret_cast<const ResourcesResponse*>(
               &_ResourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourcesResponse& a, ResourcesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourcesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourcesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourcesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourcesResponse& from) {
    ResourcesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.ResourcesResponse";
  }
  protected:
  explicit ResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResourcesResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.ResourcesResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::rbac::v1::ResourcesResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::ResourcesResponse_Item >*
      mutable_items();
  private:
  const ::palm::rbac::v1::ResourcesResponse_Item& _internal_items(int index) const;
  ::palm::rbac::v1::ResourcesResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::ResourcesResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::ResourcesResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::rbac::v1::ResourcesResponse_Item& items(int index) const;
  ::palm::rbac::v1::ResourcesResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::ResourcesResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.ResourcesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::ResourcesResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class OperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.OperationsResponse) */ {
 public:
  inline OperationsResponse() : OperationsResponse(nullptr) {}
  ~OperationsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationsResponse(const OperationsResponse& from);
  OperationsResponse(OperationsResponse&& from) noexcept
    : OperationsResponse() {
    *this = ::std::move(from);
  }

  inline OperationsResponse& operator=(const OperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationsResponse& operator=(OperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationsResponse* internal_default_instance() {
    return reinterpret_cast<const OperationsResponse*>(
               &_OperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OperationsResponse& a, OperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationsResponse& from) {
    OperationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.OperationsResponse";
  }
  protected:
  explicit OperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, std::size_t size);
  void set_items(int index, absl::string_view value);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, std::size_t size);
  void add_items(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();

  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_items();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.OperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class RolesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.RolesResponse) */ {
 public:
  inline RolesResponse() : RolesResponse(nullptr) {}
  ~RolesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RolesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RolesResponse(const RolesResponse& from);
  RolesResponse(RolesResponse&& from) noexcept
    : RolesResponse() {
    *this = ::std::move(from);
  }

  inline RolesResponse& operator=(const RolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RolesResponse& operator=(RolesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RolesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RolesResponse* internal_default_instance() {
    return reinterpret_cast<const RolesResponse*>(
               &_RolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RolesResponse& a, RolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RolesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RolesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RolesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RolesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RolesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RolesResponse& from) {
    RolesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RolesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.RolesResponse";
  }
  protected:
  explicit RolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, std::size_t size);
  void set_items(int index, absl::string_view value);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, std::size_t size);
  void add_items(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();

  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_items();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.RolesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRequest& from) {
    UserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class RoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.RoleRequest) */ {
 public:
  inline RoleRequest() : RoleRequest(nullptr) {}
  ~RoleRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleRequest(const RoleRequest& from);
  RoleRequest(RoleRequest&& from) noexcept
    : RoleRequest() {
    *this = ::std::move(from);
  }

  inline RoleRequest& operator=(const RoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleRequest& operator=(RoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleRequest* internal_default_instance() {
    return reinterpret_cast<const RoleRequest*>(
               &_RoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoleRequest& a, RoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleRequest& from) {
    RoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.RoleRequest";
  }
  protected:
  explicit RoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.RoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UserRolesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UserRolesRequest) */ {
 public:
  inline UserRolesRequest() : UserRolesRequest(nullptr) {}
  ~UserRolesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserRolesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRolesRequest(const UserRolesRequest& from);
  UserRolesRequest(UserRolesRequest&& from) noexcept
    : UserRolesRequest() {
    *this = ::std::move(from);
  }

  inline UserRolesRequest& operator=(const UserRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRolesRequest& operator=(UserRolesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRolesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRolesRequest* internal_default_instance() {
    return reinterpret_cast<const UserRolesRequest*>(
               &_UserRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserRolesRequest& a, UserRolesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRolesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRolesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRolesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRolesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRolesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRolesRequest& from) {
    UserRolesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRolesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UserRolesRequest";
  }
  protected:
  explicit UserRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated string roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, std::size_t size);
  void set_roles(int index, absl::string_view value);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, std::size_t size);
  void add_roles(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();

  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_roles();

  public:
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UserRolesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
    ::int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UserPermissionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UserPermissionsRequest) */ {
 public:
  inline UserPermissionsRequest() : UserPermissionsRequest(nullptr) {}
  ~UserPermissionsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserPermissionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserPermissionsRequest(const UserPermissionsRequest& from);
  UserPermissionsRequest(UserPermissionsRequest&& from) noexcept
    : UserPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline UserPermissionsRequest& operator=(const UserPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPermissionsRequest& operator=(UserPermissionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPermissionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const UserPermissionsRequest*>(
               &_UserPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserPermissionsRequest& a, UserPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPermissionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPermissionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserPermissionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserPermissionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserPermissionsRequest& from) {
    UserPermissionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPermissionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UserPermissionsRequest";
  }
  protected:
  explicit UserPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_permissions();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_permissions();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      permissions() const;
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UserPermissionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > permissions_;
    ::int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class RolePermissionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.RolePermissionsRequest) */ {
 public:
  inline RolePermissionsRequest() : RolePermissionsRequest(nullptr) {}
  ~RolePermissionsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RolePermissionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RolePermissionsRequest(const RolePermissionsRequest& from);
  RolePermissionsRequest(RolePermissionsRequest&& from) noexcept
    : RolePermissionsRequest() {
    *this = ::std::move(from);
  }

  inline RolePermissionsRequest& operator=(const RolePermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RolePermissionsRequest& operator=(RolePermissionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RolePermissionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RolePermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const RolePermissionsRequest*>(
               &_RolePermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RolePermissionsRequest& a, RolePermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RolePermissionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RolePermissionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RolePermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RolePermissionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RolePermissionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RolePermissionsRequest& from) {
    RolePermissionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RolePermissionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.RolePermissionsRequest";
  }
  protected:
  explicit RolePermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_permissions();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_permissions();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      permissions() const;
  // string role = 1;
  void clear_role() ;
  const std::string& role() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* ptr);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.RolePermissionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > permissions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PermissionsResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PermissionsResponse.Item) */ {
 public:
  inline PermissionsResponse_Item() : PermissionsResponse_Item(nullptr) {}
  ~PermissionsResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PermissionsResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionsResponse_Item(const PermissionsResponse_Item& from);
  PermissionsResponse_Item(PermissionsResponse_Item&& from) noexcept
    : PermissionsResponse_Item() {
    *this = ::std::move(from);
  }

  inline PermissionsResponse_Item& operator=(const PermissionsResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionsResponse_Item& operator=(PermissionsResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionsResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionsResponse_Item* internal_default_instance() {
    return reinterpret_cast<const PermissionsResponse_Item*>(
               &_PermissionsResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PermissionsResponse_Item& a, PermissionsResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionsResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionsResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionsResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionsResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionsResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionsResponse_Item& from) {
    PermissionsResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionsResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PermissionsResponse.Item";
  }
  protected:
  explicit PermissionsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kResourceFieldNumber = 2,
  };
  // string operation = 1;
  void clear_operation() ;
  const std::string& operation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* ptr);

  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(
      const std::string& value);
  std::string* _internal_mutable_operation();

  public:
  // .palm.rbac.v1.ResourcesResponse.Item resource = 2;
  bool has_resource() const;
  void clear_resource() ;
  const ::palm::rbac::v1::ResourcesResponse_Item& resource() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::ResourcesResponse_Item* release_resource();
  ::palm::rbac::v1::ResourcesResponse_Item* mutable_resource();
  void set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* resource);
  private:
  const ::palm::rbac::v1::ResourcesResponse_Item& _internal_resource() const;
  ::palm::rbac::v1::ResourcesResponse_Item* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::palm::rbac::v1::ResourcesResponse_Item* resource);
  ::palm::rbac::v1::ResourcesResponse_Item* unsafe_arena_release_resource();
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PermissionsResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
    ::palm::rbac::v1::ResourcesResponse_Item* resource_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class PermissionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.PermissionsResponse) */ {
 public:
  inline PermissionsResponse() : PermissionsResponse(nullptr) {}
  ~PermissionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PermissionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionsResponse(const PermissionsResponse& from);
  PermissionsResponse(PermissionsResponse&& from) noexcept
    : PermissionsResponse() {
    *this = ::std::move(from);
  }

  inline PermissionsResponse& operator=(const PermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionsResponse& operator=(PermissionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const PermissionsResponse*>(
               &_PermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PermissionsResponse& a, PermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionsResponse& from) {
    PermissionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.PermissionsResponse";
  }
  protected:
  explicit PermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PermissionsResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PermissionsResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_items();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_items(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& items(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.PermissionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class HasRoleForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.HasRoleForUserRequest) */ {
 public:
  inline HasRoleForUserRequest() : HasRoleForUserRequest(nullptr) {}
  ~HasRoleForUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HasRoleForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasRoleForUserRequest(const HasRoleForUserRequest& from);
  HasRoleForUserRequest(HasRoleForUserRequest&& from) noexcept
    : HasRoleForUserRequest() {
    *this = ::std::move(from);
  }

  inline HasRoleForUserRequest& operator=(const HasRoleForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasRoleForUserRequest& operator=(HasRoleForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasRoleForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasRoleForUserRequest* internal_default_instance() {
    return reinterpret_cast<const HasRoleForUserRequest*>(
               &_HasRoleForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HasRoleForUserRequest& a, HasRoleForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasRoleForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasRoleForUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasRoleForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasRoleForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasRoleForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HasRoleForUserRequest& from) {
    HasRoleForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasRoleForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.HasRoleForUserRequest";
  }
  protected:
  explicit HasRoleForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string role = 2;
  void clear_role() ;
  const std::string& role() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* ptr);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.HasRoleForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class HasPermissionForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.HasPermissionForUserRequest) */ {
 public:
  inline HasPermissionForUserRequest() : HasPermissionForUserRequest(nullptr) {}
  ~HasPermissionForUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HasPermissionForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HasPermissionForUserRequest(const HasPermissionForUserRequest& from);
  HasPermissionForUserRequest(HasPermissionForUserRequest&& from) noexcept
    : HasPermissionForUserRequest() {
    *this = ::std::move(from);
  }

  inline HasPermissionForUserRequest& operator=(const HasPermissionForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HasPermissionForUserRequest& operator=(HasPermissionForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HasPermissionForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HasPermissionForUserRequest* internal_default_instance() {
    return reinterpret_cast<const HasPermissionForUserRequest*>(
               &_HasPermissionForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HasPermissionForUserRequest& a, HasPermissionForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HasPermissionForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HasPermissionForUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HasPermissionForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HasPermissionForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HasPermissionForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HasPermissionForUserRequest& from) {
    HasPermissionForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HasPermissionForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.HasPermissionForUserRequest";
  }
  protected:
  explicit HasPermissionForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 2,
    kResourceFieldNumber = 3,
    kUserFieldNumber = 1,
  };
  // string operation = 2;
  void clear_operation() ;
  const std::string& operation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* ptr);

  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(
      const std::string& value);
  std::string* _internal_mutable_operation();

  public:
  // .palm.rbac.v1.ResourcesResponse.Item resource = 3;
  bool has_resource() const;
  void clear_resource() ;
  const ::palm::rbac::v1::ResourcesResponse_Item& resource() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::ResourcesResponse_Item* release_resource();
  ::palm::rbac::v1::ResourcesResponse_Item* mutable_resource();
  void set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* resource);
  private:
  const ::palm::rbac::v1::ResourcesResponse_Item& _internal_resource() const;
  ::palm::rbac::v1::ResourcesResponse_Item* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::palm::rbac::v1::ResourcesResponse_Item* resource);
  ::palm::rbac::v1::ResourcesResponse_Item* unsafe_arena_release_resource();
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.HasPermissionForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
    ::palm::rbac::v1::ResourcesResponse_Item* resource_;
    ::int32_t user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UpdatePermissionsForUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UpdatePermissionsForUserRequest) */ {
 public:
  inline UpdatePermissionsForUserRequest() : UpdatePermissionsForUserRequest(nullptr) {}
  ~UpdatePermissionsForUserRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdatePermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePermissionsForUserRequest(const UpdatePermissionsForUserRequest& from);
  UpdatePermissionsForUserRequest(UpdatePermissionsForUserRequest&& from) noexcept
    : UpdatePermissionsForUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePermissionsForUserRequest& operator=(const UpdatePermissionsForUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePermissionsForUserRequest& operator=(UpdatePermissionsForUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePermissionsForUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePermissionsForUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePermissionsForUserRequest*>(
               &_UpdatePermissionsForUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdatePermissionsForUserRequest& a, UpdatePermissionsForUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePermissionsForUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePermissionsForUserRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePermissionsForUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePermissionsForUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePermissionsForUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePermissionsForUserRequest& from) {
    UpdatePermissionsForUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePermissionsForUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UpdatePermissionsForUserRequest";
  }
  protected:
  explicit UpdatePermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedFieldNumber = 2,
    kSavedFieldNumber = 3,
    kUserFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
  int removed_size() const;
  private:
  int _internal_removed_size() const;

  public:
  void clear_removed() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_removed();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_removed(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_removed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_removed();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& removed(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      removed() const;
  // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
  int saved_size() const;
  private:
  int _internal_saved_size() const;

  public:
  void clear_saved() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_saved(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_saved();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_saved(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_saved();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_saved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_saved();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& saved(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_saved();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      saved() const;
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UpdatePermissionsForUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > removed_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > saved_;
    ::int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};// -------------------------------------------------------------------

class UpdatePermissionsForRoleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.rbac.v1.UpdatePermissionsForRoleRequest) */ {
 public:
  inline UpdatePermissionsForRoleRequest() : UpdatePermissionsForRoleRequest(nullptr) {}
  ~UpdatePermissionsForRoleRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdatePermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePermissionsForRoleRequest(const UpdatePermissionsForRoleRequest& from);
  UpdatePermissionsForRoleRequest(UpdatePermissionsForRoleRequest&& from) noexcept
    : UpdatePermissionsForRoleRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePermissionsForRoleRequest& operator=(const UpdatePermissionsForRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePermissionsForRoleRequest& operator=(UpdatePermissionsForRoleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePermissionsForRoleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePermissionsForRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePermissionsForRoleRequest*>(
               &_UpdatePermissionsForRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdatePermissionsForRoleRequest& a, UpdatePermissionsForRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePermissionsForRoleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePermissionsForRoleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePermissionsForRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePermissionsForRoleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePermissionsForRoleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePermissionsForRoleRequest& from) {
    UpdatePermissionsForRoleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePermissionsForRoleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.rbac.v1.UpdatePermissionsForRoleRequest";
  }
  protected:
  explicit UpdatePermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedFieldNumber = 2,
    kSavedFieldNumber = 3,
    kRoleFieldNumber = 1,
  };
  // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
  int removed_size() const;
  private:
  int _internal_removed_size() const;

  public:
  void clear_removed() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_removed();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_removed(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_removed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_removed();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& removed(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      removed() const;
  // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
  int saved_size() const;
  private:
  int _internal_saved_size() const;

  public:
  void clear_saved() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_saved(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_saved();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_saved(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_saved();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_saved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_saved();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& saved(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_saved();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      saved() const;
  // string role = 1;
  void clear_role() ;
  const std::string& role() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* ptr);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // @@protoc_insertion_point(class_scope:palm.rbac.v1.UpdatePermissionsForRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > removed_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > saved_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rbac_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CasbinSyncTask

// -------------------------------------------------------------------

// UsersResponse_Item

// int32 id = 1;
inline void UsersResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t UsersResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UsersResponse.Item.id)
  return _internal_id();
}
inline void UsersResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UsersResponse.Item.id)
}
inline ::int32_t UsersResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void UsersResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string nickname = 2;
inline void UsersResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UsersResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UsersResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UsersResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UsersResponse.Item.nickname)
}
inline std::string* UsersResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UsersResponse.Item.nickname)
  return _s;
}
inline const std::string& UsersResponse_Item::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UsersResponse_Item::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UsersResponse_Item::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UsersResponse_Item::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.UsersResponse.Item.nickname)
  return _impl_.nickname_.Release();
}
inline void UsersResponse_Item::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.UsersResponse.Item.nickname)
}

// string real_name = 3;
inline void UsersResponse_Item::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UsersResponse_Item::real_name() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UsersResponse.Item.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UsersResponse_Item::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UsersResponse.Item.real_name)
}
inline std::string* UsersResponse_Item::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UsersResponse.Item.real_name)
  return _s;
}
inline const std::string& UsersResponse_Item::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void UsersResponse_Item::_internal_set_real_name(const std::string& value) {
  ;


  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UsersResponse_Item::_internal_mutable_real_name() {
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UsersResponse_Item::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.UsersResponse.Item.real_name)
  return _impl_.real_name_.Release();
}
inline void UsersResponse_Item::set_allocated_real_name(std::string* value) {
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.UsersResponse.Item.real_name)
}

// string email = 4;
inline void UsersResponse_Item::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UsersResponse_Item::email() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UsersResponse.Item.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UsersResponse_Item::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UsersResponse.Item.email)
}
inline std::string* UsersResponse_Item::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UsersResponse.Item.email)
  return _s;
}
inline const std::string& UsersResponse_Item::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UsersResponse_Item::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UsersResponse_Item::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UsersResponse_Item::release_email() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.UsersResponse.Item.email)
  return _impl_.email_.Release();
}
inline void UsersResponse_Item::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.UsersResponse.Item.email)
}

// -------------------------------------------------------------------

// UsersResponse

// repeated .palm.rbac.v1.UsersResponse.Item items = 1;
inline int UsersResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UsersResponse::items_size() const {
  return _internal_items_size();
}
inline void UsersResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::rbac::v1::UsersResponse_Item* UsersResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UsersResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::UsersResponse_Item >*
UsersResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UsersResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::rbac::v1::UsersResponse_Item& UsersResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::rbac::v1::UsersResponse_Item& UsersResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UsersResponse.items)
  return _internal_items(index);
}
inline ::palm::rbac::v1::UsersResponse_Item* UsersResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::rbac::v1::UsersResponse_Item* UsersResponse::add_items() {
  ::palm::rbac::v1::UsersResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UsersResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::UsersResponse_Item >&
UsersResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UsersResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::UsersResponse_Item>&
UsersResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::UsersResponse_Item>*
UsersResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// ResourcesResponse_Item

// string type = 1;
inline void ResourcesResponse_Item::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ResourcesResponse_Item::type() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.ResourcesResponse.Item.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourcesResponse_Item::set_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.ResourcesResponse.Item.type)
}
inline std::string* ResourcesResponse_Item::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.ResourcesResponse.Item.type)
  return _s;
}
inline const std::string& ResourcesResponse_Item::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ResourcesResponse_Item::_internal_set_type(const std::string& value) {
  ;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourcesResponse_Item::_internal_mutable_type() {
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* ResourcesResponse_Item::release_type() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.ResourcesResponse.Item.type)
  return _impl_.type_.Release();
}
inline void ResourcesResponse_Item::set_allocated_type(std::string* value) {
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.ResourcesResponse.Item.type)
}

// optional int32 id = 2;
inline bool ResourcesResponse_Item::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ResourcesResponse_Item::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ResourcesResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.ResourcesResponse.Item.id)
  return _internal_id();
}
inline void ResourcesResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.ResourcesResponse.Item.id)
}
inline ::int32_t ResourcesResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void ResourcesResponse_Item::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// ResourcesResponse

// repeated .palm.rbac.v1.ResourcesResponse.Item items = 1;
inline int ResourcesResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ResourcesResponse::items_size() const {
  return _internal_items_size();
}
inline void ResourcesResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::rbac::v1::ResourcesResponse_Item* ResourcesResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.ResourcesResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::ResourcesResponse_Item >*
ResourcesResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.ResourcesResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& ResourcesResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& ResourcesResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.ResourcesResponse.items)
  return _internal_items(index);
}
inline ::palm::rbac::v1::ResourcesResponse_Item* ResourcesResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::rbac::v1::ResourcesResponse_Item* ResourcesResponse::add_items() {
  ::palm::rbac::v1::ResourcesResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.ResourcesResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::ResourcesResponse_Item >&
ResourcesResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.ResourcesResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::ResourcesResponse_Item>&
ResourcesResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::ResourcesResponse_Item>*
ResourcesResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// OperationsResponse

// repeated string items = 1;
inline int OperationsResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int OperationsResponse::items_size() const {
  return _internal_items_size();
}
inline void OperationsResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline std::string* OperationsResponse::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.rbac.v1.OperationsResponse.items)
  return _s;
}
inline const std::string& OperationsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.OperationsResponse.items)
  return _internal_items(index);
}
inline std::string* OperationsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.OperationsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline void OperationsResponse::set_items(int index, const std::string& value) {
  _internal_mutable_items()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::set_items(int index, std::string&& value) {
  _internal_mutable_items()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::set_items(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_items()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::set_items(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_items()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::set_items(int index, absl::string_view value) {
  _internal_mutable_items()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::add_items(const std::string& value) {
  _internal_mutable_items()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::add_items(std::string&& value) {
  _internal_mutable_items()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::add_items(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_items()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::add_items(const char* value, std::size_t size) {
  _internal_mutable_items()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.rbac.v1.OperationsResponse.items)
}
inline void OperationsResponse::add_items(absl::string_view value) {
  _internal_mutable_items()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.rbac.v1.OperationsResponse.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OperationsResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.OperationsResponse.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* OperationsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.OperationsResponse.items)
  return _internal_mutable_items();
}
inline const std::string& OperationsResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline std::string* OperationsResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OperationsResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OperationsResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// RolesResponse

// repeated string items = 1;
inline int RolesResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RolesResponse::items_size() const {
  return _internal_items_size();
}
inline void RolesResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline std::string* RolesResponse::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.rbac.v1.RolesResponse.items)
  return _s;
}
inline const std::string& RolesResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RolesResponse.items)
  return _internal_items(index);
}
inline std::string* RolesResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RolesResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline void RolesResponse::set_items(int index, const std::string& value) {
  _internal_mutable_items()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, std::string&& value) {
  _internal_mutable_items()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_items()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_items()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::set_items(int index, absl::string_view value) {
  _internal_mutable_items()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(const std::string& value) {
  _internal_mutable_items()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(std::string&& value) {
  _internal_mutable_items()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_items()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(const char* value, std::size_t size) {
  _internal_mutable_items()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.rbac.v1.RolesResponse.items)
}
inline void RolesResponse::add_items(absl::string_view value) {
  _internal_mutable_items()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.rbac.v1.RolesResponse.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RolesResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.RolesResponse.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RolesResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.RolesResponse.items)
  return _internal_mutable_items();
}
inline const std::string& RolesResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline std::string* RolesResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RolesResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RolesResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// UserRequest

// int32 id = 1;
inline void UserRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t UserRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UserRequest.id)
  return _internal_id();
}
inline void UserRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UserRequest.id)
}
inline ::int32_t UserRequest::_internal_id() const {
  return _impl_.id_;
}
inline void UserRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// RoleRequest

// string code = 1;
inline void RoleRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& RoleRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RoleRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoleRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RoleRequest.code)
}
inline std::string* RoleRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RoleRequest.code)
  return _s;
}
inline const std::string& RoleRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void RoleRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* RoleRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.RoleRequest.code)
  return _impl_.code_.Release();
}
inline void RoleRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.RoleRequest.code)
}

// -------------------------------------------------------------------

// UserRolesRequest

// int32 user = 1;
inline void UserRolesRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t UserRolesRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UserRolesRequest.user)
  return _internal_user();
}
inline void UserRolesRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UserRolesRequest.user)
}
inline ::int32_t UserRolesRequest::_internal_user() const {
  return _impl_.user_;
}
inline void UserRolesRequest::_internal_set_user(::int32_t value) {
  ;
  _impl_.user_ = value;
}

// repeated string roles = 2;
inline int UserRolesRequest::_internal_roles_size() const {
  return _impl_.roles_.size();
}
inline int UserRolesRequest::roles_size() const {
  return _internal_roles_size();
}
inline void UserRolesRequest::clear_roles() {
  _internal_mutable_roles()->Clear();
}
inline std::string* UserRolesRequest::add_roles() {
  std::string* _s = _internal_add_roles();
  // @@protoc_insertion_point(field_add_mutable:palm.rbac.v1.UserRolesRequest.roles)
  return _s;
}
inline const std::string& UserRolesRequest::roles(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UserRolesRequest.roles)
  return _internal_roles(index);
}
inline std::string* UserRolesRequest::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UserRolesRequest.roles)
  return _internal_mutable_roles()->Mutable(index);
}
inline void UserRolesRequest::set_roles(int index, const std::string& value) {
  _internal_mutable_roles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::set_roles(int index, std::string&& value) {
  _internal_mutable_roles()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::set_roles(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_roles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::set_roles(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_roles()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::set_roles(int index, absl::string_view value) {
  _internal_mutable_roles()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::add_roles(const std::string& value) {
  _internal_mutable_roles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::add_roles(std::string&& value) {
  _internal_mutable_roles()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::add_roles(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_roles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::add_roles(const char* value, std::size_t size) {
  _internal_mutable_roles()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.rbac.v1.UserRolesRequest.roles)
}
inline void UserRolesRequest::add_roles(absl::string_view value) {
  _internal_mutable_roles()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.rbac.v1.UserRolesRequest.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserRolesRequest::roles() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UserRolesRequest.roles)
  return _internal_roles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* UserRolesRequest::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UserRolesRequest.roles)
  return _internal_mutable_roles();
}
inline const std::string& UserRolesRequest::_internal_roles(int index) const {
  return _internal_roles().Get(index);
}
inline std::string* UserRolesRequest::_internal_add_roles() {
  return _internal_mutable_roles()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserRolesRequest::_internal_roles() const {
  return _impl_.roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserRolesRequest::_internal_mutable_roles() {
  return &_impl_.roles_;
}

// -------------------------------------------------------------------

// UserPermissionsRequest

// int32 user = 1;
inline void UserPermissionsRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t UserPermissionsRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UserPermissionsRequest.user)
  return _internal_user();
}
inline void UserPermissionsRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UserPermissionsRequest.user)
}
inline ::int32_t UserPermissionsRequest::_internal_user() const {
  return _impl_.user_;
}
inline void UserPermissionsRequest::_internal_set_user(::int32_t value) {
  ;
  _impl_.user_ = value;
}

// repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
inline int UserPermissionsRequest::_internal_permissions_size() const {
  return _impl_.permissions_.size();
}
inline int UserPermissionsRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void UserPermissionsRequest::clear_permissions() {
  _internal_mutable_permissions()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserPermissionsRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UserPermissionsRequest.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UserPermissionsRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UserPermissionsRequest.permissions)
  return _internal_mutable_permissions();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UserPermissionsRequest::_internal_permissions(int index) const {
  return _internal_permissions().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UserPermissionsRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UserPermissionsRequest.permissions)
  return _internal_permissions(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserPermissionsRequest::_internal_add_permissions() {
  return _internal_mutable_permissions()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserPermissionsRequest::add_permissions() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UserPermissionsRequest.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UserPermissionsRequest::permissions() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UserPermissionsRequest.permissions)
  return _internal_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UserPermissionsRequest::_internal_permissions() const {
  return _impl_.permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UserPermissionsRequest::_internal_mutable_permissions() {
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// RolePermissionsRequest

// string role = 1;
inline void RolePermissionsRequest::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& RolePermissionsRequest::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RolePermissionsRequest.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RolePermissionsRequest::set_role(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.RolePermissionsRequest.role)
}
inline std::string* RolePermissionsRequest::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RolePermissionsRequest.role)
  return _s;
}
inline const std::string& RolePermissionsRequest::_internal_role() const {
  return _impl_.role_.Get();
}
inline void RolePermissionsRequest::_internal_set_role(const std::string& value) {
  ;


  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* RolePermissionsRequest::_internal_mutable_role() {
  ;
  return _impl_.role_.Mutable( GetArenaForAllocation());
}
inline std::string* RolePermissionsRequest::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.RolePermissionsRequest.role)
  return _impl_.role_.Release();
}
inline void RolePermissionsRequest::set_allocated_role(std::string* value) {
  _impl_.role_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.role_.IsDefault()) {
          _impl_.role_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.RolePermissionsRequest.role)
}

// repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
inline int RolePermissionsRequest::_internal_permissions_size() const {
  return _impl_.permissions_.size();
}
inline int RolePermissionsRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void RolePermissionsRequest::clear_permissions() {
  _internal_mutable_permissions()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* RolePermissionsRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.RolePermissionsRequest.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
RolePermissionsRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.RolePermissionsRequest.permissions)
  return _internal_mutable_permissions();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& RolePermissionsRequest::_internal_permissions(int index) const {
  return _internal_permissions().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& RolePermissionsRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.RolePermissionsRequest.permissions)
  return _internal_permissions(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* RolePermissionsRequest::_internal_add_permissions() {
  return _internal_mutable_permissions()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* RolePermissionsRequest::add_permissions() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.RolePermissionsRequest.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
RolePermissionsRequest::permissions() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.RolePermissionsRequest.permissions)
  return _internal_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
RolePermissionsRequest::_internal_permissions() const {
  return _impl_.permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
RolePermissionsRequest::_internal_mutable_permissions() {
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// PermissionsResponse_Item

// string operation = 1;
inline void PermissionsResponse_Item::clear_operation() {
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& PermissionsResponse_Item::operation() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsResponse.Item.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PermissionsResponse_Item::set_operation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.PermissionsResponse.Item.operation)
}
inline std::string* PermissionsResponse_Item::mutable_operation() {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsResponse.Item.operation)
  return _s;
}
inline const std::string& PermissionsResponse_Item::_internal_operation() const {
  return _impl_.operation_.Get();
}
inline void PermissionsResponse_Item::_internal_set_operation(const std::string& value) {
  ;


  _impl_.operation_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionsResponse_Item::_internal_mutable_operation() {
  ;
  return _impl_.operation_.Mutable( GetArenaForAllocation());
}
inline std::string* PermissionsResponse_Item::release_operation() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PermissionsResponse.Item.operation)
  return _impl_.operation_.Release();
}
inline void PermissionsResponse_Item::set_allocated_operation(std::string* value) {
  _impl_.operation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.operation_.IsDefault()) {
          _impl_.operation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PermissionsResponse.Item.operation)
}

// .palm.rbac.v1.ResourcesResponse.Item resource = 2;
inline bool PermissionsResponse_Item::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline void PermissionsResponse_Item::clear_resource() {
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& PermissionsResponse_Item::_internal_resource() const {
  const ::palm::rbac::v1::ResourcesResponse_Item* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::ResourcesResponse_Item&>(
      ::palm::rbac::v1::_ResourcesResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& PermissionsResponse_Item::resource() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsResponse.Item.resource)
  return _internal_resource();
}
inline void PermissionsResponse_Item::unsafe_arena_set_allocated_resource(
    ::palm::rbac::v1::ResourcesResponse_Item* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.PermissionsResponse.Item.resource)
}
inline ::palm::rbac::v1::ResourcesResponse_Item* PermissionsResponse_Item::release_resource() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* PermissionsResponse_Item::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.PermissionsResponse.Item.resource)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* PermissionsResponse_Item::_internal_mutable_resource() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::ResourcesResponse_Item>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* PermissionsResponse_Item::mutable_resource() {
  ::palm::rbac::v1::ResourcesResponse_Item* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsResponse.Item.resource)
  return _msg;
}
inline void PermissionsResponse_Item::set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.PermissionsResponse.Item.resource)
}

// -------------------------------------------------------------------

// PermissionsResponse

// repeated .palm.rbac.v1.PermissionsResponse.Item items = 1;
inline int PermissionsResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int PermissionsResponse::items_size() const {
  return _internal_items_size();
}
inline void PermissionsResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* PermissionsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.PermissionsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
PermissionsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.PermissionsResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& PermissionsResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& PermissionsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.PermissionsResponse.items)
  return _internal_items(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* PermissionsResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* PermissionsResponse::add_items() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.PermissionsResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
PermissionsResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.PermissionsResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
PermissionsResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
PermissionsResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// HasRoleForUserRequest

// int32 user = 1;
inline void HasRoleForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t HasRoleForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasRoleForUserRequest.user)
  return _internal_user();
}
inline void HasRoleForUserRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasRoleForUserRequest.user)
}
inline ::int32_t HasRoleForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline void HasRoleForUserRequest::_internal_set_user(::int32_t value) {
  ;
  _impl_.user_ = value;
}

// string role = 2;
inline void HasRoleForUserRequest::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& HasRoleForUserRequest::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasRoleForUserRequest.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HasRoleForUserRequest::set_role(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasRoleForUserRequest.role)
}
inline std::string* HasRoleForUserRequest::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.HasRoleForUserRequest.role)
  return _s;
}
inline const std::string& HasRoleForUserRequest::_internal_role() const {
  return _impl_.role_.Get();
}
inline void HasRoleForUserRequest::_internal_set_role(const std::string& value) {
  ;


  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* HasRoleForUserRequest::_internal_mutable_role() {
  ;
  return _impl_.role_.Mutable( GetArenaForAllocation());
}
inline std::string* HasRoleForUserRequest::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.HasRoleForUserRequest.role)
  return _impl_.role_.Release();
}
inline void HasRoleForUserRequest::set_allocated_role(std::string* value) {
  _impl_.role_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.role_.IsDefault()) {
          _impl_.role_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.HasRoleForUserRequest.role)
}

// -------------------------------------------------------------------

// HasPermissionForUserRequest

// int32 user = 1;
inline void HasPermissionForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t HasPermissionForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasPermissionForUserRequest.user)
  return _internal_user();
}
inline void HasPermissionForUserRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasPermissionForUserRequest.user)
}
inline ::int32_t HasPermissionForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline void HasPermissionForUserRequest::_internal_set_user(::int32_t value) {
  ;
  _impl_.user_ = value;
}

// string operation = 2;
inline void HasPermissionForUserRequest::clear_operation() {
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& HasPermissionForUserRequest::operation() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasPermissionForUserRequest.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HasPermissionForUserRequest::set_operation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.HasPermissionForUserRequest.operation)
}
inline std::string* HasPermissionForUserRequest::mutable_operation() {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.HasPermissionForUserRequest.operation)
  return _s;
}
inline const std::string& HasPermissionForUserRequest::_internal_operation() const {
  return _impl_.operation_.Get();
}
inline void HasPermissionForUserRequest::_internal_set_operation(const std::string& value) {
  ;


  _impl_.operation_.Set(value, GetArenaForAllocation());
}
inline std::string* HasPermissionForUserRequest::_internal_mutable_operation() {
  ;
  return _impl_.operation_.Mutable( GetArenaForAllocation());
}
inline std::string* HasPermissionForUserRequest::release_operation() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.HasPermissionForUserRequest.operation)
  return _impl_.operation_.Release();
}
inline void HasPermissionForUserRequest::set_allocated_operation(std::string* value) {
  _impl_.operation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.operation_.IsDefault()) {
          _impl_.operation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.HasPermissionForUserRequest.operation)
}

// .palm.rbac.v1.ResourcesResponse.Item resource = 3;
inline bool HasPermissionForUserRequest::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline void HasPermissionForUserRequest::clear_resource() {
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& HasPermissionForUserRequest::_internal_resource() const {
  const ::palm::rbac::v1::ResourcesResponse_Item* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::ResourcesResponse_Item&>(
      ::palm::rbac::v1::_ResourcesResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& HasPermissionForUserRequest::resource() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.HasPermissionForUserRequest.resource)
  return _internal_resource();
}
inline void HasPermissionForUserRequest::unsafe_arena_set_allocated_resource(
    ::palm::rbac::v1::ResourcesResponse_Item* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.rbac.v1.HasPermissionForUserRequest.resource)
}
inline ::palm::rbac::v1::ResourcesResponse_Item* HasPermissionForUserRequest::release_resource() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* HasPermissionForUserRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.HasPermissionForUserRequest.resource)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* HasPermissionForUserRequest::_internal_mutable_resource() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::ResourcesResponse_Item>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* HasPermissionForUserRequest::mutable_resource() {
  ::palm::rbac::v1::ResourcesResponse_Item* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.HasPermissionForUserRequest.resource)
  return _msg;
}
inline void HasPermissionForUserRequest::set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.HasPermissionForUserRequest.resource)
}

// -------------------------------------------------------------------

// UpdatePermissionsForUserRequest

// int32 user = 1;
inline void UpdatePermissionsForUserRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t UpdatePermissionsForUserRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UpdatePermissionsForUserRequest.user)
  return _internal_user();
}
inline void UpdatePermissionsForUserRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UpdatePermissionsForUserRequest.user)
}
inline ::int32_t UpdatePermissionsForUserRequest::_internal_user() const {
  return _impl_.user_;
}
inline void UpdatePermissionsForUserRequest::_internal_set_user(::int32_t value) {
  ;
  _impl_.user_ = value;
}

// repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
inline int UpdatePermissionsForUserRequest::_internal_removed_size() const {
  return _impl_.removed_.size();
}
inline int UpdatePermissionsForUserRequest::removed_size() const {
  return _internal_removed_size();
}
inline void UpdatePermissionsForUserRequest::clear_removed() {
  _internal_mutable_removed()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForUserRequest::mutable_removed(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UpdatePermissionsForUserRequest.removed)
  return _internal_mutable_removed()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UpdatePermissionsForUserRequest::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UpdatePermissionsForUserRequest.removed)
  return _internal_mutable_removed();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForUserRequest::_internal_removed(int index) const {
  return _internal_removed().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForUserRequest::removed(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UpdatePermissionsForUserRequest.removed)
  return _internal_removed(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForUserRequest::_internal_add_removed() {
  return _internal_mutable_removed()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForUserRequest::add_removed() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_removed();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UpdatePermissionsForUserRequest.removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UpdatePermissionsForUserRequest::removed() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UpdatePermissionsForUserRequest.removed)
  return _internal_removed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UpdatePermissionsForUserRequest::_internal_removed() const {
  return _impl_.removed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UpdatePermissionsForUserRequest::_internal_mutable_removed() {
  return &_impl_.removed_;
}

// repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
inline int UpdatePermissionsForUserRequest::_internal_saved_size() const {
  return _impl_.saved_.size();
}
inline int UpdatePermissionsForUserRequest::saved_size() const {
  return _internal_saved_size();
}
inline void UpdatePermissionsForUserRequest::clear_saved() {
  _internal_mutable_saved()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForUserRequest::mutable_saved(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UpdatePermissionsForUserRequest.saved)
  return _internal_mutable_saved()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UpdatePermissionsForUserRequest::mutable_saved() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UpdatePermissionsForUserRequest.saved)
  return _internal_mutable_saved();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForUserRequest::_internal_saved(int index) const {
  return _internal_saved().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForUserRequest::saved(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UpdatePermissionsForUserRequest.saved)
  return _internal_saved(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForUserRequest::_internal_add_saved() {
  return _internal_mutable_saved()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForUserRequest::add_saved() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_saved();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UpdatePermissionsForUserRequest.saved)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UpdatePermissionsForUserRequest::saved() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UpdatePermissionsForUserRequest.saved)
  return _internal_saved();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UpdatePermissionsForUserRequest::_internal_saved() const {
  return _impl_.saved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UpdatePermissionsForUserRequest::_internal_mutable_saved() {
  return &_impl_.saved_;
}

// -------------------------------------------------------------------

// UpdatePermissionsForRoleRequest

// string role = 1;
inline void UpdatePermissionsForRoleRequest::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& UpdatePermissionsForRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UpdatePermissionsForRoleRequest.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdatePermissionsForRoleRequest::set_role(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.rbac.v1.UpdatePermissionsForRoleRequest.role)
}
inline std::string* UpdatePermissionsForRoleRequest::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UpdatePermissionsForRoleRequest.role)
  return _s;
}
inline const std::string& UpdatePermissionsForRoleRequest::_internal_role() const {
  return _impl_.role_.Get();
}
inline void UpdatePermissionsForRoleRequest::_internal_set_role(const std::string& value) {
  ;


  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePermissionsForRoleRequest::_internal_mutable_role() {
  ;
  return _impl_.role_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdatePermissionsForRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:palm.rbac.v1.UpdatePermissionsForRoleRequest.role)
  return _impl_.role_.Release();
}
inline void UpdatePermissionsForRoleRequest::set_allocated_role(std::string* value) {
  _impl_.role_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.role_.IsDefault()) {
          _impl_.role_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.rbac.v1.UpdatePermissionsForRoleRequest.role)
}

// repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
inline int UpdatePermissionsForRoleRequest::_internal_removed_size() const {
  return _impl_.removed_.size();
}
inline int UpdatePermissionsForRoleRequest::removed_size() const {
  return _internal_removed_size();
}
inline void UpdatePermissionsForRoleRequest::clear_removed() {
  _internal_mutable_removed()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForRoleRequest::mutable_removed(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UpdatePermissionsForRoleRequest.removed)
  return _internal_mutable_removed()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UpdatePermissionsForRoleRequest::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UpdatePermissionsForRoleRequest.removed)
  return _internal_mutable_removed();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForRoleRequest::_internal_removed(int index) const {
  return _internal_removed().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForRoleRequest::removed(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UpdatePermissionsForRoleRequest.removed)
  return _internal_removed(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForRoleRequest::_internal_add_removed() {
  return _internal_mutable_removed()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForRoleRequest::add_removed() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_removed();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UpdatePermissionsForRoleRequest.removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UpdatePermissionsForRoleRequest::removed() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UpdatePermissionsForRoleRequest.removed)
  return _internal_removed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UpdatePermissionsForRoleRequest::_internal_removed() const {
  return _impl_.removed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UpdatePermissionsForRoleRequest::_internal_mutable_removed() {
  return &_impl_.removed_;
}

// repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
inline int UpdatePermissionsForRoleRequest::_internal_saved_size() const {
  return _impl_.saved_.size();
}
inline int UpdatePermissionsForRoleRequest::saved_size() const {
  return _internal_saved_size();
}
inline void UpdatePermissionsForRoleRequest::clear_saved() {
  _internal_mutable_saved()->Clear();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForRoleRequest::mutable_saved(int index) {
  // @@protoc_insertion_point(field_mutable:palm.rbac.v1.UpdatePermissionsForRoleRequest.saved)
  return _internal_mutable_saved()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UpdatePermissionsForRoleRequest::mutable_saved() {
  // @@protoc_insertion_point(field_mutable_list:palm.rbac.v1.UpdatePermissionsForRoleRequest.saved)
  return _internal_mutable_saved();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForRoleRequest::_internal_saved(int index) const {
  return _internal_saved().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UpdatePermissionsForRoleRequest::saved(int index) const {
  // @@protoc_insertion_point(field_get:palm.rbac.v1.UpdatePermissionsForRoleRequest.saved)
  return _internal_saved(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForRoleRequest::_internal_add_saved() {
  return _internal_mutable_saved()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UpdatePermissionsForRoleRequest::add_saved() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_saved();
  // @@protoc_insertion_point(field_add:palm.rbac.v1.UpdatePermissionsForRoleRequest.saved)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UpdatePermissionsForRoleRequest::saved() const {
  // @@protoc_insertion_point(field_list:palm.rbac.v1.UpdatePermissionsForRoleRequest.saved)
  return _internal_saved();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UpdatePermissionsForRoleRequest::_internal_saved() const {
  return _impl_.saved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UpdatePermissionsForRoleRequest::_internal_mutable_saved() {
  return &_impl_.saved_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rbac
}  // namespace palm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rbac_2eproto_2epb_2eh
