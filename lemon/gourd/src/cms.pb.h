// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cms_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cms_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "nut.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cms_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cms_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cms_2eproto;
namespace palm {
namespace cms {
namespace v1 {
class NotificationCreateRequest;
struct NotificationCreateRequestDefaultTypeInternal;
extern NotificationCreateRequestDefaultTypeInternal _NotificationCreateRequest_default_instance_;
class NotificationIndexResponse;
struct NotificationIndexResponseDefaultTypeInternal;
extern NotificationIndexResponseDefaultTypeInternal _NotificationIndexResponse_default_instance_;
class NotificationIndexResponse_Item;
struct NotificationIndexResponse_ItemDefaultTypeInternal;
extern NotificationIndexResponse_ItemDefaultTypeInternal _NotificationIndexResponse_Item_default_instance_;
class NotificationUpdateRequest;
struct NotificationUpdateRequestDefaultTypeInternal;
extern NotificationUpdateRequestDefaultTypeInternal _NotificationUpdateRequest_default_instance_;
class WebSite;
struct WebSiteDefaultTypeInternal;
extern WebSiteDefaultTypeInternal _WebSite_default_instance_;
}  // namespace v1
}  // namespace cms
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template <>
::palm::cms::v1::NotificationCreateRequest* Arena::CreateMaybeMessage<::palm::cms::v1::NotificationCreateRequest>(Arena*);
template <>
::palm::cms::v1::NotificationIndexResponse* Arena::CreateMaybeMessage<::palm::cms::v1::NotificationIndexResponse>(Arena*);
template <>
::palm::cms::v1::NotificationIndexResponse_Item* Arena::CreateMaybeMessage<::palm::cms::v1::NotificationIndexResponse_Item>(Arena*);
template <>
::palm::cms::v1::NotificationUpdateRequest* Arena::CreateMaybeMessage<::palm::cms::v1::NotificationUpdateRequest>(Arena*);
template <>
::palm::cms::v1::WebSite* Arena::CreateMaybeMessage<::palm::cms::v1::WebSite>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace palm {
namespace cms {
namespace v1 {
enum NotificationIndexResponse_Item_Level : int {
  NotificationIndexResponse_Item_Level_NOTE = 0,
  NotificationIndexResponse_Item_Level_INFO = 1,
  NotificationIndexResponse_Item_Level_NotificationIndexResponse_Item_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NotificationIndexResponse_Item_Level_NotificationIndexResponse_Item_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NotificationIndexResponse_Item_Level_IsValid(int value);
constexpr NotificationIndexResponse_Item_Level NotificationIndexResponse_Item_Level_Level_MIN = static_cast<NotificationIndexResponse_Item_Level>(0);
constexpr NotificationIndexResponse_Item_Level NotificationIndexResponse_Item_Level_Level_MAX = static_cast<NotificationIndexResponse_Item_Level>(1);
constexpr int NotificationIndexResponse_Item_Level_Level_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
NotificationIndexResponse_Item_Level_descriptor();
template <typename T>
const std::string& NotificationIndexResponse_Item_Level_Name(T value) {
  static_assert(std::is_same<T, NotificationIndexResponse_Item_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return NotificationIndexResponse_Item_Level_Name(static_cast<NotificationIndexResponse_Item_Level>(value));
}
template <>
inline const std::string& NotificationIndexResponse_Item_Level_Name(NotificationIndexResponse_Item_Level value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<NotificationIndexResponse_Item_Level_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool NotificationIndexResponse_Item_Level_Parse(absl::string_view name, NotificationIndexResponse_Item_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationIndexResponse_Item_Level>(
      NotificationIndexResponse_Item_Level_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WebSite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.cms.v1.WebSite) */ {
 public:
  inline WebSite() : WebSite(nullptr) {}
  ~WebSite() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WebSite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebSite(const WebSite& from);
  WebSite(WebSite&& from) noexcept
    : WebSite() {
    *this = ::std::move(from);
  }

  inline WebSite& operator=(const WebSite& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebSite& operator=(WebSite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WebSite& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebSite* internal_default_instance() {
    return reinterpret_cast<const WebSite*>(
               &_WebSite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebSite& a, WebSite& b) {
    a.Swap(&b);
  }
  inline void Swap(WebSite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebSite* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebSite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebSite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WebSite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WebSite& from) {
    WebSite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebSite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.cms.v1.WebSite";
  }
  protected:
  explicit WebSite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaxonomiesFieldNumber = 9,
  };
  // repeated string taxonomies = 9;
  int taxonomies_size() const;
  private:
  int _internal_taxonomies_size() const;

  public:
  void clear_taxonomies() ;
  const std::string& taxonomies(int index) const;
  std::string* mutable_taxonomies(int index);
  void set_taxonomies(int index, const std::string& value);
  void set_taxonomies(int index, std::string&& value);
  void set_taxonomies(int index, const char* value);
  void set_taxonomies(int index, const char* value, std::size_t size);
  void set_taxonomies(int index, absl::string_view value);
  std::string* add_taxonomies();
  void add_taxonomies(const std::string& value);
  void add_taxonomies(std::string&& value);
  void add_taxonomies(const char* value);
  void add_taxonomies(const char* value, std::size_t size);
  void add_taxonomies(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& taxonomies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_taxonomies();

  private:
  const std::string& _internal_taxonomies(int index) const;
  std::string* _internal_add_taxonomies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_taxonomies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_taxonomies();

  public:
  // @@protoc_insertion_point(class_scope:palm.cms.v1.WebSite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> taxonomies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cms_2eproto;
};// -------------------------------------------------------------------

class NotificationIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.cms.v1.NotificationIndexResponse.Item) */ {
 public:
  inline NotificationIndexResponse_Item() : NotificationIndexResponse_Item(nullptr) {}
  ~NotificationIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationIndexResponse_Item(const NotificationIndexResponse_Item& from);
  NotificationIndexResponse_Item(NotificationIndexResponse_Item&& from) noexcept
    : NotificationIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline NotificationIndexResponse_Item& operator=(const NotificationIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationIndexResponse_Item& operator=(NotificationIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const NotificationIndexResponse_Item*>(
               &_NotificationIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationIndexResponse_Item& a, NotificationIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationIndexResponse_Item& from) {
    NotificationIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.cms.v1.NotificationIndexResponse.Item";
  }
  protected:
  explicit NotificationIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Level = NotificationIndexResponse_Item_Level;
  static constexpr Level NOTE = NotificationIndexResponse_Item_Level_NOTE;
  static constexpr Level INFO = NotificationIndexResponse_Item_Level_INFO;
  static inline bool Level_IsValid(int value) {
    return NotificationIndexResponse_Item_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = NotificationIndexResponse_Item_Level_Level_MIN;
  static constexpr Level Level_MAX = NotificationIndexResponse_Item_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = NotificationIndexResponse_Item_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Level_descriptor() {
    return NotificationIndexResponse_Item_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return NotificationIndexResponse_Item_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return NotificationIndexResponse_Item_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kUrlFieldNumber = 4,
    kLangFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string url = 4;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string lang = 8;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .palm.cms.v1.NotificationIndexResponse.Item.Level level = 2;
  void clear_level() ;
  ::palm::cms::v1::NotificationIndexResponse_Item_Level level() const;
  void set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value);

  private:
  ::palm::cms::v1::NotificationIndexResponse_Item_Level _internal_level() const;
  void _internal_set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value);

  public:
  // @@protoc_insertion_point(class_scope:palm.cms.v1.NotificationIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::int32_t id_;
    int level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cms_2eproto;
};// -------------------------------------------------------------------

class NotificationIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.cms.v1.NotificationIndexResponse) */ {
 public:
  inline NotificationIndexResponse() : NotificationIndexResponse(nullptr) {}
  ~NotificationIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationIndexResponse(const NotificationIndexResponse& from);
  NotificationIndexResponse(NotificationIndexResponse&& from) noexcept
    : NotificationIndexResponse() {
    *this = ::std::move(from);
  }

  inline NotificationIndexResponse& operator=(const NotificationIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationIndexResponse& operator=(NotificationIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationIndexResponse* internal_default_instance() {
    return reinterpret_cast<const NotificationIndexResponse*>(
               &_NotificationIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotificationIndexResponse& a, NotificationIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationIndexResponse& from) {
    NotificationIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.cms.v1.NotificationIndexResponse";
  }
  protected:
  explicit NotificationIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NotificationIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.cms.v1.NotificationIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::cms::v1::NotificationIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::cms::v1::NotificationIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::cms::v1::NotificationIndexResponse_Item& _internal_items(int index) const;
  ::palm::cms::v1::NotificationIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::cms::v1::NotificationIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::cms::v1::NotificationIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::cms::v1::NotificationIndexResponse_Item& items(int index) const;
  ::palm::cms::v1::NotificationIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::cms::v1::NotificationIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.cms.v1.NotificationIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::cms::v1::NotificationIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cms_2eproto;
};// -------------------------------------------------------------------

class NotificationCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.cms.v1.NotificationCreateRequest) */ {
 public:
  inline NotificationCreateRequest() : NotificationCreateRequest(nullptr) {}
  ~NotificationCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationCreateRequest(const NotificationCreateRequest& from);
  NotificationCreateRequest(NotificationCreateRequest&& from) noexcept
    : NotificationCreateRequest() {
    *this = ::std::move(from);
  }

  inline NotificationCreateRequest& operator=(const NotificationCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationCreateRequest& operator=(NotificationCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationCreateRequest* internal_default_instance() {
    return reinterpret_cast<const NotificationCreateRequest*>(
               &_NotificationCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotificationCreateRequest& a, NotificationCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationCreateRequest& from) {
    NotificationCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.cms.v1.NotificationCreateRequest";
  }
  protected:
  explicit NotificationCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kUrlFieldNumber = 3,
    kLangFieldNumber = 9,
    kLevelFieldNumber = 1,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string url = 3;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string lang = 9;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // .palm.cms.v1.NotificationIndexResponse.Item.Level level = 1;
  void clear_level() ;
  ::palm::cms::v1::NotificationIndexResponse_Item_Level level() const;
  void set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value);

  private:
  ::palm::cms::v1::NotificationIndexResponse_Item_Level _internal_level() const;
  void _internal_set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value);

  public:
  // @@protoc_insertion_point(class_scope:palm.cms.v1.NotificationCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cms_2eproto;
};// -------------------------------------------------------------------

class NotificationUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.cms.v1.NotificationUpdateRequest) */ {
 public:
  inline NotificationUpdateRequest() : NotificationUpdateRequest(nullptr) {}
  ~NotificationUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationUpdateRequest(const NotificationUpdateRequest& from);
  NotificationUpdateRequest(NotificationUpdateRequest&& from) noexcept
    : NotificationUpdateRequest() {
    *this = ::std::move(from);
  }

  inline NotificationUpdateRequest& operator=(const NotificationUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationUpdateRequest& operator=(NotificationUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const NotificationUpdateRequest*>(
               &_NotificationUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NotificationUpdateRequest& a, NotificationUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationUpdateRequest& from) {
    NotificationUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.cms.v1.NotificationUpdateRequest";
  }
  protected:
  explicit NotificationUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kUrlFieldNumber = 4,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string url = 4;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .palm.cms.v1.NotificationIndexResponse.Item.Level level = 2;
  void clear_level() ;
  ::palm::cms::v1::NotificationIndexResponse_Item_Level level() const;
  void set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value);

  private:
  ::palm::cms::v1::NotificationIndexResponse_Item_Level _internal_level() const;
  void _internal_set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value);

  public:
  // @@protoc_insertion_point(class_scope:palm.cms.v1.NotificationUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::int32_t id_;
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cms_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WebSite

// repeated string taxonomies = 9;
inline int WebSite::_internal_taxonomies_size() const {
  return _impl_.taxonomies_.size();
}
inline int WebSite::taxonomies_size() const {
  return _internal_taxonomies_size();
}
inline void WebSite::clear_taxonomies() {
  _internal_mutable_taxonomies()->Clear();
}
inline std::string* WebSite::add_taxonomies() {
  std::string* _s = _internal_add_taxonomies();
  // @@protoc_insertion_point(field_add_mutable:palm.cms.v1.WebSite.taxonomies)
  return _s;
}
inline const std::string& WebSite::taxonomies(int index) const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.WebSite.taxonomies)
  return _internal_taxonomies(index);
}
inline std::string* WebSite::mutable_taxonomies(int index) {
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.WebSite.taxonomies)
  return _internal_mutable_taxonomies()->Mutable(index);
}
inline void WebSite::set_taxonomies(int index, const std::string& value) {
  _internal_mutable_taxonomies()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::set_taxonomies(int index, std::string&& value) {
  _internal_mutable_taxonomies()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::set_taxonomies(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_taxonomies()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::set_taxonomies(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_taxonomies()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::set_taxonomies(int index, absl::string_view value) {
  _internal_mutable_taxonomies()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::add_taxonomies(const std::string& value) {
  _internal_mutable_taxonomies()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::add_taxonomies(std::string&& value) {
  _internal_mutable_taxonomies()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::add_taxonomies(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_taxonomies()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::add_taxonomies(const char* value, std::size_t size) {
  _internal_mutable_taxonomies()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.cms.v1.WebSite.taxonomies)
}
inline void WebSite::add_taxonomies(absl::string_view value) {
  _internal_mutable_taxonomies()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.cms.v1.WebSite.taxonomies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebSite::taxonomies() const {
  // @@protoc_insertion_point(field_list:palm.cms.v1.WebSite.taxonomies)
  return _internal_taxonomies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* WebSite::mutable_taxonomies() {
  // @@protoc_insertion_point(field_mutable_list:palm.cms.v1.WebSite.taxonomies)
  return _internal_mutable_taxonomies();
}
inline const std::string& WebSite::_internal_taxonomies(int index) const {
  return _internal_taxonomies().Get(index);
}
inline std::string* WebSite::_internal_add_taxonomies() {
  return _internal_mutable_taxonomies()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebSite::_internal_taxonomies() const {
  return _impl_.taxonomies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WebSite::_internal_mutable_taxonomies() {
  return &_impl_.taxonomies_;
}

// -------------------------------------------------------------------

// NotificationIndexResponse_Item

// int32 id = 1;
inline void NotificationIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t NotificationIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.Item.id)
  return _internal_id();
}
inline void NotificationIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationIndexResponse.Item.id)
}
inline ::int32_t NotificationIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void NotificationIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// .palm.cms.v1.NotificationIndexResponse.Item.Level level = 2;
inline void NotificationIndexResponse_Item::clear_level() {
  _impl_.level_ = 0;
}
inline ::palm::cms::v1::NotificationIndexResponse_Item_Level NotificationIndexResponse_Item::level() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.Item.level)
  return _internal_level();
}
inline void NotificationIndexResponse_Item::set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value) {
   _internal_set_level(value);
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationIndexResponse.Item.level)
}
inline ::palm::cms::v1::NotificationIndexResponse_Item_Level NotificationIndexResponse_Item::_internal_level() const {
  return static_cast<::palm::cms::v1::NotificationIndexResponse_Item_Level>(_impl_.level_);
}
inline void NotificationIndexResponse_Item::_internal_set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value) {
  ;
  _impl_.level_ = value;
}

// string title = 3;
inline void NotificationIndexResponse_Item::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& NotificationIndexResponse_Item::title() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.Item.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationIndexResponse_Item::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationIndexResponse.Item.title)
}
inline std::string* NotificationIndexResponse_Item::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationIndexResponse.Item.title)
  return _s;
}
inline const std::string& NotificationIndexResponse_Item::_internal_title() const {
  return _impl_.title_.Get();
}
inline void NotificationIndexResponse_Item::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationIndexResponse_Item::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationIndexResponse_Item::release_title() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationIndexResponse.Item.title)
  return _impl_.title_.Release();
}
inline void NotificationIndexResponse_Item::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationIndexResponse.Item.title)
}

// string url = 4;
inline void NotificationIndexResponse_Item::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& NotificationIndexResponse_Item::url() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.Item.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationIndexResponse_Item::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationIndexResponse.Item.url)
}
inline std::string* NotificationIndexResponse_Item::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationIndexResponse.Item.url)
  return _s;
}
inline const std::string& NotificationIndexResponse_Item::_internal_url() const {
  return _impl_.url_.Get();
}
inline void NotificationIndexResponse_Item::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationIndexResponse_Item::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationIndexResponse_Item::release_url() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationIndexResponse.Item.url)
  return _impl_.url_.Release();
}
inline void NotificationIndexResponse_Item::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationIndexResponse.Item.url)
}

// string lang = 8;
inline void NotificationIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& NotificationIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationIndexResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationIndexResponse.Item.lang)
}
inline std::string* NotificationIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationIndexResponse.Item.lang)
  return _s;
}
inline const std::string& NotificationIndexResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void NotificationIndexResponse_Item::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationIndexResponse_Item::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void NotificationIndexResponse_Item::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationIndexResponse.Item.lang)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool NotificationIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NotificationIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NotificationIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void NotificationIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.cms.v1.NotificationIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NotificationIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NotificationIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NotificationIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NotificationIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationIndexResponse.Item.updated_at)
  return _msg;
}
inline void NotificationIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// NotificationIndexResponse

// repeated .palm.cms.v1.NotificationIndexResponse.Item items = 1;
inline int NotificationIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int NotificationIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void NotificationIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::cms::v1::NotificationIndexResponse_Item* NotificationIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::cms::v1::NotificationIndexResponse_Item >*
NotificationIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.cms.v1.NotificationIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::cms::v1::NotificationIndexResponse_Item& NotificationIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::cms::v1::NotificationIndexResponse_Item& NotificationIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::cms::v1::NotificationIndexResponse_Item* NotificationIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::cms::v1::NotificationIndexResponse_Item* NotificationIndexResponse::add_items() {
  ::palm::cms::v1::NotificationIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.cms.v1.NotificationIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::cms::v1::NotificationIndexResponse_Item >&
NotificationIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.cms.v1.NotificationIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::cms::v1::NotificationIndexResponse_Item>&
NotificationIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::cms::v1::NotificationIndexResponse_Item>*
NotificationIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// .palm.nut.v1.Pagination pagination = 9;
inline bool NotificationIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::palm::nut::v1::Pagination& NotificationIndexResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& NotificationIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationIndexResponse.pagination)
  return _internal_pagination();
}
inline void NotificationIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.cms.v1.NotificationIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* NotificationIndexResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* NotificationIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationIndexResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* NotificationIndexResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* NotificationIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationIndexResponse.pagination)
  return _msg;
}
inline void NotificationIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationIndexResponse.pagination)
}

// -------------------------------------------------------------------

// NotificationCreateRequest

// .palm.cms.v1.NotificationIndexResponse.Item.Level level = 1;
inline void NotificationCreateRequest::clear_level() {
  _impl_.level_ = 0;
}
inline ::palm::cms::v1::NotificationIndexResponse_Item_Level NotificationCreateRequest::level() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationCreateRequest.level)
  return _internal_level();
}
inline void NotificationCreateRequest::set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value) {
   _internal_set_level(value);
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationCreateRequest.level)
}
inline ::palm::cms::v1::NotificationIndexResponse_Item_Level NotificationCreateRequest::_internal_level() const {
  return static_cast<::palm::cms::v1::NotificationIndexResponse_Item_Level>(_impl_.level_);
}
inline void NotificationCreateRequest::_internal_set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value) {
  ;
  _impl_.level_ = value;
}

// string title = 2;
inline void NotificationCreateRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& NotificationCreateRequest::title() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationCreateRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationCreateRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationCreateRequest.title)
}
inline std::string* NotificationCreateRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationCreateRequest.title)
  return _s;
}
inline const std::string& NotificationCreateRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void NotificationCreateRequest::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationCreateRequest::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationCreateRequest::release_title() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationCreateRequest.title)
  return _impl_.title_.Release();
}
inline void NotificationCreateRequest::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationCreateRequest.title)
}

// string url = 3;
inline void NotificationCreateRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& NotificationCreateRequest::url() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationCreateRequest.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationCreateRequest::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationCreateRequest.url)
}
inline std::string* NotificationCreateRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationCreateRequest.url)
  return _s;
}
inline const std::string& NotificationCreateRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void NotificationCreateRequest::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationCreateRequest::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationCreateRequest::release_url() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationCreateRequest.url)
  return _impl_.url_.Release();
}
inline void NotificationCreateRequest::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationCreateRequest.url)
}

// string lang = 9;
inline void NotificationCreateRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& NotificationCreateRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationCreateRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationCreateRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationCreateRequest.lang)
}
inline std::string* NotificationCreateRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationCreateRequest.lang)
  return _s;
}
inline const std::string& NotificationCreateRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void NotificationCreateRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationCreateRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationCreateRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationCreateRequest.lang)
  return _impl_.lang_.Release();
}
inline void NotificationCreateRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationCreateRequest.lang)
}

// -------------------------------------------------------------------

// NotificationUpdateRequest

// int32 id = 1;
inline void NotificationUpdateRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t NotificationUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationUpdateRequest.id)
  return _internal_id();
}
inline void NotificationUpdateRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationUpdateRequest.id)
}
inline ::int32_t NotificationUpdateRequest::_internal_id() const {
  return _impl_.id_;
}
inline void NotificationUpdateRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// .palm.cms.v1.NotificationIndexResponse.Item.Level level = 2;
inline void NotificationUpdateRequest::clear_level() {
  _impl_.level_ = 0;
}
inline ::palm::cms::v1::NotificationIndexResponse_Item_Level NotificationUpdateRequest::level() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationUpdateRequest.level)
  return _internal_level();
}
inline void NotificationUpdateRequest::set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value) {
   _internal_set_level(value);
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationUpdateRequest.level)
}
inline ::palm::cms::v1::NotificationIndexResponse_Item_Level NotificationUpdateRequest::_internal_level() const {
  return static_cast<::palm::cms::v1::NotificationIndexResponse_Item_Level>(_impl_.level_);
}
inline void NotificationUpdateRequest::_internal_set_level(::palm::cms::v1::NotificationIndexResponse_Item_Level value) {
  ;
  _impl_.level_ = value;
}

// string title = 3;
inline void NotificationUpdateRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& NotificationUpdateRequest::title() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationUpdateRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationUpdateRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationUpdateRequest.title)
}
inline std::string* NotificationUpdateRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationUpdateRequest.title)
  return _s;
}
inline const std::string& NotificationUpdateRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void NotificationUpdateRequest::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationUpdateRequest::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationUpdateRequest::release_title() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationUpdateRequest.title)
  return _impl_.title_.Release();
}
inline void NotificationUpdateRequest::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationUpdateRequest.title)
}

// string url = 4;
inline void NotificationUpdateRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& NotificationUpdateRequest::url() const {
  // @@protoc_insertion_point(field_get:palm.cms.v1.NotificationUpdateRequest.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationUpdateRequest::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.cms.v1.NotificationUpdateRequest.url)
}
inline std::string* NotificationUpdateRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.cms.v1.NotificationUpdateRequest.url)
  return _s;
}
inline const std::string& NotificationUpdateRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void NotificationUpdateRequest::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationUpdateRequest::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* NotificationUpdateRequest::release_url() {
  // @@protoc_insertion_point(field_release:palm.cms.v1.NotificationUpdateRequest.url)
  return _impl_.url_.Release();
}
inline void NotificationUpdateRequest::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.cms.v1.NotificationUpdateRequest.url)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace cms
}  // namespace palm


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::palm::cms::v1::NotificationIndexResponse_Item_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::cms::v1::NotificationIndexResponse_Item_Level>() {
  return ::palm::cms::v1::NotificationIndexResponse_Item_Level_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cms_2eproto_2epb_2eh
