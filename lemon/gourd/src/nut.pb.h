// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
#include "rbac.pb.h"
#include "orchid.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_nut_2eproto;
namespace palm {
namespace nut {
namespace v1 {
class AttachmentIndexResponse;
struct AttachmentIndexResponseDefaultTypeInternal;
extern AttachmentIndexResponseDefaultTypeInternal _AttachmentIndexResponse_default_instance_;
class AttachmentIndexResponse_Item;
struct AttachmentIndexResponse_ItemDefaultTypeInternal;
extern AttachmentIndexResponse_ItemDefaultTypeInternal _AttachmentIndexResponse_Item_default_instance_;
class AttachmentShowRequest;
struct AttachmentShowRequestDefaultTypeInternal;
extern AttachmentShowRequestDefaultTypeInternal _AttachmentShowRequest_default_instance_;
class AttachmentShowResponse;
struct AttachmentShowResponseDefaultTypeInternal;
extern AttachmentShowResponseDefaultTypeInternal _AttachmentShowResponse_default_instance_;
class BaiduProfile;
struct BaiduProfileDefaultTypeInternal;
extern BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
class BaiduProfile_SiteVerify;
struct BaiduProfile_SiteVerifyDefaultTypeInternal;
extern BaiduProfile_SiteVerifyDefaultTypeInternal _BaiduProfile_SiteVerify_default_instance_;
class CategoryCreateRequest;
struct CategoryCreateRequestDefaultTypeInternal;
extern CategoryCreateRequestDefaultTypeInternal _CategoryCreateRequest_default_instance_;
class CategoryIndexResponse;
struct CategoryIndexResponseDefaultTypeInternal;
extern CategoryIndexResponseDefaultTypeInternal _CategoryIndexResponse_default_instance_;
class CategoryIndexResponse_Item;
struct CategoryIndexResponse_ItemDefaultTypeInternal;
extern CategoryIndexResponse_ItemDefaultTypeInternal _CategoryIndexResponse_Item_default_instance_;
class CategoryUpdateRequest;
struct CategoryUpdateRequestDefaultTypeInternal;
extern CategoryUpdateRequestDefaultTypeInternal _CategoryUpdateRequest_default_instance_;
class EmailTask;
struct EmailTaskDefaultTypeInternal;
extern EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
class EmailTask_Address;
struct EmailTask_AddressDefaultTypeInternal;
extern EmailTask_AddressDefaultTypeInternal _EmailTask_Address_default_instance_;
class EmailTask_Attachment;
struct EmailTask_AttachmentDefaultTypeInternal;
extern EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
class EmailTask_Body;
struct EmailTask_BodyDefaultTypeInternal;
extern EmailTask_BodyDefaultTypeInternal _EmailTask_Body_default_instance_;
class GoogleProfile;
struct GoogleProfileDefaultTypeInternal;
extern GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
class GoogleProfile_ReCaptcha;
struct GoogleProfile_ReCaptchaDefaultTypeInternal;
extern GoogleProfile_ReCaptchaDefaultTypeInternal _GoogleProfile_ReCaptcha_default_instance_;
class GoogleSignInUrlRequest;
struct GoogleSignInUrlRequestDefaultTypeInternal;
extern GoogleSignInUrlRequestDefaultTypeInternal _GoogleSignInUrlRequest_default_instance_;
class GoogleSignInUrlResponse;
struct GoogleSignInUrlResponseDefaultTypeInternal;
extern GoogleSignInUrlResponseDefaultTypeInternal _GoogleSignInUrlResponse_default_instance_;
class IdRequest;
struct IdRequestDefaultTypeInternal;
extern IdRequestDefaultTypeInternal _IdRequest_default_instance_;
class IndexNotificationResponse;
struct IndexNotificationResponseDefaultTypeInternal;
extern IndexNotificationResponseDefaultTypeInternal _IndexNotificationResponse_default_instance_;
class IndexNotificationResponse_Item;
struct IndexNotificationResponse_ItemDefaultTypeInternal;
extern IndexNotificationResponse_ItemDefaultTypeInternal _IndexNotificationResponse_Item_default_instance_;
class IndexNowPingRequest;
struct IndexNowPingRequestDefaultTypeInternal;
extern IndexNowPingRequestDefaultTypeInternal _IndexNowPingRequest_default_instance_;
class IndexNowProfile;
struct IndexNowProfileDefaultTypeInternal;
extern IndexNowProfileDefaultTypeInternal _IndexNowProfile_default_instance_;
class LeaveWordIndexResponse;
struct LeaveWordIndexResponseDefaultTypeInternal;
extern LeaveWordIndexResponseDefaultTypeInternal _LeaveWordIndexResponse_default_instance_;
class LeaveWordIndexResponse_Item;
struct LeaveWordIndexResponse_ItemDefaultTypeInternal;
extern LeaveWordIndexResponse_ItemDefaultTypeInternal _LeaveWordIndexResponse_Item_default_instance_;
class LocaleByCodeRequest;
struct LocaleByCodeRequestDefaultTypeInternal;
extern LocaleByCodeRequestDefaultTypeInternal _LocaleByCodeRequest_default_instance_;
class LocaleByLangAndCodeRequest;
struct LocaleByLangAndCodeRequestDefaultTypeInternal;
extern LocaleByLangAndCodeRequestDefaultTypeInternal _LocaleByLangAndCodeRequest_default_instance_;
class LocaleByLangRequest;
struct LocaleByLangRequestDefaultTypeInternal;
extern LocaleByLangRequestDefaultTypeInternal _LocaleByLangRequest_default_instance_;
class LocaleCreateRequest;
struct LocaleCreateRequestDefaultTypeInternal;
extern LocaleCreateRequestDefaultTypeInternal _LocaleCreateRequest_default_instance_;
class LocaleIndexResponse;
struct LocaleIndexResponseDefaultTypeInternal;
extern LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
class LocaleIndexResponse_Item;
struct LocaleIndexResponse_ItemDefaultTypeInternal;
extern LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
class LocaleListResponse;
struct LocaleListResponseDefaultTypeInternal;
extern LocaleListResponseDefaultTypeInternal _LocaleListResponse_default_instance_;
class LocaleUpdateRequest;
struct LocaleUpdateRequestDefaultTypeInternal;
extern LocaleUpdateRequestDefaultTypeInternal _LocaleUpdateRequest_default_instance_;
class MediaContent;
struct MediaContentDefaultTypeInternal;
extern MediaContentDefaultTypeInternal _MediaContent_default_instance_;
class Oauth2State;
struct Oauth2StateDefaultTypeInternal;
extern Oauth2StateDefaultTypeInternal _Oauth2State_default_instance_;
class Pager;
struct PagerDefaultTypeInternal;
extern PagerDefaultTypeInternal _Pager_default_instance_;
class Pagination;
struct PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class ShorterLinkCreateRequest;
struct ShorterLinkCreateRequestDefaultTypeInternal;
extern ShorterLinkCreateRequestDefaultTypeInternal _ShorterLinkCreateRequest_default_instance_;
class ShorterLinkIndexResponse;
struct ShorterLinkIndexResponseDefaultTypeInternal;
extern ShorterLinkIndexResponseDefaultTypeInternal _ShorterLinkIndexResponse_default_instance_;
class ShorterLinkIndexResponse_Item;
struct ShorterLinkIndexResponse_ItemDefaultTypeInternal;
extern ShorterLinkIndexResponse_ItemDefaultTypeInternal _ShorterLinkIndexResponse_Item_default_instance_;
class ShorterLinkUpdateRequest;
struct ShorterLinkUpdateRequestDefaultTypeInternal;
extern ShorterLinkUpdateRequestDefaultTypeInternal _ShorterLinkUpdateRequest_default_instance_;
class SignInByGoogleRequest;
struct SignInByGoogleRequestDefaultTypeInternal;
extern SignInByGoogleRequestDefaultTypeInternal _SignInByGoogleRequest_default_instance_;
class SignInByWechatOauth2Request;
struct SignInByWechatOauth2RequestDefaultTypeInternal;
extern SignInByWechatOauth2RequestDefaultTypeInternal _SignInByWechatOauth2Request_default_instance_;
class SiteInstallRequest;
struct SiteInstallRequestDefaultTypeInternal;
extern SiteInstallRequestDefaultTypeInternal _SiteInstallRequest_default_instance_;
class SiteLayoutResponse;
struct SiteLayoutResponseDefaultTypeInternal;
extern SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
class SiteLayoutResponse_Author;
struct SiteLayoutResponse_AuthorDefaultTypeInternal;
extern SiteLayoutResponse_AuthorDefaultTypeInternal _SiteLayoutResponse_Author_default_instance_;
class SiteMaintenanceModeRequest;
struct SiteMaintenanceModeRequestDefaultTypeInternal;
extern SiteMaintenanceModeRequestDefaultTypeInternal _SiteMaintenanceModeRequest_default_instance_;
class SiteSetCopyrightRequest;
struct SiteSetCopyrightRequestDefaultTypeInternal;
extern SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
class SiteSetInfoRequest;
struct SiteSetInfoRequestDefaultTypeInternal;
extern SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
class SiteSetKeywordsRequest;
struct SiteSetKeywordsRequestDefaultTypeInternal;
extern SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
class SiteSetLogoRequest;
struct SiteSetLogoRequestDefaultTypeInternal;
extern SiteSetLogoRequestDefaultTypeInternal _SiteSetLogoRequest_default_instance_;
class SiteSmtpPingRequest;
struct SiteSmtpPingRequestDefaultTypeInternal;
extern SiteSmtpPingRequestDefaultTypeInternal _SiteSmtpPingRequest_default_instance_;
class SiteStatusResponse;
struct SiteStatusResponseDefaultTypeInternal;
extern SiteStatusResponseDefaultTypeInternal _SiteStatusResponse_default_instance_;
class SiteStatusResponse_Database;
struct SiteStatusResponse_DatabaseDefaultTypeInternal;
extern SiteStatusResponse_DatabaseDefaultTypeInternal _SiteStatusResponse_Database_default_instance_;
class SiteStatusResponse_Health;
struct SiteStatusResponse_HealthDefaultTypeInternal;
extern SiteStatusResponse_HealthDefaultTypeInternal _SiteStatusResponse_Health_default_instance_;
class SiteStatusResponse_MySql;
struct SiteStatusResponse_MySqlDefaultTypeInternal;
extern SiteStatusResponse_MySqlDefaultTypeInternal _SiteStatusResponse_MySql_default_instance_;
class SiteStatusResponse_OpenSearch;
struct SiteStatusResponse_OpenSearchDefaultTypeInternal;
extern SiteStatusResponse_OpenSearchDefaultTypeInternal _SiteStatusResponse_OpenSearch_default_instance_;
class SiteStatusResponse_PostgreSql;
struct SiteStatusResponse_PostgreSqlDefaultTypeInternal;
extern SiteStatusResponse_PostgreSqlDefaultTypeInternal _SiteStatusResponse_PostgreSql_default_instance_;
class SiteStatusResponse_RabbitMq;
struct SiteStatusResponse_RabbitMqDefaultTypeInternal;
extern SiteStatusResponse_RabbitMqDefaultTypeInternal _SiteStatusResponse_RabbitMq_default_instance_;
class SiteStatusResponse_Redis;
struct SiteStatusResponse_RedisDefaultTypeInternal;
extern SiteStatusResponse_RedisDefaultTypeInternal _SiteStatusResponse_Redis_default_instance_;
class SiteStatusResponse_Redis_Item;
struct SiteStatusResponse_Redis_ItemDefaultTypeInternal;
extern SiteStatusResponse_Redis_ItemDefaultTypeInternal _SiteStatusResponse_Redis_Item_default_instance_;
class SiteStatusResponse_System;
struct SiteStatusResponse_SystemDefaultTypeInternal;
extern SiteStatusResponse_SystemDefaultTypeInternal _SiteStatusResponse_System_default_instance_;
class SiteTwilioPingRequest;
struct SiteTwilioPingRequestDefaultTypeInternal;
extern SiteTwilioPingRequestDefaultTypeInternal _SiteTwilioPingRequest_default_instance_;
class SitemapPingRequest;
struct SitemapPingRequestDefaultTypeInternal;
extern SitemapPingRequestDefaultTypeInternal _SitemapPingRequest_default_instance_;
class SmsTask;
struct SmsTaskDefaultTypeInternal;
extern SmsTaskDefaultTypeInternal _SmsTask_default_instance_;
class SmtpProfile;
struct SmtpProfileDefaultTypeInternal;
extern SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
class TagCreateRequest;
struct TagCreateRequestDefaultTypeInternal;
extern TagCreateRequestDefaultTypeInternal _TagCreateRequest_default_instance_;
class TagIndexResponse;
struct TagIndexResponseDefaultTypeInternal;
extern TagIndexResponseDefaultTypeInternal _TagIndexResponse_default_instance_;
class TagIndexResponse_Item;
struct TagIndexResponse_ItemDefaultTypeInternal;
extern TagIndexResponse_ItemDefaultTypeInternal _TagIndexResponse_Item_default_instance_;
class TagUpdateRequest;
struct TagUpdateRequestDefaultTypeInternal;
extern TagUpdateRequestDefaultTypeInternal _TagUpdateRequest_default_instance_;
class TwilioProfile;
struct TwilioProfileDefaultTypeInternal;
extern TwilioProfileDefaultTypeInternal _TwilioProfile_default_instance_;
class UserChangePasswordRequest;
struct UserChangePasswordRequestDefaultTypeInternal;
extern UserChangePasswordRequestDefaultTypeInternal _UserChangePasswordRequest_default_instance_;
class UserDetail;
struct UserDetailDefaultTypeInternal;
extern UserDetailDefaultTypeInternal _UserDetail_default_instance_;
class UserGetProfileResponse;
struct UserGetProfileResponseDefaultTypeInternal;
extern UserGetProfileResponseDefaultTypeInternal _UserGetProfileResponse_default_instance_;
class UserIndexResponse;
struct UserIndexResponseDefaultTypeInternal;
extern UserIndexResponseDefaultTypeInternal _UserIndexResponse_default_instance_;
class UserIndexResponse_Item;
struct UserIndexResponse_ItemDefaultTypeInternal;
extern UserIndexResponse_ItemDefaultTypeInternal _UserIndexResponse_Item_default_instance_;
class UserLogsResponse;
struct UserLogsResponseDefaultTypeInternal;
extern UserLogsResponseDefaultTypeInternal _UserLogsResponse_default_instance_;
class UserLogsResponse_Item;
struct UserLogsResponse_ItemDefaultTypeInternal;
extern UserLogsResponse_ItemDefaultTypeInternal _UserLogsResponse_Item_default_instance_;
class UserQueryRequest;
struct UserQueryRequestDefaultTypeInternal;
extern UserQueryRequestDefaultTypeInternal _UserQueryRequest_default_instance_;
class UserResetPasswordRequest;
struct UserResetPasswordRequestDefaultTypeInternal;
extern UserResetPasswordRequestDefaultTypeInternal _UserResetPasswordRequest_default_instance_;
class UserSetPasswordRequest;
struct UserSetPasswordRequestDefaultTypeInternal;
extern UserSetPasswordRequestDefaultTypeInternal _UserSetPasswordRequest_default_instance_;
class UserSetProfileRequest;
struct UserSetProfileRequestDefaultTypeInternal;
extern UserSetProfileRequestDefaultTypeInternal _UserSetProfileRequest_default_instance_;
class UserSignInRequest;
struct UserSignInRequestDefaultTypeInternal;
extern UserSignInRequestDefaultTypeInternal _UserSignInRequest_default_instance_;
class UserSignInResponse;
struct UserSignInResponseDefaultTypeInternal;
extern UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
class UserSignUpRequest;
struct UserSignUpRequestDefaultTypeInternal;
extern UserSignUpRequestDefaultTypeInternal _UserSignUpRequest_default_instance_;
class UserTokenRequest;
struct UserTokenRequestDefaultTypeInternal;
extern UserTokenRequestDefaultTypeInternal _UserTokenRequest_default_instance_;
class WechatAllMiniProgramUserResponse;
struct WechatAllMiniProgramUserResponseDefaultTypeInternal;
extern WechatAllMiniProgramUserResponseDefaultTypeInternal _WechatAllMiniProgramUserResponse_default_instance_;
class WechatAllMiniProgramUserResponse_Item;
struct WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal;
extern WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal _WechatAllMiniProgramUserResponse_Item_default_instance_;
class WechatAllOauth2UserResponse;
struct WechatAllOauth2UserResponseDefaultTypeInternal;
extern WechatAllOauth2UserResponseDefaultTypeInternal _WechatAllOauth2UserResponse_default_instance_;
class WechatAllOauth2UserResponse_Item;
struct WechatAllOauth2UserResponse_ItemDefaultTypeInternal;
extern WechatAllOauth2UserResponse_ItemDefaultTypeInternal _WechatAllOauth2UserResponse_Item_default_instance_;
class WechatMiniProgramUser;
struct WechatMiniProgramUserDefaultTypeInternal;
extern WechatMiniProgramUserDefaultTypeInternal _WechatMiniProgramUser_default_instance_;
class WechatOauth2SignInStateResponse;
struct WechatOauth2SignInStateResponseDefaultTypeInternal;
extern WechatOauth2SignInStateResponseDefaultTypeInternal _WechatOauth2SignInStateResponse_default_instance_;
class WechatOauth2SignInUrlRequest;
struct WechatOauth2SignInUrlRequestDefaultTypeInternal;
extern WechatOauth2SignInUrlRequestDefaultTypeInternal _WechatOauth2SignInUrlRequest_default_instance_;
class WechatUserBindByAccountRequest;
struct WechatUserBindByAccountRequestDefaultTypeInternal;
extern WechatUserBindByAccountRequestDefaultTypeInternal _WechatUserBindByAccountRequest_default_instance_;
class WechatUserBindByIdRequest;
struct WechatUserBindByIdRequestDefaultTypeInternal;
extern WechatUserBindByIdRequestDefaultTypeInternal _WechatUserBindByIdRequest_default_instance_;
class WechatUserQueryByOpenIdRequest;
struct WechatUserQueryByOpenIdRequestDefaultTypeInternal;
extern WechatUserQueryByOpenIdRequestDefaultTypeInternal _WechatUserQueryByOpenIdRequest_default_instance_;
class WechatUserQueryByUnionIdRequest;
struct WechatUserQueryByUnionIdRequestDefaultTypeInternal;
extern WechatUserQueryByUnionIdRequestDefaultTypeInternal _WechatUserQueryByUnionIdRequest_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template <>
::palm::nut::v1::AttachmentIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::AttachmentIndexResponse>(Arena*);
template <>
::palm::nut::v1::AttachmentIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::AttachmentIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::AttachmentShowRequest* Arena::CreateMaybeMessage<::palm::nut::v1::AttachmentShowRequest>(Arena*);
template <>
::palm::nut::v1::AttachmentShowResponse* Arena::CreateMaybeMessage<::palm::nut::v1::AttachmentShowResponse>(Arena*);
template <>
::palm::nut::v1::BaiduProfile* Arena::CreateMaybeMessage<::palm::nut::v1::BaiduProfile>(Arena*);
template <>
::palm::nut::v1::BaiduProfile_SiteVerify* Arena::CreateMaybeMessage<::palm::nut::v1::BaiduProfile_SiteVerify>(Arena*);
template <>
::palm::nut::v1::CategoryCreateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::CategoryCreateRequest>(Arena*);
template <>
::palm::nut::v1::CategoryIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::CategoryIndexResponse>(Arena*);
template <>
::palm::nut::v1::CategoryIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::CategoryIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::CategoryUpdateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::CategoryUpdateRequest>(Arena*);
template <>
::palm::nut::v1::EmailTask* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask>(Arena*);
template <>
::palm::nut::v1::EmailTask_Address* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask_Address>(Arena*);
template <>
::palm::nut::v1::EmailTask_Attachment* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask_Attachment>(Arena*);
template <>
::palm::nut::v1::EmailTask_Body* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask_Body>(Arena*);
template <>
::palm::nut::v1::GoogleProfile* Arena::CreateMaybeMessage<::palm::nut::v1::GoogleProfile>(Arena*);
template <>
::palm::nut::v1::GoogleProfile_ReCaptcha* Arena::CreateMaybeMessage<::palm::nut::v1::GoogleProfile_ReCaptcha>(Arena*);
template <>
::palm::nut::v1::GoogleSignInUrlRequest* Arena::CreateMaybeMessage<::palm::nut::v1::GoogleSignInUrlRequest>(Arena*);
template <>
::palm::nut::v1::GoogleSignInUrlResponse* Arena::CreateMaybeMessage<::palm::nut::v1::GoogleSignInUrlResponse>(Arena*);
template <>
::palm::nut::v1::IdRequest* Arena::CreateMaybeMessage<::palm::nut::v1::IdRequest>(Arena*);
template <>
::palm::nut::v1::IndexNotificationResponse* Arena::CreateMaybeMessage<::palm::nut::v1::IndexNotificationResponse>(Arena*);
template <>
::palm::nut::v1::IndexNotificationResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::IndexNotificationResponse_Item>(Arena*);
template <>
::palm::nut::v1::IndexNowPingRequest* Arena::CreateMaybeMessage<::palm::nut::v1::IndexNowPingRequest>(Arena*);
template <>
::palm::nut::v1::IndexNowProfile* Arena::CreateMaybeMessage<::palm::nut::v1::IndexNowProfile>(Arena*);
template <>
::palm::nut::v1::LeaveWordIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::LeaveWordIndexResponse>(Arena*);
template <>
::palm::nut::v1::LeaveWordIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::LeaveWordIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::LocaleByCodeRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleByCodeRequest>(Arena*);
template <>
::palm::nut::v1::LocaleByLangAndCodeRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleByLangAndCodeRequest>(Arena*);
template <>
::palm::nut::v1::LocaleByLangRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleByLangRequest>(Arena*);
template <>
::palm::nut::v1::LocaleCreateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleCreateRequest>(Arena*);
template <>
::palm::nut::v1::LocaleIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexResponse>(Arena*);
template <>
::palm::nut::v1::LocaleIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::LocaleListResponse* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleListResponse>(Arena*);
template <>
::palm::nut::v1::LocaleUpdateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleUpdateRequest>(Arena*);
template <>
::palm::nut::v1::MediaContent* Arena::CreateMaybeMessage<::palm::nut::v1::MediaContent>(Arena*);
template <>
::palm::nut::v1::Oauth2State* Arena::CreateMaybeMessage<::palm::nut::v1::Oauth2State>(Arena*);
template <>
::palm::nut::v1::Pager* Arena::CreateMaybeMessage<::palm::nut::v1::Pager>(Arena*);
template <>
::palm::nut::v1::Pagination* Arena::CreateMaybeMessage<::palm::nut::v1::Pagination>(Arena*);
template <>
::palm::nut::v1::ShorterLinkCreateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::ShorterLinkCreateRequest>(Arena*);
template <>
::palm::nut::v1::ShorterLinkIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::ShorterLinkIndexResponse>(Arena*);
template <>
::palm::nut::v1::ShorterLinkIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::ShorterLinkIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::ShorterLinkUpdateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::ShorterLinkUpdateRequest>(Arena*);
template <>
::palm::nut::v1::SignInByGoogleRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SignInByGoogleRequest>(Arena*);
template <>
::palm::nut::v1::SignInByWechatOauth2Request* Arena::CreateMaybeMessage<::palm::nut::v1::SignInByWechatOauth2Request>(Arena*);
template <>
::palm::nut::v1::SiteInstallRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteInstallRequest>(Arena*);
template <>
::palm::nut::v1::SiteLayoutResponse* Arena::CreateMaybeMessage<::palm::nut::v1::SiteLayoutResponse>(Arena*);
template <>
::palm::nut::v1::SiteLayoutResponse_Author* Arena::CreateMaybeMessage<::palm::nut::v1::SiteLayoutResponse_Author>(Arena*);
template <>
::palm::nut::v1::SiteMaintenanceModeRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteMaintenanceModeRequest>(Arena*);
template <>
::palm::nut::v1::SiteSetCopyrightRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetCopyrightRequest>(Arena*);
template <>
::palm::nut::v1::SiteSetInfoRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetInfoRequest>(Arena*);
template <>
::palm::nut::v1::SiteSetKeywordsRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetKeywordsRequest>(Arena*);
template <>
::palm::nut::v1::SiteSetLogoRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetLogoRequest>(Arena*);
template <>
::palm::nut::v1::SiteSmtpPingRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSmtpPingRequest>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_Database* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_Database>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_Health* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_Health>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_MySql* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_MySql>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_OpenSearch* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_OpenSearch>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_PostgreSql* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_PostgreSql>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_RabbitMq* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_RabbitMq>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_Redis* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_Redis>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_Redis_Item* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_Redis_Item>(Arena*);
template <>
::palm::nut::v1::SiteStatusResponse_System* Arena::CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_System>(Arena*);
template <>
::palm::nut::v1::SiteTwilioPingRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteTwilioPingRequest>(Arena*);
template <>
::palm::nut::v1::SitemapPingRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SitemapPingRequest>(Arena*);
template <>
::palm::nut::v1::SmsTask* Arena::CreateMaybeMessage<::palm::nut::v1::SmsTask>(Arena*);
template <>
::palm::nut::v1::SmtpProfile* Arena::CreateMaybeMessage<::palm::nut::v1::SmtpProfile>(Arena*);
template <>
::palm::nut::v1::TagCreateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::TagCreateRequest>(Arena*);
template <>
::palm::nut::v1::TagIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::TagIndexResponse>(Arena*);
template <>
::palm::nut::v1::TagIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::TagIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::TagUpdateRequest* Arena::CreateMaybeMessage<::palm::nut::v1::TagUpdateRequest>(Arena*);
template <>
::palm::nut::v1::TwilioProfile* Arena::CreateMaybeMessage<::palm::nut::v1::TwilioProfile>(Arena*);
template <>
::palm::nut::v1::UserChangePasswordRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserChangePasswordRequest>(Arena*);
template <>
::palm::nut::v1::UserDetail* Arena::CreateMaybeMessage<::palm::nut::v1::UserDetail>(Arena*);
template <>
::palm::nut::v1::UserGetProfileResponse* Arena::CreateMaybeMessage<::palm::nut::v1::UserGetProfileResponse>(Arena*);
template <>
::palm::nut::v1::UserIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::UserIndexResponse>(Arena*);
template <>
::palm::nut::v1::UserIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::UserIndexResponse_Item>(Arena*);
template <>
::palm::nut::v1::UserLogsResponse* Arena::CreateMaybeMessage<::palm::nut::v1::UserLogsResponse>(Arena*);
template <>
::palm::nut::v1::UserLogsResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::UserLogsResponse_Item>(Arena*);
template <>
::palm::nut::v1::UserQueryRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserQueryRequest>(Arena*);
template <>
::palm::nut::v1::UserResetPasswordRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserResetPasswordRequest>(Arena*);
template <>
::palm::nut::v1::UserSetPasswordRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserSetPasswordRequest>(Arena*);
template <>
::palm::nut::v1::UserSetProfileRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserSetProfileRequest>(Arena*);
template <>
::palm::nut::v1::UserSignInRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserSignInRequest>(Arena*);
template <>
::palm::nut::v1::UserSignInResponse* Arena::CreateMaybeMessage<::palm::nut::v1::UserSignInResponse>(Arena*);
template <>
::palm::nut::v1::UserSignUpRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserSignUpRequest>(Arena*);
template <>
::palm::nut::v1::UserTokenRequest* Arena::CreateMaybeMessage<::palm::nut::v1::UserTokenRequest>(Arena*);
template <>
::palm::nut::v1::WechatAllMiniProgramUserResponse* Arena::CreateMaybeMessage<::palm::nut::v1::WechatAllMiniProgramUserResponse>(Arena*);
template <>
::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::WechatAllMiniProgramUserResponse_Item>(Arena*);
template <>
::palm::nut::v1::WechatAllOauth2UserResponse* Arena::CreateMaybeMessage<::palm::nut::v1::WechatAllOauth2UserResponse>(Arena*);
template <>
::palm::nut::v1::WechatAllOauth2UserResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::WechatAllOauth2UserResponse_Item>(Arena*);
template <>
::palm::nut::v1::WechatMiniProgramUser* Arena::CreateMaybeMessage<::palm::nut::v1::WechatMiniProgramUser>(Arena*);
template <>
::palm::nut::v1::WechatOauth2SignInStateResponse* Arena::CreateMaybeMessage<::palm::nut::v1::WechatOauth2SignInStateResponse>(Arena*);
template <>
::palm::nut::v1::WechatOauth2SignInUrlRequest* Arena::CreateMaybeMessage<::palm::nut::v1::WechatOauth2SignInUrlRequest>(Arena*);
template <>
::palm::nut::v1::WechatUserBindByAccountRequest* Arena::CreateMaybeMessage<::palm::nut::v1::WechatUserBindByAccountRequest>(Arena*);
template <>
::palm::nut::v1::WechatUserBindByIdRequest* Arena::CreateMaybeMessage<::palm::nut::v1::WechatUserBindByIdRequest>(Arena*);
template <>
::palm::nut::v1::WechatUserQueryByOpenIdRequest* Arena::CreateMaybeMessage<::palm::nut::v1::WechatUserQueryByOpenIdRequest>(Arena*);
template <>
::palm::nut::v1::WechatUserQueryByUnionIdRequest* Arena::CreateMaybeMessage<::palm::nut::v1::WechatUserQueryByUnionIdRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace palm {
namespace nut {
namespace v1 {
enum MediaContent_Editor : int {
  MediaContent_Editor_TEXTAREA = 0,
  MediaContent_Editor_QUILL = 1,
  MediaContent_Editor_MediaContent_Editor_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MediaContent_Editor_MediaContent_Editor_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MediaContent_Editor_IsValid(int value);
constexpr MediaContent_Editor MediaContent_Editor_Editor_MIN = static_cast<MediaContent_Editor>(0);
constexpr MediaContent_Editor MediaContent_Editor_Editor_MAX = static_cast<MediaContent_Editor>(1);
constexpr int MediaContent_Editor_Editor_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MediaContent_Editor_descriptor();
template <typename T>
const std::string& MediaContent_Editor_Name(T value) {
  static_assert(std::is_same<T, MediaContent_Editor>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Editor_Name().");
  return MediaContent_Editor_Name(static_cast<MediaContent_Editor>(value));
}
template <>
inline const std::string& MediaContent_Editor_Name(MediaContent_Editor value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<MediaContent_Editor_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MediaContent_Editor_Parse(absl::string_view name, MediaContent_Editor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaContent_Editor>(
      MediaContent_Editor_descriptor(), name, value);
}
enum MediaContent_Status : int {
  MediaContent_Status_Published = 0,
  MediaContent_Status_Draft = 1,
  MediaContent_Status_Pending = 2,
  MediaContent_Status_Private = 3,
  MediaContent_Status_Future = 4,
  MediaContent_Status_Trash = 99,
  MediaContent_Status_MediaContent_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MediaContent_Status_MediaContent_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MediaContent_Status_IsValid(int value);
constexpr MediaContent_Status MediaContent_Status_Status_MIN = static_cast<MediaContent_Status>(0);
constexpr MediaContent_Status MediaContent_Status_Status_MAX = static_cast<MediaContent_Status>(99);
constexpr int MediaContent_Status_Status_ARRAYSIZE = 99 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MediaContent_Status_descriptor();
template <typename T>
const std::string& MediaContent_Status_Name(T value) {
  static_assert(std::is_same<T, MediaContent_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(MediaContent_Status_descriptor(), value);
}
inline bool MediaContent_Status_Parse(absl::string_view name, MediaContent_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaContent_Status>(
      MediaContent_Status_descriptor(), name, value);
}
enum UserLogsResponse_Item_Level : int {
  UserLogsResponse_Item_Level_DEBUG = 0,
  UserLogsResponse_Item_Level_INFO = 1,
  UserLogsResponse_Item_Level_WARNING = 2,
  UserLogsResponse_Item_Level_ERROR = 3,
  UserLogsResponse_Item_Level_PANIC = 4,
  UserLogsResponse_Item_Level_UserLogsResponse_Item_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserLogsResponse_Item_Level_UserLogsResponse_Item_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserLogsResponse_Item_Level_IsValid(int value);
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item_Level_Level_MIN = static_cast<UserLogsResponse_Item_Level>(0);
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item_Level_Level_MAX = static_cast<UserLogsResponse_Item_Level>(4);
constexpr int UserLogsResponse_Item_Level_Level_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
UserLogsResponse_Item_Level_descriptor();
template <typename T>
const std::string& UserLogsResponse_Item_Level_Name(T value) {
  static_assert(std::is_same<T, UserLogsResponse_Item_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return UserLogsResponse_Item_Level_Name(static_cast<UserLogsResponse_Item_Level>(value));
}
template <>
inline const std::string& UserLogsResponse_Item_Level_Name(UserLogsResponse_Item_Level value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<UserLogsResponse_Item_Level_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool UserLogsResponse_Item_Level_Parse(absl::string_view name, UserLogsResponse_Item_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserLogsResponse_Item_Level>(
      UserLogsResponse_Item_Level_descriptor(), name, value);
}
enum SmtpProfile_AuthMethod : int {
  SmtpProfile_AuthMethod_None = 0,
  SmtpProfile_AuthMethod_Login = 1,
  SmtpProfile_AuthMethod_StartTls = 2,
  SmtpProfile_AuthMethod_SmtpProfile_AuthMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SmtpProfile_AuthMethod_SmtpProfile_AuthMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SmtpProfile_AuthMethod_IsValid(int value);
constexpr SmtpProfile_AuthMethod SmtpProfile_AuthMethod_AuthMethod_MIN = static_cast<SmtpProfile_AuthMethod>(0);
constexpr SmtpProfile_AuthMethod SmtpProfile_AuthMethod_AuthMethod_MAX = static_cast<SmtpProfile_AuthMethod>(2);
constexpr int SmtpProfile_AuthMethod_AuthMethod_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SmtpProfile_AuthMethod_descriptor();
template <typename T>
const std::string& SmtpProfile_AuthMethod_Name(T value) {
  static_assert(std::is_same<T, SmtpProfile_AuthMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthMethod_Name().");
  return SmtpProfile_AuthMethod_Name(static_cast<SmtpProfile_AuthMethod>(value));
}
template <>
inline const std::string& SmtpProfile_AuthMethod_Name(SmtpProfile_AuthMethod value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SmtpProfile_AuthMethod_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SmtpProfile_AuthMethod_Parse(absl::string_view name, SmtpProfile_AuthMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SmtpProfile_AuthMethod>(
      SmtpProfile_AuthMethod_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.IdRequest) */ {
 public:
  inline IdRequest() : IdRequest(nullptr) {}
  ~IdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdRequest(const IdRequest& from);
  IdRequest(IdRequest&& from) noexcept
    : IdRequest() {
    *this = ::std::move(from);
  }

  inline IdRequest& operator=(const IdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdRequest& operator=(IdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdRequest* internal_default_instance() {
    return reinterpret_cast<const IdRequest*>(
               &_IdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IdRequest& a, IdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdRequest& from) {
    IdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.IdRequest";
  }
  protected:
  explicit IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.IdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class Pager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.Pager) */ {
 public:
  inline Pager() : Pager(nullptr) {}
  ~Pager() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pager(const Pager& from);
  Pager(Pager&& from) noexcept
    : Pager() {
    *this = ::std::move(from);
  }

  inline Pager& operator=(const Pager& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pager& operator=(Pager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pager& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pager* internal_default_instance() {
    return reinterpret_cast<const Pager*>(
               &_Pager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pager& a, Pager& b) {
    a.Swap(&b);
  }
  inline void Swap(Pager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pager* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pager& from) {
    Pager::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.Pager";
  }
  protected:
  explicit Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // int64 page = 1;
  void clear_page() ;
  ::int64_t page() const;
  void set_page(::int64_t value);

  private:
  ::int64_t _internal_page() const;
  void _internal_set_page(::int64_t value);

  public:
  // int64 size = 2;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.Pager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t page_;
    ::int64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class Pagination final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  ~Pagination() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pagination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pagination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pagination& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pagination& from) {
    Pagination::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTotalFieldNumber = 3,
    kHasNextFieldNumber = 11,
    kHasPreviousFieldNumber = 12,
  };
  // int64 page = 1;
  void clear_page() ;
  ::int64_t page() const;
  void set_page(::int64_t value);

  private:
  ::int64_t _internal_page() const;
  void _internal_set_page(::int64_t value);

  public:
  // int64 size = 2;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // int64 total = 3;
  void clear_total() ;
  ::int64_t total() const;
  void set_total(::int64_t value);

  private:
  ::int64_t _internal_total() const;
  void _internal_set_total(::int64_t value);

  public:
  // bool has_next = 11;
  void clear_has_next() ;
  bool has_next() const;
  void set_has_next(bool value);

  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);

  public:
  // bool has_previous = 12;
  void clear_has_previous() ;
  bool has_previous() const;
  void set_has_previous(bool value);

  private:
  bool _internal_has_previous() const;
  void _internal_set_has_previous(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t page_;
    ::int64_t size_;
    ::int64_t total_;
    bool has_next_;
    bool has_previous_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class MediaContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.MediaContent) */ {
 public:
  inline MediaContent() : MediaContent(nullptr) {}
  ~MediaContent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MediaContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaContent(const MediaContent& from);
  MediaContent(MediaContent&& from) noexcept
    : MediaContent() {
    *this = ::std::move(from);
  }

  inline MediaContent& operator=(const MediaContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaContent& operator=(MediaContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaContent* internal_default_instance() {
    return reinterpret_cast<const MediaContent*>(
               &_MediaContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MediaContent& a, MediaContent& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaContent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaContent& from) {
    MediaContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.MediaContent";
  }
  protected:
  explicit MediaContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Editor = MediaContent_Editor;
  static constexpr Editor TEXTAREA = MediaContent_Editor_TEXTAREA;
  static constexpr Editor QUILL = MediaContent_Editor_QUILL;
  static inline bool Editor_IsValid(int value) {
    return MediaContent_Editor_IsValid(value);
  }
  static constexpr Editor Editor_MIN = MediaContent_Editor_Editor_MIN;
  static constexpr Editor Editor_MAX = MediaContent_Editor_Editor_MAX;
  static constexpr int Editor_ARRAYSIZE = MediaContent_Editor_Editor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Editor_descriptor() {
    return MediaContent_Editor_descriptor();
  }
  template <typename T>
  static inline const std::string& Editor_Name(T value) {
    return MediaContent_Editor_Name(value);
  }
  static inline bool Editor_Parse(absl::string_view name, Editor* value) {
    return MediaContent_Editor_Parse(name, value);
  }

  using Status = MediaContent_Status;
  static constexpr Status Published = MediaContent_Status_Published;
  static constexpr Status Draft = MediaContent_Status_Draft;
  static constexpr Status Pending = MediaContent_Status_Pending;
  static constexpr Status Private = MediaContent_Status_Private;
  static constexpr Status Future = MediaContent_Status_Future;
  static constexpr Status Trash = MediaContent_Status_Trash;
  static inline bool Status_IsValid(int value) {
    return MediaContent_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = MediaContent_Status_Status_MIN;
  static constexpr Status Status_MAX = MediaContent_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = MediaContent_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
    return MediaContent_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return MediaContent_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return MediaContent_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kPublishedAtFieldNumber = 11,
    kEditorFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string body = 2;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // optional .google.protobuf.Timestamp published_at = 11;
  bool has_published_at() const;
  void clear_published_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_published_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_published_at();
  void set_allocated_published_at(::PROTOBUF_NAMESPACE_ID::Timestamp* published_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_published_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_published_at();
  public:
  void unsafe_arena_set_allocated_published_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* published_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_published_at();
  // .palm.nut.v1.MediaContent.Editor editor = 1;
  void clear_editor() ;
  ::palm::nut::v1::MediaContent_Editor editor() const;
  void set_editor(::palm::nut::v1::MediaContent_Editor value);

  private:
  ::palm::nut::v1::MediaContent_Editor _internal_editor() const;
  void _internal_set_editor(::palm::nut::v1::MediaContent_Editor value);

  public:
  // .palm.nut.v1.MediaContent.Status status = 3;
  void clear_status() ;
  ::palm::nut::v1::MediaContent_Status status() const;
  void set_status(::palm::nut::v1::MediaContent_Status value);

  private:
  ::palm::nut::v1::MediaContent_Status _internal_status() const;
  void _internal_set_status(::palm::nut::v1::MediaContent_Status value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.MediaContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* published_at_;
    int editor_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserDetail) */ {
 public:
  inline UserDetail() : UserDetail(nullptr) {}
  ~UserDetail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDetail(const UserDetail& from);
  UserDetail(UserDetail&& from) noexcept
    : UserDetail() {
    *this = ::std::move(from);
  }

  inline UserDetail& operator=(const UserDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDetail& operator=(UserDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDetail* internal_default_instance() {
    return reinterpret_cast<const UserDetail*>(
               &_UserDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserDetail& a, UserDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDetail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserDetail& from) {
    UserDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserDetail";
  }
  protected:
  explicit UserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kRealNameFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string real_name = 2;
  void clear_real_name() ;
  const std::string& real_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class Oauth2State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.Oauth2State) */ {
 public:
  inline Oauth2State() : Oauth2State(nullptr) {}
  ~Oauth2State() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oauth2State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oauth2State(const Oauth2State& from);
  Oauth2State(Oauth2State&& from) noexcept
    : Oauth2State() {
    *this = ::std::move(from);
  }

  inline Oauth2State& operator=(const Oauth2State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oauth2State& operator=(Oauth2State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oauth2State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oauth2State* internal_default_instance() {
    return reinterpret_cast<const Oauth2State*>(
               &_Oauth2State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Oauth2State& a, Oauth2State& b) {
    a.Swap(&b);
  }
  inline void Swap(Oauth2State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oauth2State* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oauth2State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oauth2State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oauth2State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oauth2State& from) {
    Oauth2State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oauth2State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.Oauth2State";
  }
  protected:
  explicit Oauth2State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGotoFieldNumber = 1,
    kHostFieldNumber = 2,
    kUserFieldNumber = 3,
    kIdFieldNumber = 9,
  };
  // string goto = 1;
  void clear_goto_() ;
  const std::string& goto_() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_goto_(Arg_&& arg, Args_... args);
  std::string* mutable_goto_();
  PROTOBUF_NODISCARD std::string* release_goto_();
  void set_allocated_goto_(std::string* ptr);

  private:
  const std::string& _internal_goto_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goto_(
      const std::string& value);
  std::string* _internal_mutable_goto_();

  public:
  // string host = 2;
  void clear_host() ;
  const std::string& host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // optional string user = 3;
  bool has_user() const;
  void clear_user() ;
  const std::string& user() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* ptr);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string id = 9;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.Oauth2State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goto__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserSignInRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserSignInRequest) */ {
 public:
  inline UserSignInRequest() : UserSignInRequest(nullptr) {}
  ~UserSignInRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSignInRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSignInRequest(const UserSignInRequest& from);
  UserSignInRequest(UserSignInRequest&& from) noexcept
    : UserSignInRequest() {
    *this = ::std::move(from);
  }

  inline UserSignInRequest& operator=(const UserSignInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignInRequest& operator=(UserSignInRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSignInRequest& default_instance() {
    return *internal_default_instance();
  }
  enum UserCase {
    kNickname = 1,
    kEmail = 2,
    USER_NOT_SET = 0,
  };

  static inline const UserSignInRequest* internal_default_instance() {
    return reinterpret_cast<const UserSignInRequest*>(
               &_UserSignInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserSignInRequest& a, UserSignInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignInRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignInRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSignInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSignInRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserSignInRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserSignInRequest& from) {
    UserSignInRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignInRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserSignInRequest";
  }
  protected:
  explicit UserSignInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 9,
    kTtlFieldNumber = 11,
    kNicknameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string password = 9;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .google.protobuf.Duration ttl = 11;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();
  // string nickname = 1;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 2;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  void clear_user();
  UserCase user_case() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserSignInRequest)
 private:
  class _Internal;
  void set_has_nickname();
  void set_has_email();

  inline bool has_user() const;
  inline void clear_has_user();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
    union UserUnion {
      constexpr UserUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    } user_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserQueryRequest) */ {
 public:
  inline UserQueryRequest() : UserQueryRequest(nullptr) {}
  ~UserQueryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserQueryRequest(const UserQueryRequest& from);
  UserQueryRequest(UserQueryRequest&& from) noexcept
    : UserQueryRequest() {
    *this = ::std::move(from);
  }

  inline UserQueryRequest& operator=(const UserQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQueryRequest& operator=(UserQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  enum UserCase {
    kNickname = 1,
    kEmail = 2,
    USER_NOT_SET = 0,
  };

  static inline const UserQueryRequest* internal_default_instance() {
    return reinterpret_cast<const UserQueryRequest*>(
               &_UserQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserQueryRequest& a, UserQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQueryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserQueryRequest& from) {
    UserQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserQueryRequest";
  }
  protected:
  explicit UserQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 9,
    kNicknameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string home = 9;
  void clear_home() ;
  const std::string& home() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // string nickname = 1;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 2;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  void clear_user();
  UserCase user_case() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserQueryRequest)
 private:
  class _Internal;
  void set_has_nickname();
  void set_has_email();

  inline bool has_user() const;
  inline void clear_has_user();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_;
    union UserUnion {
      constexpr UserUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    } user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserSignInResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserSignInResponse) */ {
 public:
  inline UserSignInResponse() : UserSignInResponse(nullptr) {}
  ~UserSignInResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSignInResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSignInResponse(const UserSignInResponse& from);
  UserSignInResponse(UserSignInResponse&& from) noexcept
    : UserSignInResponse() {
    *this = ::std::move(from);
  }

  inline UserSignInResponse& operator=(const UserSignInResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignInResponse& operator=(UserSignInResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSignInResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSignInResponse* internal_default_instance() {
    return reinterpret_cast<const UserSignInResponse*>(
               &_UserSignInResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserSignInResponse& a, UserSignInResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignInResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignInResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSignInResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSignInResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserSignInResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserSignInResponse& from) {
    UserSignInResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignInResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserSignInResponse";
  }
  protected:
  explicit UserSignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 11,
    kPermissionsFieldNumber = 12,
    kTokenFieldNumber = 1,
    kProviderTypeFieldNumber = 9,
    kUserFieldNumber = 2,
    kHasGoogleFieldNumber = 21,
    kHasWechatMiniProgramFieldNumber = 22,
    kHasWechatOauth2FieldNumber = 23,
  };
  // repeated string roles = 11;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, std::size_t size);
  void set_roles(int index, absl::string_view value);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, std::size_t size);
  void add_roles(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();

  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_roles();

  public:
  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 12;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  ::palm::rbac::v1::PermissionsResponse_Item* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
      mutable_permissions();
  private:
  const ::palm::rbac::v1::PermissionsResponse_Item& _internal_permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* _internal_add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>& _internal_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>* _internal_mutable_permissions();
  public:
  const ::palm::rbac::v1::PermissionsResponse_Item& permissions(int index) const;
  ::palm::rbac::v1::PermissionsResponse_Item* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
      permissions() const;
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string provider_type = 9;
  void clear_provider_type() ;
  const std::string& provider_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider_type(Arg_&& arg, Args_... args);
  std::string* mutable_provider_type();
  PROTOBUF_NODISCARD std::string* release_provider_type();
  void set_allocated_provider_type(std::string* ptr);

  private:
  const std::string& _internal_provider_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider_type(
      const std::string& value);
  std::string* _internal_mutable_provider_type();

  public:
  // .palm.nut.v1.UserIndexResponse.Item user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::palm::nut::v1::UserIndexResponse_Item& user() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::UserIndexResponse_Item* release_user();
  ::palm::nut::v1::UserIndexResponse_Item* mutable_user();
  void set_allocated_user(::palm::nut::v1::UserIndexResponse_Item* user);
  private:
  const ::palm::nut::v1::UserIndexResponse_Item& _internal_user() const;
  ::palm::nut::v1::UserIndexResponse_Item* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::palm::nut::v1::UserIndexResponse_Item* user);
  ::palm::nut::v1::UserIndexResponse_Item* unsafe_arena_release_user();
  // bool has_google = 21;
  void clear_has_google() ;
  bool has_google() const;
  void set_has_google(bool value);

  private:
  bool _internal_has_google() const;
  void _internal_set_has_google(bool value);

  public:
  // bool has_wechat_mini_program = 22;
  void clear_has_wechat_mini_program() ;
  bool has_wechat_mini_program() const;
  void set_has_wechat_mini_program(bool value);

  private:
  bool _internal_has_wechat_mini_program() const;
  void _internal_set_has_wechat_mini_program(bool value);

  public:
  // bool has_wechat_oauth2 = 23;
  void clear_has_wechat_oauth2() ;
  bool has_wechat_oauth2() const;
  void set_has_wechat_oauth2(bool value);

  private:
  bool _internal_has_wechat_oauth2() const;
  void _internal_set_has_wechat_oauth2(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserSignInResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item > permissions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_type_;
    ::palm::nut::v1::UserIndexResponse_Item* user_;
    bool has_google_;
    bool has_wechat_mini_program_;
    bool has_wechat_oauth2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserSignUpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserSignUpRequest) */ {
 public:
  inline UserSignUpRequest() : UserSignUpRequest(nullptr) {}
  ~UserSignUpRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSignUpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSignUpRequest(const UserSignUpRequest& from);
  UserSignUpRequest(UserSignUpRequest&& from) noexcept
    : UserSignUpRequest() {
    *this = ::std::move(from);
  }

  inline UserSignUpRequest& operator=(const UserSignUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSignUpRequest& operator=(UserSignUpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSignUpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSignUpRequest* internal_default_instance() {
    return reinterpret_cast<const UserSignUpRequest*>(
               &_UserSignUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserSignUpRequest& a, UserSignUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSignUpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSignUpRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSignUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSignUpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserSignUpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserSignUpRequest& from) {
    UserSignUpRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSignUpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserSignUpRequest";
  }
  protected:
  explicit UserSignUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kLangFieldNumber = 11,
    kTimezoneFieldNumber = 12,
    kHomeFieldNumber = 21,
  };
  // string real_name = 1;
  void clear_real_name() ;
  const std::string& real_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string password = 4;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string lang = 11;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string timezone = 12;
  void clear_timezone() ;
  const std::string& timezone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string home = 21;
  void clear_home() ;
  const std::string& home() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserSignUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserTokenRequest) */ {
 public:
  inline UserTokenRequest() : UserTokenRequest(nullptr) {}
  ~UserTokenRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserTokenRequest(const UserTokenRequest& from);
  UserTokenRequest(UserTokenRequest&& from) noexcept
    : UserTokenRequest() {
    *this = ::std::move(from);
  }

  inline UserTokenRequest& operator=(const UserTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTokenRequest& operator=(UserTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserTokenRequest* internal_default_instance() {
    return reinterpret_cast<const UserTokenRequest*>(
               &_UserTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserTokenRequest& a, UserTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserTokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserTokenRequest& from) {
    UserTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTokenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserTokenRequest";
  }
  protected:
  explicit UserTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserResetPasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserResetPasswordRequest) */ {
 public:
  inline UserResetPasswordRequest() : UserResetPasswordRequest(nullptr) {}
  ~UserResetPasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserResetPasswordRequest(const UserResetPasswordRequest& from);
  UserResetPasswordRequest(UserResetPasswordRequest&& from) noexcept
    : UserResetPasswordRequest() {
    *this = ::std::move(from);
  }

  inline UserResetPasswordRequest& operator=(const UserResetPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResetPasswordRequest& operator=(UserResetPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserResetPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserResetPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const UserResetPasswordRequest*>(
               &_UserResetPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserResetPasswordRequest& a, UserResetPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResetPasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResetPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserResetPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserResetPasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserResetPasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserResetPasswordRequest& from) {
    UserResetPasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResetPasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserResetPasswordRequest";
  }
  protected:
  explicit UserResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserResetPasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserSetPasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserSetPasswordRequest) */ {
 public:
  inline UserSetPasswordRequest() : UserSetPasswordRequest(nullptr) {}
  ~UserSetPasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSetPasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSetPasswordRequest(const UserSetPasswordRequest& from);
  UserSetPasswordRequest(UserSetPasswordRequest&& from) noexcept
    : UserSetPasswordRequest() {
    *this = ::std::move(from);
  }

  inline UserSetPasswordRequest& operator=(const UserSetPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSetPasswordRequest& operator=(UserSetPasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSetPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSetPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const UserSetPasswordRequest*>(
               &_UserSetPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserSetPasswordRequest& a, UserSetPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSetPasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSetPasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSetPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSetPasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserSetPasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserSetPasswordRequest& from) {
    UserSetPasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSetPasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserSetPasswordRequest";
  }
  protected:
  explicit UserSetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // int32 user = 1;
  void clear_user() ;
  ::int32_t user() const;
  void set_user(::int32_t value);

  private:
  ::int32_t _internal_user() const;
  void _internal_set_user(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserSetPasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::int32_t user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserSetProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserSetProfileRequest) */ {
 public:
  inline UserSetProfileRequest() : UserSetProfileRequest(nullptr) {}
  ~UserSetProfileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserSetProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSetProfileRequest(const UserSetProfileRequest& from);
  UserSetProfileRequest(UserSetProfileRequest&& from) noexcept
    : UserSetProfileRequest() {
    *this = ::std::move(from);
  }

  inline UserSetProfileRequest& operator=(const UserSetProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSetProfileRequest& operator=(UserSetProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserSetProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSetProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UserSetProfileRequest*>(
               &_UserSetProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UserSetProfileRequest& a, UserSetProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSetProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSetProfileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserSetProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserSetProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserSetProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserSetProfileRequest& from) {
    UserSetProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSetProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserSetProfileRequest";
  }
  protected:
  explicit UserSetProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kTimezoneFieldNumber = 8,
    kLangFieldNumber = 9,
    kWechatFieldNumber = 11,
    kPhoneFieldNumber = 12,
  };
  // string real_name = 1;
  void clear_real_name() ;
  const std::string& real_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string avatar = 2;
  void clear_avatar() ;
  const std::string& avatar() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* ptr);

  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(
      const std::string& value);
  std::string* _internal_mutable_avatar();

  public:
  // string timezone = 8;
  void clear_timezone() ;
  const std::string& timezone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string lang = 9;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string wechat = 11;
  void clear_wechat() ;
  const std::string& wechat() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wechat(Arg_&& arg, Args_... args);
  std::string* mutable_wechat();
  PROTOBUF_NODISCARD std::string* release_wechat();
  void set_allocated_wechat(std::string* ptr);

  private:
  const std::string& _internal_wechat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wechat(
      const std::string& value);
  std::string* _internal_mutable_wechat();

  public:
  // string phone = 12;
  void clear_phone() ;
  const std::string& phone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone(Arg_&& arg, Args_... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* ptr);

  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(
      const std::string& value);
  std::string* _internal_mutable_phone();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserSetProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wechat_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserGetProfileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserGetProfileResponse) */ {
 public:
  inline UserGetProfileResponse() : UserGetProfileResponse(nullptr) {}
  ~UserGetProfileResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserGetProfileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserGetProfileResponse(const UserGetProfileResponse& from);
  UserGetProfileResponse(UserGetProfileResponse&& from) noexcept
    : UserGetProfileResponse() {
    *this = ::std::move(from);
  }

  inline UserGetProfileResponse& operator=(const UserGetProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGetProfileResponse& operator=(UserGetProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserGetProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserGetProfileResponse* internal_default_instance() {
    return reinterpret_cast<const UserGetProfileResponse*>(
               &_UserGetProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UserGetProfileResponse& a, UserGetProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGetProfileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGetProfileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserGetProfileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserGetProfileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserGetProfileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserGetProfileResponse& from) {
    UserGetProfileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGetProfileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserGetProfileResponse";
  }
  protected:
  explicit UserGetProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kNicknameFieldNumber = 3,
    kEmailFieldNumber = 4,
    kTimezoneFieldNumber = 8,
    kLangFieldNumber = 9,
    kWechatFieldNumber = 11,
    kPhoneFieldNumber = 12,
  };
  // string real_name = 1;
  void clear_real_name() ;
  const std::string& real_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // string avatar = 2;
  void clear_avatar() ;
  const std::string& avatar() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* ptr);

  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(
      const std::string& value);
  std::string* _internal_mutable_avatar();

  public:
  // string nickname = 3;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string email = 4;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string timezone = 8;
  void clear_timezone() ;
  const std::string& timezone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string lang = 9;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string wechat = 11;
  void clear_wechat() ;
  const std::string& wechat() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wechat(Arg_&& arg, Args_... args);
  std::string* mutable_wechat();
  PROTOBUF_NODISCARD std::string* release_wechat();
  void set_allocated_wechat(std::string* ptr);

  private:
  const std::string& _internal_wechat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wechat(
      const std::string& value);
  std::string* _internal_mutable_wechat();

  public:
  // string phone = 12;
  void clear_phone() ;
  const std::string& phone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone(Arg_&& arg, Args_... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* ptr);

  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(
      const std::string& value);
  std::string* _internal_mutable_phone();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserGetProfileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wechat_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserLogsResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserLogsResponse.Item) */ {
 public:
  inline UserLogsResponse_Item() : UserLogsResponse_Item(nullptr) {}
  ~UserLogsResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserLogsResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogsResponse_Item(const UserLogsResponse_Item& from);
  UserLogsResponse_Item(UserLogsResponse_Item&& from) noexcept
    : UserLogsResponse_Item() {
    *this = ::std::move(from);
  }

  inline UserLogsResponse_Item& operator=(const UserLogsResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogsResponse_Item& operator=(UserLogsResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogsResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogsResponse_Item* internal_default_instance() {
    return reinterpret_cast<const UserLogsResponse_Item*>(
               &_UserLogsResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserLogsResponse_Item& a, UserLogsResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogsResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogsResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogsResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogsResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogsResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLogsResponse_Item& from) {
    UserLogsResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogsResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserLogsResponse.Item";
  }
  protected:
  explicit UserLogsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Level = UserLogsResponse_Item_Level;
  static constexpr Level DEBUG = UserLogsResponse_Item_Level_DEBUG;
  static constexpr Level INFO = UserLogsResponse_Item_Level_INFO;
  static constexpr Level WARNING = UserLogsResponse_Item_Level_WARNING;
  static constexpr Level ERROR = UserLogsResponse_Item_Level_ERROR;
  static constexpr Level PANIC = UserLogsResponse_Item_Level_PANIC;
  static inline bool Level_IsValid(int value) {
    return UserLogsResponse_Item_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = UserLogsResponse_Item_Level_Level_MIN;
  static constexpr Level Level_MAX = UserLogsResponse_Item_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = UserLogsResponse_Item_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Level_descriptor() {
    return UserLogsResponse_Item_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return UserLogsResponse_Item_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return UserLogsResponse_Item_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kMessageFieldNumber = 5,
    kResourceFieldNumber = 6,
    kCreatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // string ip = 3;
  void clear_ip() ;
  const std::string& ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .palm.rbac.v1.ResourcesResponse.Item resource = 6;
  bool has_resource() const;
  void clear_resource() ;
  const ::palm::rbac::v1::ResourcesResponse_Item& resource() const;
  PROTOBUF_NODISCARD ::palm::rbac::v1::ResourcesResponse_Item* release_resource();
  ::palm::rbac::v1::ResourcesResponse_Item* mutable_resource();
  void set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* resource);
  private:
  const ::palm::rbac::v1::ResourcesResponse_Item& _internal_resource() const;
  ::palm::rbac::v1::ResourcesResponse_Item* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::palm::rbac::v1::ResourcesResponse_Item* resource);
  ::palm::rbac::v1::ResourcesResponse_Item* unsafe_arena_release_resource();
  // .google.protobuf.Timestamp created_at = 11;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_id = 2;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // .palm.nut.v1.UserLogsResponse.Item.Level level = 4;
  void clear_level() ;
  ::palm::nut::v1::UserLogsResponse_Item_Level level() const;
  void set_level(::palm::nut::v1::UserLogsResponse_Item_Level value);

  private:
  ::palm::nut::v1::UserLogsResponse_Item_Level _internal_level() const;
  void _internal_set_level(::palm::nut::v1::UserLogsResponse_Item_Level value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserLogsResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::palm::rbac::v1::ResourcesResponse_Item* resource_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    ::int32_t id_;
    ::int32_t user_id_;
    int level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserLogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserLogsResponse) */ {
 public:
  inline UserLogsResponse() : UserLogsResponse(nullptr) {}
  ~UserLogsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogsResponse(const UserLogsResponse& from);
  UserLogsResponse(UserLogsResponse&& from) noexcept
    : UserLogsResponse() {
    *this = ::std::move(from);
  }

  inline UserLogsResponse& operator=(const UserLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogsResponse& operator=(UserLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogsResponse* internal_default_instance() {
    return reinterpret_cast<const UserLogsResponse*>(
               &_UserLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UserLogsResponse& a, UserLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLogsResponse& from) {
    UserLogsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserLogsResponse";
  }
  protected:
  explicit UserLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserLogsResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.nut.v1.UserLogsResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::UserLogsResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserLogsResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::UserLogsResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::UserLogsResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserLogsResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserLogsResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::UserLogsResponse_Item& items(int index) const;
  ::palm::nut::v1::UserLogsResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserLogsResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserLogsResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserChangePasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserChangePasswordRequest) */ {
 public:
  inline UserChangePasswordRequest() : UserChangePasswordRequest(nullptr) {}
  ~UserChangePasswordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserChangePasswordRequest(const UserChangePasswordRequest& from);
  UserChangePasswordRequest(UserChangePasswordRequest&& from) noexcept
    : UserChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline UserChangePasswordRequest& operator=(const UserChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserChangePasswordRequest& operator=(UserChangePasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserChangePasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const UserChangePasswordRequest*>(
               &_UserChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UserChangePasswordRequest& a, UserChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserChangePasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserChangePasswordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserChangePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserChangePasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserChangePasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserChangePasswordRequest& from) {
    UserChangePasswordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserChangePasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserChangePasswordRequest";
  }
  protected:
  explicit UserChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPasswordFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
  };
  // string current_password = 1;
  void clear_current_password() ;
  const std::string& current_password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_password(Arg_&& arg, Args_... args);
  std::string* mutable_current_password();
  PROTOBUF_NODISCARD std::string* release_current_password();
  void set_allocated_current_password(std::string* ptr);

  private:
  const std::string& _internal_current_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_password(
      const std::string& value);
  std::string* _internal_mutable_current_password();

  public:
  // string new_password = 2;
  void clear_new_password() ;
  const std::string& new_password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_password(Arg_&& arg, Args_... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* ptr);

  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(
      const std::string& value);
  std::string* _internal_mutable_new_password();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserChangePasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserIndexResponse.Item) */ {
 public:
  inline UserIndexResponse_Item() : UserIndexResponse_Item(nullptr) {}
  ~UserIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserIndexResponse_Item(const UserIndexResponse_Item& from);
  UserIndexResponse_Item(UserIndexResponse_Item&& from) noexcept
    : UserIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline UserIndexResponse_Item& operator=(const UserIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIndexResponse_Item& operator=(UserIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const UserIndexResponse_Item*>(
               &_UserIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UserIndexResponse_Item& a, UserIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserIndexResponse_Item& from) {
    UserIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserIndexResponse.Item";
  }
  protected:
  explicit UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kNicknameFieldNumber = 3,
    kRealNameFieldNumber = 4,
    kLastSignInIpFieldNumber = 12,
    kCurrentSignInIpFieldNumber = 14,
    kLangFieldNumber = 21,
    kTimezoneFieldNumber = 22,
    kAvatarFieldNumber = 23,
    kUpdatedAtFieldNumber = 9,
    kLastSignInAtFieldNumber = 11,
    kCurrentSignInAtFieldNumber = 13,
    kConfirmedAtFieldNumber = 27,
    kLockedAtFieldNumber = 28,
    kDeletedAtFieldNumber = 29,
    kIdFieldNumber = 1,
    kSignInCountFieldNumber = 19,
  };
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string nickname = 3;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string real_name = 4;
  void clear_real_name() ;
  const std::string& real_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_real_name(Arg_&& arg, Args_... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* ptr);

  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(
      const std::string& value);
  std::string* _internal_mutable_real_name();

  public:
  // optional string last_sign_in_ip = 12;
  bool has_last_sign_in_ip() const;
  void clear_last_sign_in_ip() ;
  const std::string& last_sign_in_ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_sign_in_ip(Arg_&& arg, Args_... args);
  std::string* mutable_last_sign_in_ip();
  PROTOBUF_NODISCARD std::string* release_last_sign_in_ip();
  void set_allocated_last_sign_in_ip(std::string* ptr);

  private:
  const std::string& _internal_last_sign_in_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_sign_in_ip(
      const std::string& value);
  std::string* _internal_mutable_last_sign_in_ip();

  public:
  // optional string current_sign_in_ip = 14;
  bool has_current_sign_in_ip() const;
  void clear_current_sign_in_ip() ;
  const std::string& current_sign_in_ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_sign_in_ip(Arg_&& arg, Args_... args);
  std::string* mutable_current_sign_in_ip();
  PROTOBUF_NODISCARD std::string* release_current_sign_in_ip();
  void set_allocated_current_sign_in_ip(std::string* ptr);

  private:
  const std::string& _internal_current_sign_in_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_sign_in_ip(
      const std::string& value);
  std::string* _internal_mutable_current_sign_in_ip();

  public:
  // string lang = 21;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string timezone = 22;
  void clear_timezone() ;
  const std::string& timezone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timezone(Arg_&& arg, Args_... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* ptr);

  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(
      const std::string& value);
  std::string* _internal_mutable_timezone();

  public:
  // string avatar = 23;
  void clear_avatar() ;
  const std::string& avatar() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* ptr);

  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(
      const std::string& value);
  std::string* _internal_mutable_avatar();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // optional .google.protobuf.Timestamp last_sign_in_at = 11;
  bool has_last_sign_in_at() const;
  void clear_last_sign_in_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_sign_in_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_sign_in_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_sign_in_at();
  void set_allocated_last_sign_in_at(::PROTOBUF_NAMESPACE_ID::Timestamp* last_sign_in_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_sign_in_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_sign_in_at();
  public:
  void unsafe_arena_set_allocated_last_sign_in_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_sign_in_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_sign_in_at();
  // optional .google.protobuf.Timestamp current_sign_in_at = 13;
  bool has_current_sign_in_at() const;
  void clear_current_sign_in_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& current_sign_in_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_current_sign_in_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_current_sign_in_at();
  void set_allocated_current_sign_in_at(::PROTOBUF_NAMESPACE_ID::Timestamp* current_sign_in_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_current_sign_in_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_current_sign_in_at();
  public:
  void unsafe_arena_set_allocated_current_sign_in_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* current_sign_in_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_current_sign_in_at();
  // optional .google.protobuf.Timestamp confirmed_at = 27;
  bool has_confirmed_at() const;
  void clear_confirmed_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& confirmed_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_confirmed_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_confirmed_at();
  void set_allocated_confirmed_at(::PROTOBUF_NAMESPACE_ID::Timestamp* confirmed_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_confirmed_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_confirmed_at();
  public:
  void unsafe_arena_set_allocated_confirmed_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* confirmed_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_confirmed_at();
  // optional .google.protobuf.Timestamp locked_at = 28;
  bool has_locked_at() const;
  void clear_locked_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& locked_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_locked_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_locked_at();
  void set_allocated_locked_at(::PROTOBUF_NAMESPACE_ID::Timestamp* locked_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_locked_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_locked_at();
  public:
  void unsafe_arena_set_allocated_locked_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* locked_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_locked_at();
  // optional .google.protobuf.Timestamp deleted_at = 29;
  bool has_deleted_at() const;
  void clear_deleted_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_deleted_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deleted_at();
  void set_allocated_deleted_at(::PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deleted_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deleted_at();
  public:
  void unsafe_arena_set_allocated_deleted_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deleted_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 sign_in_count = 19;
  void clear_sign_in_count() ;
  ::int32_t sign_in_count() const;
  void set_sign_in_count(::int32_t value);

  private:
  ::int32_t _internal_sign_in_count() const;
  void _internal_set_sign_in_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_sign_in_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_sign_in_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_sign_in_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* current_sign_in_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* confirmed_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* locked_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at_;
    ::int32_t id_;
    ::int32_t sign_in_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class UserIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.UserIndexResponse) */ {
 public:
  inline UserIndexResponse() : UserIndexResponse(nullptr) {}
  ~UserIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserIndexResponse(const UserIndexResponse& from);
  UserIndexResponse(UserIndexResponse&& from) noexcept
    : UserIndexResponse() {
    *this = ::std::move(from);
  }

  inline UserIndexResponse& operator=(const UserIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIndexResponse& operator=(UserIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIndexResponse* internal_default_instance() {
    return reinterpret_cast<const UserIndexResponse*>(
               &_UserIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UserIndexResponse& a, UserIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserIndexResponse& from) {
    UserIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.UserIndexResponse";
  }
  protected:
  explicit UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.nut.v1.UserIndexResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::UserIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::UserIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::UserIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::UserIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::UserIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.UserIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SignInByGoogleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SignInByGoogleRequest) */ {
 public:
  inline SignInByGoogleRequest() : SignInByGoogleRequest(nullptr) {}
  ~SignInByGoogleRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignInByGoogleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignInByGoogleRequest(const SignInByGoogleRequest& from);
  SignInByGoogleRequest(SignInByGoogleRequest&& from) noexcept
    : SignInByGoogleRequest() {
    *this = ::std::move(from);
  }

  inline SignInByGoogleRequest& operator=(const SignInByGoogleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInByGoogleRequest& operator=(SignInByGoogleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignInByGoogleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignInByGoogleRequest* internal_default_instance() {
    return reinterpret_cast<const SignInByGoogleRequest*>(
               &_SignInByGoogleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SignInByGoogleRequest& a, SignInByGoogleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInByGoogleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignInByGoogleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignInByGoogleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignInByGoogleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignInByGoogleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignInByGoogleRequest& from) {
    SignInByGoogleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInByGoogleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SignInByGoogleRequest";
  }
  protected:
  explicit SignInByGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 1,
    kCodeFieldNumber = 2,
    kStateFieldNumber = 3,
    kRedirectUriFieldNumber = 4,
    kNonceFieldNumber = 9,
    kTtlFieldNumber = 11,
  };
  // repeated string scopes = 1;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;

  public:
  void clear_scopes() ;
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, std::size_t size);
  void set_scopes(int index, absl::string_view value);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, std::size_t size);
  void add_scopes(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();

  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_scopes();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string state = 3;
  void clear_state() ;
  const std::string& state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string redirect_uri = 4;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // string nonce = 9;
  void clear_nonce() ;
  const std::string& nonce() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* ptr);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // .google.protobuf.Duration ttl = 11;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SignInByGoogleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class GoogleSignInUrlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.GoogleSignInUrlRequest) */ {
 public:
  inline GoogleSignInUrlRequest() : GoogleSignInUrlRequest(nullptr) {}
  ~GoogleSignInUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleSignInUrlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleSignInUrlRequest(const GoogleSignInUrlRequest& from);
  GoogleSignInUrlRequest(GoogleSignInUrlRequest&& from) noexcept
    : GoogleSignInUrlRequest() {
    *this = ::std::move(from);
  }

  inline GoogleSignInUrlRequest& operator=(const GoogleSignInUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSignInUrlRequest& operator=(GoogleSignInUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleSignInUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSignInUrlRequest* internal_default_instance() {
    return reinterpret_cast<const GoogleSignInUrlRequest*>(
               &_GoogleSignInUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GoogleSignInUrlRequest& a, GoogleSignInUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSignInUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSignInUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSignInUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSignInUrlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleSignInUrlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GoogleSignInUrlRequest& from) {
    GoogleSignInUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleSignInUrlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.GoogleSignInUrlRequest";
  }
  protected:
  explicit GoogleSignInUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectUriFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string redirect_uri = 1;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // .palm.nut.v1.Oauth2State state = 2;
  bool has_state() const;
  void clear_state() ;
  const ::palm::nut::v1::Oauth2State& state() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Oauth2State* release_state();
  ::palm::nut::v1::Oauth2State* mutable_state();
  void set_allocated_state(::palm::nut::v1::Oauth2State* state);
  private:
  const ::palm::nut::v1::Oauth2State& _internal_state() const;
  ::palm::nut::v1::Oauth2State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::palm::nut::v1::Oauth2State* state);
  ::palm::nut::v1::Oauth2State* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.GoogleSignInUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
    ::palm::nut::v1::Oauth2State* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class GoogleSignInUrlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.GoogleSignInUrlResponse) */ {
 public:
  inline GoogleSignInUrlResponse() : GoogleSignInUrlResponse(nullptr) {}
  ~GoogleSignInUrlResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleSignInUrlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleSignInUrlResponse(const GoogleSignInUrlResponse& from);
  GoogleSignInUrlResponse(GoogleSignInUrlResponse&& from) noexcept
    : GoogleSignInUrlResponse() {
    *this = ::std::move(from);
  }

  inline GoogleSignInUrlResponse& operator=(const GoogleSignInUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleSignInUrlResponse& operator=(GoogleSignInUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleSignInUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleSignInUrlResponse* internal_default_instance() {
    return reinterpret_cast<const GoogleSignInUrlResponse*>(
               &_GoogleSignInUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GoogleSignInUrlResponse& a, GoogleSignInUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleSignInUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleSignInUrlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleSignInUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleSignInUrlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleSignInUrlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GoogleSignInUrlResponse& from) {
    GoogleSignInUrlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleSignInUrlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.GoogleSignInUrlResponse";
  }
  protected:
  explicit GoogleSignInUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kNonceFieldNumber = 2,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string nonce = 2;
  void clear_nonce() ;
  const std::string& nonce() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* ptr);

  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(
      const std::string& value);
  std::string* _internal_mutable_nonce();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.GoogleSignInUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatUserBindByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatUserBindByIdRequest) */ {
 public:
  inline WechatUserBindByIdRequest() : WechatUserBindByIdRequest(nullptr) {}
  ~WechatUserBindByIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserBindByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatUserBindByIdRequest(const WechatUserBindByIdRequest& from);
  WechatUserBindByIdRequest(WechatUserBindByIdRequest&& from) noexcept
    : WechatUserBindByIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserBindByIdRequest& operator=(const WechatUserBindByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserBindByIdRequest& operator=(WechatUserBindByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserBindByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserBindByIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserBindByIdRequest*>(
               &_WechatUserBindByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WechatUserBindByIdRequest& a, WechatUserBindByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserBindByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserBindByIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserBindByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserBindByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatUserBindByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatUserBindByIdRequest& from) {
    WechatUserBindByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserBindByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatUserBindByIdRequest";
  }
  protected:
  explicit WechatUserBindByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kWechatUserIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // int32 wechat_user_id = 2;
  void clear_wechat_user_id() ;
  ::int32_t wechat_user_id() const;
  void set_wechat_user_id(::int32_t value);

  private:
  ::int32_t _internal_wechat_user_id() const;
  void _internal_set_wechat_user_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatUserBindByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t user_id_;
    ::int32_t wechat_user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatUserBindByAccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatUserBindByAccountRequest) */ {
 public:
  inline WechatUserBindByAccountRequest() : WechatUserBindByAccountRequest(nullptr) {}
  ~WechatUserBindByAccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserBindByAccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatUserBindByAccountRequest(const WechatUserBindByAccountRequest& from);
  WechatUserBindByAccountRequest(WechatUserBindByAccountRequest&& from) noexcept
    : WechatUserBindByAccountRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserBindByAccountRequest& operator=(const WechatUserBindByAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserBindByAccountRequest& operator=(WechatUserBindByAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserBindByAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserBindByAccountRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserBindByAccountRequest*>(
               &_WechatUserBindByAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WechatUserBindByAccountRequest& a, WechatUserBindByAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserBindByAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserBindByAccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserBindByAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserBindByAccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatUserBindByAccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatUserBindByAccountRequest& from) {
    WechatUserBindByAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserBindByAccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatUserBindByAccountRequest";
  }
  protected:
  explicit WechatUserBindByAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatUserBindByAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatUserQueryByOpenIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatUserQueryByOpenIdRequest) */ {
 public:
  inline WechatUserQueryByOpenIdRequest() : WechatUserQueryByOpenIdRequest(nullptr) {}
  ~WechatUserQueryByOpenIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserQueryByOpenIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatUserQueryByOpenIdRequest(const WechatUserQueryByOpenIdRequest& from);
  WechatUserQueryByOpenIdRequest(WechatUserQueryByOpenIdRequest&& from) noexcept
    : WechatUserQueryByOpenIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserQueryByOpenIdRequest& operator=(const WechatUserQueryByOpenIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserQueryByOpenIdRequest& operator=(WechatUserQueryByOpenIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserQueryByOpenIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserQueryByOpenIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserQueryByOpenIdRequest*>(
               &_WechatUserQueryByOpenIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WechatUserQueryByOpenIdRequest& a, WechatUserQueryByOpenIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserQueryByOpenIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserQueryByOpenIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserQueryByOpenIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserQueryByOpenIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatUserQueryByOpenIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatUserQueryByOpenIdRequest& from) {
    WechatUserQueryByOpenIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserQueryByOpenIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatUserQueryByOpenIdRequest";
  }
  protected:
  explicit WechatUserQueryByOpenIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kOpenIdFieldNumber = 2,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 2;
  void clear_open_id() ;
  const std::string& open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatUserQueryByOpenIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatUserQueryByUnionIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatUserQueryByUnionIdRequest) */ {
 public:
  inline WechatUserQueryByUnionIdRequest() : WechatUserQueryByUnionIdRequest(nullptr) {}
  ~WechatUserQueryByUnionIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatUserQueryByUnionIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatUserQueryByUnionIdRequest(const WechatUserQueryByUnionIdRequest& from);
  WechatUserQueryByUnionIdRequest(WechatUserQueryByUnionIdRequest&& from) noexcept
    : WechatUserQueryByUnionIdRequest() {
    *this = ::std::move(from);
  }

  inline WechatUserQueryByUnionIdRequest& operator=(const WechatUserQueryByUnionIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatUserQueryByUnionIdRequest& operator=(WechatUserQueryByUnionIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatUserQueryByUnionIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatUserQueryByUnionIdRequest* internal_default_instance() {
    return reinterpret_cast<const WechatUserQueryByUnionIdRequest*>(
               &_WechatUserQueryByUnionIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WechatUserQueryByUnionIdRequest& a, WechatUserQueryByUnionIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatUserQueryByUnionIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatUserQueryByUnionIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatUserQueryByUnionIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatUserQueryByUnionIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatUserQueryByUnionIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatUserQueryByUnionIdRequest& from) {
    WechatUserQueryByUnionIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatUserQueryByUnionIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatUserQueryByUnionIdRequest";
  }
  protected:
  explicit WechatUserQueryByUnionIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 1,
  };
  // string union_id = 1;
  void clear_union_id() ;
  const std::string& union_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatUserQueryByUnionIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr union_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatAllMiniProgramUserResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatAllMiniProgramUserResponse.Item) */ {
 public:
  inline WechatAllMiniProgramUserResponse_Item() : WechatAllMiniProgramUserResponse_Item(nullptr) {}
  ~WechatAllMiniProgramUserResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatAllMiniProgramUserResponse_Item(const WechatAllMiniProgramUserResponse_Item& from);
  WechatAllMiniProgramUserResponse_Item(WechatAllMiniProgramUserResponse_Item&& from) noexcept
    : WechatAllMiniProgramUserResponse_Item() {
    *this = ::std::move(from);
  }

  inline WechatAllMiniProgramUserResponse_Item& operator=(const WechatAllMiniProgramUserResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllMiniProgramUserResponse_Item& operator=(WechatAllMiniProgramUserResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllMiniProgramUserResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllMiniProgramUserResponse_Item* internal_default_instance() {
    return reinterpret_cast<const WechatAllMiniProgramUserResponse_Item*>(
               &_WechatAllMiniProgramUserResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(WechatAllMiniProgramUserResponse_Item& a, WechatAllMiniProgramUserResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllMiniProgramUserResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllMiniProgramUserResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllMiniProgramUserResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllMiniProgramUserResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatAllMiniProgramUserResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatAllMiniProgramUserResponse_Item& from) {
    WechatAllMiniProgramUserResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllMiniProgramUserResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatAllMiniProgramUserResponse.Item";
  }
  protected:
  explicit WechatAllMiniProgramUserResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionIdFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kOpenIdFieldNumber = 5,
    kNicknameFieldNumber = 11,
    kAvatarUrlFieldNumber = 12,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string union_id = 3;
  void clear_union_id() ;
  const std::string& union_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // string app_id = 4;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 5;
  void clear_open_id() ;
  const std::string& open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // optional string nickname = 11;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // optional string avatar_url = 12;
  bool has_avatar_url() const;
  void clear_avatar_url() ;
  const std::string& avatar_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_url(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* ptr);

  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(
      const std::string& value);
  std::string* _internal_mutable_avatar_url();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_id = 2;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatAllMiniProgramUserResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr union_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    ::int32_t id_;
    ::int32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatAllMiniProgramUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatAllMiniProgramUserResponse) */ {
 public:
  inline WechatAllMiniProgramUserResponse() : WechatAllMiniProgramUserResponse(nullptr) {}
  ~WechatAllMiniProgramUserResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatAllMiniProgramUserResponse(const WechatAllMiniProgramUserResponse& from);
  WechatAllMiniProgramUserResponse(WechatAllMiniProgramUserResponse&& from) noexcept
    : WechatAllMiniProgramUserResponse() {
    *this = ::std::move(from);
  }

  inline WechatAllMiniProgramUserResponse& operator=(const WechatAllMiniProgramUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllMiniProgramUserResponse& operator=(WechatAllMiniProgramUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllMiniProgramUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllMiniProgramUserResponse* internal_default_instance() {
    return reinterpret_cast<const WechatAllMiniProgramUserResponse*>(
               &_WechatAllMiniProgramUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WechatAllMiniProgramUserResponse& a, WechatAllMiniProgramUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllMiniProgramUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllMiniProgramUserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllMiniProgramUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllMiniProgramUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatAllMiniProgramUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatAllMiniProgramUserResponse& from) {
    WechatAllMiniProgramUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllMiniProgramUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatAllMiniProgramUserResponse";
  }
  protected:
  explicit WechatAllMiniProgramUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatAllMiniProgramUserResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.WechatAllMiniProgramUserResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllMiniProgramUserResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllMiniProgramUserResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item& items(int index) const;
  ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatAllMiniProgramUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatAllOauth2UserResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatAllOauth2UserResponse.Item) */ {
 public:
  inline WechatAllOauth2UserResponse_Item() : WechatAllOauth2UserResponse_Item(nullptr) {}
  ~WechatAllOauth2UserResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatAllOauth2UserResponse_Item(const WechatAllOauth2UserResponse_Item& from);
  WechatAllOauth2UserResponse_Item(WechatAllOauth2UserResponse_Item&& from) noexcept
    : WechatAllOauth2UserResponse_Item() {
    *this = ::std::move(from);
  }

  inline WechatAllOauth2UserResponse_Item& operator=(const WechatAllOauth2UserResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllOauth2UserResponse_Item& operator=(WechatAllOauth2UserResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllOauth2UserResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllOauth2UserResponse_Item* internal_default_instance() {
    return reinterpret_cast<const WechatAllOauth2UserResponse_Item*>(
               &_WechatAllOauth2UserResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WechatAllOauth2UserResponse_Item& a, WechatAllOauth2UserResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllOauth2UserResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllOauth2UserResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllOauth2UserResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllOauth2UserResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatAllOauth2UserResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatAllOauth2UserResponse_Item& from) {
    WechatAllOauth2UserResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllOauth2UserResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatAllOauth2UserResponse.Item";
  }
  protected:
  explicit WechatAllOauth2UserResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 17,
    kUnionIdFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kOpenIdFieldNumber = 5,
    kNicknameFieldNumber = 11,
    kCityFieldNumber = 13,
    kProvinceFieldNumber = 14,
    kCountryFieldNumber = 15,
    kHeadImgUrlFieldNumber = 16,
    kLangFieldNumber = 18,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSexFieldNumber = 12,
  };
  // repeated string privilege = 17;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;

  public:
  void clear_privilege() ;
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, std::size_t size);
  void set_privilege(int index, absl::string_view value);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, std::size_t size);
  void add_privilege(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& privilege() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_privilege();

  private:
  const std::string& _internal_privilege(int index) const;
  std::string* _internal_add_privilege();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_privilege() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_privilege();

  public:
  // string union_id = 3;
  void clear_union_id() ;
  const std::string& union_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // string app_id = 4;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 5;
  void clear_open_id() ;
  const std::string& open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string nickname = 11;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string city = 13;
  void clear_city() ;
  const std::string& city() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* ptr);

  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(
      const std::string& value);
  std::string* _internal_mutable_city();

  public:
  // string province = 14;
  void clear_province() ;
  const std::string& province() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_province(Arg_&& arg, Args_... args);
  std::string* mutable_province();
  PROTOBUF_NODISCARD std::string* release_province();
  void set_allocated_province(std::string* ptr);

  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(
      const std::string& value);
  std::string* _internal_mutable_province();

  public:
  // string country = 15;
  void clear_country() ;
  const std::string& country() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* ptr);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // optional string head_img_url = 16;
  bool has_head_img_url() const;
  void clear_head_img_url() ;
  const std::string& head_img_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_head_img_url(Arg_&& arg, Args_... args);
  std::string* mutable_head_img_url();
  PROTOBUF_NODISCARD std::string* release_head_img_url();
  void set_allocated_head_img_url(std::string* ptr);

  private:
  const std::string& _internal_head_img_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_img_url(
      const std::string& value);
  std::string* _internal_mutable_head_img_url();

  public:
  // string lang = 18;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_id = 2;
  void clear_user_id() ;
  ::int32_t user_id() const;
  void set_user_id(::int32_t value);

  private:
  ::int32_t _internal_user_id() const;
  void _internal_set_user_id(::int32_t value);

  public:
  // int32 sex = 12;
  void clear_sex() ;
  ::int32_t sex() const;
  void set_sex(::int32_t value);

  private:
  ::int32_t _internal_sex() const;
  void _internal_set_sex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatAllOauth2UserResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> privilege_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr union_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_img_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::int32_t id_;
    ::int32_t user_id_;
    ::int32_t sex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatAllOauth2UserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatAllOauth2UserResponse) */ {
 public:
  inline WechatAllOauth2UserResponse() : WechatAllOauth2UserResponse(nullptr) {}
  ~WechatAllOauth2UserResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatAllOauth2UserResponse(const WechatAllOauth2UserResponse& from);
  WechatAllOauth2UserResponse(WechatAllOauth2UserResponse&& from) noexcept
    : WechatAllOauth2UserResponse() {
    *this = ::std::move(from);
  }

  inline WechatAllOauth2UserResponse& operator=(const WechatAllOauth2UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatAllOauth2UserResponse& operator=(WechatAllOauth2UserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatAllOauth2UserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatAllOauth2UserResponse* internal_default_instance() {
    return reinterpret_cast<const WechatAllOauth2UserResponse*>(
               &_WechatAllOauth2UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(WechatAllOauth2UserResponse& a, WechatAllOauth2UserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatAllOauth2UserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatAllOauth2UserResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatAllOauth2UserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatAllOauth2UserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatAllOauth2UserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatAllOauth2UserResponse& from) {
    WechatAllOauth2UserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatAllOauth2UserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatAllOauth2UserResponse";
  }
  protected:
  explicit WechatAllOauth2UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WechatAllOauth2UserResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.WechatAllOauth2UserResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::WechatAllOauth2UserResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllOauth2UserResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::WechatAllOauth2UserResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::WechatAllOauth2UserResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllOauth2UserResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllOauth2UserResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::WechatAllOauth2UserResponse_Item& items(int index) const;
  ::palm::nut::v1::WechatAllOauth2UserResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllOauth2UserResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatAllOauth2UserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllOauth2UserResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SignInByWechatOauth2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SignInByWechatOauth2Request) */ {
 public:
  inline SignInByWechatOauth2Request() : SignInByWechatOauth2Request(nullptr) {}
  ~SignInByWechatOauth2Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignInByWechatOauth2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignInByWechatOauth2Request(const SignInByWechatOauth2Request& from);
  SignInByWechatOauth2Request(SignInByWechatOauth2Request&& from) noexcept
    : SignInByWechatOauth2Request() {
    *this = ::std::move(from);
  }

  inline SignInByWechatOauth2Request& operator=(const SignInByWechatOauth2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInByWechatOauth2Request& operator=(SignInByWechatOauth2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignInByWechatOauth2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignInByWechatOauth2Request* internal_default_instance() {
    return reinterpret_cast<const SignInByWechatOauth2Request*>(
               &_SignInByWechatOauth2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SignInByWechatOauth2Request& a, SignInByWechatOauth2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInByWechatOauth2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignInByWechatOauth2Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignInByWechatOauth2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignInByWechatOauth2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignInByWechatOauth2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignInByWechatOauth2Request& from) {
    SignInByWechatOauth2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInByWechatOauth2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SignInByWechatOauth2Request";
  }
  protected:
  explicit SignInByWechatOauth2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCodeFieldNumber = 2,
    kAppIdFieldNumber = 3,
    kTtlFieldNumber = 11,
    kLanguageFieldNumber = 8,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string app_id = 3;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // .google.protobuf.Duration ttl = 11;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();
  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
  void clear_language() ;
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language language() const;
  void set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  private:
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language _internal_language() const;
  void _internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SignInByWechatOauth2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
    int language_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2SignInStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatOauth2SignInStateResponse) */ {
 public:
  inline WechatOauth2SignInStateResponse() : WechatOauth2SignInStateResponse(nullptr) {}
  ~WechatOauth2SignInStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2SignInStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatOauth2SignInStateResponse(const WechatOauth2SignInStateResponse& from);
  WechatOauth2SignInStateResponse(WechatOauth2SignInStateResponse&& from) noexcept
    : WechatOauth2SignInStateResponse() {
    *this = ::std::move(from);
  }

  inline WechatOauth2SignInStateResponse& operator=(const WechatOauth2SignInStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2SignInStateResponse& operator=(WechatOauth2SignInStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2SignInStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2SignInStateResponse* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2SignInStateResponse*>(
               &_WechatOauth2SignInStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(WechatOauth2SignInStateResponse& a, WechatOauth2SignInStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2SignInStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2SignInStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2SignInStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2SignInStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatOauth2SignInStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatOauth2SignInStateResponse& from) {
    WechatOauth2SignInStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2SignInStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatOauth2SignInStateResponse";
  }
  protected:
  explicit WechatOauth2SignInStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatOauth2SignInStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2SignInUrlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatOauth2SignInUrlRequest) */ {
 public:
  inline WechatOauth2SignInUrlRequest() : WechatOauth2SignInUrlRequest(nullptr) {}
  ~WechatOauth2SignInUrlRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2SignInUrlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatOauth2SignInUrlRequest(const WechatOauth2SignInUrlRequest& from);
  WechatOauth2SignInUrlRequest(WechatOauth2SignInUrlRequest&& from) noexcept
    : WechatOauth2SignInUrlRequest() {
    *this = ::std::move(from);
  }

  inline WechatOauth2SignInUrlRequest& operator=(const WechatOauth2SignInUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2SignInUrlRequest& operator=(WechatOauth2SignInUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2SignInUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2SignInUrlRequest* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2SignInUrlRequest*>(
               &_WechatOauth2SignInUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(WechatOauth2SignInUrlRequest& a, WechatOauth2SignInUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2SignInUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2SignInUrlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2SignInUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2SignInUrlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatOauth2SignInUrlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatOauth2SignInUrlRequest& from) {
    WechatOauth2SignInUrlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2SignInUrlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatOauth2SignInUrlRequest";
  }
  protected:
  explicit WechatOauth2SignInUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kRedirectUriFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string redirect_uri = 2;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
  void clear_language() ;
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language language() const;
  void set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  private:
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language _internal_language() const;
  void _internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatOauth2SignInUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
    int language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class WechatMiniProgramUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatMiniProgramUser) */ {
 public:
  inline WechatMiniProgramUser() : WechatMiniProgramUser(nullptr) {}
  ~WechatMiniProgramUser() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatMiniProgramUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatMiniProgramUser(const WechatMiniProgramUser& from);
  WechatMiniProgramUser(WechatMiniProgramUser&& from) noexcept
    : WechatMiniProgramUser() {
    *this = ::std::move(from);
  }

  inline WechatMiniProgramUser& operator=(const WechatMiniProgramUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatMiniProgramUser& operator=(WechatMiniProgramUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatMiniProgramUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatMiniProgramUser* internal_default_instance() {
    return reinterpret_cast<const WechatMiniProgramUser*>(
               &_WechatMiniProgramUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(WechatMiniProgramUser& a, WechatMiniProgramUser& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatMiniProgramUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatMiniProgramUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatMiniProgramUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatMiniProgramUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatMiniProgramUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatMiniProgramUser& from) {
    WechatMiniProgramUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatMiniProgramUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.WechatMiniProgramUser";
  }
  protected:
  explicit WechatMiniProgramUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 11,
    kOpenIdFieldNumber = 12,
    kUnionIdFieldNumber = 13,
    kNicknameFieldNumber = 21,
    kAvatarUrlFieldNumber = 22,
  };
  // string app_id = 11;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string open_id = 12;
  void clear_open_id() ;
  const std::string& open_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_open_id(Arg_&& arg, Args_... args);
  std::string* mutable_open_id();
  PROTOBUF_NODISCARD std::string* release_open_id();
  void set_allocated_open_id(std::string* ptr);

  private:
  const std::string& _internal_open_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_id(
      const std::string& value);
  std::string* _internal_mutable_open_id();

  public:
  // string union_id = 13;
  void clear_union_id() ;
  const std::string& union_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_union_id(Arg_&& arg, Args_... args);
  std::string* mutable_union_id();
  PROTOBUF_NODISCARD std::string* release_union_id();
  void set_allocated_union_id(std::string* ptr);

  private:
  const std::string& _internal_union_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_union_id(
      const std::string& value);
  std::string* _internal_mutable_union_id();

  public:
  // optional string nickname = 21;
  bool has_nickname() const;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // optional string avatar_url = 22;
  bool has_avatar_url() const;
  void clear_avatar_url() ;
  const std::string& avatar_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_url(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* ptr);

  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(
      const std::string& value);
  std::string* _internal_mutable_avatar_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatMiniProgramUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr union_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class AttachmentShowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.AttachmentShowRequest) */ {
 public:
  inline AttachmentShowRequest() : AttachmentShowRequest(nullptr) {}
  ~AttachmentShowRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentShowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttachmentShowRequest(const AttachmentShowRequest& from);
  AttachmentShowRequest(AttachmentShowRequest&& from) noexcept
    : AttachmentShowRequest() {
    *this = ::std::move(from);
  }

  inline AttachmentShowRequest& operator=(const AttachmentShowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentShowRequest& operator=(AttachmentShowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentShowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentShowRequest* internal_default_instance() {
    return reinterpret_cast<const AttachmentShowRequest*>(
               &_AttachmentShowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AttachmentShowRequest& a, AttachmentShowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentShowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentShowRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentShowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentShowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttachmentShowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttachmentShowRequest& from) {
    AttachmentShowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentShowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.AttachmentShowRequest";
  }
  protected:
  explicit AttachmentShowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtlFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .google.protobuf.Duration ttl = 2;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.AttachmentShowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class AttachmentShowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.AttachmentShowResponse) */ {
 public:
  inline AttachmentShowResponse() : AttachmentShowResponse(nullptr) {}
  ~AttachmentShowResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentShowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttachmentShowResponse(const AttachmentShowResponse& from);
  AttachmentShowResponse(AttachmentShowResponse&& from) noexcept
    : AttachmentShowResponse() {
    *this = ::std::move(from);
  }

  inline AttachmentShowResponse& operator=(const AttachmentShowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentShowResponse& operator=(AttachmentShowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentShowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentShowResponse* internal_default_instance() {
    return reinterpret_cast<const AttachmentShowResponse*>(
               &_AttachmentShowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AttachmentShowResponse& a, AttachmentShowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentShowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentShowResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentShowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentShowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttachmentShowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttachmentShowResponse& from) {
    AttachmentShowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentShowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.AttachmentShowResponse";
  }
  protected:
  explicit AttachmentShowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kItemFieldNumber = 1,
  };
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .palm.nut.v1.AttachmentIndexResponse.Item item = 1;
  bool has_item() const;
  void clear_item() ;
  const ::palm::nut::v1::AttachmentIndexResponse_Item& item() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::AttachmentIndexResponse_Item* release_item();
  ::palm::nut::v1::AttachmentIndexResponse_Item* mutable_item();
  void set_allocated_item(::palm::nut::v1::AttachmentIndexResponse_Item* item);
  private:
  const ::palm::nut::v1::AttachmentIndexResponse_Item& _internal_item() const;
  ::palm::nut::v1::AttachmentIndexResponse_Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::palm::nut::v1::AttachmentIndexResponse_Item* item);
  ::palm::nut::v1::AttachmentIndexResponse_Item* unsafe_arena_release_item();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.AttachmentShowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::palm::nut::v1::AttachmentIndexResponse_Item* item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class AttachmentIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.AttachmentIndexResponse.Item) */ {
 public:
  inline AttachmentIndexResponse_Item() : AttachmentIndexResponse_Item(nullptr) {}
  ~AttachmentIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttachmentIndexResponse_Item(const AttachmentIndexResponse_Item& from);
  AttachmentIndexResponse_Item(AttachmentIndexResponse_Item&& from) noexcept
    : AttachmentIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline AttachmentIndexResponse_Item& operator=(const AttachmentIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentIndexResponse_Item& operator=(AttachmentIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const AttachmentIndexResponse_Item*>(
               &_AttachmentIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AttachmentIndexResponse_Item& a, AttachmentIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttachmentIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttachmentIndexResponse_Item& from) {
    AttachmentIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.AttachmentIndexResponse.Item";
  }
  protected:
  explicit AttachmentIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 2,
    kNameFieldNumber = 3,
    kTitleFieldNumber = 4,
    kContentTypeFieldNumber = 6,
    kUpdatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 7,
    kSizeFieldNumber = 5,
  };
  // string bucket = 2;
  void clear_bucket() ;
  const std::string& bucket() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bucket(Arg_&& arg, Args_... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* ptr);

  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(
      const std::string& value);
  std::string* _internal_mutable_bucket();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string title = 4;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string content_type = 6;
  void clear_content_type() ;
  const std::string& content_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .palm.nut.v1.MediaContent.Status status = 7;
  void clear_status() ;
  ::palm::nut::v1::MediaContent_Status status() const;
  void set_status(::palm::nut::v1::MediaContent_Status value);

  private:
  ::palm::nut::v1::MediaContent_Status _internal_status() const;
  void _internal_set_status(::palm::nut::v1::MediaContent_Status value);

  public:
  // int64 size = 5;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.AttachmentIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::int32_t id_;
    int status_;
    ::int64_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class AttachmentIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.AttachmentIndexResponse) */ {
 public:
  inline AttachmentIndexResponse() : AttachmentIndexResponse(nullptr) {}
  ~AttachmentIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttachmentIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttachmentIndexResponse(const AttachmentIndexResponse& from);
  AttachmentIndexResponse(AttachmentIndexResponse&& from) noexcept
    : AttachmentIndexResponse() {
    *this = ::std::move(from);
  }

  inline AttachmentIndexResponse& operator=(const AttachmentIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttachmentIndexResponse& operator=(AttachmentIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttachmentIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttachmentIndexResponse* internal_default_instance() {
    return reinterpret_cast<const AttachmentIndexResponse*>(
               &_AttachmentIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AttachmentIndexResponse& a, AttachmentIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttachmentIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttachmentIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttachmentIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttachmentIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttachmentIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttachmentIndexResponse& from) {
    AttachmentIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.AttachmentIndexResponse";
  }
  protected:
  explicit AttachmentIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AttachmentIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.nut.v1.AttachmentIndexResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::AttachmentIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::AttachmentIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::AttachmentIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::AttachmentIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::AttachmentIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::AttachmentIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::AttachmentIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::AttachmentIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::AttachmentIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.AttachmentIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::AttachmentIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleByLangRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleByLangRequest) */ {
 public:
  inline LocaleByLangRequest() : LocaleByLangRequest(nullptr) {}
  ~LocaleByLangRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleByLangRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleByLangRequest(const LocaleByLangRequest& from);
  LocaleByLangRequest(LocaleByLangRequest&& from) noexcept
    : LocaleByLangRequest() {
    *this = ::std::move(from);
  }

  inline LocaleByLangRequest& operator=(const LocaleByLangRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleByLangRequest& operator=(LocaleByLangRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleByLangRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleByLangRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleByLangRequest*>(
               &_LocaleByLangRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LocaleByLangRequest& a, LocaleByLangRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleByLangRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleByLangRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleByLangRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleByLangRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleByLangRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleByLangRequest& from) {
    LocaleByLangRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleByLangRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleByLangRequest";
  }
  protected:
  explicit LocaleByLangRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleByLangRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleListResponse) */ {
 public:
  inline LocaleListResponse() : LocaleListResponse(nullptr) {}
  ~LocaleListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleListResponse(const LocaleListResponse& from);
  LocaleListResponse(LocaleListResponse&& from) noexcept
    : LocaleListResponse() {
    *this = ::std::move(from);
  }

  inline LocaleListResponse& operator=(const LocaleListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleListResponse& operator=(LocaleListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleListResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleListResponse*>(
               &_LocaleListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LocaleListResponse& a, LocaleListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleListResponse& from) {
    LocaleListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleListResponse";
  }
  protected:
  explicit LocaleListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::LocaleIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexResponse.Item) */ {
 public:
  inline LocaleIndexResponse_Item() : LocaleIndexResponse_Item(nullptr) {}
  ~LocaleIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from);
  LocaleIndexResponse_Item(LocaleIndexResponse_Item&& from) noexcept
    : LocaleIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse_Item& operator=(const LocaleIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse_Item& operator=(LocaleIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse_Item*>(
               &_LocaleIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(LocaleIndexResponse_Item& a, LocaleIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleIndexResponse_Item& from) {
    LocaleIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleIndexResponse.Item";
  }
  protected:
  explicit LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 2,
    kCodeFieldNumber = 3,
    kMessageFieldNumber = 4,
    kUpdatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
  };
  // string lang = 2;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string code = 3;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexResponse) */ {
 public:
  inline LocaleIndexResponse() : LocaleIndexResponse(nullptr) {}
  ~LocaleIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse(const LocaleIndexResponse& from);
  LocaleIndexResponse(LocaleIndexResponse&& from) noexcept
    : LocaleIndexResponse() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse& operator=(const LocaleIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse& operator=(LocaleIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse*>(
               &_LocaleIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LocaleIndexResponse& a, LocaleIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleIndexResponse& from) {
    LocaleIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleIndexResponse";
  }
  protected:
  explicit LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocaleIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::LocaleIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleByCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleByCodeRequest) */ {
 public:
  inline LocaleByCodeRequest() : LocaleByCodeRequest(nullptr) {}
  ~LocaleByCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleByCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleByCodeRequest(const LocaleByCodeRequest& from);
  LocaleByCodeRequest(LocaleByCodeRequest&& from) noexcept
    : LocaleByCodeRequest() {
    *this = ::std::move(from);
  }

  inline LocaleByCodeRequest& operator=(const LocaleByCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleByCodeRequest& operator=(LocaleByCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleByCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleByCodeRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleByCodeRequest*>(
               &_LocaleByCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(LocaleByCodeRequest& a, LocaleByCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleByCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleByCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleByCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleByCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleByCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleByCodeRequest& from) {
    LocaleByCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleByCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleByCodeRequest";
  }
  protected:
  explicit LocaleByCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleByCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleByLangAndCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleByLangAndCodeRequest) */ {
 public:
  inline LocaleByLangAndCodeRequest() : LocaleByLangAndCodeRequest(nullptr) {}
  ~LocaleByLangAndCodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleByLangAndCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleByLangAndCodeRequest(const LocaleByLangAndCodeRequest& from);
  LocaleByLangAndCodeRequest(LocaleByLangAndCodeRequest&& from) noexcept
    : LocaleByLangAndCodeRequest() {
    *this = ::std::move(from);
  }

  inline LocaleByLangAndCodeRequest& operator=(const LocaleByLangAndCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleByLangAndCodeRequest& operator=(LocaleByLangAndCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleByLangAndCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleByLangAndCodeRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleByLangAndCodeRequest*>(
               &_LocaleByLangAndCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(LocaleByLangAndCodeRequest& a, LocaleByLangAndCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleByLangAndCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleByLangAndCodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleByLangAndCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleByLangAndCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleByLangAndCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleByLangAndCodeRequest& from) {
    LocaleByLangAndCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleByLangAndCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleByLangAndCodeRequest";
  }
  protected:
  explicit LocaleByLangAndCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleByLangAndCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleCreateRequest) */ {
 public:
  inline LocaleCreateRequest() : LocaleCreateRequest(nullptr) {}
  ~LocaleCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleCreateRequest(const LocaleCreateRequest& from);
  LocaleCreateRequest(LocaleCreateRequest&& from) noexcept
    : LocaleCreateRequest() {
    *this = ::std::move(from);
  }

  inline LocaleCreateRequest& operator=(const LocaleCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleCreateRequest& operator=(LocaleCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleCreateRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleCreateRequest*>(
               &_LocaleCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(LocaleCreateRequest& a, LocaleCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleCreateRequest& from) {
    LocaleCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleCreateRequest";
  }
  protected:
  explicit LocaleCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kCodeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LocaleUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleUpdateRequest) */ {
 public:
  inline LocaleUpdateRequest() : LocaleUpdateRequest(nullptr) {}
  ~LocaleUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocaleUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleUpdateRequest(const LocaleUpdateRequest& from);
  LocaleUpdateRequest(LocaleUpdateRequest&& from) noexcept
    : LocaleUpdateRequest() {
    *this = ::std::move(from);
  }

  inline LocaleUpdateRequest& operator=(const LocaleUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleUpdateRequest& operator=(LocaleUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleUpdateRequest*>(
               &_LocaleUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(LocaleUpdateRequest& a, LocaleUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocaleUpdateRequest& from) {
    LocaleUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LocaleUpdateRequest";
  }
  protected:
  explicit LocaleUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class IndexNotificationResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.IndexNotificationResponse.Item) */ {
 public:
  inline IndexNotificationResponse_Item() : IndexNotificationResponse_Item(nullptr) {}
  ~IndexNotificationResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexNotificationResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexNotificationResponse_Item(const IndexNotificationResponse_Item& from);
  IndexNotificationResponse_Item(IndexNotificationResponse_Item&& from) noexcept
    : IndexNotificationResponse_Item() {
    *this = ::std::move(from);
  }

  inline IndexNotificationResponse_Item& operator=(const IndexNotificationResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexNotificationResponse_Item& operator=(IndexNotificationResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexNotificationResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kEmail = 1,
    kSms = 2,
    MESSAGE_NOT_SET = 0,
  };

  static inline const IndexNotificationResponse_Item* internal_default_instance() {
    return reinterpret_cast<const IndexNotificationResponse_Item*>(
               &_IndexNotificationResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(IndexNotificationResponse_Item& a, IndexNotificationResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexNotificationResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexNotificationResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexNotificationResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexNotificationResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexNotificationResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexNotificationResponse_Item& from) {
    IndexNotificationResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexNotificationResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.IndexNotificationResponse.Item";
  }
  protected:
  explicit IndexNotificationResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 19,
    kEmailFieldNumber = 1,
    kSmsFieldNumber = 2,
  };
  // .google.protobuf.Timestamp created_at = 19;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();
  // .palm.nut.v1.EmailTask email = 1;
  bool has_email() const;
  private:
  bool _internal_has_email() const;

  public:
  void clear_email() ;
  const ::palm::nut::v1::EmailTask& email() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask* release_email();
  ::palm::nut::v1::EmailTask* mutable_email();
  void set_allocated_email(::palm::nut::v1::EmailTask* email);
  private:
  const ::palm::nut::v1::EmailTask& _internal_email() const;
  ::palm::nut::v1::EmailTask* _internal_mutable_email();
  public:
  void unsafe_arena_set_allocated_email(
      ::palm::nut::v1::EmailTask* email);
  ::palm::nut::v1::EmailTask* unsafe_arena_release_email();
  // .palm.nut.v1.SmsTask sms = 2;
  bool has_sms() const;
  private:
  bool _internal_has_sms() const;

  public:
  void clear_sms() ;
  const ::palm::nut::v1::SmsTask& sms() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SmsTask* release_sms();
  ::palm::nut::v1::SmsTask* mutable_sms();
  void set_allocated_sms(::palm::nut::v1::SmsTask* sms);
  private:
  const ::palm::nut::v1::SmsTask& _internal_sms() const;
  ::palm::nut::v1::SmsTask* _internal_mutable_sms();
  public:
  void unsafe_arena_set_allocated_sms(
      ::palm::nut::v1::SmsTask* sms);
  ::palm::nut::v1::SmsTask* unsafe_arena_release_sms();
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.IndexNotificationResponse.Item)
 private:
  class _Internal;
  void set_has_email();
  void set_has_sms();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::palm::nut::v1::EmailTask* email_;
      ::palm::nut::v1::SmsTask* sms_;
    } message_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class IndexNotificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.IndexNotificationResponse) */ {
 public:
  inline IndexNotificationResponse() : IndexNotificationResponse(nullptr) {}
  ~IndexNotificationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexNotificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexNotificationResponse(const IndexNotificationResponse& from);
  IndexNotificationResponse(IndexNotificationResponse&& from) noexcept
    : IndexNotificationResponse() {
    *this = ::std::move(from);
  }

  inline IndexNotificationResponse& operator=(const IndexNotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexNotificationResponse& operator=(IndexNotificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexNotificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexNotificationResponse* internal_default_instance() {
    return reinterpret_cast<const IndexNotificationResponse*>(
               &_IndexNotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(IndexNotificationResponse& a, IndexNotificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexNotificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexNotificationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexNotificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexNotificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexNotificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexNotificationResponse& from) {
    IndexNotificationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexNotificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.IndexNotificationResponse";
  }
  protected:
  explicit IndexNotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IndexNotificationResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.nut.v1.IndexNotificationResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::IndexNotificationResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::IndexNotificationResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::IndexNotificationResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::IndexNotificationResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::IndexNotificationResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::IndexNotificationResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::IndexNotificationResponse_Item& items(int index) const;
  ::palm::nut::v1::IndexNotificationResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::IndexNotificationResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.IndexNotificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::IndexNotificationResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LeaveWordIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LeaveWordIndexResponse.Item) */ {
 public:
  inline LeaveWordIndexResponse_Item() : LeaveWordIndexResponse_Item(nullptr) {}
  ~LeaveWordIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveWordIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveWordIndexResponse_Item(const LeaveWordIndexResponse_Item& from);
  LeaveWordIndexResponse_Item(LeaveWordIndexResponse_Item&& from) noexcept
    : LeaveWordIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline LeaveWordIndexResponse_Item& operator=(const LeaveWordIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveWordIndexResponse_Item& operator=(LeaveWordIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveWordIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveWordIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const LeaveWordIndexResponse_Item*>(
               &_LeaveWordIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(LeaveWordIndexResponse_Item& a, LeaveWordIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveWordIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveWordIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveWordIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveWordIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveWordIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveWordIndexResponse_Item& from) {
    LeaveWordIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveWordIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LeaveWordIndexResponse.Item";
  }
  protected:
  explicit LeaveWordIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 2,
    kIpFieldNumber = 3,
    kContentFieldNumber = 8,
    kUpdatedAtFieldNumber = 11,
    kCreatedAtFieldNumber = 12,
    kIdFieldNumber = 1,
  };
  // string lang = 2;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string ip = 3;
  void clear_ip() ;
  const std::string& ip() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // .palm.nut.v1.MediaContent content = 8;
  bool has_content() const;
  void clear_content() ;
  const ::palm::nut::v1::MediaContent& content() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::MediaContent* release_content();
  ::palm::nut::v1::MediaContent* mutable_content();
  void set_allocated_content(::palm::nut::v1::MediaContent* content);
  private:
  const ::palm::nut::v1::MediaContent& _internal_content() const;
  ::palm::nut::v1::MediaContent* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::palm::nut::v1::MediaContent* content);
  ::palm::nut::v1::MediaContent* unsafe_arena_release_content();
  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // .google.protobuf.Timestamp created_at = 12;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LeaveWordIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::palm::nut::v1::MediaContent* content_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class LeaveWordIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LeaveWordIndexResponse) */ {
 public:
  inline LeaveWordIndexResponse() : LeaveWordIndexResponse(nullptr) {}
  ~LeaveWordIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveWordIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveWordIndexResponse(const LeaveWordIndexResponse& from);
  LeaveWordIndexResponse(LeaveWordIndexResponse&& from) noexcept
    : LeaveWordIndexResponse() {
    *this = ::std::move(from);
  }

  inline LeaveWordIndexResponse& operator=(const LeaveWordIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveWordIndexResponse& operator=(LeaveWordIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveWordIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveWordIndexResponse* internal_default_instance() {
    return reinterpret_cast<const LeaveWordIndexResponse*>(
               &_LeaveWordIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(LeaveWordIndexResponse& a, LeaveWordIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveWordIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveWordIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveWordIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveWordIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveWordIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveWordIndexResponse& from) {
    LeaveWordIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveWordIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.LeaveWordIndexResponse";
  }
  protected:
  explicit LeaveWordIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LeaveWordIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPaginationFieldNumber = 9,
  };
  // repeated .palm.nut.v1.LeaveWordIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::LeaveWordIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LeaveWordIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::LeaveWordIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::LeaveWordIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LeaveWordIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LeaveWordIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::LeaveWordIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::LeaveWordIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LeaveWordIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 9;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.LeaveWordIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LeaveWordIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class IndexNowProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.IndexNowProfile) */ {
 public:
  inline IndexNowProfile() : IndexNowProfile(nullptr) {}
  ~IndexNowProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexNowProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexNowProfile(const IndexNowProfile& from);
  IndexNowProfile(IndexNowProfile&& from) noexcept
    : IndexNowProfile() {
    *this = ::std::move(from);
  }

  inline IndexNowProfile& operator=(const IndexNowProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexNowProfile& operator=(IndexNowProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexNowProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexNowProfile* internal_default_instance() {
    return reinterpret_cast<const IndexNowProfile*>(
               &_IndexNowProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(IndexNowProfile& a, IndexNowProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexNowProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexNowProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexNowProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexNowProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexNowProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexNowProfile& from) {
    IndexNowProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexNowProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.IndexNowProfile";
  }
  protected:
  explicit IndexNowProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.IndexNowProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class IndexNowPingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.IndexNowPingRequest) */ {
 public:
  inline IndexNowPingRequest() : IndexNowPingRequest(nullptr) {}
  ~IndexNowPingRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexNowPingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexNowPingRequest(const IndexNowPingRequest& from);
  IndexNowPingRequest(IndexNowPingRequest&& from) noexcept
    : IndexNowPingRequest() {
    *this = ::std::move(from);
  }

  inline IndexNowPingRequest& operator=(const IndexNowPingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexNowPingRequest& operator=(IndexNowPingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexNowPingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexNowPingRequest* internal_default_instance() {
    return reinterpret_cast<const IndexNowPingRequest*>(
               &_IndexNowPingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(IndexNowPingRequest& a, IndexNowPingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexNowPingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexNowPingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexNowPingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexNowPingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexNowPingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexNowPingRequest& from) {
    IndexNowPingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexNowPingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.IndexNowPingRequest";
  }
  protected:
  explicit IndexNowPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kHomeFieldNumber = 9,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string home = 9;
  void clear_home() ;
  const std::string& home() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.IndexNowPingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SitemapPingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SitemapPingRequest) */ {
 public:
  inline SitemapPingRequest() : SitemapPingRequest(nullptr) {}
  ~SitemapPingRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SitemapPingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SitemapPingRequest(const SitemapPingRequest& from);
  SitemapPingRequest(SitemapPingRequest&& from) noexcept
    : SitemapPingRequest() {
    *this = ::std::move(from);
  }

  inline SitemapPingRequest& operator=(const SitemapPingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SitemapPingRequest& operator=(SitemapPingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SitemapPingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SitemapPingRequest* internal_default_instance() {
    return reinterpret_cast<const SitemapPingRequest*>(
               &_SitemapPingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SitemapPingRequest& a, SitemapPingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SitemapPingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SitemapPingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SitemapPingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SitemapPingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SitemapPingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SitemapPingRequest& from) {
    SitemapPingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SitemapPingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SitemapPingRequest";
  }
  protected:
  explicit SitemapPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 1,
  };
  // string home = 1;
  void clear_home() ;
  const std::string& home() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SitemapPingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteMaintenanceModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteMaintenanceModeRequest) */ {
 public:
  inline SiteMaintenanceModeRequest() : SiteMaintenanceModeRequest(nullptr) {}
  ~SiteMaintenanceModeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteMaintenanceModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteMaintenanceModeRequest(const SiteMaintenanceModeRequest& from);
  SiteMaintenanceModeRequest(SiteMaintenanceModeRequest&& from) noexcept
    : SiteMaintenanceModeRequest() {
    *this = ::std::move(from);
  }

  inline SiteMaintenanceModeRequest& operator=(const SiteMaintenanceModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteMaintenanceModeRequest& operator=(SiteMaintenanceModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteMaintenanceModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteMaintenanceModeRequest* internal_default_instance() {
    return reinterpret_cast<const SiteMaintenanceModeRequest*>(
               &_SiteMaintenanceModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SiteMaintenanceModeRequest& a, SiteMaintenanceModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteMaintenanceModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteMaintenanceModeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteMaintenanceModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteMaintenanceModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteMaintenanceModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteMaintenanceModeRequest& from) {
    SiteMaintenanceModeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteMaintenanceModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteMaintenanceModeRequest";
  }
  protected:
  explicit SiteMaintenanceModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kTtlFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* ptr);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // .google.protobuf.Duration ttl = 1;
  bool has_ttl() const;
  void clear_ttl() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteMaintenanceModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteInstallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteInstallRequest) */ {
 public:
  inline SiteInstallRequest() : SiteInstallRequest(nullptr) {}
  ~SiteInstallRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteInstallRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteInstallRequest(const SiteInstallRequest& from);
  SiteInstallRequest(SiteInstallRequest&& from) noexcept
    : SiteInstallRequest() {
    *this = ::std::move(from);
  }

  inline SiteInstallRequest& operator=(const SiteInstallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteInstallRequest& operator=(SiteInstallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteInstallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteInstallRequest* internal_default_instance() {
    return reinterpret_cast<const SiteInstallRequest*>(
               &_SiteInstallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SiteInstallRequest& a, SiteInstallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteInstallRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteInstallRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteInstallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteInstallRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteInstallRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteInstallRequest& from) {
    SiteInstallRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteInstallRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteInstallRequest";
  }
  protected:
  explicit SiteInstallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .palm.nut.v1.UserSignUpRequest user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::palm::nut::v1::UserSignUpRequest& user() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::UserSignUpRequest* release_user();
  ::palm::nut::v1::UserSignUpRequest* mutable_user();
  void set_allocated_user(::palm::nut::v1::UserSignUpRequest* user);
  private:
  const ::palm::nut::v1::UserSignUpRequest& _internal_user() const;
  ::palm::nut::v1::UserSignUpRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::palm::nut::v1::UserSignUpRequest* user);
  ::palm::nut::v1::UserSignUpRequest* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteInstallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::palm::nut::v1::UserSignUpRequest* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class TwilioProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TwilioProfile) */ {
 public:
  inline TwilioProfile() : TwilioProfile(nullptr) {}
  ~TwilioProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TwilioProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwilioProfile(const TwilioProfile& from);
  TwilioProfile(TwilioProfile&& from) noexcept
    : TwilioProfile() {
    *this = ::std::move(from);
  }

  inline TwilioProfile& operator=(const TwilioProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwilioProfile& operator=(TwilioProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwilioProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwilioProfile* internal_default_instance() {
    return reinterpret_cast<const TwilioProfile*>(
               &_TwilioProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TwilioProfile& a, TwilioProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(TwilioProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwilioProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwilioProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwilioProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwilioProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TwilioProfile& from) {
    TwilioProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwilioProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.TwilioProfile";
  }
  protected:
  explicit TwilioProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kAccountSidFieldNumber = 2,
    kAuthTokenFieldNumber = 3,
    kSmsStatusCallbackFieldNumber = 9,
  };
  // string from = 1;
  void clear_from() ;
  const std::string& from() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from(Arg_&& arg, Args_... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* ptr);

  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(
      const std::string& value);
  std::string* _internal_mutable_from();

  public:
  // string account_sid = 2;
  void clear_account_sid() ;
  const std::string& account_sid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_sid(Arg_&& arg, Args_... args);
  std::string* mutable_account_sid();
  PROTOBUF_NODISCARD std::string* release_account_sid();
  void set_allocated_account_sid(std::string* ptr);

  private:
  const std::string& _internal_account_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_sid(
      const std::string& value);
  std::string* _internal_mutable_account_sid();

  public:
  // string auth_token = 3;
  void clear_auth_token() ;
  const std::string& auth_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auth_token(Arg_&& arg, Args_... args);
  std::string* mutable_auth_token();
  PROTOBUF_NODISCARD std::string* release_auth_token();
  void set_allocated_auth_token(std::string* ptr);

  private:
  const std::string& _internal_auth_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_token(
      const std::string& value);
  std::string* _internal_mutable_auth_token();

  public:
  // optional string sms_status_callback = 9;
  bool has_sms_status_callback() const;
  void clear_sms_status_callback() ;
  const std::string& sms_status_callback() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sms_status_callback(Arg_&& arg, Args_... args);
  std::string* mutable_sms_status_callback();
  PROTOBUF_NODISCARD std::string* release_sms_status_callback();
  void set_allocated_sms_status_callback(std::string* ptr);

  private:
  const std::string& _internal_sms_status_callback() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sms_status_callback(
      const std::string& value);
  std::string* _internal_mutable_sms_status_callback();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.TwilioProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_sid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sms_status_callback_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SmtpProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SmtpProfile) */ {
 public:
  inline SmtpProfile() : SmtpProfile(nullptr) {}
  ~SmtpProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmtpProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmtpProfile(const SmtpProfile& from);
  SmtpProfile(SmtpProfile&& from) noexcept
    : SmtpProfile() {
    *this = ::std::move(from);
  }

  inline SmtpProfile& operator=(const SmtpProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmtpProfile& operator=(SmtpProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmtpProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmtpProfile* internal_default_instance() {
    return reinterpret_cast<const SmtpProfile*>(
               &_SmtpProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SmtpProfile& a, SmtpProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SmtpProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmtpProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmtpProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmtpProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmtpProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmtpProfile& from) {
    SmtpProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmtpProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SmtpProfile";
  }
  protected:
  explicit SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AuthMethod = SmtpProfile_AuthMethod;
  static constexpr AuthMethod None = SmtpProfile_AuthMethod_None;
  static constexpr AuthMethod Login = SmtpProfile_AuthMethod_Login;
  static constexpr AuthMethod StartTls = SmtpProfile_AuthMethod_StartTls;
  static inline bool AuthMethod_IsValid(int value) {
    return SmtpProfile_AuthMethod_IsValid(value);
  }
  static constexpr AuthMethod AuthMethod_MIN = SmtpProfile_AuthMethod_AuthMethod_MIN;
  static constexpr AuthMethod AuthMethod_MAX = SmtpProfile_AuthMethod_AuthMethod_MAX;
  static constexpr int AuthMethod_ARRAYSIZE = SmtpProfile_AuthMethod_AuthMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthMethod_descriptor() {
    return SmtpProfile_AuthMethod_descriptor();
  }
  template <typename T>
  static inline const std::string& AuthMethod_Name(T value) {
    return SmtpProfile_AuthMethod_Name(value);
  }
  static inline bool AuthMethod_Parse(absl::string_view name, AuthMethod* value) {
    return SmtpProfile_AuthMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 8,
    kBccFieldNumber = 9,
    kHostFieldNumber = 1,
    kPasswordFieldNumber = 12,
    kFromFieldNumber = 11,
    kPortFieldNumber = 2,
    kAuthMethodFieldNumber = 3,
  };
  // repeated .palm.nut.v1.EmailTask.Address cc = 8;
  int cc_size() const;
  private:
  int _internal_cc_size() const;

  public:
  void clear_cc() ;
  ::palm::nut::v1::EmailTask_Address* mutable_cc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
      mutable_cc();
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_cc(int index) const;
  ::palm::nut::v1::EmailTask_Address* _internal_add_cc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>& _internal_cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>* _internal_mutable_cc();
  public:
  const ::palm::nut::v1::EmailTask_Address& cc(int index) const;
  ::palm::nut::v1::EmailTask_Address* add_cc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
      cc() const;
  // repeated .palm.nut.v1.EmailTask.Address bcc = 9;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;

  public:
  void clear_bcc() ;
  ::palm::nut::v1::EmailTask_Address* mutable_bcc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
      mutable_bcc();
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_bcc(int index) const;
  ::palm::nut::v1::EmailTask_Address* _internal_add_bcc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>& _internal_bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>* _internal_mutable_bcc();
  public:
  const ::palm::nut::v1::EmailTask_Address& bcc(int index) const;
  ::palm::nut::v1::EmailTask_Address* add_bcc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
      bcc() const;
  // string host = 1;
  void clear_host() ;
  const std::string& host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // string password = 12;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // .palm.nut.v1.EmailTask.Address from = 11;
  bool has_from() const;
  void clear_from() ;
  const ::palm::nut::v1::EmailTask_Address& from() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask_Address* release_from();
  ::palm::nut::v1::EmailTask_Address* mutable_from();
  void set_allocated_from(::palm::nut::v1::EmailTask_Address* from);
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_from() const;
  ::palm::nut::v1::EmailTask_Address* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::palm::nut::v1::EmailTask_Address* from);
  ::palm::nut::v1::EmailTask_Address* unsafe_arena_release_from();
  // uint32 port = 2;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // .palm.nut.v1.SmtpProfile.AuthMethod auth_method = 3;
  void clear_auth_method() ;
  ::palm::nut::v1::SmtpProfile_AuthMethod auth_method() const;
  void set_auth_method(::palm::nut::v1::SmtpProfile_AuthMethod value);

  private:
  ::palm::nut::v1::SmtpProfile_AuthMethod _internal_auth_method() const;
  void _internal_set_auth_method(::palm::nut::v1::SmtpProfile_AuthMethod value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SmtpProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address > cc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address > bcc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::palm::nut::v1::EmailTask_Address* from_;
    ::uint32_t port_;
    int auth_method_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class EmailTask_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask.Address) */ {
 public:
  inline EmailTask_Address() : EmailTask_Address(nullptr) {}
  ~EmailTask_Address() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Address(const EmailTask_Address& from);
  EmailTask_Address(EmailTask_Address&& from) noexcept
    : EmailTask_Address() {
    *this = ::std::move(from);
  }

  inline EmailTask_Address& operator=(const EmailTask_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Address& operator=(EmailTask_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Address* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Address*>(
               &_EmailTask_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(EmailTask_Address& a, EmailTask_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Address* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Address& from) {
    EmailTask_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.EmailTask.Address";
  }
  protected:
  explicit EmailTask_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class EmailTask_Body final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask.Body) */ {
 public:
  inline EmailTask_Body() : EmailTask_Body(nullptr) {}
  ~EmailTask_Body() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask_Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Body(const EmailTask_Body& from);
  EmailTask_Body(EmailTask_Body&& from) noexcept
    : EmailTask_Body() {
    *this = ::std::move(from);
  }

  inline EmailTask_Body& operator=(const EmailTask_Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Body& operator=(EmailTask_Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Body* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Body*>(
               &_EmailTask_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(EmailTask_Body& a, EmailTask_Body& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Body* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Body>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Body& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Body& from) {
    EmailTask_Body::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Body* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.EmailTask.Body";
  }
  protected:
  explicit EmailTask_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kHtmlFieldNumber = 2,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // bool html = 2;
  void clear_html() ;
  bool html() const;
  void set_html(bool value);

  private:
  bool _internal_html() const;
  void _internal_set_html(bool value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    bool html_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class EmailTask_Attachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask.Attachment) */ {
 public:
  inline EmailTask_Attachment() : EmailTask_Attachment(nullptr) {}
  ~EmailTask_Attachment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Attachment(const EmailTask_Attachment& from);
  EmailTask_Attachment(EmailTask_Attachment&& from) noexcept
    : EmailTask_Attachment() {
    *this = ::std::move(from);
  }

  inline EmailTask_Attachment& operator=(const EmailTask_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Attachment& operator=(EmailTask_Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Attachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Attachment* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Attachment*>(
               &_EmailTask_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(EmailTask_Attachment& a, EmailTask_Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Attachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Attachment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Attachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Attachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Attachment& from) {
    EmailTask_Attachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Attachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.EmailTask.Attachment";
  }
  protected:
  explicit EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask.Attachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class EmailTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask) */ {
 public:
  inline EmailTask() : EmailTask(nullptr) {}
  ~EmailTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmailTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask(const EmailTask& from);
  EmailTask(EmailTask&& from) noexcept
    : EmailTask() {
    *this = ::std::move(from);
  }

  inline EmailTask& operator=(const EmailTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask& operator=(EmailTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask* internal_default_instance() {
    return reinterpret_cast<const EmailTask*>(
               &_EmailTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(EmailTask& a, EmailTask& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask& from) {
    EmailTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.EmailTask";
  }
  protected:
  explicit EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EmailTask_Address Address;
  typedef EmailTask_Body Body;
  typedef EmailTask_Attachment Attachment;

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 2,
    kBccFieldNumber = 3,
    kAttachmentsFieldNumber = 13,
    kSubjectFieldNumber = 11,
    kToFieldNumber = 1,
    kBodyFieldNumber = 12,
  };
  // repeated .palm.nut.v1.EmailTask.Address cc = 2;
  int cc_size() const;
  private:
  int _internal_cc_size() const;

  public:
  void clear_cc() ;
  ::palm::nut::v1::EmailTask_Address* mutable_cc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
      mutable_cc();
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_cc(int index) const;
  ::palm::nut::v1::EmailTask_Address* _internal_add_cc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>& _internal_cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>* _internal_mutable_cc();
  public:
  const ::palm::nut::v1::EmailTask_Address& cc(int index) const;
  ::palm::nut::v1::EmailTask_Address* add_cc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
      cc() const;
  // repeated .palm.nut.v1.EmailTask.Address bcc = 3;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;

  public:
  void clear_bcc() ;
  ::palm::nut::v1::EmailTask_Address* mutable_bcc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
      mutable_bcc();
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_bcc(int index) const;
  ::palm::nut::v1::EmailTask_Address* _internal_add_bcc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>& _internal_bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>* _internal_mutable_bcc();
  public:
  const ::palm::nut::v1::EmailTask_Address& bcc(int index) const;
  ::palm::nut::v1::EmailTask_Address* add_bcc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
      bcc() const;
  // repeated .palm.nut.v1.EmailTask.Attachment attachments = 13;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  ::palm::nut::v1::EmailTask_Attachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >*
      mutable_attachments();
  private:
  const ::palm::nut::v1::EmailTask_Attachment& _internal_attachments(int index) const;
  ::palm::nut::v1::EmailTask_Attachment* _internal_add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Attachment>& _internal_attachments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Attachment>* _internal_mutable_attachments();
  public:
  const ::palm::nut::v1::EmailTask_Attachment& attachments(int index) const;
  ::palm::nut::v1::EmailTask_Attachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >&
      attachments() const;
  // string subject = 11;
  void clear_subject() ;
  const std::string& subject() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* ptr);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // .palm.nut.v1.EmailTask.Address to = 1;
  bool has_to() const;
  void clear_to() ;
  const ::palm::nut::v1::EmailTask_Address& to() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask_Address* release_to();
  ::palm::nut::v1::EmailTask_Address* mutable_to();
  void set_allocated_to(::palm::nut::v1::EmailTask_Address* to);
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_to() const;
  ::palm::nut::v1::EmailTask_Address* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::palm::nut::v1::EmailTask_Address* to);
  ::palm::nut::v1::EmailTask_Address* unsafe_arena_release_to();
  // .palm.nut.v1.EmailTask.Body body = 12;
  bool has_body() const;
  void clear_body() ;
  const ::palm::nut::v1::EmailTask_Body& body() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask_Body* release_body();
  ::palm::nut::v1::EmailTask_Body* mutable_body();
  void set_allocated_body(::palm::nut::v1::EmailTask_Body* body);
  private:
  const ::palm::nut::v1::EmailTask_Body& _internal_body() const;
  ::palm::nut::v1::EmailTask_Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::palm::nut::v1::EmailTask_Body* body);
  ::palm::nut::v1::EmailTask_Body* unsafe_arena_release_body();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address > cc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address > bcc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment > attachments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::palm::nut::v1::EmailTask_Address* to_;
    ::palm::nut::v1::EmailTask_Body* body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteTwilioPingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteTwilioPingRequest) */ {
 public:
  inline SiteTwilioPingRequest() : SiteTwilioPingRequest(nullptr) {}
  ~SiteTwilioPingRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteTwilioPingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteTwilioPingRequest(const SiteTwilioPingRequest& from);
  SiteTwilioPingRequest(SiteTwilioPingRequest&& from) noexcept
    : SiteTwilioPingRequest() {
    *this = ::std::move(from);
  }

  inline SiteTwilioPingRequest& operator=(const SiteTwilioPingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteTwilioPingRequest& operator=(SiteTwilioPingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteTwilioPingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteTwilioPingRequest* internal_default_instance() {
    return reinterpret_cast<const SiteTwilioPingRequest*>(
               &_SiteTwilioPingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SiteTwilioPingRequest& a, SiteTwilioPingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteTwilioPingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteTwilioPingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteTwilioPingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteTwilioPingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteTwilioPingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteTwilioPingRequest& from) {
    SiteTwilioPingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteTwilioPingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteTwilioPingRequest";
  }
  protected:
  explicit SiteTwilioPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kMessageFieldNumber = 2,
    kProfileFieldNumber = 9,
  };
  // string to = 1;
  void clear_to() ;
  const std::string& to() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* ptr);

  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(
      const std::string& value);
  std::string* _internal_mutable_to();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .palm.nut.v1.TwilioProfile profile = 9;
  bool has_profile() const;
  void clear_profile() ;
  const ::palm::nut::v1::TwilioProfile& profile() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::TwilioProfile* release_profile();
  ::palm::nut::v1::TwilioProfile* mutable_profile();
  void set_allocated_profile(::palm::nut::v1::TwilioProfile* profile);
  private:
  const ::palm::nut::v1::TwilioProfile& _internal_profile() const;
  ::palm::nut::v1::TwilioProfile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::palm::nut::v1::TwilioProfile* profile);
  ::palm::nut::v1::TwilioProfile* unsafe_arena_release_profile();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteTwilioPingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::palm::nut::v1::TwilioProfile* profile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteSmtpPingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSmtpPingRequest) */ {
 public:
  inline SiteSmtpPingRequest() : SiteSmtpPingRequest(nullptr) {}
  ~SiteSmtpPingRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSmtpPingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSmtpPingRequest(const SiteSmtpPingRequest& from);
  SiteSmtpPingRequest(SiteSmtpPingRequest&& from) noexcept
    : SiteSmtpPingRequest() {
    *this = ::std::move(from);
  }

  inline SiteSmtpPingRequest& operator=(const SiteSmtpPingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSmtpPingRequest& operator=(SiteSmtpPingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSmtpPingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSmtpPingRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSmtpPingRequest*>(
               &_SiteSmtpPingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SiteSmtpPingRequest& a, SiteSmtpPingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSmtpPingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSmtpPingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSmtpPingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSmtpPingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSmtpPingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSmtpPingRequest& from) {
    SiteSmtpPingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSmtpPingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteSmtpPingRequest";
  }
  protected:
  explicit SiteSmtpPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 2,
    kContentFieldNumber = 3,
    kToFieldNumber = 1,
    kProfileFieldNumber = 9,
  };
  // string subject = 2;
  void clear_subject() ;
  const std::string& subject() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject(Arg_&& arg, Args_... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* ptr);

  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(
      const std::string& value);
  std::string* _internal_mutable_subject();

  public:
  // string content = 3;
  void clear_content() ;
  const std::string& content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .palm.nut.v1.EmailTask.Address to = 1;
  bool has_to() const;
  void clear_to() ;
  const ::palm::nut::v1::EmailTask_Address& to() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask_Address* release_to();
  ::palm::nut::v1::EmailTask_Address* mutable_to();
  void set_allocated_to(::palm::nut::v1::EmailTask_Address* to);
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_to() const;
  ::palm::nut::v1::EmailTask_Address* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::palm::nut::v1::EmailTask_Address* to);
  ::palm::nut::v1::EmailTask_Address* unsafe_arena_release_to();
  // .palm.nut.v1.SmtpProfile profile = 9;
  bool has_profile() const;
  void clear_profile() ;
  const ::palm::nut::v1::SmtpProfile& profile() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SmtpProfile* release_profile();
  ::palm::nut::v1::SmtpProfile* mutable_profile();
  void set_allocated_profile(::palm::nut::v1::SmtpProfile* profile);
  private:
  const ::palm::nut::v1::SmtpProfile& _internal_profile() const;
  ::palm::nut::v1::SmtpProfile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::palm::nut::v1::SmtpProfile* profile);
  ::palm::nut::v1::SmtpProfile* unsafe_arena_release_profile();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSmtpPingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::palm::nut::v1::EmailTask_Address* to_;
    ::palm::nut::v1::SmtpProfile* profile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteSetLogoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetLogoRequest) */ {
 public:
  inline SiteSetLogoRequest() : SiteSetLogoRequest(nullptr) {}
  ~SiteSetLogoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetLogoRequest(const SiteSetLogoRequest& from);
  SiteSetLogoRequest(SiteSetLogoRequest&& from) noexcept
    : SiteSetLogoRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetLogoRequest& operator=(const SiteSetLogoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetLogoRequest& operator=(SiteSetLogoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetLogoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetLogoRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetLogoRequest*>(
               &_SiteSetLogoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SiteSetLogoRequest& a, SiteSetLogoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetLogoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetLogoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetLogoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetLogoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetLogoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetLogoRequest& from) {
    SiteSetLogoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetLogoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteSetLogoRequest";
  }
  protected:
  explicit SiteSetLogoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetLogoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteSetCopyrightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetCopyrightRequest) */ {
 public:
  inline SiteSetCopyrightRequest() : SiteSetCopyrightRequest(nullptr) {}
  ~SiteSetCopyrightRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from);
  SiteSetCopyrightRequest(SiteSetCopyrightRequest&& from) noexcept
    : SiteSetCopyrightRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetCopyrightRequest& operator=(const SiteSetCopyrightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetCopyrightRequest& operator=(SiteSetCopyrightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetCopyrightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetCopyrightRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetCopyrightRequest*>(
               &_SiteSetCopyrightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SiteSetCopyrightRequest& a, SiteSetCopyrightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetCopyrightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetCopyrightRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetCopyrightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetCopyrightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetCopyrightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetCopyrightRequest& from) {
    SiteSetCopyrightRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetCopyrightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteSetCopyrightRequest";
  }
  protected:
  explicit SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetCopyrightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteSetKeywordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetKeywordsRequest) */ {
 public:
  inline SiteSetKeywordsRequest() : SiteSetKeywordsRequest(nullptr) {}
  ~SiteSetKeywordsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from);
  SiteSetKeywordsRequest(SiteSetKeywordsRequest&& from) noexcept
    : SiteSetKeywordsRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetKeywordsRequest& operator=(const SiteSetKeywordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetKeywordsRequest& operator=(SiteSetKeywordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetKeywordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetKeywordsRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetKeywordsRequest*>(
               &_SiteSetKeywordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SiteSetKeywordsRequest& a, SiteSetKeywordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetKeywordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetKeywordsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetKeywordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetKeywordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetKeywordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetKeywordsRequest& from) {
    SiteSetKeywordsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetKeywordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteSetKeywordsRequest";
  }
  protected:
  explicit SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, std::size_t size);
  void set_items(int index, absl::string_view value);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, std::size_t size);
  void add_items(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();

  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_items();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetKeywordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteSetInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetInfoRequest) */ {
 public:
  inline SiteSetInfoRequest() : SiteSetInfoRequest(nullptr) {}
  ~SiteSetInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetInfoRequest(const SiteSetInfoRequest& from);
  SiteSetInfoRequest(SiteSetInfoRequest&& from) noexcept
    : SiteSetInfoRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetInfoRequest& operator=(const SiteSetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetInfoRequest& operator=(SiteSetInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetInfoRequest*>(
               &_SiteSetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SiteSetInfoRequest& a, SiteSetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteSetInfoRequest& from) {
    SiteSetInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteSetInfoRequest";
  }
  protected:
  explicit SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kTitleFieldNumber = 11,
    kSubheadFieldNumber = 12,
    kDescriptionFieldNumber = 13,
  };
  // string lang = 1;
  void clear_lang() ;
  const std::string& lang() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lang(Arg_&& arg, Args_... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* ptr);

  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(
      const std::string& value);
  std::string* _internal_mutable_lang();

  public:
  // string title = 11;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string subhead = 12;
  void clear_subhead() ;
  const std::string& subhead() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subhead(Arg_&& arg, Args_... args);
  std::string* mutable_subhead();
  PROTOBUF_NODISCARD std::string* release_subhead();
  void set_allocated_subhead(std::string* ptr);

  private:
  const std::string& _internal_subhead() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subhead(
      const std::string& value);
  std::string* _internal_mutable_subhead();

  public:
  // string description = 13;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subhead_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteLayoutResponse_Author final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteLayoutResponse.Author) */ {
 public:
  inline SiteLayoutResponse_Author() : SiteLayoutResponse_Author(nullptr) {}
  ~SiteLayoutResponse_Author() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteLayoutResponse_Author(const SiteLayoutResponse_Author& from);
  SiteLayoutResponse_Author(SiteLayoutResponse_Author&& from) noexcept
    : SiteLayoutResponse_Author() {
    *this = ::std::move(from);
  }

  inline SiteLayoutResponse_Author& operator=(const SiteLayoutResponse_Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteLayoutResponse_Author& operator=(SiteLayoutResponse_Author&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteLayoutResponse_Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteLayoutResponse_Author* internal_default_instance() {
    return reinterpret_cast<const SiteLayoutResponse_Author*>(
               &_SiteLayoutResponse_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SiteLayoutResponse_Author& a, SiteLayoutResponse_Author& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteLayoutResponse_Author* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteLayoutResponse_Author* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteLayoutResponse_Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteLayoutResponse_Author>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteLayoutResponse_Author& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteLayoutResponse_Author& from) {
    SiteLayoutResponse_Author::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteLayoutResponse_Author* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteLayoutResponse.Author";
  }
  protected:
  explicit SiteLayoutResponse_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteLayoutResponse.Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteLayoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteLayoutResponse) */ {
 public:
  inline SiteLayoutResponse() : SiteLayoutResponse(nullptr) {}
  ~SiteLayoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteLayoutResponse(const SiteLayoutResponse& from);
  SiteLayoutResponse(SiteLayoutResponse&& from) noexcept
    : SiteLayoutResponse() {
    *this = ::std::move(from);
  }

  inline SiteLayoutResponse& operator=(const SiteLayoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteLayoutResponse& operator=(SiteLayoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteLayoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteLayoutResponse* internal_default_instance() {
    return reinterpret_cast<const SiteLayoutResponse*>(
               &_SiteLayoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SiteLayoutResponse& a, SiteLayoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteLayoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteLayoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteLayoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteLayoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteLayoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteLayoutResponse& from) {
    SiteLayoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteLayoutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteLayoutResponse";
  }
  protected:
  explicit SiteLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteLayoutResponse_Author Author;

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordsFieldNumber = 3,
    kLanguagesFieldNumber = 9,
    kTitleFieldNumber = 1,
    kSubheadFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kCopyrightFieldNumber = 6,
    kLogoFieldNumber = 7,
    kAuthorFieldNumber = 5,
  };
  // repeated string keywords = 3;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;

  public:
  void clear_keywords() ;
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, std::size_t size);
  void set_keywords(int index, absl::string_view value);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, std::size_t size);
  void add_keywords(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();

  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_keywords();

  public:
  // repeated string languages = 9;
  int languages_size() const;
  private:
  int _internal_languages_size() const;

  public:
  void clear_languages() ;
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, std::size_t size);
  void set_languages(int index, absl::string_view value);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, std::size_t size);
  void add_languages(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();

  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_languages();

  public:
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string subhead = 2;
  void clear_subhead() ;
  const std::string& subhead() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subhead(Arg_&& arg, Args_... args);
  std::string* mutable_subhead();
  PROTOBUF_NODISCARD std::string* release_subhead();
  void set_allocated_subhead(std::string* ptr);

  private:
  const std::string& _internal_subhead() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subhead(
      const std::string& value);
  std::string* _internal_mutable_subhead();

  public:
  // string description = 4;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string copyright = 6;
  void clear_copyright() ;
  const std::string& copyright() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_copyright(Arg_&& arg, Args_... args);
  std::string* mutable_copyright();
  PROTOBUF_NODISCARD std::string* release_copyright();
  void set_allocated_copyright(std::string* ptr);

  private:
  const std::string& _internal_copyright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyright(
      const std::string& value);
  std::string* _internal_mutable_copyright();

  public:
  // string logo = 7;
  void clear_logo() ;
  const std::string& logo() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logo(Arg_&& arg, Args_... args);
  std::string* mutable_logo();
  PROTOBUF_NODISCARD std::string* release_logo();
  void set_allocated_logo(std::string* ptr);

  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(
      const std::string& value);
  std::string* _internal_mutable_logo();

  public:
  // .palm.nut.v1.SiteLayoutResponse.Author author = 5;
  bool has_author() const;
  void clear_author() ;
  const ::palm::nut::v1::SiteLayoutResponse_Author& author() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteLayoutResponse_Author* release_author();
  ::palm::nut::v1::SiteLayoutResponse_Author* mutable_author();
  void set_allocated_author(::palm::nut::v1::SiteLayoutResponse_Author* author);
  private:
  const ::palm::nut::v1::SiteLayoutResponse_Author& _internal_author() const;
  ::palm::nut::v1::SiteLayoutResponse_Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::palm::nut::v1::SiteLayoutResponse_Author* author);
  ::palm::nut::v1::SiteLayoutResponse_Author* unsafe_arena_release_author();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteLayoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subhead_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyright_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
    ::palm::nut::v1::SiteLayoutResponse_Author* author_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class GoogleProfile_ReCaptcha final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.GoogleProfile.ReCaptcha) */ {
 public:
  inline GoogleProfile_ReCaptcha() : GoogleProfile_ReCaptcha(nullptr) {}
  ~GoogleProfile_ReCaptcha() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleProfile_ReCaptcha(const GoogleProfile_ReCaptcha& from);
  GoogleProfile_ReCaptcha(GoogleProfile_ReCaptcha&& from) noexcept
    : GoogleProfile_ReCaptcha() {
    *this = ::std::move(from);
  }

  inline GoogleProfile_ReCaptcha& operator=(const GoogleProfile_ReCaptcha& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleProfile_ReCaptcha& operator=(GoogleProfile_ReCaptcha&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleProfile_ReCaptcha& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleProfile_ReCaptcha* internal_default_instance() {
    return reinterpret_cast<const GoogleProfile_ReCaptcha*>(
               &_GoogleProfile_ReCaptcha_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GoogleProfile_ReCaptcha& a, GoogleProfile_ReCaptcha& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleProfile_ReCaptcha* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleProfile_ReCaptcha* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleProfile_ReCaptcha* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleProfile_ReCaptcha>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleProfile_ReCaptcha& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GoogleProfile_ReCaptcha& from) {
    GoogleProfile_ReCaptcha::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleProfile_ReCaptcha* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.GoogleProfile.ReCaptcha";
  }
  protected:
  explicit GoogleProfile_ReCaptcha(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteKeyFieldNumber = 1,
    kSecretFieldNumber = 2,
  };
  // string site_key = 1;
  void clear_site_key() ;
  const std::string& site_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_site_key(Arg_&& arg, Args_... args);
  std::string* mutable_site_key();
  PROTOBUF_NODISCARD std::string* release_site_key();
  void set_allocated_site_key(std::string* ptr);

  private:
  const std::string& _internal_site_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_key(
      const std::string& value);
  std::string* _internal_mutable_site_key();

  public:
  // string secret = 2;
  void clear_secret() ;
  const std::string& secret() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* ptr);

  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(
      const std::string& value);
  std::string* _internal_mutable_secret();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.GoogleProfile.ReCaptcha)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class GoogleProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.GoogleProfile) */ {
 public:
  inline GoogleProfile() : GoogleProfile(nullptr) {}
  ~GoogleProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GoogleProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleProfile(const GoogleProfile& from);
  GoogleProfile(GoogleProfile&& from) noexcept
    : GoogleProfile() {
    *this = ::std::move(from);
  }

  inline GoogleProfile& operator=(const GoogleProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleProfile& operator=(GoogleProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleProfile* internal_default_instance() {
    return reinterpret_cast<const GoogleProfile*>(
               &_GoogleProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GoogleProfile& a, GoogleProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GoogleProfile& from) {
    GoogleProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.GoogleProfile";
  }
  protected:
  explicit GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GoogleProfile_ReCaptcha ReCaptcha;

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
    kReCaptchaFieldNumber = 2,
  };
  // optional string site_verify_id = 1;
  bool has_site_verify_id() const;
  void clear_site_verify_id() ;
  const std::string& site_verify_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_site_verify_id(Arg_&& arg, Args_... args);
  std::string* mutable_site_verify_id();
  PROTOBUF_NODISCARD std::string* release_site_verify_id();
  void set_allocated_site_verify_id(std::string* ptr);

  private:
  const std::string& _internal_site_verify_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_verify_id(
      const std::string& value);
  std::string* _internal_mutable_site_verify_id();

  public:
  // optional .palm.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
  bool has_re_captcha() const;
  void clear_re_captcha() ;
  const ::palm::nut::v1::GoogleProfile_ReCaptcha& re_captcha() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::GoogleProfile_ReCaptcha* release_re_captcha();
  ::palm::nut::v1::GoogleProfile_ReCaptcha* mutable_re_captcha();
  void set_allocated_re_captcha(::palm::nut::v1::GoogleProfile_ReCaptcha* re_captcha);
  private:
  const ::palm::nut::v1::GoogleProfile_ReCaptcha& _internal_re_captcha() const;
  ::palm::nut::v1::GoogleProfile_ReCaptcha* _internal_mutable_re_captcha();
  public:
  void unsafe_arena_set_allocated_re_captcha(
      ::palm::nut::v1::GoogleProfile_ReCaptcha* re_captcha);
  ::palm::nut::v1::GoogleProfile_ReCaptcha* unsafe_arena_release_re_captcha();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.GoogleProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_verify_id_;
    ::palm::nut::v1::GoogleProfile_ReCaptcha* re_captcha_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class BaiduProfile_SiteVerify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.BaiduProfile.SiteVerify) */ {
 public:
  inline BaiduProfile_SiteVerify() : BaiduProfile_SiteVerify(nullptr) {}
  ~BaiduProfile_SiteVerify() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaiduProfile_SiteVerify(const BaiduProfile_SiteVerify& from);
  BaiduProfile_SiteVerify(BaiduProfile_SiteVerify&& from) noexcept
    : BaiduProfile_SiteVerify() {
    *this = ::std::move(from);
  }

  inline BaiduProfile_SiteVerify& operator=(const BaiduProfile_SiteVerify& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaiduProfile_SiteVerify& operator=(BaiduProfile_SiteVerify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaiduProfile_SiteVerify& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaiduProfile_SiteVerify* internal_default_instance() {
    return reinterpret_cast<const BaiduProfile_SiteVerify*>(
               &_BaiduProfile_SiteVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(BaiduProfile_SiteVerify& a, BaiduProfile_SiteVerify& b) {
    a.Swap(&b);
  }
  inline void Swap(BaiduProfile_SiteVerify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaiduProfile_SiteVerify* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaiduProfile_SiteVerify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaiduProfile_SiteVerify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaiduProfile_SiteVerify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaiduProfile_SiteVerify& from) {
    BaiduProfile_SiteVerify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaiduProfile_SiteVerify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.BaiduProfile.SiteVerify";
  }
  protected:
  explicit BaiduProfile_SiteVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.BaiduProfile.SiteVerify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class BaiduProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.BaiduProfile) */ {
 public:
  inline BaiduProfile() : BaiduProfile(nullptr) {}
  ~BaiduProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaiduProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaiduProfile(const BaiduProfile& from);
  BaiduProfile(BaiduProfile&& from) noexcept
    : BaiduProfile() {
    *this = ::std::move(from);
  }

  inline BaiduProfile& operator=(const BaiduProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaiduProfile& operator=(BaiduProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaiduProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaiduProfile* internal_default_instance() {
    return reinterpret_cast<const BaiduProfile*>(
               &_BaiduProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(BaiduProfile& a, BaiduProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BaiduProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaiduProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaiduProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaiduProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaiduProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaiduProfile& from) {
    BaiduProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaiduProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.BaiduProfile";
  }
  protected:
  explicit BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BaiduProfile_SiteVerify SiteVerify;

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyFieldNumber = 1,
  };
  // optional .palm.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
  bool has_site_verify() const;
  void clear_site_verify() ;
  const ::palm::nut::v1::BaiduProfile_SiteVerify& site_verify() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::BaiduProfile_SiteVerify* release_site_verify();
  ::palm::nut::v1::BaiduProfile_SiteVerify* mutable_site_verify();
  void set_allocated_site_verify(::palm::nut::v1::BaiduProfile_SiteVerify* site_verify);
  private:
  const ::palm::nut::v1::BaiduProfile_SiteVerify& _internal_site_verify() const;
  ::palm::nut::v1::BaiduProfile_SiteVerify* _internal_mutable_site_verify();
  public:
  void unsafe_arena_set_allocated_site_verify(
      ::palm::nut::v1::BaiduProfile_SiteVerify* site_verify);
  ::palm::nut::v1::BaiduProfile_SiteVerify* unsafe_arena_release_site_verify();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.BaiduProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::palm::nut::v1::BaiduProfile_SiteVerify* site_verify_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SmsTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SmsTask) */ {
 public:
  inline SmsTask() : SmsTask(nullptr) {}
  ~SmsTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmsTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmsTask(const SmsTask& from);
  SmsTask(SmsTask&& from) noexcept
    : SmsTask() {
    *this = ::std::move(from);
  }

  inline SmsTask& operator=(const SmsTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmsTask& operator=(SmsTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmsTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmsTask* internal_default_instance() {
    return reinterpret_cast<const SmsTask*>(
               &_SmsTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SmsTask& a, SmsTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SmsTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmsTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmsTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmsTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmsTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmsTask& from) {
    SmsTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmsTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SmsTask";
  }
  protected:
  explicit SmsTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kFromFieldNumber = 1,
    kBodyFieldNumber = 3,
  };
  // repeated string to = 2;
  int to_size() const;
  private:
  int _internal_to_size() const;

  public:
  void clear_to() ;
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, std::size_t size);
  void set_to(int index, absl::string_view value);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, std::size_t size);
  void add_to(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();

  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_to();

  public:
  // string from = 1;
  void clear_from() ;
  const std::string& from() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from(Arg_&& arg, Args_... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* ptr);

  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(
      const std::string& value);
  std::string* _internal_mutable_from();

  public:
  // string body = 3;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SmsTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_Database final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.Database) */ {
 public:
  inline SiteStatusResponse_Database() : SiteStatusResponse_Database(nullptr) {}
  ~SiteStatusResponse_Database() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Database(const SiteStatusResponse_Database& from);
  SiteStatusResponse_Database(SiteStatusResponse_Database&& from) noexcept
    : SiteStatusResponse_Database() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Database& operator=(const SiteStatusResponse_Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Database& operator=(SiteStatusResponse_Database&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Database& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Database* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Database*>(
               &_SiteStatusResponse_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SiteStatusResponse_Database& a, SiteStatusResponse_Database& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Database* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Database* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Database>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Database& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Database& from) {
    SiteStatusResponse_Database::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Database* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.Database";
  }
  protected:
  explicit SiteStatusResponse_Database(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string size = 2;
  void clear_size() ;
  const std::string& size() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_size(Arg_&& arg, Args_... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* ptr);

  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(
      const std::string& value);
  std::string* _internal_mutable_size();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.Database)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_PostgreSql final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.PostgreSql) */ {
 public:
  inline SiteStatusResponse_PostgreSql() : SiteStatusResponse_PostgreSql(nullptr) {}
  ~SiteStatusResponse_PostgreSql() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_PostgreSql(const SiteStatusResponse_PostgreSql& from);
  SiteStatusResponse_PostgreSql(SiteStatusResponse_PostgreSql&& from) noexcept
    : SiteStatusResponse_PostgreSql() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_PostgreSql& operator=(const SiteStatusResponse_PostgreSql& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_PostgreSql& operator=(SiteStatusResponse_PostgreSql&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_PostgreSql& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_PostgreSql* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_PostgreSql*>(
               &_SiteStatusResponse_PostgreSql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SiteStatusResponse_PostgreSql& a, SiteStatusResponse_PostgreSql& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_PostgreSql* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_PostgreSql* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_PostgreSql* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_PostgreSql>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_PostgreSql& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_PostgreSql& from) {
    SiteStatusResponse_PostgreSql::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_PostgreSql* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.PostgreSql";
  }
  protected:
  explicit SiteStatusResponse_PostgreSql(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 9,
    kVersionFieldNumber = 1,
    kNowFieldNumber = 2,
  };
  // repeated .palm.nut.v1.SiteStatusResponse.Database databases = 9;
  int databases_size() const;
  private:
  int _internal_databases_size() const;

  public:
  void clear_databases() ;
  ::palm::nut::v1::SiteStatusResponse_Database* mutable_databases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Database >*
      mutable_databases();
  private:
  const ::palm::nut::v1::SiteStatusResponse_Database& _internal_databases(int index) const;
  ::palm::nut::v1::SiteStatusResponse_Database* _internal_add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Database>& _internal_databases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Database>* _internal_mutable_databases();
  public:
  const ::palm::nut::v1::SiteStatusResponse_Database& databases(int index) const;
  ::palm::nut::v1::SiteStatusResponse_Database* add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Database >&
      databases() const;
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // .google.protobuf.Timestamp now = 2;
  bool has_now() const;
  void clear_now() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& now() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_now();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_now();
  void set_allocated_now(::PROTOBUF_NAMESPACE_ID::Timestamp* now);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_now() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_now();
  public:
  void unsafe_arena_set_allocated_now(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* now);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_now();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.PostgreSql)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Database > databases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* now_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_MySql final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.MySql) */ {
 public:
  inline SiteStatusResponse_MySql() : SiteStatusResponse_MySql(nullptr) {}
  ~SiteStatusResponse_MySql() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_MySql(const SiteStatusResponse_MySql& from);
  SiteStatusResponse_MySql(SiteStatusResponse_MySql&& from) noexcept
    : SiteStatusResponse_MySql() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_MySql& operator=(const SiteStatusResponse_MySql& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_MySql& operator=(SiteStatusResponse_MySql&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_MySql& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_MySql* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_MySql*>(
               &_SiteStatusResponse_MySql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SiteStatusResponse_MySql& a, SiteStatusResponse_MySql& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_MySql* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_MySql* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_MySql* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_MySql>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_MySql& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_MySql& from) {
    SiteStatusResponse_MySql::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_MySql* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.MySql";
  }
  protected:
  explicit SiteStatusResponse_MySql(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // uint64 size = 1;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.MySql)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::uint64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_Redis_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.Redis.Item) */ {
 public:
  inline SiteStatusResponse_Redis_Item() : SiteStatusResponse_Redis_Item(nullptr) {}
  ~SiteStatusResponse_Redis_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Redis_Item(const SiteStatusResponse_Redis_Item& from);
  SiteStatusResponse_Redis_Item(SiteStatusResponse_Redis_Item&& from) noexcept
    : SiteStatusResponse_Redis_Item() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Redis_Item& operator=(const SiteStatusResponse_Redis_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Redis_Item& operator=(SiteStatusResponse_Redis_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Redis_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Redis_Item* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Redis_Item*>(
               &_SiteStatusResponse_Redis_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SiteStatusResponse_Redis_Item& a, SiteStatusResponse_Redis_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Redis_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Redis_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Redis_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Redis_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Redis_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Redis_Item& from) {
    SiteStatusResponse_Redis_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Redis_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.Redis.Item";
  }
  protected:
  explicit SiteStatusResponse_Redis_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kTtlFieldNumber = 3,
  };
  // string node = 1;
  void clear_node() ;
  const std::string& node() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* ptr);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // int64 ttl = 3;
  void clear_ttl() ;
  ::int64_t ttl() const;
  void set_ttl(::int64_t value);

  private:
  ::int64_t _internal_ttl() const;
  void _internal_set_ttl(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.Redis.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::int64_t ttl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_Redis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.Redis) */ {
 public:
  inline SiteStatusResponse_Redis() : SiteStatusResponse_Redis(nullptr) {}
  ~SiteStatusResponse_Redis() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Redis(const SiteStatusResponse_Redis& from);
  SiteStatusResponse_Redis(SiteStatusResponse_Redis&& from) noexcept
    : SiteStatusResponse_Redis() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Redis& operator=(const SiteStatusResponse_Redis& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Redis& operator=(SiteStatusResponse_Redis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Redis& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Redis* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Redis*>(
               &_SiteStatusResponse_Redis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SiteStatusResponse_Redis& a, SiteStatusResponse_Redis& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Redis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Redis* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Redis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Redis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Redis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Redis& from) {
    SiteStatusResponse_Redis::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Redis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.Redis";
  }
  protected:
  explicit SiteStatusResponse_Redis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteStatusResponse_Redis_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .palm.nut.v1.SiteStatusResponse.Redis.Item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::SiteStatusResponse_Redis_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Redis_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::SiteStatusResponse_Redis_Item& _internal_items(int index) const;
  ::palm::nut::v1::SiteStatusResponse_Redis_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Redis_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Redis_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::SiteStatusResponse_Redis_Item& items(int index) const;
  ::palm::nut::v1::SiteStatusResponse_Redis_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Redis_Item >&
      items() const;
  // string info = 1;
  void clear_info() ;
  const std::string& info() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* ptr);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.Redis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Redis_Item > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_RabbitMq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.RabbitMq) */ {
 public:
  inline SiteStatusResponse_RabbitMq() : SiteStatusResponse_RabbitMq(nullptr) {}
  ~SiteStatusResponse_RabbitMq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_RabbitMq(const SiteStatusResponse_RabbitMq& from);
  SiteStatusResponse_RabbitMq(SiteStatusResponse_RabbitMq&& from) noexcept
    : SiteStatusResponse_RabbitMq() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_RabbitMq& operator=(const SiteStatusResponse_RabbitMq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_RabbitMq& operator=(SiteStatusResponse_RabbitMq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_RabbitMq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_RabbitMq* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_RabbitMq*>(
               &_SiteStatusResponse_RabbitMq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SiteStatusResponse_RabbitMq& a, SiteStatusResponse_RabbitMq& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_RabbitMq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_RabbitMq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_RabbitMq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_RabbitMq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_RabbitMq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_RabbitMq& from) {
    SiteStatusResponse_RabbitMq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_RabbitMq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.RabbitMq";
  }
  protected:
  explicit SiteStatusResponse_RabbitMq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 1,
    kHeartbeatFieldNumber = 2,
  };
  // string protocol = 1;
  void clear_protocol() ;
  const std::string& protocol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* ptr);

  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
      const std::string& value);
  std::string* _internal_mutable_protocol();

  public:
  // uint32 heartbeat = 2;
  void clear_heartbeat() ;
  ::uint32_t heartbeat() const;
  void set_heartbeat(::uint32_t value);

  private:
  ::uint32_t _internal_heartbeat() const;
  void _internal_set_heartbeat(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.RabbitMq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    ::uint32_t heartbeat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_OpenSearch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.OpenSearch) */ {
 public:
  inline SiteStatusResponse_OpenSearch() : SiteStatusResponse_OpenSearch(nullptr) {}
  ~SiteStatusResponse_OpenSearch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_OpenSearch(const SiteStatusResponse_OpenSearch& from);
  SiteStatusResponse_OpenSearch(SiteStatusResponse_OpenSearch&& from) noexcept
    : SiteStatusResponse_OpenSearch() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_OpenSearch& operator=(const SiteStatusResponse_OpenSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_OpenSearch& operator=(SiteStatusResponse_OpenSearch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_OpenSearch& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_OpenSearch* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_OpenSearch*>(
               &_SiteStatusResponse_OpenSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SiteStatusResponse_OpenSearch& a, SiteStatusResponse_OpenSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_OpenSearch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_OpenSearch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_OpenSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_OpenSearch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_OpenSearch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_OpenSearch& from) {
    SiteStatusResponse_OpenSearch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_OpenSearch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.OpenSearch";
  }
  protected:
  explicit SiteStatusResponse_OpenSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string info = 2;
  void clear_info() ;
  const std::string& info() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* ptr);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.OpenSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_Health final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.Health) */ {
 public:
  inline SiteStatusResponse_Health() : SiteStatusResponse_Health(nullptr) {}
  ~SiteStatusResponse_Health() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_Health(const SiteStatusResponse_Health& from);
  SiteStatusResponse_Health(SiteStatusResponse_Health&& from) noexcept
    : SiteStatusResponse_Health() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_Health& operator=(const SiteStatusResponse_Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_Health& operator=(SiteStatusResponse_Health&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_Health& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_Health* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_Health*>(
               &_SiteStatusResponse_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SiteStatusResponse_Health& a, SiteStatusResponse_Health& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_Health* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_Health* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_Health>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_Health& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_Health& from) {
    SiteStatusResponse_Health::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_Health* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.Health";
  }
  protected:
  explicit SiteStatusResponse_Health(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string status = 2;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.Health)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse_System final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse.System) */ {
 public:
  inline SiteStatusResponse_System() : SiteStatusResponse_System(nullptr) {}
  ~SiteStatusResponse_System() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse_System(const SiteStatusResponse_System& from);
  SiteStatusResponse_System(SiteStatusResponse_System&& from) noexcept
    : SiteStatusResponse_System() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse_System& operator=(const SiteStatusResponse_System& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse_System& operator=(SiteStatusResponse_System&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse_System& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse_System* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse_System*>(
               &_SiteStatusResponse_System_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SiteStatusResponse_System& a, SiteStatusResponse_System& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse_System* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse_System* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse_System* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse_System>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse_System& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse_System& from) {
    SiteStatusResponse_System::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse_System* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse.System";
  }
  protected:
  explicit SiteStatusResponse_System(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCpuFieldNumber = 2,
    kMemoryFieldNumber = 3,
    kBootFieldNumber = 4,
    kDiskFieldNumber = 5,
    kLoadFieldNumber = 6,
    kFsFieldNumber = 7,
    kSwapFieldNumber = 8,
    kUptimeFieldNumber = 9,
    kNetworkFieldNumber = 10,
  };
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string cpu = 2;
  void clear_cpu() ;
  const std::string& cpu() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cpu(Arg_&& arg, Args_... args);
  std::string* mutable_cpu();
  PROTOBUF_NODISCARD std::string* release_cpu();
  void set_allocated_cpu(std::string* ptr);

  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(
      const std::string& value);
  std::string* _internal_mutable_cpu();

  public:
  // string memory = 3;
  void clear_memory() ;
  const std::string& memory() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memory(Arg_&& arg, Args_... args);
  std::string* mutable_memory();
  PROTOBUF_NODISCARD std::string* release_memory();
  void set_allocated_memory(std::string* ptr);

  private:
  const std::string& _internal_memory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memory(
      const std::string& value);
  std::string* _internal_mutable_memory();

  public:
  // string boot = 4;
  void clear_boot() ;
  const std::string& boot() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_boot(Arg_&& arg, Args_... args);
  std::string* mutable_boot();
  PROTOBUF_NODISCARD std::string* release_boot();
  void set_allocated_boot(std::string* ptr);

  private:
  const std::string& _internal_boot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boot(
      const std::string& value);
  std::string* _internal_mutable_boot();

  public:
  // string disk = 5;
  void clear_disk() ;
  const std::string& disk() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_disk(Arg_&& arg, Args_... args);
  std::string* mutable_disk();
  PROTOBUF_NODISCARD std::string* release_disk();
  void set_allocated_disk(std::string* ptr);

  private:
  const std::string& _internal_disk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_disk(
      const std::string& value);
  std::string* _internal_mutable_disk();

  public:
  // string load = 6;
  void clear_load() ;
  const std::string& load() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_load(Arg_&& arg, Args_... args);
  std::string* mutable_load();
  PROTOBUF_NODISCARD std::string* release_load();
  void set_allocated_load(std::string* ptr);

  private:
  const std::string& _internal_load() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load(
      const std::string& value);
  std::string* _internal_mutable_load();

  public:
  // string fs = 7;
  void clear_fs() ;
  const std::string& fs() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fs(Arg_&& arg, Args_... args);
  std::string* mutable_fs();
  PROTOBUF_NODISCARD std::string* release_fs();
  void set_allocated_fs(std::string* ptr);

  private:
  const std::string& _internal_fs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fs(
      const std::string& value);
  std::string* _internal_mutable_fs();

  public:
  // string swap = 8;
  void clear_swap() ;
  const std::string& swap() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_swap(Arg_&& arg, Args_... args);
  std::string* mutable_swap();
  PROTOBUF_NODISCARD std::string* release_swap();
  void set_allocated_swap(std::string* ptr);

  private:
  const std::string& _internal_swap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swap(
      const std::string& value);
  std::string* _internal_mutable_swap();

  public:
  // string uptime = 9;
  void clear_uptime() ;
  const std::string& uptime() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uptime(Arg_&& arg, Args_... args);
  std::string* mutable_uptime();
  PROTOBUF_NODISCARD std::string* release_uptime();
  void set_allocated_uptime(std::string* ptr);

  private:
  const std::string& _internal_uptime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uptime(
      const std::string& value);
  std::string* _internal_mutable_uptime();

  public:
  // string network = 10;
  void clear_network() ;
  const std::string& network() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network(Arg_&& arg, Args_... args);
  std::string* mutable_network();
  PROTOBUF_NODISCARD std::string* release_network();
  void set_allocated_network(std::string* ptr);

  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(
      const std::string& value);
  std::string* _internal_mutable_network();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse.System)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boot_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uptime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class SiteStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteStatusResponse) */ {
 public:
  inline SiteStatusResponse() : SiteStatusResponse(nullptr) {}
  ~SiteStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteStatusResponse(const SiteStatusResponse& from);
  SiteStatusResponse(SiteStatusResponse&& from) noexcept
    : SiteStatusResponse() {
    *this = ::std::move(from);
  }

  inline SiteStatusResponse& operator=(const SiteStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteStatusResponse& operator=(SiteStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SiteStatusResponse*>(
               &_SiteStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SiteStatusResponse& a, SiteStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SiteStatusResponse& from) {
    SiteStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.SiteStatusResponse";
  }
  protected:
  explicit SiteStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteStatusResponse_Database Database;
  typedef SiteStatusResponse_PostgreSql PostgreSql;
  typedef SiteStatusResponse_MySql MySql;
  typedef SiteStatusResponse_Redis Redis;
  typedef SiteStatusResponse_RabbitMq RabbitMq;
  typedef SiteStatusResponse_OpenSearch OpenSearch;
  typedef SiteStatusResponse_Health Health;
  typedef SiteStatusResponse_System System;

  // accessors -------------------------------------------------------

  enum : int {
    kHealthesFieldNumber = 21,
    kPostgresqlFieldNumber = 1,
    kMysqlFieldNumber = 2,
    kRedisFieldNumber = 3,
    kRabbitmqFieldNumber = 4,
    kOpensearchFieldNumber = 5,
    kSystemFieldNumber = 11,
  };
  // repeated .palm.nut.v1.SiteStatusResponse.Health healthes = 21;
  int healthes_size() const;
  private:
  int _internal_healthes_size() const;

  public:
  void clear_healthes() ;
  ::palm::nut::v1::SiteStatusResponse_Health* mutable_healthes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Health >*
      mutable_healthes();
  private:
  const ::palm::nut::v1::SiteStatusResponse_Health& _internal_healthes(int index) const;
  ::palm::nut::v1::SiteStatusResponse_Health* _internal_add_healthes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Health>& _internal_healthes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Health>* _internal_mutable_healthes();
  public:
  const ::palm::nut::v1::SiteStatusResponse_Health& healthes(int index) const;
  ::palm::nut::v1::SiteStatusResponse_Health* add_healthes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Health >&
      healthes() const;
  // .palm.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
  bool has_postgresql() const;
  void clear_postgresql() ;
  const ::palm::nut::v1::SiteStatusResponse_PostgreSql& postgresql() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteStatusResponse_PostgreSql* release_postgresql();
  ::palm::nut::v1::SiteStatusResponse_PostgreSql* mutable_postgresql();
  void set_allocated_postgresql(::palm::nut::v1::SiteStatusResponse_PostgreSql* postgresql);
  private:
  const ::palm::nut::v1::SiteStatusResponse_PostgreSql& _internal_postgresql() const;
  ::palm::nut::v1::SiteStatusResponse_PostgreSql* _internal_mutable_postgresql();
  public:
  void unsafe_arena_set_allocated_postgresql(
      ::palm::nut::v1::SiteStatusResponse_PostgreSql* postgresql);
  ::palm::nut::v1::SiteStatusResponse_PostgreSql* unsafe_arena_release_postgresql();
  // .palm.nut.v1.SiteStatusResponse.MySql mysql = 2;
  bool has_mysql() const;
  void clear_mysql() ;
  const ::palm::nut::v1::SiteStatusResponse_MySql& mysql() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteStatusResponse_MySql* release_mysql();
  ::palm::nut::v1::SiteStatusResponse_MySql* mutable_mysql();
  void set_allocated_mysql(::palm::nut::v1::SiteStatusResponse_MySql* mysql);
  private:
  const ::palm::nut::v1::SiteStatusResponse_MySql& _internal_mysql() const;
  ::palm::nut::v1::SiteStatusResponse_MySql* _internal_mutable_mysql();
  public:
  void unsafe_arena_set_allocated_mysql(
      ::palm::nut::v1::SiteStatusResponse_MySql* mysql);
  ::palm::nut::v1::SiteStatusResponse_MySql* unsafe_arena_release_mysql();
  // .palm.nut.v1.SiteStatusResponse.Redis redis = 3;
  bool has_redis() const;
  void clear_redis() ;
  const ::palm::nut::v1::SiteStatusResponse_Redis& redis() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteStatusResponse_Redis* release_redis();
  ::palm::nut::v1::SiteStatusResponse_Redis* mutable_redis();
  void set_allocated_redis(::palm::nut::v1::SiteStatusResponse_Redis* redis);
  private:
  const ::palm::nut::v1::SiteStatusResponse_Redis& _internal_redis() const;
  ::palm::nut::v1::SiteStatusResponse_Redis* _internal_mutable_redis();
  public:
  void unsafe_arena_set_allocated_redis(
      ::palm::nut::v1::SiteStatusResponse_Redis* redis);
  ::palm::nut::v1::SiteStatusResponse_Redis* unsafe_arena_release_redis();
  // .palm.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
  bool has_rabbitmq() const;
  void clear_rabbitmq() ;
  const ::palm::nut::v1::SiteStatusResponse_RabbitMq& rabbitmq() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteStatusResponse_RabbitMq* release_rabbitmq();
  ::palm::nut::v1::SiteStatusResponse_RabbitMq* mutable_rabbitmq();
  void set_allocated_rabbitmq(::palm::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq);
  private:
  const ::palm::nut::v1::SiteStatusResponse_RabbitMq& _internal_rabbitmq() const;
  ::palm::nut::v1::SiteStatusResponse_RabbitMq* _internal_mutable_rabbitmq();
  public:
  void unsafe_arena_set_allocated_rabbitmq(
      ::palm::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq);
  ::palm::nut::v1::SiteStatusResponse_RabbitMq* unsafe_arena_release_rabbitmq();
  // .palm.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
  bool has_opensearch() const;
  void clear_opensearch() ;
  const ::palm::nut::v1::SiteStatusResponse_OpenSearch& opensearch() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteStatusResponse_OpenSearch* release_opensearch();
  ::palm::nut::v1::SiteStatusResponse_OpenSearch* mutable_opensearch();
  void set_allocated_opensearch(::palm::nut::v1::SiteStatusResponse_OpenSearch* opensearch);
  private:
  const ::palm::nut::v1::SiteStatusResponse_OpenSearch& _internal_opensearch() const;
  ::palm::nut::v1::SiteStatusResponse_OpenSearch* _internal_mutable_opensearch();
  public:
  void unsafe_arena_set_allocated_opensearch(
      ::palm::nut::v1::SiteStatusResponse_OpenSearch* opensearch);
  ::palm::nut::v1::SiteStatusResponse_OpenSearch* unsafe_arena_release_opensearch();
  // .palm.nut.v1.SiteStatusResponse.System system = 11;
  bool has_system() const;
  void clear_system() ;
  const ::palm::nut::v1::SiteStatusResponse_System& system() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::SiteStatusResponse_System* release_system();
  ::palm::nut::v1::SiteStatusResponse_System* mutable_system();
  void set_allocated_system(::palm::nut::v1::SiteStatusResponse_System* system);
  private:
  const ::palm::nut::v1::SiteStatusResponse_System& _internal_system() const;
  ::palm::nut::v1::SiteStatusResponse_System* _internal_mutable_system();
  public:
  void unsafe_arena_set_allocated_system(
      ::palm::nut::v1::SiteStatusResponse_System* system);
  ::palm::nut::v1::SiteStatusResponse_System* unsafe_arena_release_system();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Health > healthes_;
    ::palm::nut::v1::SiteStatusResponse_PostgreSql* postgresql_;
    ::palm::nut::v1::SiteStatusResponse_MySql* mysql_;
    ::palm::nut::v1::SiteStatusResponse_Redis* redis_;
    ::palm::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq_;
    ::palm::nut::v1::SiteStatusResponse_OpenSearch* opensearch_;
    ::palm::nut::v1::SiteStatusResponse_System* system_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class ShorterLinkIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.ShorterLinkIndexResponse.Item) */ {
 public:
  inline ShorterLinkIndexResponse_Item() : ShorterLinkIndexResponse_Item(nullptr) {}
  ~ShorterLinkIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShorterLinkIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShorterLinkIndexResponse_Item(const ShorterLinkIndexResponse_Item& from);
  ShorterLinkIndexResponse_Item(ShorterLinkIndexResponse_Item&& from) noexcept
    : ShorterLinkIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline ShorterLinkIndexResponse_Item& operator=(const ShorterLinkIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShorterLinkIndexResponse_Item& operator=(ShorterLinkIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShorterLinkIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShorterLinkIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const ShorterLinkIndexResponse_Item*>(
               &_ShorterLinkIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ShorterLinkIndexResponse_Item& a, ShorterLinkIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ShorterLinkIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShorterLinkIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShorterLinkIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShorterLinkIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShorterLinkIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShorterLinkIndexResponse_Item& from) {
    ShorterLinkIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShorterLinkIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.ShorterLinkIndexResponse.Item";
  }
  protected:
  explicit ShorterLinkIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kDetailsFieldNumber = 3,
    kCodeFieldNumber = 9,
    kUpdatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
  };
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string details = 3;
  void clear_details() ;
  const std::string& details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* ptr);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string code = 9;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.ShorterLinkIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class ShorterLinkIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.ShorterLinkIndexResponse) */ {
 public:
  inline ShorterLinkIndexResponse() : ShorterLinkIndexResponse(nullptr) {}
  ~ShorterLinkIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShorterLinkIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShorterLinkIndexResponse(const ShorterLinkIndexResponse& from);
  ShorterLinkIndexResponse(ShorterLinkIndexResponse&& from) noexcept
    : ShorterLinkIndexResponse() {
    *this = ::std::move(from);
  }

  inline ShorterLinkIndexResponse& operator=(const ShorterLinkIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShorterLinkIndexResponse& operator=(ShorterLinkIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShorterLinkIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShorterLinkIndexResponse* internal_default_instance() {
    return reinterpret_cast<const ShorterLinkIndexResponse*>(
               &_ShorterLinkIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ShorterLinkIndexResponse& a, ShorterLinkIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShorterLinkIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShorterLinkIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShorterLinkIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShorterLinkIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShorterLinkIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShorterLinkIndexResponse& from) {
    ShorterLinkIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShorterLinkIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.ShorterLinkIndexResponse";
  }
  protected:
  explicit ShorterLinkIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShorterLinkIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kPaginationFieldNumber = 1,
  };
  // repeated .palm.nut.v1.ShorterLinkIndexResponse.Item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::ShorterLinkIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::ShorterLinkIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::ShorterLinkIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::ShorterLinkIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::ShorterLinkIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::ShorterLinkIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::ShorterLinkIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::ShorterLinkIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::ShorterLinkIndexResponse_Item >&
      items() const;
  // .palm.nut.v1.Pagination pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::palm::nut::v1::Pagination& pagination() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::Pagination* release_pagination();
  ::palm::nut::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::palm::nut::v1::Pagination* pagination);
  private:
  const ::palm::nut::v1::Pagination& _internal_pagination() const;
  ::palm::nut::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::palm::nut::v1::Pagination* pagination);
  ::palm::nut::v1::Pagination* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:palm.nut.v1.ShorterLinkIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::ShorterLinkIndexResponse_Item > items_;
    ::palm::nut::v1::Pagination* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class ShorterLinkCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.ShorterLinkCreateRequest) */ {
 public:
  inline ShorterLinkCreateRequest() : ShorterLinkCreateRequest(nullptr) {}
  ~ShorterLinkCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShorterLinkCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShorterLinkCreateRequest(const ShorterLinkCreateRequest& from);
  ShorterLinkCreateRequest(ShorterLinkCreateRequest&& from) noexcept
    : ShorterLinkCreateRequest() {
    *this = ::std::move(from);
  }

  inline ShorterLinkCreateRequest& operator=(const ShorterLinkCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShorterLinkCreateRequest& operator=(ShorterLinkCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShorterLinkCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShorterLinkCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ShorterLinkCreateRequest*>(
               &_ShorterLinkCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ShorterLinkCreateRequest& a, ShorterLinkCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShorterLinkCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShorterLinkCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShorterLinkCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShorterLinkCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShorterLinkCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShorterLinkCreateRequest& from) {
    ShorterLinkCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShorterLinkCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.ShorterLinkCreateRequest";
  }
  protected:
  explicit ShorterLinkCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string details = 2;
  void clear_details() ;
  const std::string& details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* ptr);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.ShorterLinkCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class ShorterLinkUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.ShorterLinkUpdateRequest) */ {
 public:
  inline ShorterLinkUpdateRequest() : ShorterLinkUpdateRequest(nullptr) {}
  ~ShorterLinkUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShorterLinkUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShorterLinkUpdateRequest(const ShorterLinkUpdateRequest& from);
  ShorterLinkUpdateRequest(ShorterLinkUpdateRequest&& from) noexcept
    : ShorterLinkUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ShorterLinkUpdateRequest& operator=(const ShorterLinkUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShorterLinkUpdateRequest& operator=(ShorterLinkUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShorterLinkUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShorterLinkUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ShorterLinkUpdateRequest*>(
               &_ShorterLinkUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ShorterLinkUpdateRequest& a, ShorterLinkUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShorterLinkUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShorterLinkUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShorterLinkUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShorterLinkUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShorterLinkUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShorterLinkUpdateRequest& from) {
    ShorterLinkUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShorterLinkUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.ShorterLinkUpdateRequest";
  }
  protected:
  explicit ShorterLinkUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kDetailsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string details = 3;
  void clear_details() ;
  const std::string& details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* ptr);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.ShorterLinkUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class TagIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TagIndexResponse.Item) */ {
 public:
  inline TagIndexResponse_Item() : TagIndexResponse_Item(nullptr) {}
  ~TagIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TagIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TagIndexResponse_Item(const TagIndexResponse_Item& from);
  TagIndexResponse_Item(TagIndexResponse_Item&& from) noexcept
    : TagIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline TagIndexResponse_Item& operator=(const TagIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagIndexResponse_Item& operator=(TagIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TagIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const TagIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const TagIndexResponse_Item*>(
               &_TagIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(TagIndexResponse_Item& a, TagIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(TagIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TagIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TagIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TagIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TagIndexResponse_Item& from) {
    TagIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.TagIndexResponse.Item";
  }
  protected:
  explicit TagIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kUpdatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kPriorityFieldNumber = 3,
  };
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 priority = 3;
  void clear_priority() ;
  ::int32_t priority() const;
  void set_priority(::int32_t value);

  private:
  ::int32_t _internal_priority() const;
  void _internal_set_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.TagIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::int32_t id_;
    ::int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class TagIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TagIndexResponse) */ {
 public:
  inline TagIndexResponse() : TagIndexResponse(nullptr) {}
  ~TagIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TagIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TagIndexResponse(const TagIndexResponse& from);
  TagIndexResponse(TagIndexResponse&& from) noexcept
    : TagIndexResponse() {
    *this = ::std::move(from);
  }

  inline TagIndexResponse& operator=(const TagIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagIndexResponse& operator=(TagIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TagIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TagIndexResponse* internal_default_instance() {
    return reinterpret_cast<const TagIndexResponse*>(
               &_TagIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TagIndexResponse& a, TagIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TagIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TagIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TagIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TagIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TagIndexResponse& from) {
    TagIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.TagIndexResponse";
  }
  protected:
  explicit TagIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TagIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.TagIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::TagIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::TagIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::TagIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::TagIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::TagIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::TagIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::TagIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::TagIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::TagIndexResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.TagIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::TagIndexResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class TagCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TagCreateRequest) */ {
 public:
  inline TagCreateRequest() : TagCreateRequest(nullptr) {}
  ~TagCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TagCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TagCreateRequest(const TagCreateRequest& from);
  TagCreateRequest(TagCreateRequest&& from) noexcept
    : TagCreateRequest() {
    *this = ::std::move(from);
  }

  inline TagCreateRequest& operator=(const TagCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagCreateRequest& operator=(TagCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TagCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TagCreateRequest* internal_default_instance() {
    return reinterpret_cast<const TagCreateRequest*>(
               &_TagCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(TagCreateRequest& a, TagCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TagCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TagCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TagCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TagCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TagCreateRequest& from) {
    TagCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.TagCreateRequest";
  }
  protected:
  explicit TagCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kPriorityFieldNumber = 11,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // int32 priority = 11;
  void clear_priority() ;
  ::int32_t priority() const;
  void set_priority(::int32_t value);

  private:
  ::int32_t _internal_priority() const;
  void _internal_set_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.TagCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class TagUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TagUpdateRequest) */ {
 public:
  inline TagUpdateRequest() : TagUpdateRequest(nullptr) {}
  ~TagUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TagUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TagUpdateRequest(const TagUpdateRequest& from);
  TagUpdateRequest(TagUpdateRequest&& from) noexcept
    : TagUpdateRequest() {
    *this = ::std::move(from);
  }

  inline TagUpdateRequest& operator=(const TagUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagUpdateRequest& operator=(TagUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TagUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TagUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const TagUpdateRequest*>(
               &_TagUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(TagUpdateRequest& a, TagUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TagUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TagUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TagUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TagUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TagUpdateRequest& from) {
    TagUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.TagUpdateRequest";
  }
  protected:
  explicit TagUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kIdFieldNumber = 1,
    kPriorityFieldNumber = 11,
  };
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 priority = 11;
  void clear_priority() ;
  ::int32_t priority() const;
  void set_priority(::int32_t value);

  private:
  ::int32_t _internal_priority() const;
  void _internal_set_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.TagUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::int32_t id_;
    ::int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class CategoryIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.CategoryIndexResponse.Item) */ {
 public:
  inline CategoryIndexResponse_Item() : CategoryIndexResponse_Item(nullptr) {}
  ~CategoryIndexResponse_Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryIndexResponse_Item(const CategoryIndexResponse_Item& from);
  CategoryIndexResponse_Item(CategoryIndexResponse_Item&& from) noexcept
    : CategoryIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline CategoryIndexResponse_Item& operator=(const CategoryIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryIndexResponse_Item& operator=(CategoryIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const CategoryIndexResponse_Item*>(
               &_CategoryIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CategoryIndexResponse_Item& a, CategoryIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryIndexResponse_Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CategoryIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CategoryIndexResponse_Item& from) {
    CategoryIndexResponse_Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.CategoryIndexResponse.Item";
  }
  protected:
  explicit CategoryIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kUpdatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
  };
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 left = 3;
  void clear_left() ;
  ::int32_t left() const;
  void set_left(::int32_t value);

  private:
  ::int32_t _internal_left() const;
  void _internal_set_left(::int32_t value);

  public:
  // int32 right = 4;
  void clear_right() ;
  ::int32_t right() const;
  void set_right(::int32_t value);

  private:
  ::int32_t _internal_right() const;
  void _internal_set_right(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.CategoryIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::int32_t id_;
    ::int32_t left_;
    ::int32_t right_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class CategoryIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.CategoryIndexResponse) */ {
 public:
  inline CategoryIndexResponse() : CategoryIndexResponse(nullptr) {}
  ~CategoryIndexResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryIndexResponse(const CategoryIndexResponse& from);
  CategoryIndexResponse(CategoryIndexResponse&& from) noexcept
    : CategoryIndexResponse() {
    *this = ::std::move(from);
  }

  inline CategoryIndexResponse& operator=(const CategoryIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryIndexResponse& operator=(CategoryIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryIndexResponse* internal_default_instance() {
    return reinterpret_cast<const CategoryIndexResponse*>(
               &_CategoryIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CategoryIndexResponse& a, CategoryIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryIndexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CategoryIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CategoryIndexResponse& from) {
    CategoryIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.CategoryIndexResponse";
  }
  protected:
  explicit CategoryIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.CategoryIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::palm::nut::v1::CategoryIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::CategoryIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::CategoryIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::CategoryIndexResponse_Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::CategoryIndexResponse_Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::CategoryIndexResponse_Item>* _internal_mutable_items();
  public:
  const ::palm::nut::v1::CategoryIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::CategoryIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::CategoryIndexResponse_Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.CategoryIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::CategoryIndexResponse_Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class CategoryCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.CategoryCreateRequest) */ {
 public:
  inline CategoryCreateRequest() : CategoryCreateRequest(nullptr) {}
  ~CategoryCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryCreateRequest(const CategoryCreateRequest& from);
  CategoryCreateRequest(CategoryCreateRequest&& from) noexcept
    : CategoryCreateRequest() {
    *this = ::std::move(from);
  }

  inline CategoryCreateRequest& operator=(const CategoryCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryCreateRequest& operator=(CategoryCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ByCase {
    kLeft = 2,
    kParent = 3,
    BY_NOT_SET = 0,
  };

  static inline const CategoryCreateRequest* internal_default_instance() {
    return reinterpret_cast<const CategoryCreateRequest*>(
               &_CategoryCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CategoryCreateRequest& a, CategoryCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CategoryCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CategoryCreateRequest& from) {
    CategoryCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.CategoryCreateRequest";
  }
  protected:
  explicit CategoryCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kLeftFieldNumber = 2,
    kParentFieldNumber = 3,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // int32 left = 2;
  bool has_left() const;
  void clear_left() ;
  ::int32_t left() const;
  void set_left(::int32_t value);

  private:
  ::int32_t _internal_left() const;
  void _internal_set_left(::int32_t value);

  public:
  // int32 parent = 3;
  bool has_parent() const;
  void clear_parent() ;
  ::int32_t parent() const;
  void set_parent(::int32_t value);

  private:
  ::int32_t _internal_parent() const;
  void _internal_set_parent(::int32_t value);

  public:
  void clear_by();
  ByCase by_case() const;
  // @@protoc_insertion_point(class_scope:palm.nut.v1.CategoryCreateRequest)
 private:
  class _Internal;
  void set_has_left();
  void set_has_parent();

  inline bool has_by() const;
  inline void clear_has_by();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    union ByUnion {
      constexpr ByUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::int32_t left_;
      ::int32_t parent_;
    } by_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};// -------------------------------------------------------------------

class CategoryUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.CategoryUpdateRequest) */ {
 public:
  inline CategoryUpdateRequest() : CategoryUpdateRequest(nullptr) {}
  ~CategoryUpdateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryUpdateRequest(const CategoryUpdateRequest& from);
  CategoryUpdateRequest(CategoryUpdateRequest&& from) noexcept
    : CategoryUpdateRequest() {
    *this = ::std::move(from);
  }

  inline CategoryUpdateRequest& operator=(const CategoryUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryUpdateRequest& operator=(CategoryUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const CategoryUpdateRequest*>(
               &_CategoryUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CategoryUpdateRequest& a, CategoryUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CategoryUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CategoryUpdateRequest& from) {
    CategoryUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.nut.v1.CategoryUpdateRequest";
  }
  protected:
  explicit CategoryUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.nut.v1.CategoryUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IdRequest

// int32 id = 1;
inline void IdRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t IdRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IdRequest.id)
  return _internal_id();
}
inline void IdRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.IdRequest.id)
}
inline ::int32_t IdRequest::_internal_id() const {
  return _impl_.id_;
}
inline void IdRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// Pager

// int64 page = 1;
inline void Pager::clear_page() {
  _impl_.page_ = ::int64_t{0};
}
inline ::int64_t Pager::page() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pager.page)
  return _internal_page();
}
inline void Pager::set_page(::int64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pager.page)
}
inline ::int64_t Pager::_internal_page() const {
  return _impl_.page_;
}
inline void Pager::_internal_set_page(::int64_t value) {
  ;
  _impl_.page_ = value;
}

// int64 size = 2;
inline void Pager::clear_size() {
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t Pager::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pager.size)
  return _internal_size();
}
inline void Pager::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pager.size)
}
inline ::int64_t Pager::_internal_size() const {
  return _impl_.size_;
}
inline void Pager::_internal_set_size(::int64_t value) {
  ;
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// Pagination

// int64 page = 1;
inline void Pagination::clear_page() {
  _impl_.page_ = ::int64_t{0};
}
inline ::int64_t Pagination::page() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.page)
  return _internal_page();
}
inline void Pagination::set_page(::int64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.page)
}
inline ::int64_t Pagination::_internal_page() const {
  return _impl_.page_;
}
inline void Pagination::_internal_set_page(::int64_t value) {
  ;
  _impl_.page_ = value;
}

// int64 size = 2;
inline void Pagination::clear_size() {
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t Pagination::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.size)
  return _internal_size();
}
inline void Pagination::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.size)
}
inline ::int64_t Pagination::_internal_size() const {
  return _impl_.size_;
}
inline void Pagination::_internal_set_size(::int64_t value) {
  ;
  _impl_.size_ = value;
}

// int64 total = 3;
inline void Pagination::clear_total() {
  _impl_.total_ = ::int64_t{0};
}
inline ::int64_t Pagination::total() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.total)
  return _internal_total();
}
inline void Pagination::set_total(::int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.total)
}
inline ::int64_t Pagination::_internal_total() const {
  return _impl_.total_;
}
inline void Pagination::_internal_set_total(::int64_t value) {
  ;
  _impl_.total_ = value;
}

// bool has_next = 11;
inline void Pagination::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool Pagination::has_next() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.has_next)
  return _internal_has_next();
}
inline void Pagination::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.has_next)
}
inline bool Pagination::_internal_has_next() const {
  return _impl_.has_next_;
}
inline void Pagination::_internal_set_has_next(bool value) {
  ;
  _impl_.has_next_ = value;
}

// bool has_previous = 12;
inline void Pagination::clear_has_previous() {
  _impl_.has_previous_ = false;
}
inline bool Pagination::has_previous() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.has_previous)
  return _internal_has_previous();
}
inline void Pagination::set_has_previous(bool value) {
  _internal_set_has_previous(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.has_previous)
}
inline bool Pagination::_internal_has_previous() const {
  return _impl_.has_previous_;
}
inline void Pagination::_internal_set_has_previous(bool value) {
  ;
  _impl_.has_previous_ = value;
}

// -------------------------------------------------------------------

// MediaContent

// .palm.nut.v1.MediaContent.Editor editor = 1;
inline void MediaContent::clear_editor() {
  _impl_.editor_ = 0;
}
inline ::palm::nut::v1::MediaContent_Editor MediaContent::editor() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.editor)
  return _internal_editor();
}
inline void MediaContent::set_editor(::palm::nut::v1::MediaContent_Editor value) {
   _internal_set_editor(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.MediaContent.editor)
}
inline ::palm::nut::v1::MediaContent_Editor MediaContent::_internal_editor() const {
  return static_cast<::palm::nut::v1::MediaContent_Editor>(_impl_.editor_);
}
inline void MediaContent::_internal_set_editor(::palm::nut::v1::MediaContent_Editor value) {
  ;
  _impl_.editor_ = value;
}

// string body = 2;
inline void MediaContent::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& MediaContent::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MediaContent::set_body(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.MediaContent.body)
}
inline std::string* MediaContent::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.MediaContent.body)
  return _s;
}
inline const std::string& MediaContent::_internal_body() const {
  return _impl_.body_.Get();
}
inline void MediaContent::_internal_set_body(const std::string& value) {
  ;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* MediaContent::_internal_mutable_body() {
  ;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* MediaContent::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.MediaContent.body)
  return _impl_.body_.Release();
}
inline void MediaContent::set_allocated_body(std::string* value) {
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.MediaContent.body)
}

// .palm.nut.v1.MediaContent.Status status = 3;
inline void MediaContent::clear_status() {
  _impl_.status_ = 0;
}
inline ::palm::nut::v1::MediaContent_Status MediaContent::status() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.status)
  return _internal_status();
}
inline void MediaContent::set_status(::palm::nut::v1::MediaContent_Status value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.MediaContent.status)
}
inline ::palm::nut::v1::MediaContent_Status MediaContent::_internal_status() const {
  return static_cast<::palm::nut::v1::MediaContent_Status>(_impl_.status_);
}
inline void MediaContent::_internal_set_status(::palm::nut::v1::MediaContent_Status value) {
  ;
  _impl_.status_ = value;
}

// optional .google.protobuf.Timestamp published_at = 11;
inline bool MediaContent::has_published_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.published_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MediaContent::_internal_published_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.published_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MediaContent::published_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.published_at)
  return _internal_published_at();
}
inline void MediaContent::unsafe_arena_set_allocated_published_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* published_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.published_at_);
  }
  _impl_.published_at_ = published_at;
  if (published_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.MediaContent.published_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::release_published_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.published_at_;
  _impl_.published_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::unsafe_arena_release_published_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.MediaContent.published_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.published_at_;
  _impl_.published_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::_internal_mutable_published_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.published_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.published_at_ = p;
  }
  return _impl_.published_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::mutable_published_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_published_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.MediaContent.published_at)
  return _msg;
}
inline void MediaContent::set_allocated_published_at(::PROTOBUF_NAMESPACE_ID::Timestamp* published_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.published_at_);
  }
  if (published_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(published_at));
    if (message_arena != submessage_arena) {
      published_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, published_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.published_at_ = published_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.MediaContent.published_at)
}

// -------------------------------------------------------------------

// UserDetail

// string nickname = 1;
inline void UserDetail::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserDetail::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserDetail.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserDetail::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserDetail.nickname)
}
inline std::string* UserDetail::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserDetail.nickname)
  return _s;
}
inline const std::string& UserDetail::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UserDetail::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserDetail::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserDetail.nickname)
  return _impl_.nickname_.Release();
}
inline void UserDetail::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserDetail.nickname)
}

// string real_name = 2;
inline void UserDetail::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserDetail::real_name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserDetail.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserDetail::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserDetail.real_name)
}
inline std::string* UserDetail::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserDetail.real_name)
  return _s;
}
inline const std::string& UserDetail::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void UserDetail::_internal_set_real_name(const std::string& value) {
  ;


  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserDetail::_internal_mutable_real_name() {
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserDetail::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserDetail.real_name)
  return _impl_.real_name_.Release();
}
inline void UserDetail::set_allocated_real_name(std::string* value) {
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserDetail.real_name)
}

// -------------------------------------------------------------------

// Oauth2State

// string goto = 1;
inline void Oauth2State::clear_goto_() {
  _impl_.goto__.ClearToEmpty();
}
inline const std::string& Oauth2State::goto_() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Oauth2State.goto)
  return _internal_goto_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_goto_(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.goto__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.Oauth2State.goto)
}
inline std::string* Oauth2State::mutable_goto_() {
  std::string* _s = _internal_mutable_goto_();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.Oauth2State.goto)
  return _s;
}
inline const std::string& Oauth2State::_internal_goto_() const {
  return _impl_.goto__.Get();
}
inline void Oauth2State::_internal_set_goto_(const std::string& value) {
  ;


  _impl_.goto__.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_goto_() {
  ;
  return _impl_.goto__.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_goto_() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.Oauth2State.goto)
  return _impl_.goto__.Release();
}
inline void Oauth2State::set_allocated_goto_(std::string* value) {
  _impl_.goto__.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.goto__.IsDefault()) {
          _impl_.goto__.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.Oauth2State.goto)
}

// string host = 2;
inline void Oauth2State::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& Oauth2State::host() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Oauth2State.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.Oauth2State.host)
}
inline std::string* Oauth2State::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.Oauth2State.host)
  return _s;
}
inline const std::string& Oauth2State::_internal_host() const {
  return _impl_.host_.Get();
}
inline void Oauth2State::_internal_set_host(const std::string& value) {
  ;


  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_host() {
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_host() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.Oauth2State.host)
  return _impl_.host_.Release();
}
inline void Oauth2State::set_allocated_host(std::string* value) {
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.Oauth2State.host)
}

// optional string user = 3;
inline bool Oauth2State::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Oauth2State::clear_user() {
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Oauth2State::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Oauth2State.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_user(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.Oauth2State.user)
}
inline std::string* Oauth2State::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.Oauth2State.user)
  return _s;
}
inline const std::string& Oauth2State::_internal_user() const {
  return _impl_.user_.Get();
}
inline void Oauth2State::_internal_set_user(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_user() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.Oauth2State.user)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Oauth2State::set_allocated_user(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.Oauth2State.user)
}

// string id = 9;
inline void Oauth2State::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Oauth2State::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Oauth2State.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oauth2State::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.Oauth2State.id)
}
inline std::string* Oauth2State::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.Oauth2State.id)
  return _s;
}
inline const std::string& Oauth2State::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Oauth2State::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Oauth2State::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Oauth2State::release_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.Oauth2State.id)
  return _impl_.id_.Release();
}
inline void Oauth2State::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.Oauth2State.id)
}

// -------------------------------------------------------------------

// UserSignInRequest

// string nickname = 1;
inline bool UserSignInRequest::has_nickname() const {
  return user_case() == kNickname;
}
inline void UserSignInRequest::set_has_nickname() {
  _impl_._oneof_case_[0] = kNickname;
}
inline void UserSignInRequest::clear_nickname() {
  if (user_case() == kNickname) {
    _impl_.user_.nickname_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserSignInRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  _impl_.user_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInRequest.nickname)
}
inline std::string* UserSignInRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInRequest.nickname)
  return _s;
}
inline const std::string& UserSignInRequest::_internal_nickname() const {
  if (user_case() != kNickname) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.nickname_.Get();
}
inline void UserSignInRequest::_internal_set_nickname(const std::string& value) {
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }


  _impl_.user_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInRequest::_internal_mutable_nickname() {
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  return _impl_.user_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInRequest.nickname)
  if (user_case() != kNickname) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.nickname_.Release();
}
inline void UserSignInRequest::set_allocated_nickname(std::string* value) {
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_nickname();
    _impl_.user_.nickname_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInRequest.nickname)
}

// string email = 2;
inline bool UserSignInRequest::has_email() const {
  return user_case() == kEmail;
}
inline void UserSignInRequest::set_has_email() {
  _impl_._oneof_case_[0] = kEmail;
}
inline void UserSignInRequest::clear_email() {
  if (user_case() == kEmail) {
    _impl_.user_.email_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserSignInRequest::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  _impl_.user_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInRequest.email)
}
inline std::string* UserSignInRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInRequest.email)
  return _s;
}
inline const std::string& UserSignInRequest::_internal_email() const {
  if (user_case() != kEmail) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.email_.Get();
}
inline void UserSignInRequest::_internal_set_email(const std::string& value) {
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }


  _impl_.user_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInRequest::_internal_mutable_email() {
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  return _impl_.user_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInRequest::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInRequest.email)
  if (user_case() != kEmail) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.email_.Release();
}
inline void UserSignInRequest::set_allocated_email(std::string* value) {
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_email();
    _impl_.user_.email_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInRequest.email)
}

// string password = 9;
inline void UserSignInRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserSignInRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInRequest.password)
}
inline std::string* UserSignInRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInRequest.password)
  return _s;
}
inline const std::string& UserSignInRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserSignInRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInRequest::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInRequest.password)
  return _impl_.password_.Release();
}
inline void UserSignInRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInRequest.password)
}

// .google.protobuf.Duration ttl = 11;
inline bool UserSignInRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& UserSignInRequest::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& UserSignInRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInRequest.ttl)
  return _internal_ttl();
}
inline void UserSignInRequest::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserSignInRequest.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* UserSignInRequest::release_ttl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* UserSignInRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInRequest.ttl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* UserSignInRequest::_internal_mutable_ttl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* UserSignInRequest::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInRequest.ttl)
  return _msg;
}
inline void UserSignInRequest::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInRequest.ttl)
}

inline bool UserSignInRequest::has_user() const {
  return user_case() != USER_NOT_SET;
}
inline void UserSignInRequest::clear_has_user() {
  _impl_._oneof_case_[0] = USER_NOT_SET;
}
inline UserSignInRequest::UserCase UserSignInRequest::user_case() const {
  return UserSignInRequest::UserCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserQueryRequest

// string nickname = 1;
inline bool UserQueryRequest::has_nickname() const {
  return user_case() == kNickname;
}
inline void UserQueryRequest::set_has_nickname() {
  _impl_._oneof_case_[0] = kNickname;
}
inline void UserQueryRequest::clear_nickname() {
  if (user_case() == kNickname) {
    _impl_.user_.nickname_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserQueryRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserQueryRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQueryRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  _impl_.user_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserQueryRequest.nickname)
}
inline std::string* UserQueryRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserQueryRequest.nickname)
  return _s;
}
inline const std::string& UserQueryRequest::_internal_nickname() const {
  if (user_case() != kNickname) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.nickname_.Get();
}
inline void UserQueryRequest::_internal_set_nickname(const std::string& value) {
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }


  _impl_.user_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserQueryRequest::_internal_mutable_nickname() {
  if (user_case() != kNickname) {
    clear_user();

    set_has_nickname();
    _impl_.user_.nickname_.InitDefault();
  }
  return _impl_.user_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserQueryRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserQueryRequest.nickname)
  if (user_case() != kNickname) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.nickname_.Release();
}
inline void UserQueryRequest::set_allocated_nickname(std::string* value) {
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_nickname();
    _impl_.user_.nickname_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserQueryRequest.nickname)
}

// string email = 2;
inline bool UserQueryRequest::has_email() const {
  return user_case() == kEmail;
}
inline void UserQueryRequest::set_has_email() {
  _impl_._oneof_case_[0] = kEmail;
}
inline void UserQueryRequest::clear_email() {
  if (user_case() == kEmail) {
    _impl_.user_.email_.Destroy();
    clear_has_user();
  }
}
inline const std::string& UserQueryRequest::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserQueryRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQueryRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  _impl_.user_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserQueryRequest.email)
}
inline std::string* UserQueryRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserQueryRequest.email)
  return _s;
}
inline const std::string& UserQueryRequest::_internal_email() const {
  if (user_case() != kEmail) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.user_.email_.Get();
}
inline void UserQueryRequest::_internal_set_email(const std::string& value) {
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }


  _impl_.user_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserQueryRequest::_internal_mutable_email() {
  if (user_case() != kEmail) {
    clear_user();

    set_has_email();
    _impl_.user_.email_.InitDefault();
  }
  return _impl_.user_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserQueryRequest::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserQueryRequest.email)
  if (user_case() != kEmail) {
    return nullptr;
  }
  clear_has_user();
  return _impl_.user_.email_.Release();
}
inline void UserQueryRequest::set_allocated_email(std::string* value) {
  if (has_user()) {
    clear_user();
  }
  if (value != nullptr) {
    set_has_email();
    _impl_.user_.email_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserQueryRequest.email)
}

// string home = 9;
inline void UserQueryRequest::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& UserQueryRequest::home() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserQueryRequest.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserQueryRequest::set_home(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserQueryRequest.home)
}
inline std::string* UserQueryRequest::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserQueryRequest.home)
  return _s;
}
inline const std::string& UserQueryRequest::_internal_home() const {
  return _impl_.home_.Get();
}
inline void UserQueryRequest::_internal_set_home(const std::string& value) {
  ;


  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* UserQueryRequest::_internal_mutable_home() {
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* UserQueryRequest::release_home() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserQueryRequest.home)
  return _impl_.home_.Release();
}
inline void UserQueryRequest::set_allocated_home(std::string* value) {
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserQueryRequest.home)
}

inline bool UserQueryRequest::has_user() const {
  return user_case() != USER_NOT_SET;
}
inline void UserQueryRequest::clear_has_user() {
  _impl_._oneof_case_[0] = USER_NOT_SET;
}
inline UserQueryRequest::UserCase UserQueryRequest::user_case() const {
  return UserQueryRequest::UserCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserSignInResponse

// string token = 1;
inline void UserSignInResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& UserSignInResponse::token() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.token)
}
inline std::string* UserSignInResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInResponse.token)
  return _s;
}
inline const std::string& UserSignInResponse::_internal_token() const {
  return _impl_.token_.Get();
}
inline void UserSignInResponse::_internal_set_token(const std::string& value) {
  ;


  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInResponse::_internal_mutable_token() {
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInResponse::release_token() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInResponse.token)
  return _impl_.token_.Release();
}
inline void UserSignInResponse::set_allocated_token(std::string* value) {
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInResponse.token)
}

// .palm.nut.v1.UserIndexResponse.Item user = 2;
inline bool UserSignInResponse::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void UserSignInResponse::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::UserIndexResponse_Item& UserSignInResponse::_internal_user() const {
  const ::palm::nut::v1::UserIndexResponse_Item* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::UserIndexResponse_Item&>(
      ::palm::nut::v1::_UserIndexResponse_Item_default_instance_);
}
inline const ::palm::nut::v1::UserIndexResponse_Item& UserSignInResponse::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.user)
  return _internal_user();
}
inline void UserSignInResponse::unsafe_arena_set_allocated_user(
    ::palm::nut::v1::UserIndexResponse_Item* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserSignInResponse.user)
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserSignInResponse::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::UserIndexResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserSignInResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInResponse.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::UserIndexResponse_Item* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserSignInResponse::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::UserIndexResponse_Item>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserSignInResponse::mutable_user() {
  ::palm::nut::v1::UserIndexResponse_Item* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInResponse.user)
  return _msg;
}
inline void UserSignInResponse::set_allocated_user(::palm::nut::v1::UserIndexResponse_Item* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInResponse.user)
}

// string provider_type = 9;
inline void UserSignInResponse::clear_provider_type() {
  _impl_.provider_type_.ClearToEmpty();
}
inline const std::string& UserSignInResponse::provider_type() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.provider_type)
  return _internal_provider_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignInResponse::set_provider_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.provider_type)
}
inline std::string* UserSignInResponse::mutable_provider_type() {
  std::string* _s = _internal_mutable_provider_type();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInResponse.provider_type)
  return _s;
}
inline const std::string& UserSignInResponse::_internal_provider_type() const {
  return _impl_.provider_type_.Get();
}
inline void UserSignInResponse::_internal_set_provider_type(const std::string& value) {
  ;


  _impl_.provider_type_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignInResponse::_internal_mutable_provider_type() {
  ;
  return _impl_.provider_type_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignInResponse::release_provider_type() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignInResponse.provider_type)
  return _impl_.provider_type_.Release();
}
inline void UserSignInResponse::set_allocated_provider_type(std::string* value) {
  _impl_.provider_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_type_.IsDefault()) {
          _impl_.provider_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignInResponse.provider_type)
}

// repeated string roles = 11;
inline int UserSignInResponse::_internal_roles_size() const {
  return _impl_.roles_.size();
}
inline int UserSignInResponse::roles_size() const {
  return _internal_roles_size();
}
inline void UserSignInResponse::clear_roles() {
  _internal_mutable_roles()->Clear();
}
inline std::string* UserSignInResponse::add_roles() {
  std::string* _s = _internal_add_roles();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.UserSignInResponse.roles)
  return _s;
}
inline const std::string& UserSignInResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.roles)
  return _internal_roles(index);
}
inline std::string* UserSignInResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInResponse.roles)
  return _internal_mutable_roles()->Mutable(index);
}
inline void UserSignInResponse::set_roles(int index, const std::string& value) {
  _internal_mutable_roles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, std::string&& value) {
  _internal_mutable_roles()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_roles()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_roles()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::set_roles(int index, absl::string_view value) {
  _internal_mutable_roles()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(const std::string& value) {
  _internal_mutable_roles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(std::string&& value) {
  _internal_mutable_roles()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_roles()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(const char* value, std::size_t size) {
  _internal_mutable_roles()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.UserSignInResponse.roles)
}
inline void UserSignInResponse::add_roles(absl::string_view value) {
  _internal_mutable_roles()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.UserSignInResponse.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserSignInResponse::roles() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.UserSignInResponse.roles)
  return _internal_roles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* UserSignInResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.UserSignInResponse.roles)
  return _internal_mutable_roles();
}
inline const std::string& UserSignInResponse::_internal_roles(int index) const {
  return _internal_roles().Get(index);
}
inline std::string* UserSignInResponse::_internal_add_roles() {
  return _internal_mutable_roles()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserSignInResponse::_internal_roles() const {
  return _impl_.roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserSignInResponse::_internal_mutable_roles() {
  return &_impl_.roles_;
}

// repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 12;
inline int UserSignInResponse::_internal_permissions_size() const {
  return _impl_.permissions_.size();
}
inline int UserSignInResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserSignInResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignInResponse.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >*
UserSignInResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.UserSignInResponse.permissions)
  return _internal_mutable_permissions();
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UserSignInResponse::_internal_permissions(int index) const {
  return _internal_permissions().Get(index);
}
inline const ::palm::rbac::v1::PermissionsResponse_Item& UserSignInResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.permissions)
  return _internal_permissions(index);
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserSignInResponse::_internal_add_permissions() {
  return _internal_mutable_permissions()->Add();
}
inline ::palm::rbac::v1::PermissionsResponse_Item* UserSignInResponse::add_permissions() {
  ::palm::rbac::v1::PermissionsResponse_Item* _add = _internal_add_permissions();
  // @@protoc_insertion_point(field_add:palm.nut.v1.UserSignInResponse.permissions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::rbac::v1::PermissionsResponse_Item >&
UserSignInResponse::permissions() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.UserSignInResponse.permissions)
  return _internal_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>&
UserSignInResponse::_internal_permissions() const {
  return _impl_.permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::rbac::v1::PermissionsResponse_Item>*
UserSignInResponse::_internal_mutable_permissions() {
  return &_impl_.permissions_;
}

// bool has_google = 21;
inline void UserSignInResponse::clear_has_google() {
  _impl_.has_google_ = false;
}
inline bool UserSignInResponse::has_google() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.has_google)
  return _internal_has_google();
}
inline void UserSignInResponse::set_has_google(bool value) {
  _internal_set_has_google(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.has_google)
}
inline bool UserSignInResponse::_internal_has_google() const {
  return _impl_.has_google_;
}
inline void UserSignInResponse::_internal_set_has_google(bool value) {
  ;
  _impl_.has_google_ = value;
}

// bool has_wechat_mini_program = 22;
inline void UserSignInResponse::clear_has_wechat_mini_program() {
  _impl_.has_wechat_mini_program_ = false;
}
inline bool UserSignInResponse::has_wechat_mini_program() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.has_wechat_mini_program)
  return _internal_has_wechat_mini_program();
}
inline void UserSignInResponse::set_has_wechat_mini_program(bool value) {
  _internal_set_has_wechat_mini_program(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.has_wechat_mini_program)
}
inline bool UserSignInResponse::_internal_has_wechat_mini_program() const {
  return _impl_.has_wechat_mini_program_;
}
inline void UserSignInResponse::_internal_set_has_wechat_mini_program(bool value) {
  ;
  _impl_.has_wechat_mini_program_ = value;
}

// bool has_wechat_oauth2 = 23;
inline void UserSignInResponse::clear_has_wechat_oauth2() {
  _impl_.has_wechat_oauth2_ = false;
}
inline bool UserSignInResponse::has_wechat_oauth2() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignInResponse.has_wechat_oauth2)
  return _internal_has_wechat_oauth2();
}
inline void UserSignInResponse::set_has_wechat_oauth2(bool value) {
  _internal_set_has_wechat_oauth2(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignInResponse.has_wechat_oauth2)
}
inline bool UserSignInResponse::_internal_has_wechat_oauth2() const {
  return _impl_.has_wechat_oauth2_;
}
inline void UserSignInResponse::_internal_set_has_wechat_oauth2(bool value) {
  ;
  _impl_.has_wechat_oauth2_ = value;
}

// -------------------------------------------------------------------

// UserSignUpRequest

// string real_name = 1;
inline void UserSignUpRequest::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::real_name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.real_name)
}
inline std::string* UserSignUpRequest::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.real_name)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void UserSignUpRequest::_internal_set_real_name(const std::string& value) {
  ;


  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_real_name() {
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.real_name)
  return _impl_.real_name_.Release();
}
inline void UserSignUpRequest::set_allocated_real_name(std::string* value) {
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.real_name)
}

// string nickname = 2;
inline void UserSignUpRequest::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.nickname)
}
inline std::string* UserSignUpRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.nickname)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UserSignUpRequest::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.nickname)
  return _impl_.nickname_.Release();
}
inline void UserSignUpRequest::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.nickname)
}

// string email = 3;
inline void UserSignUpRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.email)
}
inline std::string* UserSignUpRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.email)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserSignUpRequest::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.email)
  return _impl_.email_.Release();
}
inline void UserSignUpRequest::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.email)
}

// string password = 4;
inline void UserSignUpRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.password)
}
inline std::string* UserSignUpRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.password)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserSignUpRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.password)
  return _impl_.password_.Release();
}
inline void UserSignUpRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.password)
}

// string lang = 11;
inline void UserSignUpRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.lang)
}
inline std::string* UserSignUpRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.lang)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void UserSignUpRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.lang)
  return _impl_.lang_.Release();
}
inline void UserSignUpRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.lang)
}

// string timezone = 12;
inline void UserSignUpRequest::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::timezone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.timezone)
}
inline std::string* UserSignUpRequest::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.timezone)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void UserSignUpRequest::_internal_set_timezone(const std::string& value) {
  ;


  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_timezone() {
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.timezone)
  return _impl_.timezone_.Release();
}
inline void UserSignUpRequest::set_allocated_timezone(std::string* value) {
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.timezone)
}

// string home = 21;
inline void UserSignUpRequest::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& UserSignUpRequest::home() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSignUpRequest.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSignUpRequest::set_home(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSignUpRequest.home)
}
inline std::string* UserSignUpRequest::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSignUpRequest.home)
  return _s;
}
inline const std::string& UserSignUpRequest::_internal_home() const {
  return _impl_.home_.Get();
}
inline void UserSignUpRequest::_internal_set_home(const std::string& value) {
  ;


  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::_internal_mutable_home() {
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSignUpRequest::release_home() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSignUpRequest.home)
  return _impl_.home_.Release();
}
inline void UserSignUpRequest::set_allocated_home(std::string* value) {
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSignUpRequest.home)
}

// -------------------------------------------------------------------

// UserTokenRequest

// string payload = 1;
inline void UserTokenRequest::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& UserTokenRequest::payload() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserTokenRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserTokenRequest::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserTokenRequest.payload)
}
inline std::string* UserTokenRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserTokenRequest.payload)
  return _s;
}
inline const std::string& UserTokenRequest::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void UserTokenRequest::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* UserTokenRequest::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* UserTokenRequest::release_payload() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserTokenRequest.payload)
  return _impl_.payload_.Release();
}
inline void UserTokenRequest::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserTokenRequest.payload)
}

// -------------------------------------------------------------------

// UserResetPasswordRequest

// string token = 1;
inline void UserResetPasswordRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& UserResetPasswordRequest::token() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserResetPasswordRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserResetPasswordRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserResetPasswordRequest.token)
}
inline std::string* UserResetPasswordRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserResetPasswordRequest.token)
  return _s;
}
inline const std::string& UserResetPasswordRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void UserResetPasswordRequest::_internal_set_token(const std::string& value) {
  ;


  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::_internal_mutable_token() {
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::release_token() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserResetPasswordRequest.token)
  return _impl_.token_.Release();
}
inline void UserResetPasswordRequest::set_allocated_token(std::string* value) {
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserResetPasswordRequest.token)
}

// string password = 2;
inline void UserResetPasswordRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserResetPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserResetPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserResetPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserResetPasswordRequest.password)
}
inline std::string* UserResetPasswordRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserResetPasswordRequest.password)
  return _s;
}
inline const std::string& UserResetPasswordRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserResetPasswordRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserResetPasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserResetPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void UserResetPasswordRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserResetPasswordRequest.password)
}

// -------------------------------------------------------------------

// UserSetPasswordRequest

// int32 user = 1;
inline void UserSetPasswordRequest::clear_user() {
  _impl_.user_ = 0;
}
inline ::int32_t UserSetPasswordRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetPasswordRequest.user)
  return _internal_user();
}
inline void UserSetPasswordRequest::set_user(::int32_t value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetPasswordRequest.user)
}
inline ::int32_t UserSetPasswordRequest::_internal_user() const {
  return _impl_.user_;
}
inline void UserSetPasswordRequest::_internal_set_user(::int32_t value) {
  ;
  _impl_.user_ = value;
}

// string password = 2;
inline void UserSetPasswordRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserSetPasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetPasswordRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetPasswordRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetPasswordRequest.password)
}
inline std::string* UserSetPasswordRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetPasswordRequest.password)
  return _s;
}
inline const std::string& UserSetPasswordRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserSetPasswordRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetPasswordRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetPasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetPasswordRequest.password)
  return _impl_.password_.Release();
}
inline void UserSetPasswordRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetPasswordRequest.password)
}

// -------------------------------------------------------------------

// UserSetProfileRequest

// string real_name = 1;
inline void UserSetProfileRequest::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::real_name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetProfileRequest.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetProfileRequest.real_name)
}
inline std::string* UserSetProfileRequest::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetProfileRequest.real_name)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void UserSetProfileRequest::_internal_set_real_name(const std::string& value) {
  ;


  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_real_name() {
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetProfileRequest.real_name)
  return _impl_.real_name_.Release();
}
inline void UserSetProfileRequest::set_allocated_real_name(std::string* value) {
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetProfileRequest.real_name)
}

// string avatar = 2;
inline void UserSetProfileRequest::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::avatar() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetProfileRequest.avatar)
  return _internal_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_avatar(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetProfileRequest.avatar)
}
inline std::string* UserSetProfileRequest::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetProfileRequest.avatar)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void UserSetProfileRequest::_internal_set_avatar(const std::string& value) {
  ;


  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_avatar() {
  ;
  return _impl_.avatar_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_avatar() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetProfileRequest.avatar)
  return _impl_.avatar_.Release();
}
inline void UserSetProfileRequest::set_allocated_avatar(std::string* value) {
  _impl_.avatar_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_.IsDefault()) {
          _impl_.avatar_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetProfileRequest.avatar)
}

// string timezone = 8;
inline void UserSetProfileRequest::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::timezone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetProfileRequest.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetProfileRequest.timezone)
}
inline std::string* UserSetProfileRequest::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetProfileRequest.timezone)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void UserSetProfileRequest::_internal_set_timezone(const std::string& value) {
  ;


  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_timezone() {
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetProfileRequest.timezone)
  return _impl_.timezone_.Release();
}
inline void UserSetProfileRequest::set_allocated_timezone(std::string* value) {
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetProfileRequest.timezone)
}

// string lang = 9;
inline void UserSetProfileRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetProfileRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetProfileRequest.lang)
}
inline std::string* UserSetProfileRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetProfileRequest.lang)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void UserSetProfileRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetProfileRequest.lang)
  return _impl_.lang_.Release();
}
inline void UserSetProfileRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetProfileRequest.lang)
}

// string wechat = 11;
inline void UserSetProfileRequest::clear_wechat() {
  _impl_.wechat_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::wechat() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetProfileRequest.wechat)
  return _internal_wechat();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_wechat(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.wechat_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetProfileRequest.wechat)
}
inline std::string* UserSetProfileRequest::mutable_wechat() {
  std::string* _s = _internal_mutable_wechat();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetProfileRequest.wechat)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_wechat() const {
  return _impl_.wechat_.Get();
}
inline void UserSetProfileRequest::_internal_set_wechat(const std::string& value) {
  ;


  _impl_.wechat_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_wechat() {
  ;
  return _impl_.wechat_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_wechat() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetProfileRequest.wechat)
  return _impl_.wechat_.Release();
}
inline void UserSetProfileRequest::set_allocated_wechat(std::string* value) {
  _impl_.wechat_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wechat_.IsDefault()) {
          _impl_.wechat_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetProfileRequest.wechat)
}

// string phone = 12;
inline void UserSetProfileRequest::clear_phone() {
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& UserSetProfileRequest::phone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserSetProfileRequest.phone)
  return _internal_phone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserSetProfileRequest::set_phone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.phone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserSetProfileRequest.phone)
}
inline std::string* UserSetProfileRequest::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserSetProfileRequest.phone)
  return _s;
}
inline const std::string& UserSetProfileRequest::_internal_phone() const {
  return _impl_.phone_.Get();
}
inline void UserSetProfileRequest::_internal_set_phone(const std::string& value) {
  ;


  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::_internal_mutable_phone() {
  ;
  return _impl_.phone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserSetProfileRequest::release_phone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserSetProfileRequest.phone)
  return _impl_.phone_.Release();
}
inline void UserSetProfileRequest::set_allocated_phone(std::string* value) {
  _impl_.phone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_.IsDefault()) {
          _impl_.phone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserSetProfileRequest.phone)
}

// -------------------------------------------------------------------

// UserGetProfileResponse

// string real_name = 1;
inline void UserGetProfileResponse::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::real_name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.real_name)
}
inline std::string* UserGetProfileResponse::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.real_name)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void UserGetProfileResponse::_internal_set_real_name(const std::string& value) {
  ;


  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_real_name() {
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.real_name)
  return _impl_.real_name_.Release();
}
inline void UserGetProfileResponse::set_allocated_real_name(std::string* value) {
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.real_name)
}

// string avatar = 2;
inline void UserGetProfileResponse::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::avatar() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.avatar)
  return _internal_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_avatar(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.avatar)
}
inline std::string* UserGetProfileResponse::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.avatar)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void UserGetProfileResponse::_internal_set_avatar(const std::string& value) {
  ;


  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_avatar() {
  ;
  return _impl_.avatar_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_avatar() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.avatar)
  return _impl_.avatar_.Release();
}
inline void UserGetProfileResponse::set_allocated_avatar(std::string* value) {
  _impl_.avatar_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_.IsDefault()) {
          _impl_.avatar_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.avatar)
}

// string nickname = 3;
inline void UserGetProfileResponse::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.nickname)
}
inline std::string* UserGetProfileResponse::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.nickname)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UserGetProfileResponse::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.nickname)
  return _impl_.nickname_.Release();
}
inline void UserGetProfileResponse::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.nickname)
}

// string email = 4;
inline void UserGetProfileResponse::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.email)
}
inline std::string* UserGetProfileResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.email)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserGetProfileResponse::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.email)
  return _impl_.email_.Release();
}
inline void UserGetProfileResponse::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.email)
}

// string timezone = 8;
inline void UserGetProfileResponse::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::timezone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.timezone)
}
inline std::string* UserGetProfileResponse::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.timezone)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void UserGetProfileResponse::_internal_set_timezone(const std::string& value) {
  ;


  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_timezone() {
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_timezone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.timezone)
  return _impl_.timezone_.Release();
}
inline void UserGetProfileResponse::set_allocated_timezone(std::string* value) {
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.timezone)
}

// string lang = 9;
inline void UserGetProfileResponse::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.lang)
}
inline std::string* UserGetProfileResponse::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.lang)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void UserGetProfileResponse::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.lang)
  return _impl_.lang_.Release();
}
inline void UserGetProfileResponse::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.lang)
}

// string wechat = 11;
inline void UserGetProfileResponse::clear_wechat() {
  _impl_.wechat_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::wechat() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.wechat)
  return _internal_wechat();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_wechat(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.wechat_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.wechat)
}
inline std::string* UserGetProfileResponse::mutable_wechat() {
  std::string* _s = _internal_mutable_wechat();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.wechat)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_wechat() const {
  return _impl_.wechat_.Get();
}
inline void UserGetProfileResponse::_internal_set_wechat(const std::string& value) {
  ;


  _impl_.wechat_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_wechat() {
  ;
  return _impl_.wechat_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_wechat() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.wechat)
  return _impl_.wechat_.Release();
}
inline void UserGetProfileResponse::set_allocated_wechat(std::string* value) {
  _impl_.wechat_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wechat_.IsDefault()) {
          _impl_.wechat_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.wechat)
}

// string phone = 12;
inline void UserGetProfileResponse::clear_phone() {
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& UserGetProfileResponse::phone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserGetProfileResponse.phone)
  return _internal_phone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserGetProfileResponse::set_phone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.phone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserGetProfileResponse.phone)
}
inline std::string* UserGetProfileResponse::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserGetProfileResponse.phone)
  return _s;
}
inline const std::string& UserGetProfileResponse::_internal_phone() const {
  return _impl_.phone_.Get();
}
inline void UserGetProfileResponse::_internal_set_phone(const std::string& value) {
  ;


  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::_internal_mutable_phone() {
  ;
  return _impl_.phone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserGetProfileResponse::release_phone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserGetProfileResponse.phone)
  return _impl_.phone_.Release();
}
inline void UserGetProfileResponse::set_allocated_phone(std::string* value) {
  _impl_.phone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_.IsDefault()) {
          _impl_.phone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserGetProfileResponse.phone)
}

// -------------------------------------------------------------------

// UserLogsResponse_Item

// int32 id = 1;
inline void UserLogsResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t UserLogsResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.id)
  return _internal_id();
}
inline void UserLogsResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserLogsResponse.Item.id)
}
inline ::int32_t UserLogsResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void UserLogsResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// int32 user_id = 2;
inline void UserLogsResponse_Item::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t UserLogsResponse_Item::user_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.user_id)
  return _internal_user_id();
}
inline void UserLogsResponse_Item::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserLogsResponse.Item.user_id)
}
inline ::int32_t UserLogsResponse_Item::_internal_user_id() const {
  return _impl_.user_id_;
}
inline void UserLogsResponse_Item::_internal_set_user_id(::int32_t value) {
  ;
  _impl_.user_id_ = value;
}

// string ip = 3;
inline void UserLogsResponse_Item::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& UserLogsResponse_Item::ip() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserLogsResponse_Item::set_ip(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserLogsResponse.Item.ip)
}
inline std::string* UserLogsResponse_Item::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserLogsResponse.Item.ip)
  return _s;
}
inline const std::string& UserLogsResponse_Item::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void UserLogsResponse_Item::_internal_set_ip(const std::string& value) {
  ;


  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::_internal_mutable_ip() {
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::release_ip() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserLogsResponse.Item.ip)
  return _impl_.ip_.Release();
}
inline void UserLogsResponse_Item::set_allocated_ip(std::string* value) {
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserLogsResponse.Item.ip)
}

// .palm.nut.v1.UserLogsResponse.Item.Level level = 4;
inline void UserLogsResponse_Item::clear_level() {
  _impl_.level_ = 0;
}
inline ::palm::nut::v1::UserLogsResponse_Item_Level UserLogsResponse_Item::level() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.level)
  return _internal_level();
}
inline void UserLogsResponse_Item::set_level(::palm::nut::v1::UserLogsResponse_Item_Level value) {
   _internal_set_level(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserLogsResponse.Item.level)
}
inline ::palm::nut::v1::UserLogsResponse_Item_Level UserLogsResponse_Item::_internal_level() const {
  return static_cast<::palm::nut::v1::UserLogsResponse_Item_Level>(_impl_.level_);
}
inline void UserLogsResponse_Item::_internal_set_level(::palm::nut::v1::UserLogsResponse_Item_Level value) {
  ;
  _impl_.level_ = value;
}

// string message = 5;
inline void UserLogsResponse_Item::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UserLogsResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserLogsResponse_Item::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserLogsResponse.Item.message)
}
inline std::string* UserLogsResponse_Item::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserLogsResponse.Item.message)
  return _s;
}
inline const std::string& UserLogsResponse_Item::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UserLogsResponse_Item::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* UserLogsResponse_Item::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserLogsResponse.Item.message)
  return _impl_.message_.Release();
}
inline void UserLogsResponse_Item::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserLogsResponse.Item.message)
}

// .palm.rbac.v1.ResourcesResponse.Item resource = 6;
inline bool UserLogsResponse_Item::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& UserLogsResponse_Item::_internal_resource() const {
  const ::palm::rbac::v1::ResourcesResponse_Item* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::rbac::v1::ResourcesResponse_Item&>(
      ::palm::rbac::v1::_ResourcesResponse_Item_default_instance_);
}
inline const ::palm::rbac::v1::ResourcesResponse_Item& UserLogsResponse_Item::resource() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.resource)
  return _internal_resource();
}
inline void UserLogsResponse_Item::unsafe_arena_set_allocated_resource(
    ::palm::rbac::v1::ResourcesResponse_Item* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserLogsResponse.Item.resource)
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::release_resource() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserLogsResponse.Item.resource)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::rbac::v1::ResourcesResponse_Item* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::_internal_mutable_resource() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::rbac::v1::ResourcesResponse_Item>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::palm::rbac::v1::ResourcesResponse_Item* UserLogsResponse_Item::mutable_resource() {
  ::palm::rbac::v1::ResourcesResponse_Item* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserLogsResponse.Item.resource)
  return _msg;
}
inline void UserLogsResponse_Item::set_allocated_resource(::palm::rbac::v1::ResourcesResponse_Item* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource));
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserLogsResponse.Item.resource)
}

// .google.protobuf.Timestamp created_at = 11;
inline bool UserLogsResponse_Item::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserLogsResponse_Item::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserLogsResponse_Item::created_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.Item.created_at)
  return _internal_created_at();
}
inline void UserLogsResponse_Item::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserLogsResponse.Item.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserLogsResponse_Item::release_created_at() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserLogsResponse_Item::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserLogsResponse.Item.created_at)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserLogsResponse_Item::_internal_mutable_created_at() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserLogsResponse_Item::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserLogsResponse.Item.created_at)
  return _msg;
}
inline void UserLogsResponse_Item::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserLogsResponse.Item.created_at)
}

// -------------------------------------------------------------------

// UserLogsResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool UserLogsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void UserLogsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& UserLogsResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& UserLogsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.pagination)
  return _internal_pagination();
}
inline void UserLogsResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserLogsResponse.pagination)
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserLogsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* UserLogsResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserLogsResponse.pagination)
  return _msg;
}
inline void UserLogsResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserLogsResponse.pagination)
}

// repeated .palm.nut.v1.UserLogsResponse.Item items = 11;
inline int UserLogsResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UserLogsResponse::items_size() const {
  return _internal_items_size();
}
inline void UserLogsResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::UserLogsResponse_Item* UserLogsResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserLogsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserLogsResponse_Item >*
UserLogsResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.UserLogsResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::UserLogsResponse_Item& UserLogsResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::UserLogsResponse_Item& UserLogsResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserLogsResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::UserLogsResponse_Item* UserLogsResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::UserLogsResponse_Item* UserLogsResponse::add_items() {
  ::palm::nut::v1::UserLogsResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.UserLogsResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserLogsResponse_Item >&
UserLogsResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.UserLogsResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserLogsResponse_Item>&
UserLogsResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserLogsResponse_Item>*
UserLogsResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// UserChangePasswordRequest

// string current_password = 1;
inline void UserChangePasswordRequest::clear_current_password() {
  _impl_.current_password_.ClearToEmpty();
}
inline const std::string& UserChangePasswordRequest::current_password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserChangePasswordRequest.current_password)
  return _internal_current_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserChangePasswordRequest::set_current_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.current_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserChangePasswordRequest.current_password)
}
inline std::string* UserChangePasswordRequest::mutable_current_password() {
  std::string* _s = _internal_mutable_current_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserChangePasswordRequest.current_password)
  return _s;
}
inline const std::string& UserChangePasswordRequest::_internal_current_password() const {
  return _impl_.current_password_.Get();
}
inline void UserChangePasswordRequest::_internal_set_current_password(const std::string& value) {
  ;


  _impl_.current_password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::_internal_mutable_current_password() {
  ;
  return _impl_.current_password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::release_current_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserChangePasswordRequest.current_password)
  return _impl_.current_password_.Release();
}
inline void UserChangePasswordRequest::set_allocated_current_password(std::string* value) {
  _impl_.current_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_password_.IsDefault()) {
          _impl_.current_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserChangePasswordRequest.current_password)
}

// string new_password = 2;
inline void UserChangePasswordRequest::clear_new_password() {
  _impl_.new_password_.ClearToEmpty();
}
inline const std::string& UserChangePasswordRequest::new_password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserChangePasswordRequest.new_password)
  return _internal_new_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserChangePasswordRequest::set_new_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserChangePasswordRequest.new_password)
}
inline std::string* UserChangePasswordRequest::mutable_new_password() {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserChangePasswordRequest.new_password)
  return _s;
}
inline const std::string& UserChangePasswordRequest::_internal_new_password() const {
  return _impl_.new_password_.Get();
}
inline void UserChangePasswordRequest::_internal_set_new_password(const std::string& value) {
  ;


  _impl_.new_password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::_internal_mutable_new_password() {
  ;
  return _impl_.new_password_.Mutable( GetArenaForAllocation());
}
inline std::string* UserChangePasswordRequest::release_new_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserChangePasswordRequest.new_password)
  return _impl_.new_password_.Release();
}
inline void UserChangePasswordRequest::set_allocated_new_password(std::string* value) {
  _impl_.new_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_password_.IsDefault()) {
          _impl_.new_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserChangePasswordRequest.new_password)
}

// -------------------------------------------------------------------

// UserIndexResponse_Item

// int32 id = 1;
inline void UserIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t UserIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.id)
  return _internal_id();
}
inline void UserIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.id)
}
inline ::int32_t UserIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void UserIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string email = 2;
inline void UserIndexResponse_Item::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.email)
}
inline std::string* UserIndexResponse_Item::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.email)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserIndexResponse_Item::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.email)
  return _impl_.email_.Release();
}
inline void UserIndexResponse_Item::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.email)
}

// string nickname = 3;
inline void UserIndexResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.nickname)
}
inline std::string* UserIndexResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.nickname)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UserIndexResponse_Item::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.nickname)
  return _impl_.nickname_.Release();
}
inline void UserIndexResponse_Item::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.nickname)
}

// string real_name = 4;
inline void UserIndexResponse_Item::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::real_name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.real_name)
  return _internal_real_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_real_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.real_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.real_name)
}
inline std::string* UserIndexResponse_Item::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.real_name)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void UserIndexResponse_Item::_internal_set_real_name(const std::string& value) {
  ;


  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_real_name() {
  ;
  return _impl_.real_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.real_name)
  return _impl_.real_name_.Release();
}
inline void UserIndexResponse_Item::set_allocated_real_name(std::string* value) {
  _impl_.real_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.real_name_.IsDefault()) {
          _impl_.real_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.real_name)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool UserIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.updated_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.updated_at)
}

// optional .google.protobuf.Timestamp last_sign_in_at = 11;
inline bool UserIndexResponse_Item::has_last_sign_in_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_sign_in_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::_internal_last_sign_in_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_sign_in_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::last_sign_in_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.last_sign_in_at)
  return _internal_last_sign_in_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_last_sign_in_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_sign_in_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_sign_in_at_);
  }
  _impl_.last_sign_in_at_ = last_sign_in_at;
  if (last_sign_in_at) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.Item.last_sign_in_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::release_last_sign_in_at() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_sign_in_at_;
  _impl_.last_sign_in_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::unsafe_arena_release_last_sign_in_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.last_sign_in_at)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_sign_in_at_;
  _impl_.last_sign_in_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::_internal_mutable_last_sign_in_at() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.last_sign_in_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_sign_in_at_ = p;
  }
  return _impl_.last_sign_in_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::mutable_last_sign_in_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_sign_in_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.last_sign_in_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_last_sign_in_at(::PROTOBUF_NAMESPACE_ID::Timestamp* last_sign_in_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_sign_in_at_);
  }
  if (last_sign_in_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_sign_in_at));
    if (message_arena != submessage_arena) {
      last_sign_in_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_sign_in_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.last_sign_in_at_ = last_sign_in_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.last_sign_in_at)
}

// optional string last_sign_in_ip = 12;
inline bool UserIndexResponse_Item::has_last_sign_in_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserIndexResponse_Item::clear_last_sign_in_ip() {
  _impl_.last_sign_in_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserIndexResponse_Item::last_sign_in_ip() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.last_sign_in_ip)
  return _internal_last_sign_in_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_last_sign_in_ip(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_sign_in_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.last_sign_in_ip)
}
inline std::string* UserIndexResponse_Item::mutable_last_sign_in_ip() {
  std::string* _s = _internal_mutable_last_sign_in_ip();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.last_sign_in_ip)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_last_sign_in_ip() const {
  return _impl_.last_sign_in_ip_.Get();
}
inline void UserIndexResponse_Item::_internal_set_last_sign_in_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.last_sign_in_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_last_sign_in_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.last_sign_in_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_last_sign_in_ip() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.last_sign_in_ip)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.last_sign_in_ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserIndexResponse_Item::set_allocated_last_sign_in_ip(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_sign_in_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_sign_in_ip_.IsDefault()) {
          _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.last_sign_in_ip)
}

// optional .google.protobuf.Timestamp current_sign_in_at = 13;
inline bool UserIndexResponse_Item::has_current_sign_in_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_sign_in_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::_internal_current_sign_in_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.current_sign_in_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::current_sign_in_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.current_sign_in_at)
  return _internal_current_sign_in_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_current_sign_in_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* current_sign_in_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_sign_in_at_);
  }
  _impl_.current_sign_in_at_ = current_sign_in_at;
  if (current_sign_in_at) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.Item.current_sign_in_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::release_current_sign_in_at() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.current_sign_in_at_;
  _impl_.current_sign_in_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::unsafe_arena_release_current_sign_in_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.current_sign_in_at)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.current_sign_in_at_;
  _impl_.current_sign_in_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::_internal_mutable_current_sign_in_at() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.current_sign_in_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.current_sign_in_at_ = p;
  }
  return _impl_.current_sign_in_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::mutable_current_sign_in_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_current_sign_in_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.current_sign_in_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_current_sign_in_at(::PROTOBUF_NAMESPACE_ID::Timestamp* current_sign_in_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_sign_in_at_);
  }
  if (current_sign_in_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_sign_in_at));
    if (message_arena != submessage_arena) {
      current_sign_in_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_sign_in_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.current_sign_in_at_ = current_sign_in_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.current_sign_in_at)
}

// optional string current_sign_in_ip = 14;
inline bool UserIndexResponse_Item::has_current_sign_in_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserIndexResponse_Item::clear_current_sign_in_ip() {
  _impl_.current_sign_in_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserIndexResponse_Item::current_sign_in_ip() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.current_sign_in_ip)
  return _internal_current_sign_in_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_current_sign_in_ip(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_sign_in_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.current_sign_in_ip)
}
inline std::string* UserIndexResponse_Item::mutable_current_sign_in_ip() {
  std::string* _s = _internal_mutable_current_sign_in_ip();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.current_sign_in_ip)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_current_sign_in_ip() const {
  return _impl_.current_sign_in_ip_.Get();
}
inline void UserIndexResponse_Item::_internal_set_current_sign_in_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.current_sign_in_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_current_sign_in_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.current_sign_in_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_current_sign_in_ip() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.current_sign_in_ip)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.current_sign_in_ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserIndexResponse_Item::set_allocated_current_sign_in_ip(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.current_sign_in_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.current_sign_in_ip_.IsDefault()) {
          _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.current_sign_in_ip)
}

// int32 sign_in_count = 19;
inline void UserIndexResponse_Item::clear_sign_in_count() {
  _impl_.sign_in_count_ = 0;
}
inline ::int32_t UserIndexResponse_Item::sign_in_count() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.sign_in_count)
  return _internal_sign_in_count();
}
inline void UserIndexResponse_Item::set_sign_in_count(::int32_t value) {
  _internal_set_sign_in_count(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.sign_in_count)
}
inline ::int32_t UserIndexResponse_Item::_internal_sign_in_count() const {
  return _impl_.sign_in_count_;
}
inline void UserIndexResponse_Item::_internal_set_sign_in_count(::int32_t value) {
  ;
  _impl_.sign_in_count_ = value;
}

// string lang = 21;
inline void UserIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.lang)
}
inline std::string* UserIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.lang)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void UserIndexResponse_Item::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void UserIndexResponse_Item::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.lang)
}

// string timezone = 22;
inline void UserIndexResponse_Item::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::timezone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.timezone)
  return _internal_timezone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_timezone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.timezone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.timezone)
}
inline std::string* UserIndexResponse_Item::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.timezone)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void UserIndexResponse_Item::_internal_set_timezone(const std::string& value) {
  ;


  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_timezone() {
  ;
  return _impl_.timezone_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_timezone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.timezone)
  return _impl_.timezone_.Release();
}
inline void UserIndexResponse_Item::set_allocated_timezone(std::string* value) {
  _impl_.timezone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timezone_.IsDefault()) {
          _impl_.timezone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.timezone)
}

// string avatar = 23;
inline void UserIndexResponse_Item::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& UserIndexResponse_Item::avatar() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.avatar)
  return _internal_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIndexResponse_Item::set_avatar(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.UserIndexResponse.Item.avatar)
}
inline std::string* UserIndexResponse_Item::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.avatar)
  return _s;
}
inline const std::string& UserIndexResponse_Item::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void UserIndexResponse_Item::_internal_set_avatar(const std::string& value) {
  ;


  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::_internal_mutable_avatar() {
  ;
  return _impl_.avatar_.Mutable( GetArenaForAllocation());
}
inline std::string* UserIndexResponse_Item::release_avatar() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.avatar)
  return _impl_.avatar_.Release();
}
inline void UserIndexResponse_Item::set_allocated_avatar(std::string* value) {
  _impl_.avatar_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_.IsDefault()) {
          _impl_.avatar_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.avatar)
}

// optional .google.protobuf.Timestamp confirmed_at = 27;
inline bool UserIndexResponse_Item::has_confirmed_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confirmed_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::_internal_confirmed_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.confirmed_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::confirmed_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.confirmed_at)
  return _internal_confirmed_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_confirmed_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* confirmed_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.confirmed_at_);
  }
  _impl_.confirmed_at_ = confirmed_at;
  if (confirmed_at) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.Item.confirmed_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::release_confirmed_at() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.confirmed_at_;
  _impl_.confirmed_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::unsafe_arena_release_confirmed_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.confirmed_at)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.confirmed_at_;
  _impl_.confirmed_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::_internal_mutable_confirmed_at() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.confirmed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.confirmed_at_ = p;
  }
  return _impl_.confirmed_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::mutable_confirmed_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_confirmed_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.confirmed_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_confirmed_at(::PROTOBUF_NAMESPACE_ID::Timestamp* confirmed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.confirmed_at_);
  }
  if (confirmed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confirmed_at));
    if (message_arena != submessage_arena) {
      confirmed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmed_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.confirmed_at_ = confirmed_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.confirmed_at)
}

// optional .google.protobuf.Timestamp locked_at = 28;
inline bool UserIndexResponse_Item::has_locked_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.locked_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::_internal_locked_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.locked_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::locked_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.locked_at)
  return _internal_locked_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_locked_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* locked_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.locked_at_);
  }
  _impl_.locked_at_ = locked_at;
  if (locked_at) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.Item.locked_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::release_locked_at() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.locked_at_;
  _impl_.locked_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::unsafe_arena_release_locked_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.locked_at)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.locked_at_;
  _impl_.locked_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::_internal_mutable_locked_at() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.locked_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.locked_at_ = p;
  }
  return _impl_.locked_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::mutable_locked_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_locked_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.locked_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_locked_at(::PROTOBUF_NAMESPACE_ID::Timestamp* locked_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.locked_at_);
  }
  if (locked_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locked_at));
    if (message_arena != submessage_arena) {
      locked_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locked_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.locked_at_ = locked_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.locked_at)
}

// optional .google.protobuf.Timestamp deleted_at = 29;
inline bool UserIndexResponse_Item::has_deleted_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deleted_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::_internal_deleted_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.deleted_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserIndexResponse_Item::deleted_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.Item.deleted_at)
  return _internal_deleted_at();
}
inline void UserIndexResponse_Item::unsafe_arena_set_allocated_deleted_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deleted_at_);
  }
  _impl_.deleted_at_ = deleted_at;
  if (deleted_at) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.Item.deleted_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::release_deleted_at() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::unsafe_arena_release_deleted_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.Item.deleted_at)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deleted_at_;
  _impl_.deleted_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::_internal_mutable_deleted_at() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.deleted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.deleted_at_ = p;
  }
  return _impl_.deleted_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserIndexResponse_Item::mutable_deleted_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_deleted_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.Item.deleted_at)
  return _msg;
}
inline void UserIndexResponse_Item::set_allocated_deleted_at(::PROTOBUF_NAMESPACE_ID::Timestamp* deleted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deleted_at_);
  }
  if (deleted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_at));
    if (message_arena != submessage_arena) {
      deleted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.deleted_at_ = deleted_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.Item.deleted_at)
}

// -------------------------------------------------------------------

// UserIndexResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool UserIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void UserIndexResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& UserIndexResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& UserIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.pagination)
  return _internal_pagination();
}
inline void UserIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.UserIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.UserIndexResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* UserIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.pagination)
  return _msg;
}
inline void UserIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.UserIndexResponse.pagination)
}

// repeated .palm.nut.v1.UserIndexResponse.Item items = 11;
inline int UserIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UserIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void UserIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.UserIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserIndexResponse_Item >*
UserIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.UserIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::UserIndexResponse_Item& UserIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::UserIndexResponse_Item& UserIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.UserIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::UserIndexResponse_Item* UserIndexResponse::add_items() {
  ::palm::nut::v1::UserIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.UserIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::UserIndexResponse_Item >&
UserIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.UserIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserIndexResponse_Item>&
UserIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::UserIndexResponse_Item>*
UserIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SignInByGoogleRequest

// repeated string scopes = 1;
inline int SignInByGoogleRequest::_internal_scopes_size() const {
  return _impl_.scopes_.size();
}
inline int SignInByGoogleRequest::scopes_size() const {
  return _internal_scopes_size();
}
inline void SignInByGoogleRequest::clear_scopes() {
  _internal_mutable_scopes()->Clear();
}
inline std::string* SignInByGoogleRequest::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SignInByGoogleRequest.scopes)
  return _s;
}
inline const std::string& SignInByGoogleRequest::scopes(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByGoogleRequest.scopes)
  return _internal_scopes(index);
}
inline std::string* SignInByGoogleRequest::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByGoogleRequest.scopes)
  return _internal_mutable_scopes()->Mutable(index);
}
inline void SignInByGoogleRequest::set_scopes(int index, const std::string& value) {
  _internal_mutable_scopes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, std::string&& value) {
  _internal_mutable_scopes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scopes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_scopes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::set_scopes(int index, absl::string_view value) {
  _internal_mutable_scopes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(const std::string& value) {
  _internal_mutable_scopes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(std::string&& value) {
  _internal_mutable_scopes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scopes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(const char* value, std::size_t size) {
  _internal_mutable_scopes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline void SignInByGoogleRequest::add_scopes(absl::string_view value) {
  _internal_mutable_scopes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.SignInByGoogleRequest.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignInByGoogleRequest::scopes() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SignInByGoogleRequest.scopes)
  return _internal_scopes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SignInByGoogleRequest::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SignInByGoogleRequest.scopes)
  return _internal_mutable_scopes();
}
inline const std::string& SignInByGoogleRequest::_internal_scopes(int index) const {
  return _internal_scopes().Get(index);
}
inline std::string* SignInByGoogleRequest::_internal_add_scopes() {
  return _internal_mutable_scopes()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignInByGoogleRequest::_internal_scopes() const {
  return _impl_.scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SignInByGoogleRequest::_internal_mutable_scopes() {
  return &_impl_.scopes_;
}

// string code = 2;
inline void SignInByGoogleRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByGoogleRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByGoogleRequest.code)
}
inline std::string* SignInByGoogleRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByGoogleRequest.code)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void SignInByGoogleRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByGoogleRequest.code)
  return _impl_.code_.Release();
}
inline void SignInByGoogleRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByGoogleRequest.code)
}

// string state = 3;
inline void SignInByGoogleRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByGoogleRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByGoogleRequest.state)
}
inline std::string* SignInByGoogleRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByGoogleRequest.state)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_state() const {
  return _impl_.state_.Get();
}
inline void SignInByGoogleRequest::_internal_set_state(const std::string& value) {
  ;


  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_state() {
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_state() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByGoogleRequest.state)
  return _impl_.state_.Release();
}
inline void SignInByGoogleRequest::set_allocated_state(std::string* value) {
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByGoogleRequest.state)
}

// string redirect_uri = 4;
inline void SignInByGoogleRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByGoogleRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByGoogleRequest.redirect_uri)
}
inline std::string* SignInByGoogleRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByGoogleRequest.redirect_uri)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_redirect_uri() const {
  return _impl_.redirect_uri_.Get();
}
inline void SignInByGoogleRequest::_internal_set_redirect_uri(const std::string& value) {
  ;


  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_redirect_uri() {
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByGoogleRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void SignInByGoogleRequest::set_allocated_redirect_uri(std::string* value) {
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByGoogleRequest.redirect_uri)
}

// string nonce = 9;
inline void SignInByGoogleRequest::clear_nonce() {
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& SignInByGoogleRequest::nonce() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByGoogleRequest.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByGoogleRequest::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByGoogleRequest.nonce)
}
inline std::string* SignInByGoogleRequest::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByGoogleRequest.nonce)
  return _s;
}
inline const std::string& SignInByGoogleRequest::_internal_nonce() const {
  return _impl_.nonce_.Get();
}
inline void SignInByGoogleRequest::_internal_set_nonce(const std::string& value) {
  ;


  _impl_.nonce_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::_internal_mutable_nonce() {
  ;
  return _impl_.nonce_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByGoogleRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByGoogleRequest.nonce)
  return _impl_.nonce_.Release();
}
inline void SignInByGoogleRequest::set_allocated_nonce(std::string* value) {
  _impl_.nonce_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByGoogleRequest.nonce)
}

// .google.protobuf.Duration ttl = 11;
inline bool SignInByGoogleRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignInByGoogleRequest::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignInByGoogleRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByGoogleRequest.ttl)
  return _internal_ttl();
}
inline void SignInByGoogleRequest::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SignInByGoogleRequest.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByGoogleRequest::release_ttl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByGoogleRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByGoogleRequest.ttl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByGoogleRequest::_internal_mutable_ttl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByGoogleRequest::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByGoogleRequest.ttl)
  return _msg;
}
inline void SignInByGoogleRequest::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByGoogleRequest.ttl)
}

// -------------------------------------------------------------------

// GoogleSignInUrlRequest

// string redirect_uri = 1;
inline void GoogleSignInUrlRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& GoogleSignInUrlRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleSignInUrlRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleSignInUrlRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleSignInUrlRequest.redirect_uri)
}
inline std::string* GoogleSignInUrlRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleSignInUrlRequest.redirect_uri)
  return _s;
}
inline const std::string& GoogleSignInUrlRequest::_internal_redirect_uri() const {
  return _impl_.redirect_uri_.Get();
}
inline void GoogleSignInUrlRequest::_internal_set_redirect_uri(const std::string& value) {
  ;


  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlRequest::_internal_mutable_redirect_uri() {
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlRequest::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleSignInUrlRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void GoogleSignInUrlRequest::set_allocated_redirect_uri(std::string* value) {
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleSignInUrlRequest.redirect_uri)
}

// .palm.nut.v1.Oauth2State state = 2;
inline bool GoogleSignInUrlRequest::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline void GoogleSignInUrlRequest::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Oauth2State& GoogleSignInUrlRequest::_internal_state() const {
  const ::palm::nut::v1::Oauth2State* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Oauth2State&>(
      ::palm::nut::v1::_Oauth2State_default_instance_);
}
inline const ::palm::nut::v1::Oauth2State& GoogleSignInUrlRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleSignInUrlRequest.state)
  return _internal_state();
}
inline void GoogleSignInUrlRequest::unsafe_arena_set_allocated_state(
    ::palm::nut::v1::Oauth2State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.GoogleSignInUrlRequest.state)
}
inline ::palm::nut::v1::Oauth2State* GoogleSignInUrlRequest::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Oauth2State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Oauth2State* GoogleSignInUrlRequest::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleSignInUrlRequest.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Oauth2State* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Oauth2State* GoogleSignInUrlRequest::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Oauth2State>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::palm::nut::v1::Oauth2State* GoogleSignInUrlRequest::mutable_state() {
  ::palm::nut::v1::Oauth2State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleSignInUrlRequest.state)
  return _msg;
}
inline void GoogleSignInUrlRequest::set_allocated_state(::palm::nut::v1::Oauth2State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleSignInUrlRequest.state)
}

// -------------------------------------------------------------------

// GoogleSignInUrlResponse

// string url = 1;
inline void GoogleSignInUrlResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& GoogleSignInUrlResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleSignInUrlResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleSignInUrlResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleSignInUrlResponse.url)
}
inline std::string* GoogleSignInUrlResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleSignInUrlResponse.url)
  return _s;
}
inline const std::string& GoogleSignInUrlResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void GoogleSignInUrlResponse::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleSignInUrlResponse.url)
  return _impl_.url_.Release();
}
inline void GoogleSignInUrlResponse::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleSignInUrlResponse.url)
}

// string nonce = 2;
inline void GoogleSignInUrlResponse::clear_nonce() {
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& GoogleSignInUrlResponse::nonce() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleSignInUrlResponse.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleSignInUrlResponse::set_nonce(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nonce_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleSignInUrlResponse.nonce)
}
inline std::string* GoogleSignInUrlResponse::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleSignInUrlResponse.nonce)
  return _s;
}
inline const std::string& GoogleSignInUrlResponse::_internal_nonce() const {
  return _impl_.nonce_.Get();
}
inline void GoogleSignInUrlResponse::_internal_set_nonce(const std::string& value) {
  ;


  _impl_.nonce_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::_internal_mutable_nonce() {
  ;
  return _impl_.nonce_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleSignInUrlResponse::release_nonce() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleSignInUrlResponse.nonce)
  return _impl_.nonce_.Release();
}
inline void GoogleSignInUrlResponse::set_allocated_nonce(std::string* value) {
  _impl_.nonce_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nonce_.IsDefault()) {
          _impl_.nonce_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleSignInUrlResponse.nonce)
}

// -------------------------------------------------------------------

// WechatUserBindByIdRequest

// int32 user_id = 1;
inline void WechatUserBindByIdRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t WechatUserBindByIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserBindByIdRequest.user_id)
  return _internal_user_id();
}
inline void WechatUserBindByIdRequest::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserBindByIdRequest.user_id)
}
inline ::int32_t WechatUserBindByIdRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline void WechatUserBindByIdRequest::_internal_set_user_id(::int32_t value) {
  ;
  _impl_.user_id_ = value;
}

// int32 wechat_user_id = 2;
inline void WechatUserBindByIdRequest::clear_wechat_user_id() {
  _impl_.wechat_user_id_ = 0;
}
inline ::int32_t WechatUserBindByIdRequest::wechat_user_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserBindByIdRequest.wechat_user_id)
  return _internal_wechat_user_id();
}
inline void WechatUserBindByIdRequest::set_wechat_user_id(::int32_t value) {
  _internal_set_wechat_user_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserBindByIdRequest.wechat_user_id)
}
inline ::int32_t WechatUserBindByIdRequest::_internal_wechat_user_id() const {
  return _impl_.wechat_user_id_;
}
inline void WechatUserBindByIdRequest::_internal_set_wechat_user_id(::int32_t value) {
  ;
  _impl_.wechat_user_id_ = value;
}

// -------------------------------------------------------------------

// WechatUserBindByAccountRequest

// string nickname = 1;
inline void WechatUserBindByAccountRequest::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& WechatUserBindByAccountRequest::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserBindByAccountRequest.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserBindByAccountRequest::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserBindByAccountRequest.nickname)
}
inline std::string* WechatUserBindByAccountRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatUserBindByAccountRequest.nickname)
  return _s;
}
inline const std::string& WechatUserBindByAccountRequest::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void WechatUserBindByAccountRequest::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatUserBindByAccountRequest.nickname)
  return _impl_.nickname_.Release();
}
inline void WechatUserBindByAccountRequest::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatUserBindByAccountRequest.nickname)
}

// string password = 2;
inline void WechatUserBindByAccountRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& WechatUserBindByAccountRequest::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserBindByAccountRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserBindByAccountRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserBindByAccountRequest.password)
}
inline std::string* WechatUserBindByAccountRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatUserBindByAccountRequest.password)
  return _s;
}
inline const std::string& WechatUserBindByAccountRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void WechatUserBindByAccountRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserBindByAccountRequest::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatUserBindByAccountRequest.password)
  return _impl_.password_.Release();
}
inline void WechatUserBindByAccountRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatUserBindByAccountRequest.password)
}

// -------------------------------------------------------------------

// WechatUserQueryByOpenIdRequest

// string app_id = 1;
inline void WechatUserQueryByOpenIdRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatUserQueryByOpenIdRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserQueryByOpenIdRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserQueryByOpenIdRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserQueryByOpenIdRequest.app_id)
}
inline std::string* WechatUserQueryByOpenIdRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatUserQueryByOpenIdRequest.app_id)
  return _s;
}
inline const std::string& WechatUserQueryByOpenIdRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatUserQueryByOpenIdRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatUserQueryByOpenIdRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatUserQueryByOpenIdRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatUserQueryByOpenIdRequest.app_id)
}

// string open_id = 2;
inline void WechatUserQueryByOpenIdRequest::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatUserQueryByOpenIdRequest::open_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserQueryByOpenIdRequest.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserQueryByOpenIdRequest::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserQueryByOpenIdRequest.open_id)
}
inline std::string* WechatUserQueryByOpenIdRequest::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatUserQueryByOpenIdRequest.open_id)
  return _s;
}
inline const std::string& WechatUserQueryByOpenIdRequest::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void WechatUserQueryByOpenIdRequest::_internal_set_open_id(const std::string& value) {
  ;


  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::_internal_mutable_open_id() {
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserQueryByOpenIdRequest::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatUserQueryByOpenIdRequest.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatUserQueryByOpenIdRequest::set_allocated_open_id(std::string* value) {
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatUserQueryByOpenIdRequest.open_id)
}

// -------------------------------------------------------------------

// WechatUserQueryByUnionIdRequest

// string union_id = 1;
inline void WechatUserQueryByUnionIdRequest::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatUserQueryByUnionIdRequest::union_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatUserQueryByUnionIdRequest.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatUserQueryByUnionIdRequest::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatUserQueryByUnionIdRequest.union_id)
}
inline std::string* WechatUserQueryByUnionIdRequest::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatUserQueryByUnionIdRequest.union_id)
  return _s;
}
inline const std::string& WechatUserQueryByUnionIdRequest::_internal_union_id() const {
  return _impl_.union_id_.Get();
}
inline void WechatUserQueryByUnionIdRequest::_internal_set_union_id(const std::string& value) {
  ;


  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatUserQueryByUnionIdRequest::_internal_mutable_union_id() {
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatUserQueryByUnionIdRequest::release_union_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatUserQueryByUnionIdRequest.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatUserQueryByUnionIdRequest::set_allocated_union_id(std::string* value) {
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatUserQueryByUnionIdRequest.union_id)
}

// -------------------------------------------------------------------

// WechatAllMiniProgramUserResponse_Item

// int32 id = 1;
inline void WechatAllMiniProgramUserResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.id)
  return _internal_id();
}
inline void WechatAllMiniProgramUserResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.id)
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// int32 user_id = 2;
inline void WechatAllMiniProgramUserResponse_Item::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::user_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.user_id)
  return _internal_user_id();
}
inline void WechatAllMiniProgramUserResponse_Item::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.user_id)
}
inline ::int32_t WechatAllMiniProgramUserResponse_Item::_internal_user_id() const {
  return _impl_.user_id_;
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_user_id(::int32_t value) {
  ;
  _impl_.user_id_ = value;
}

// string union_id = 3;
inline void WechatAllMiniProgramUserResponse_Item::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::union_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.union_id)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.union_id)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_union_id() const {
  return _impl_.union_id_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_union_id(const std::string& value) {
  ;


  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_union_id() {
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_union_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_union_id(std::string* value) {
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.union_id)
}

// string app_id = 4;
inline void WechatAllMiniProgramUserResponse_Item::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::app_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.app_id)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.app_id)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.app_id)
}

// string open_id = 5;
inline void WechatAllMiniProgramUserResponse_Item::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::open_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.open_id)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.open_id)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_open_id(const std::string& value) {
  ;


  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_open_id() {
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_open_id(std::string* value) {
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.open_id)
}

// optional string nickname = 11;
inline bool WechatAllMiniProgramUserResponse_Item::has_nickname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatAllMiniProgramUserResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.nickname)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.nickname)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_nickname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_nickname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.nickname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.nickname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_nickname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.nickname)
}

// optional string avatar_url = 12;
inline bool WechatAllMiniProgramUserResponse_Item::has_avatar_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WechatAllMiniProgramUserResponse_Item::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::avatar_url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
  return _internal_avatar_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllMiniProgramUserResponse_Item::set_avatar_url(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avatar_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
}
inline std::string* WechatAllMiniProgramUserResponse_Item::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
  return _s;
}
inline const std::string& WechatAllMiniProgramUserResponse_Item::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void WechatAllMiniProgramUserResponse_Item::_internal_set_avatar_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::_internal_mutable_avatar_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.avatar_url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllMiniProgramUserResponse_Item::release_avatar_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.avatar_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatAllMiniProgramUserResponse_Item::set_allocated_avatar_url(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.avatar_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_url_.IsDefault()) {
          _impl_.avatar_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllMiniProgramUserResponse.Item.avatar_url)
}

// -------------------------------------------------------------------

// WechatAllMiniProgramUserResponse

// repeated .palm.nut.v1.WechatAllMiniProgramUserResponse.Item items = 1;
inline int WechatAllMiniProgramUserResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int WechatAllMiniProgramUserResponse::items_size() const {
  return _internal_items_size();
}
inline void WechatAllMiniProgramUserResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* WechatAllMiniProgramUserResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllMiniProgramUserResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item >*
WechatAllMiniProgramUserResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.WechatAllMiniProgramUserResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item& WechatAllMiniProgramUserResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item& WechatAllMiniProgramUserResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllMiniProgramUserResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* WechatAllMiniProgramUserResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* WechatAllMiniProgramUserResponse::add_items() {
  ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.WechatAllMiniProgramUserResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllMiniProgramUserResponse_Item >&
WechatAllMiniProgramUserResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.WechatAllMiniProgramUserResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllMiniProgramUserResponse_Item>&
WechatAllMiniProgramUserResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllMiniProgramUserResponse_Item>*
WechatAllMiniProgramUserResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// WechatAllOauth2UserResponse_Item

// int32 id = 1;
inline void WechatAllOauth2UserResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t WechatAllOauth2UserResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.id)
  return _internal_id();
}
inline void WechatAllOauth2UserResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.id)
}
inline ::int32_t WechatAllOauth2UserResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// int32 user_id = 2;
inline void WechatAllOauth2UserResponse_Item::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline ::int32_t WechatAllOauth2UserResponse_Item::user_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.user_id)
  return _internal_user_id();
}
inline void WechatAllOauth2UserResponse_Item::set_user_id(::int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.user_id)
}
inline ::int32_t WechatAllOauth2UserResponse_Item::_internal_user_id() const {
  return _impl_.user_id_;
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_user_id(::int32_t value) {
  ;
  _impl_.user_id_ = value;
}

// string union_id = 3;
inline void WechatAllOauth2UserResponse_Item::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::union_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.union_id)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.union_id)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_union_id() const {
  return _impl_.union_id_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_union_id(const std::string& value) {
  ;


  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_union_id() {
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_union_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_union_id(std::string* value) {
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.union_id)
}

// string app_id = 4;
inline void WechatAllOauth2UserResponse_Item::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::app_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.app_id)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.app_id)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.app_id)
}

// string open_id = 5;
inline void WechatAllOauth2UserResponse_Item::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::open_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.open_id)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.open_id)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_open_id(const std::string& value) {
  ;


  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_open_id() {
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_open_id(std::string* value) {
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.open_id)
}

// string nickname = 11;
inline void WechatAllOauth2UserResponse_Item::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.nickname)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.nickname)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.nickname)
  return _impl_.nickname_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.nickname)
}

// int32 sex = 12;
inline void WechatAllOauth2UserResponse_Item::clear_sex() {
  _impl_.sex_ = 0;
}
inline ::int32_t WechatAllOauth2UserResponse_Item::sex() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.sex)
  return _internal_sex();
}
inline void WechatAllOauth2UserResponse_Item::set_sex(::int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.sex)
}
inline ::int32_t WechatAllOauth2UserResponse_Item::_internal_sex() const {
  return _impl_.sex_;
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_sex(::int32_t value) {
  ;
  _impl_.sex_ = value;
}

// string city = 13;
inline void WechatAllOauth2UserResponse_Item::clear_city() {
  _impl_.city_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::city() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_city(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.city)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.city)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_city() const {
  return _impl_.city_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_city(const std::string& value) {
  ;


  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_city() {
  ;
  return _impl_.city_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_city() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.city)
  return _impl_.city_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_city(std::string* value) {
  _impl_.city_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.city_.IsDefault()) {
          _impl_.city_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.city)
}

// string province = 14;
inline void WechatAllOauth2UserResponse_Item::clear_province() {
  _impl_.province_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::province() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.province)
  return _internal_province();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_province(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.province_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.province)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_province() {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.province)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_province() const {
  return _impl_.province_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_province(const std::string& value) {
  ;


  _impl_.province_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_province() {
  ;
  return _impl_.province_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_province() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.province)
  return _impl_.province_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_province(std::string* value) {
  _impl_.province_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.province_.IsDefault()) {
          _impl_.province_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.province)
}

// string country = 15;
inline void WechatAllOauth2UserResponse_Item::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::country() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_country(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.country)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.country)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_country() const {
  return _impl_.country_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_country(const std::string& value) {
  ;


  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_country() {
  ;
  return _impl_.country_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_country() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.country)
  return _impl_.country_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_country(std::string* value) {
  _impl_.country_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_.IsDefault()) {
          _impl_.country_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.country)
}

// optional string head_img_url = 16;
inline bool WechatAllOauth2UserResponse_Item::has_head_img_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatAllOauth2UserResponse_Item::clear_head_img_url() {
  _impl_.head_img_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatAllOauth2UserResponse_Item::head_img_url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.head_img_url)
  return _internal_head_img_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_head_img_url(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.head_img_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.head_img_url)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_head_img_url() {
  std::string* _s = _internal_mutable_head_img_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.head_img_url)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_head_img_url() const {
  return _impl_.head_img_url_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_head_img_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.head_img_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_head_img_url() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.head_img_url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_head_img_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.head_img_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.head_img_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_head_img_url(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_img_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.head_img_url_.IsDefault()) {
          _impl_.head_img_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.head_img_url)
}

// repeated string privilege = 17;
inline int WechatAllOauth2UserResponse_Item::_internal_privilege_size() const {
  return _impl_.privilege_.size();
}
inline int WechatAllOauth2UserResponse_Item::privilege_size() const {
  return _internal_privilege_size();
}
inline void WechatAllOauth2UserResponse_Item::clear_privilege() {
  _internal_mutable_privilege()->Clear();
}
inline std::string* WechatAllOauth2UserResponse_Item::add_privilege() {
  std::string* _s = _internal_add_privilege();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::privilege(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_privilege(index);
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_privilege(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_mutable_privilege()->Mutable(index);
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, const std::string& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, std::string&& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_privilege()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::set_privilege(int index, absl::string_view value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(const std::string& value) {
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(std::string&& value) {
  _internal_mutable_privilege()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(const char* value, std::size_t size) {
  _internal_mutable_privilege()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline void WechatAllOauth2UserResponse_Item::add_privilege(absl::string_view value) {
  _internal_mutable_privilege()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WechatAllOauth2UserResponse_Item::privilege() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_privilege();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* WechatAllOauth2UserResponse_Item::mutable_privilege() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.WechatAllOauth2UserResponse.Item.privilege)
  return _internal_mutable_privilege();
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_privilege(int index) const {
  return _internal_privilege().Get(index);
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_add_privilege() {
  return _internal_mutable_privilege()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WechatAllOauth2UserResponse_Item::_internal_privilege() const {
  return _impl_.privilege_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WechatAllOauth2UserResponse_Item::_internal_mutable_privilege() {
  return &_impl_.privilege_;
}

// string lang = 18;
inline void WechatAllOauth2UserResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& WechatAllOauth2UserResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatAllOauth2UserResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatAllOauth2UserResponse.Item.lang)
}
inline std::string* WechatAllOauth2UserResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.Item.lang)
  return _s;
}
inline const std::string& WechatAllOauth2UserResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void WechatAllOauth2UserResponse_Item::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatAllOauth2UserResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatAllOauth2UserResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void WechatAllOauth2UserResponse_Item::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatAllOauth2UserResponse.Item.lang)
}

// -------------------------------------------------------------------

// WechatAllOauth2UserResponse

// repeated .palm.nut.v1.WechatAllOauth2UserResponse.Item items = 1;
inline int WechatAllOauth2UserResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int WechatAllOauth2UserResponse::items_size() const {
  return _internal_items_size();
}
inline void WechatAllOauth2UserResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::WechatAllOauth2UserResponse_Item* WechatAllOauth2UserResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatAllOauth2UserResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllOauth2UserResponse_Item >*
WechatAllOauth2UserResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.WechatAllOauth2UserResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::WechatAllOauth2UserResponse_Item& WechatAllOauth2UserResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::WechatAllOauth2UserResponse_Item& WechatAllOauth2UserResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatAllOauth2UserResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::WechatAllOauth2UserResponse_Item* WechatAllOauth2UserResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::WechatAllOauth2UserResponse_Item* WechatAllOauth2UserResponse::add_items() {
  ::palm::nut::v1::WechatAllOauth2UserResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.WechatAllOauth2UserResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::WechatAllOauth2UserResponse_Item >&
WechatAllOauth2UserResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.WechatAllOauth2UserResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllOauth2UserResponse_Item>&
WechatAllOauth2UserResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::WechatAllOauth2UserResponse_Item>*
WechatAllOauth2UserResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SignInByWechatOauth2Request

// string state = 1;
inline void SignInByWechatOauth2Request::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& SignInByWechatOauth2Request::state() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByWechatOauth2Request.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByWechatOauth2Request::set_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByWechatOauth2Request.state)
}
inline std::string* SignInByWechatOauth2Request::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByWechatOauth2Request.state)
  return _s;
}
inline const std::string& SignInByWechatOauth2Request::_internal_state() const {
  return _impl_.state_.Get();
}
inline void SignInByWechatOauth2Request::_internal_set_state(const std::string& value) {
  ;


  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::_internal_mutable_state() {
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::release_state() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByWechatOauth2Request.state)
  return _impl_.state_.Release();
}
inline void SignInByWechatOauth2Request::set_allocated_state(std::string* value) {
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByWechatOauth2Request.state)
}

// string code = 2;
inline void SignInByWechatOauth2Request::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SignInByWechatOauth2Request::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByWechatOauth2Request.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByWechatOauth2Request::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByWechatOauth2Request.code)
}
inline std::string* SignInByWechatOauth2Request::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByWechatOauth2Request.code)
  return _s;
}
inline const std::string& SignInByWechatOauth2Request::_internal_code() const {
  return _impl_.code_.Get();
}
inline void SignInByWechatOauth2Request::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByWechatOauth2Request.code)
  return _impl_.code_.Release();
}
inline void SignInByWechatOauth2Request::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByWechatOauth2Request.code)
}

// string app_id = 3;
inline void SignInByWechatOauth2Request::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& SignInByWechatOauth2Request::app_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByWechatOauth2Request.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignInByWechatOauth2Request::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByWechatOauth2Request.app_id)
}
inline std::string* SignInByWechatOauth2Request::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByWechatOauth2Request.app_id)
  return _s;
}
inline const std::string& SignInByWechatOauth2Request::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void SignInByWechatOauth2Request::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SignInByWechatOauth2Request::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByWechatOauth2Request.app_id)
  return _impl_.app_id_.Release();
}
inline void SignInByWechatOauth2Request::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByWechatOauth2Request.app_id)
}

// .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
inline void SignInByWechatOauth2Request::clear_language() {
  _impl_.language_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language SignInByWechatOauth2Request::language() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByWechatOauth2Request.language)
  return _internal_language();
}
inline void SignInByWechatOauth2Request::set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
   _internal_set_language(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SignInByWechatOauth2Request.language)
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language SignInByWechatOauth2Request::_internal_language() const {
  return static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(_impl_.language_);
}
inline void SignInByWechatOauth2Request::_internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  ;
  _impl_.language_ = value;
}

// .google.protobuf.Duration ttl = 11;
inline bool SignInByWechatOauth2Request::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignInByWechatOauth2Request::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SignInByWechatOauth2Request::ttl() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SignInByWechatOauth2Request.ttl)
  return _internal_ttl();
}
inline void SignInByWechatOauth2Request::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SignInByWechatOauth2Request.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByWechatOauth2Request::release_ttl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByWechatOauth2Request::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SignInByWechatOauth2Request.ttl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByWechatOauth2Request::_internal_mutable_ttl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SignInByWechatOauth2Request::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SignInByWechatOauth2Request.ttl)
  return _msg;
}
inline void SignInByWechatOauth2Request::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SignInByWechatOauth2Request.ttl)
}

// -------------------------------------------------------------------

// WechatOauth2SignInStateResponse

// string state = 1;
inline void WechatOauth2SignInStateResponse::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& WechatOauth2SignInStateResponse::state() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatOauth2SignInStateResponse.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2SignInStateResponse::set_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatOauth2SignInStateResponse.state)
}
inline std::string* WechatOauth2SignInStateResponse::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatOauth2SignInStateResponse.state)
  return _s;
}
inline const std::string& WechatOauth2SignInStateResponse::_internal_state() const {
  return _impl_.state_.Get();
}
inline void WechatOauth2SignInStateResponse::_internal_set_state(const std::string& value) {
  ;


  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInStateResponse::_internal_mutable_state() {
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInStateResponse::release_state() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatOauth2SignInStateResponse.state)
  return _impl_.state_.Release();
}
inline void WechatOauth2SignInStateResponse::set_allocated_state(std::string* value) {
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatOauth2SignInStateResponse.state)
}

// -------------------------------------------------------------------

// WechatOauth2SignInUrlRequest

// string app_id = 1;
inline void WechatOauth2SignInUrlRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatOauth2SignInUrlRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatOauth2SignInUrlRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2SignInUrlRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatOauth2SignInUrlRequest.app_id)
}
inline std::string* WechatOauth2SignInUrlRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatOauth2SignInUrlRequest.app_id)
  return _s;
}
inline const std::string& WechatOauth2SignInUrlRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatOauth2SignInUrlRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatOauth2SignInUrlRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatOauth2SignInUrlRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatOauth2SignInUrlRequest.app_id)
}

// string redirect_uri = 2;
inline void WechatOauth2SignInUrlRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& WechatOauth2SignInUrlRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatOauth2SignInUrlRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2SignInUrlRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatOauth2SignInUrlRequest.redirect_uri)
}
inline std::string* WechatOauth2SignInUrlRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatOauth2SignInUrlRequest.redirect_uri)
  return _s;
}
inline const std::string& WechatOauth2SignInUrlRequest::_internal_redirect_uri() const {
  return _impl_.redirect_uri_.Get();
}
inline void WechatOauth2SignInUrlRequest::_internal_set_redirect_uri(const std::string& value) {
  ;


  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::_internal_mutable_redirect_uri() {
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2SignInUrlRequest::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatOauth2SignInUrlRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void WechatOauth2SignInUrlRequest::set_allocated_redirect_uri(std::string* value) {
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatOauth2SignInUrlRequest.redirect_uri)
}

// .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
inline void WechatOauth2SignInUrlRequest::clear_language() {
  _impl_.language_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2SignInUrlRequest::language() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatOauth2SignInUrlRequest.language)
  return _internal_language();
}
inline void WechatOauth2SignInUrlRequest::set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
   _internal_set_language(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatOauth2SignInUrlRequest.language)
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2SignInUrlRequest::_internal_language() const {
  return static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(_impl_.language_);
}
inline void WechatOauth2SignInUrlRequest::_internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  ;
  _impl_.language_ = value;
}

// -------------------------------------------------------------------

// WechatMiniProgramUser

// string app_id = 11;
inline void WechatMiniProgramUser::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramUser::app_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatMiniProgramUser.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatMiniProgramUser.app_id)
}
inline std::string* WechatMiniProgramUser::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatMiniProgramUser.app_id)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatMiniProgramUser::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatMiniProgramUser.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatMiniProgramUser::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatMiniProgramUser.app_id)
}

// string open_id = 12;
inline void WechatMiniProgramUser::clear_open_id() {
  _impl_.open_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramUser::open_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatMiniProgramUser.open_id)
  return _internal_open_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_open_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.open_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatMiniProgramUser.open_id)
}
inline std::string* WechatMiniProgramUser::mutable_open_id() {
  std::string* _s = _internal_mutable_open_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatMiniProgramUser.open_id)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_open_id() const {
  return _impl_.open_id_.Get();
}
inline void WechatMiniProgramUser::_internal_set_open_id(const std::string& value) {
  ;


  _impl_.open_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_open_id() {
  ;
  return _impl_.open_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_open_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatMiniProgramUser.open_id)
  return _impl_.open_id_.Release();
}
inline void WechatMiniProgramUser::set_allocated_open_id(std::string* value) {
  _impl_.open_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.open_id_.IsDefault()) {
          _impl_.open_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatMiniProgramUser.open_id)
}

// string union_id = 13;
inline void WechatMiniProgramUser::clear_union_id() {
  _impl_.union_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramUser::union_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatMiniProgramUser.union_id)
  return _internal_union_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_union_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.union_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatMiniProgramUser.union_id)
}
inline std::string* WechatMiniProgramUser::mutable_union_id() {
  std::string* _s = _internal_mutable_union_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatMiniProgramUser.union_id)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_union_id() const {
  return _impl_.union_id_.Get();
}
inline void WechatMiniProgramUser::_internal_set_union_id(const std::string& value) {
  ;


  _impl_.union_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_union_id() {
  ;
  return _impl_.union_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_union_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatMiniProgramUser.union_id)
  return _impl_.union_id_.Release();
}
inline void WechatMiniProgramUser::set_allocated_union_id(std::string* value) {
  _impl_.union_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.union_id_.IsDefault()) {
          _impl_.union_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatMiniProgramUser.union_id)
}

// optional string nickname = 21;
inline bool WechatMiniProgramUser::has_nickname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatMiniProgramUser::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatMiniProgramUser::nickname() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatMiniProgramUser.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatMiniProgramUser.nickname)
}
inline std::string* WechatMiniProgramUser::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatMiniProgramUser.nickname)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void WechatMiniProgramUser::_internal_set_nickname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_nickname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatMiniProgramUser.nickname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.nickname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatMiniProgramUser::set_allocated_nickname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatMiniProgramUser.nickname)
}

// optional string avatar_url = 22;
inline bool WechatMiniProgramUser::has_avatar_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WechatMiniProgramUser::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WechatMiniProgramUser::avatar_url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.WechatMiniProgramUser.avatar_url)
  return _internal_avatar_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramUser::set_avatar_url(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avatar_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.WechatMiniProgramUser.avatar_url)
}
inline std::string* WechatMiniProgramUser::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.WechatMiniProgramUser.avatar_url)
  return _s;
}
inline const std::string& WechatMiniProgramUser::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void WechatMiniProgramUser::_internal_set_avatar_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::_internal_mutable_avatar_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.avatar_url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramUser::release_avatar_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.WechatMiniProgramUser.avatar_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.avatar_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatMiniProgramUser::set_allocated_avatar_url(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.avatar_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_url_.IsDefault()) {
          _impl_.avatar_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.WechatMiniProgramUser.avatar_url)
}

// -------------------------------------------------------------------

// AttachmentShowRequest

// int32 id = 1;
inline void AttachmentShowRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t AttachmentShowRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentShowRequest.id)
  return _internal_id();
}
inline void AttachmentShowRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentShowRequest.id)
}
inline ::int32_t AttachmentShowRequest::_internal_id() const {
  return _impl_.id_;
}
inline void AttachmentShowRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// .google.protobuf.Duration ttl = 2;
inline bool AttachmentShowRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AttachmentShowRequest::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& AttachmentShowRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentShowRequest.ttl)
  return _internal_ttl();
}
inline void AttachmentShowRequest::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.AttachmentShowRequest.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AttachmentShowRequest::release_ttl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AttachmentShowRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentShowRequest.ttl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AttachmentShowRequest::_internal_mutable_ttl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* AttachmentShowRequest::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentShowRequest.ttl)
  return _msg;
}
inline void AttachmentShowRequest::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentShowRequest.ttl)
}

// -------------------------------------------------------------------

// AttachmentShowResponse

// .palm.nut.v1.AttachmentIndexResponse.Item item = 1;
inline bool AttachmentShowResponse::has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_ != nullptr);
  return value;
}
inline void AttachmentShowResponse::clear_item() {
  if (_impl_.item_ != nullptr) _impl_.item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::AttachmentIndexResponse_Item& AttachmentShowResponse::_internal_item() const {
  const ::palm::nut::v1::AttachmentIndexResponse_Item* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::AttachmentIndexResponse_Item&>(
      ::palm::nut::v1::_AttachmentIndexResponse_Item_default_instance_);
}
inline const ::palm::nut::v1::AttachmentIndexResponse_Item& AttachmentShowResponse::item() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentShowResponse.item)
  return _internal_item();
}
inline void AttachmentShowResponse::unsafe_arena_set_allocated_item(
    ::palm::nut::v1::AttachmentIndexResponse_Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.AttachmentShowResponse.item)
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::release_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::AttachmentIndexResponse_Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentShowResponse.item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::AttachmentIndexResponse_Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::_internal_mutable_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::AttachmentIndexResponse_Item>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentShowResponse::mutable_item() {
  ::palm::nut::v1::AttachmentIndexResponse_Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentShowResponse.item)
  return _msg;
}
inline void AttachmentShowResponse::set_allocated_item(::palm::nut::v1::AttachmentIndexResponse_Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentShowResponse.item)
}

// string url = 2;
inline void AttachmentShowResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& AttachmentShowResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentShowResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentShowResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentShowResponse.url)
}
inline std::string* AttachmentShowResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentShowResponse.url)
  return _s;
}
inline const std::string& AttachmentShowResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void AttachmentShowResponse::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentShowResponse::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentShowResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentShowResponse.url)
  return _impl_.url_.Release();
}
inline void AttachmentShowResponse::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentShowResponse.url)
}

// -------------------------------------------------------------------

// AttachmentIndexResponse_Item

// int32 id = 1;
inline void AttachmentIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t AttachmentIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.id)
  return _internal_id();
}
inline void AttachmentIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.id)
}
inline ::int32_t AttachmentIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void AttachmentIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string bucket = 2;
inline void AttachmentIndexResponse_Item::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::bucket() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.bucket)
  return _internal_bucket();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_bucket(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bucket_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.bucket)
}
inline std::string* AttachmentIndexResponse_Item::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.Item.bucket)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_bucket(const std::string& value) {
  ;


  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_bucket() {
  ;
  return _impl_.bucket_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_bucket() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentIndexResponse.Item.bucket)
  return _impl_.bucket_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_bucket(std::string* value) {
  _impl_.bucket_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bucket_.IsDefault()) {
          _impl_.bucket_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentIndexResponse.Item.bucket)
}

// string name = 3;
inline void AttachmentIndexResponse_Item::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.name)
}
inline std::string* AttachmentIndexResponse_Item::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.Item.name)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentIndexResponse.Item.name)
  return _impl_.name_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentIndexResponse.Item.name)
}

// string title = 4;
inline void AttachmentIndexResponse_Item::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::title() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.title)
}
inline std::string* AttachmentIndexResponse_Item::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.Item.title)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_title() const {
  return _impl_.title_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_title() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentIndexResponse.Item.title)
  return _impl_.title_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentIndexResponse.Item.title)
}

// int64 size = 5;
inline void AttachmentIndexResponse_Item::clear_size() {
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t AttachmentIndexResponse_Item::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.size)
  return _internal_size();
}
inline void AttachmentIndexResponse_Item::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.size)
}
inline ::int64_t AttachmentIndexResponse_Item::_internal_size() const {
  return _impl_.size_;
}
inline void AttachmentIndexResponse_Item::_internal_set_size(::int64_t value) {
  ;
  _impl_.size_ = value;
}

// string content_type = 6;
inline void AttachmentIndexResponse_Item::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& AttachmentIndexResponse_Item::content_type() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttachmentIndexResponse_Item::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.content_type)
}
inline std::string* AttachmentIndexResponse_Item::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.Item.content_type)
  return _s;
}
inline const std::string& AttachmentIndexResponse_Item::_internal_content_type() const {
  return _impl_.content_type_.Get();
}
inline void AttachmentIndexResponse_Item::_internal_set_content_type(const std::string& value) {
  ;


  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::_internal_mutable_content_type() {
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* AttachmentIndexResponse_Item::release_content_type() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentIndexResponse.Item.content_type)
  return _impl_.content_type_.Release();
}
inline void AttachmentIndexResponse_Item::set_allocated_content_type(std::string* value) {
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentIndexResponse.Item.content_type)
}

// .palm.nut.v1.MediaContent.Status status = 7;
inline void AttachmentIndexResponse_Item::clear_status() {
  _impl_.status_ = 0;
}
inline ::palm::nut::v1::MediaContent_Status AttachmentIndexResponse_Item::status() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.status)
  return _internal_status();
}
inline void AttachmentIndexResponse_Item::set_status(::palm::nut::v1::MediaContent_Status value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.AttachmentIndexResponse.Item.status)
}
inline ::palm::nut::v1::MediaContent_Status AttachmentIndexResponse_Item::_internal_status() const {
  return static_cast<::palm::nut::v1::MediaContent_Status>(_impl_.status_);
}
inline void AttachmentIndexResponse_Item::_internal_set_status(::palm::nut::v1::MediaContent_Status value) {
  ;
  _impl_.status_ = value;
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool AttachmentIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AttachmentIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AttachmentIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void AttachmentIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.AttachmentIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AttachmentIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AttachmentIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AttachmentIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AttachmentIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.Item.updated_at)
  return _msg;
}
inline void AttachmentIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// AttachmentIndexResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool AttachmentIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void AttachmentIndexResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& AttachmentIndexResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& AttachmentIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.pagination)
  return _internal_pagination();
}
inline void AttachmentIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.AttachmentIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.AttachmentIndexResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* AttachmentIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.pagination)
  return _msg;
}
inline void AttachmentIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.AttachmentIndexResponse.pagination)
}

// repeated .palm.nut.v1.AttachmentIndexResponse.Item items = 11;
inline int AttachmentIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int AttachmentIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void AttachmentIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.AttachmentIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::AttachmentIndexResponse_Item >*
AttachmentIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.AttachmentIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::AttachmentIndexResponse_Item& AttachmentIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::AttachmentIndexResponse_Item& AttachmentIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.AttachmentIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::AttachmentIndexResponse_Item* AttachmentIndexResponse::add_items() {
  ::palm::nut::v1::AttachmentIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.AttachmentIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::AttachmentIndexResponse_Item >&
AttachmentIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.AttachmentIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::AttachmentIndexResponse_Item>&
AttachmentIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::AttachmentIndexResponse_Item>*
AttachmentIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// LocaleByLangRequest

// string lang = 1;
inline void LocaleByLangRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleByLangRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleByLangRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByLangRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleByLangRequest.lang)
}
inline std::string* LocaleByLangRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleByLangRequest.lang)
  return _s;
}
inline const std::string& LocaleByLangRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleByLangRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByLangRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByLangRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleByLangRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleByLangRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleByLangRequest.lang)
}

// -------------------------------------------------------------------

// LocaleListResponse

// repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleListResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int LocaleListResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleListResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleListResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleListResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
LocaleListResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LocaleListResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleListResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleListResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleListResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleListResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleListResponse::add_items() {
  ::palm::nut::v1::LocaleIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.LocaleListResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
LocaleListResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LocaleListResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>&
LocaleListResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>*
LocaleListResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// LocaleIndexResponse_Item

// int32 id = 1;
inline void LocaleIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LocaleIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.id)
  return _internal_id();
}
inline void LocaleIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.id)
}
inline ::int32_t LocaleIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void LocaleIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string lang = 2;
inline void LocaleIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleIndexResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.lang)
}
inline std::string* LocaleIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.lang)
}

// string code = 3;
inline void LocaleIndexResponse_Item::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleIndexResponse_Item::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.code)
}
inline std::string* LocaleIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _impl_.code_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.code)
}

// string message = 4;
inline void LocaleIndexResponse_Item::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleIndexResponse_Item::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.message)
}
inline std::string* LocaleIndexResponse_Item::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _impl_.message_.Release();
}
inline void LocaleIndexResponse_Item::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.message)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool LocaleIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void LocaleIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _msg;
}
inline void LocaleIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// LocaleIndexResponse

// repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int LocaleIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
LocaleIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::add_items() {
  ::palm::nut::v1::LocaleIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.LocaleIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
LocaleIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>&
LocaleIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LocaleIndexResponse_Item>*
LocaleIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// .palm.nut.v1.Pagination pagination = 9;
inline bool LocaleIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void LocaleIndexResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& LocaleIndexResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& LocaleIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.pagination)
  return _internal_pagination();
}
inline void LocaleIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LocaleIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* LocaleIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.pagination)
  return _msg;
}
inline void LocaleIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.pagination)
}

// -------------------------------------------------------------------

// LocaleByCodeRequest

// string code = 1;
inline void LocaleByCodeRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleByCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleByCodeRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByCodeRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleByCodeRequest.code)
}
inline std::string* LocaleByCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleByCodeRequest.code)
  return _s;
}
inline const std::string& LocaleByCodeRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleByCodeRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByCodeRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleByCodeRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleByCodeRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleByCodeRequest.code)
}

// -------------------------------------------------------------------

// LocaleByLangAndCodeRequest

// string lang = 1;
inline void LocaleByLangAndCodeRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleByLangAndCodeRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleByLangAndCodeRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByLangAndCodeRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleByLangAndCodeRequest.lang)
}
inline std::string* LocaleByLangAndCodeRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleByLangAndCodeRequest.lang)
  return _s;
}
inline const std::string& LocaleByLangAndCodeRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleByLangAndCodeRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleByLangAndCodeRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleByLangAndCodeRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleByLangAndCodeRequest.lang)
}

// string code = 2;
inline void LocaleByLangAndCodeRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleByLangAndCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleByLangAndCodeRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleByLangAndCodeRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleByLangAndCodeRequest.code)
}
inline std::string* LocaleByLangAndCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleByLangAndCodeRequest.code)
  return _s;
}
inline const std::string& LocaleByLangAndCodeRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleByLangAndCodeRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleByLangAndCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleByLangAndCodeRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleByLangAndCodeRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleByLangAndCodeRequest.code)
}

// -------------------------------------------------------------------

// LocaleCreateRequest

// string lang = 1;
inline void LocaleCreateRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LocaleCreateRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleCreateRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleCreateRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleCreateRequest.lang)
}
inline std::string* LocaleCreateRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleCreateRequest.lang)
  return _s;
}
inline const std::string& LocaleCreateRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LocaleCreateRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleCreateRequest.lang)
  return _impl_.lang_.Release();
}
inline void LocaleCreateRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleCreateRequest.lang)
}

// string code = 2;
inline void LocaleCreateRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& LocaleCreateRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleCreateRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleCreateRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleCreateRequest.code)
}
inline std::string* LocaleCreateRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleCreateRequest.code)
  return _s;
}
inline const std::string& LocaleCreateRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void LocaleCreateRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleCreateRequest.code)
  return _impl_.code_.Release();
}
inline void LocaleCreateRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleCreateRequest.code)
}

// string message = 3;
inline void LocaleCreateRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleCreateRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleCreateRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleCreateRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleCreateRequest.message)
}
inline std::string* LocaleCreateRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleCreateRequest.message)
  return _s;
}
inline const std::string& LocaleCreateRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocaleCreateRequest::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleCreateRequest::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleCreateRequest.message)
  return _impl_.message_.Release();
}
inline void LocaleCreateRequest::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleCreateRequest.message)
}

// -------------------------------------------------------------------

// LocaleUpdateRequest

// int32 id = 1;
inline void LocaleUpdateRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LocaleUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleUpdateRequest.id)
  return _internal_id();
}
inline void LocaleUpdateRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleUpdateRequest.id)
}
inline ::int32_t LocaleUpdateRequest::_internal_id() const {
  return _impl_.id_;
}
inline void LocaleUpdateRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string message = 2;
inline void LocaleUpdateRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocaleUpdateRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleUpdateRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LocaleUpdateRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleUpdateRequest.message)
}
inline std::string* LocaleUpdateRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleUpdateRequest.message)
  return _s;
}
inline const std::string& LocaleUpdateRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocaleUpdateRequest::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocaleUpdateRequest::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* LocaleUpdateRequest::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleUpdateRequest.message)
  return _impl_.message_.Release();
}
inline void LocaleUpdateRequest::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleUpdateRequest.message)
}

// -------------------------------------------------------------------

// IndexNotificationResponse_Item

// .palm.nut.v1.EmailTask email = 1;
inline bool IndexNotificationResponse_Item::has_email() const {
  return message_case() == kEmail;
}
inline bool IndexNotificationResponse_Item::_internal_has_email() const {
  return message_case() == kEmail;
}
inline void IndexNotificationResponse_Item::set_has_email() {
  _impl_._oneof_case_[0] = kEmail;
}
inline void IndexNotificationResponse_Item::clear_email() {
  if (message_case() == kEmail) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.email_;
    }
    clear_has_message();
  }
}
inline ::palm::nut::v1::EmailTask* IndexNotificationResponse_Item::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNotificationResponse.Item.email)
  if (message_case() == kEmail) {
    clear_has_message();
    ::palm::nut::v1::EmailTask* temp = _impl_.message_.email_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::nut::v1::EmailTask& IndexNotificationResponse_Item::_internal_email() const {
  return message_case() == kEmail
      ? *_impl_.message_.email_
      : reinterpret_cast<::palm::nut::v1::EmailTask&>(::palm::nut::v1::_EmailTask_default_instance_);
}
inline const ::palm::nut::v1::EmailTask& IndexNotificationResponse_Item::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNotificationResponse.Item.email)
  return _internal_email();
}
inline ::palm::nut::v1::EmailTask* IndexNotificationResponse_Item::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.nut.v1.IndexNotificationResponse.Item.email)
  if (message_case() == kEmail) {
    clear_has_message();
    ::palm::nut::v1::EmailTask* temp = _impl_.message_.email_;
    _impl_.message_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IndexNotificationResponse_Item::unsafe_arena_set_allocated_email(::palm::nut::v1::EmailTask* email) {
  clear_message();
  if (email) {
    set_has_email();
    _impl_.message_.email_ = email;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.IndexNotificationResponse.Item.email)
}
inline ::palm::nut::v1::EmailTask* IndexNotificationResponse_Item::_internal_mutable_email() {
  if (message_case() != kEmail) {
    clear_message();
    set_has_email();
    _impl_.message_.email_ = CreateMaybeMessage< ::palm::nut::v1::EmailTask >(GetArenaForAllocation());
  }
  return _impl_.message_.email_;
}
inline ::palm::nut::v1::EmailTask* IndexNotificationResponse_Item::mutable_email() {
  ::palm::nut::v1::EmailTask* _msg = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNotificationResponse.Item.email)
  return _msg;
}

// .palm.nut.v1.SmsTask sms = 2;
inline bool IndexNotificationResponse_Item::has_sms() const {
  return message_case() == kSms;
}
inline bool IndexNotificationResponse_Item::_internal_has_sms() const {
  return message_case() == kSms;
}
inline void IndexNotificationResponse_Item::set_has_sms() {
  _impl_._oneof_case_[0] = kSms;
}
inline void IndexNotificationResponse_Item::clear_sms() {
  if (message_case() == kSms) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.sms_;
    }
    clear_has_message();
  }
}
inline ::palm::nut::v1::SmsTask* IndexNotificationResponse_Item::release_sms() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNotificationResponse.Item.sms)
  if (message_case() == kSms) {
    clear_has_message();
    ::palm::nut::v1::SmsTask* temp = _impl_.message_.sms_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.sms_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::nut::v1::SmsTask& IndexNotificationResponse_Item::_internal_sms() const {
  return message_case() == kSms
      ? *_impl_.message_.sms_
      : reinterpret_cast<::palm::nut::v1::SmsTask&>(::palm::nut::v1::_SmsTask_default_instance_);
}
inline const ::palm::nut::v1::SmsTask& IndexNotificationResponse_Item::sms() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNotificationResponse.Item.sms)
  return _internal_sms();
}
inline ::palm::nut::v1::SmsTask* IndexNotificationResponse_Item::unsafe_arena_release_sms() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.nut.v1.IndexNotificationResponse.Item.sms)
  if (message_case() == kSms) {
    clear_has_message();
    ::palm::nut::v1::SmsTask* temp = _impl_.message_.sms_;
    _impl_.message_.sms_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IndexNotificationResponse_Item::unsafe_arena_set_allocated_sms(::palm::nut::v1::SmsTask* sms) {
  clear_message();
  if (sms) {
    set_has_sms();
    _impl_.message_.sms_ = sms;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.IndexNotificationResponse.Item.sms)
}
inline ::palm::nut::v1::SmsTask* IndexNotificationResponse_Item::_internal_mutable_sms() {
  if (message_case() != kSms) {
    clear_message();
    set_has_sms();
    _impl_.message_.sms_ = CreateMaybeMessage< ::palm::nut::v1::SmsTask >(GetArenaForAllocation());
  }
  return _impl_.message_.sms_;
}
inline ::palm::nut::v1::SmsTask* IndexNotificationResponse_Item::mutable_sms() {
  ::palm::nut::v1::SmsTask* _msg = _internal_mutable_sms();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNotificationResponse.Item.sms)
  return _msg;
}

// .google.protobuf.Timestamp created_at = 19;
inline bool IndexNotificationResponse_Item::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& IndexNotificationResponse_Item::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& IndexNotificationResponse_Item::created_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNotificationResponse.Item.created_at)
  return _internal_created_at();
}
inline void IndexNotificationResponse_Item::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.IndexNotificationResponse.Item.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexNotificationResponse_Item::release_created_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexNotificationResponse_Item::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNotificationResponse.Item.created_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexNotificationResponse_Item::_internal_mutable_created_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexNotificationResponse_Item::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNotificationResponse.Item.created_at)
  return _msg;
}
inline void IndexNotificationResponse_Item::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.IndexNotificationResponse.Item.created_at)
}

inline bool IndexNotificationResponse_Item::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void IndexNotificationResponse_Item::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline IndexNotificationResponse_Item::MessageCase IndexNotificationResponse_Item::message_case() const {
  return IndexNotificationResponse_Item::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// IndexNotificationResponse

// repeated .palm.nut.v1.IndexNotificationResponse.Item items = 1;
inline int IndexNotificationResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int IndexNotificationResponse::items_size() const {
  return _internal_items_size();
}
inline void IndexNotificationResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::IndexNotificationResponse_Item* IndexNotificationResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNotificationResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::IndexNotificationResponse_Item >*
IndexNotificationResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.IndexNotificationResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::IndexNotificationResponse_Item& IndexNotificationResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::IndexNotificationResponse_Item& IndexNotificationResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNotificationResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::IndexNotificationResponse_Item* IndexNotificationResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::IndexNotificationResponse_Item* IndexNotificationResponse::add_items() {
  ::palm::nut::v1::IndexNotificationResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.IndexNotificationResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::IndexNotificationResponse_Item >&
IndexNotificationResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.IndexNotificationResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::IndexNotificationResponse_Item>&
IndexNotificationResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::IndexNotificationResponse_Item>*
IndexNotificationResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// .palm.nut.v1.Pagination pagination = 9;
inline bool IndexNotificationResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void IndexNotificationResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& IndexNotificationResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& IndexNotificationResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNotificationResponse.pagination)
  return _internal_pagination();
}
inline void IndexNotificationResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.IndexNotificationResponse.pagination)
}
inline ::palm::nut::v1::Pagination* IndexNotificationResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* IndexNotificationResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNotificationResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* IndexNotificationResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* IndexNotificationResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNotificationResponse.pagination)
  return _msg;
}
inline void IndexNotificationResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.IndexNotificationResponse.pagination)
}

// -------------------------------------------------------------------

// LeaveWordIndexResponse_Item

// int32 id = 1;
inline void LeaveWordIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LeaveWordIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.Item.id)
  return _internal_id();
}
inline void LeaveWordIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LeaveWordIndexResponse.Item.id)
}
inline ::int32_t LeaveWordIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void LeaveWordIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string lang = 2;
inline void LeaveWordIndexResponse_Item::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& LeaveWordIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveWordIndexResponse_Item::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LeaveWordIndexResponse.Item.lang)
}
inline std::string* LeaveWordIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.Item.lang)
  return _s;
}
inline const std::string& LeaveWordIndexResponse_Item::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void LeaveWordIndexResponse_Item::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaveWordIndexResponse_Item::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* LeaveWordIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LeaveWordIndexResponse.Item.lang)
  return _impl_.lang_.Release();
}
inline void LeaveWordIndexResponse_Item::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.lang)
}

// string ip = 3;
inline void LeaveWordIndexResponse_Item::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& LeaveWordIndexResponse_Item::ip() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.Item.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveWordIndexResponse_Item::set_ip(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LeaveWordIndexResponse.Item.ip)
}
inline std::string* LeaveWordIndexResponse_Item::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.Item.ip)
  return _s;
}
inline const std::string& LeaveWordIndexResponse_Item::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void LeaveWordIndexResponse_Item::_internal_set_ip(const std::string& value) {
  ;


  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaveWordIndexResponse_Item::_internal_mutable_ip() {
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* LeaveWordIndexResponse_Item::release_ip() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LeaveWordIndexResponse.Item.ip)
  return _impl_.ip_.Release();
}
inline void LeaveWordIndexResponse_Item::set_allocated_ip(std::string* value) {
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.ip)
}

// .palm.nut.v1.MediaContent content = 8;
inline bool LeaveWordIndexResponse_Item::has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.content_ != nullptr);
  return value;
}
inline void LeaveWordIndexResponse_Item::clear_content() {
  if (_impl_.content_ != nullptr) _impl_.content_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::MediaContent& LeaveWordIndexResponse_Item::_internal_content() const {
  const ::palm::nut::v1::MediaContent* p = _impl_.content_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::MediaContent&>(
      ::palm::nut::v1::_MediaContent_default_instance_);
}
inline const ::palm::nut::v1::MediaContent& LeaveWordIndexResponse_Item::content() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.Item.content)
  return _internal_content();
}
inline void LeaveWordIndexResponse_Item::unsafe_arena_set_allocated_content(
    ::palm::nut::v1::MediaContent* content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.content_);
  }
  _impl_.content_ = content;
  if (content) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.content)
}
inline ::palm::nut::v1::MediaContent* LeaveWordIndexResponse_Item::release_content() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::MediaContent* temp = _impl_.content_;
  _impl_.content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::MediaContent* LeaveWordIndexResponse_Item::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LeaveWordIndexResponse.Item.content)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::MediaContent* temp = _impl_.content_;
  _impl_.content_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::MediaContent* LeaveWordIndexResponse_Item::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.content_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::MediaContent>(GetArenaForAllocation());
    _impl_.content_ = p;
  }
  return _impl_.content_;
}
inline ::palm::nut::v1::MediaContent* LeaveWordIndexResponse_Item::mutable_content() {
  ::palm::nut::v1::MediaContent* _msg = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.Item.content)
  return _msg;
}
inline void LeaveWordIndexResponse_Item::set_allocated_content(::palm::nut::v1::MediaContent* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.content_;
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(content);
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_ = content;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.content)
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool LeaveWordIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LeaveWordIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LeaveWordIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void LeaveWordIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LeaveWordIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.Item.updated_at)
  return _msg;
}
inline void LeaveWordIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.updated_at)
}

// .google.protobuf.Timestamp created_at = 12;
inline bool LeaveWordIndexResponse_Item::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LeaveWordIndexResponse_Item::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LeaveWordIndexResponse_Item::created_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.Item.created_at)
  return _internal_created_at();
}
inline void LeaveWordIndexResponse_Item::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::release_created_at() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LeaveWordIndexResponse.Item.created_at)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::_internal_mutable_created_at() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LeaveWordIndexResponse_Item::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.Item.created_at)
  return _msg;
}
inline void LeaveWordIndexResponse_Item::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LeaveWordIndexResponse.Item.created_at)
}

// -------------------------------------------------------------------

// LeaveWordIndexResponse

// repeated .palm.nut.v1.LeaveWordIndexResponse.Item items = 1;
inline int LeaveWordIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int LeaveWordIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void LeaveWordIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::LeaveWordIndexResponse_Item* LeaveWordIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LeaveWordIndexResponse_Item >*
LeaveWordIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LeaveWordIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::LeaveWordIndexResponse_Item& LeaveWordIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::LeaveWordIndexResponse_Item& LeaveWordIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::LeaveWordIndexResponse_Item* LeaveWordIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::LeaveWordIndexResponse_Item* LeaveWordIndexResponse::add_items() {
  ::palm::nut::v1::LeaveWordIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.LeaveWordIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LeaveWordIndexResponse_Item >&
LeaveWordIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LeaveWordIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LeaveWordIndexResponse_Item>&
LeaveWordIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::LeaveWordIndexResponse_Item>*
LeaveWordIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// .palm.nut.v1.Pagination pagination = 9;
inline bool LeaveWordIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void LeaveWordIndexResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& LeaveWordIndexResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& LeaveWordIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LeaveWordIndexResponse.pagination)
  return _internal_pagination();
}
inline void LeaveWordIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LeaveWordIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* LeaveWordIndexResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* LeaveWordIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LeaveWordIndexResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* LeaveWordIndexResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* LeaveWordIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LeaveWordIndexResponse.pagination)
  return _msg;
}
inline void LeaveWordIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LeaveWordIndexResponse.pagination)
}

// -------------------------------------------------------------------

// IndexNowProfile

// string key = 1;
inline void IndexNowProfile::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& IndexNowProfile::key() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNowProfile.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexNowProfile::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.IndexNowProfile.key)
}
inline std::string* IndexNowProfile::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNowProfile.key)
  return _s;
}
inline const std::string& IndexNowProfile::_internal_key() const {
  return _impl_.key_.Get();
}
inline void IndexNowProfile::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexNowProfile::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexNowProfile::release_key() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNowProfile.key)
  return _impl_.key_.Release();
}
inline void IndexNowProfile::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.IndexNowProfile.key)
}

// -------------------------------------------------------------------

// IndexNowPingRequest

// string key = 1;
inline void IndexNowPingRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& IndexNowPingRequest::key() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNowPingRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexNowPingRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.IndexNowPingRequest.key)
}
inline std::string* IndexNowPingRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNowPingRequest.key)
  return _s;
}
inline const std::string& IndexNowPingRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void IndexNowPingRequest::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexNowPingRequest::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexNowPingRequest::release_key() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNowPingRequest.key)
  return _impl_.key_.Release();
}
inline void IndexNowPingRequest::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.IndexNowPingRequest.key)
}

// string home = 9;
inline void IndexNowPingRequest::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& IndexNowPingRequest::home() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IndexNowPingRequest.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexNowPingRequest::set_home(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.IndexNowPingRequest.home)
}
inline std::string* IndexNowPingRequest::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.IndexNowPingRequest.home)
  return _s;
}
inline const std::string& IndexNowPingRequest::_internal_home() const {
  return _impl_.home_.Get();
}
inline void IndexNowPingRequest::_internal_set_home(const std::string& value) {
  ;


  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexNowPingRequest::_internal_mutable_home() {
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexNowPingRequest::release_home() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.IndexNowPingRequest.home)
  return _impl_.home_.Release();
}
inline void IndexNowPingRequest::set_allocated_home(std::string* value) {
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.IndexNowPingRequest.home)
}

// -------------------------------------------------------------------

// SitemapPingRequest

// string home = 1;
inline void SitemapPingRequest::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& SitemapPingRequest::home() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SitemapPingRequest.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SitemapPingRequest::set_home(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SitemapPingRequest.home)
}
inline std::string* SitemapPingRequest::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SitemapPingRequest.home)
  return _s;
}
inline const std::string& SitemapPingRequest::_internal_home() const {
  return _impl_.home_.Get();
}
inline void SitemapPingRequest::_internal_set_home(const std::string& value) {
  ;


  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* SitemapPingRequest::_internal_mutable_home() {
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* SitemapPingRequest::release_home() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SitemapPingRequest.home)
  return _impl_.home_.Release();
}
inline void SitemapPingRequest::set_allocated_home(std::string* value) {
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SitemapPingRequest.home)
}

// -------------------------------------------------------------------

// SiteMaintenanceModeRequest

// .google.protobuf.Duration ttl = 1;
inline bool SiteMaintenanceModeRequest::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SiteMaintenanceModeRequest::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SiteMaintenanceModeRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteMaintenanceModeRequest.ttl)
  return _internal_ttl();
}
inline void SiteMaintenanceModeRequest::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteMaintenanceModeRequest.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SiteMaintenanceModeRequest::release_ttl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SiteMaintenanceModeRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteMaintenanceModeRequest.ttl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SiteMaintenanceModeRequest::_internal_mutable_ttl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SiteMaintenanceModeRequest::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteMaintenanceModeRequest.ttl)
  return _msg;
}
inline void SiteMaintenanceModeRequest::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteMaintenanceModeRequest.ttl)
}

// string reason = 2;
inline void SiteMaintenanceModeRequest::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& SiteMaintenanceModeRequest::reason() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteMaintenanceModeRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteMaintenanceModeRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteMaintenanceModeRequest.reason)
}
inline std::string* SiteMaintenanceModeRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteMaintenanceModeRequest.reason)
  return _s;
}
inline const std::string& SiteMaintenanceModeRequest::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void SiteMaintenanceModeRequest::_internal_set_reason(const std::string& value) {
  ;


  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteMaintenanceModeRequest::_internal_mutable_reason() {
  ;
  return _impl_.reason_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteMaintenanceModeRequest::release_reason() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteMaintenanceModeRequest.reason)
  return _impl_.reason_.Release();
}
inline void SiteMaintenanceModeRequest::set_allocated_reason(std::string* value) {
  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteMaintenanceModeRequest.reason)
}

// -------------------------------------------------------------------

// SiteInstallRequest

// .palm.nut.v1.UserSignUpRequest user = 1;
inline bool SiteInstallRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void SiteInstallRequest::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::UserSignUpRequest& SiteInstallRequest::_internal_user() const {
  const ::palm::nut::v1::UserSignUpRequest* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::UserSignUpRequest&>(
      ::palm::nut::v1::_UserSignUpRequest_default_instance_);
}
inline const ::palm::nut::v1::UserSignUpRequest& SiteInstallRequest::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteInstallRequest.user)
  return _internal_user();
}
inline void SiteInstallRequest::unsafe_arena_set_allocated_user(
    ::palm::nut::v1::UserSignUpRequest* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteInstallRequest.user)
}
inline ::palm::nut::v1::UserSignUpRequest* SiteInstallRequest::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::UserSignUpRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::UserSignUpRequest* SiteInstallRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteInstallRequest.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::UserSignUpRequest* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::UserSignUpRequest* SiteInstallRequest::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::UserSignUpRequest>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::palm::nut::v1::UserSignUpRequest* SiteInstallRequest::mutable_user() {
  ::palm::nut::v1::UserSignUpRequest* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteInstallRequest.user)
  return _msg;
}
inline void SiteInstallRequest::set_allocated_user(::palm::nut::v1::UserSignUpRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteInstallRequest.user)
}

// -------------------------------------------------------------------

// TwilioProfile

// string from = 1;
inline void TwilioProfile::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& TwilioProfile::from() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.from)
  return _internal_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TwilioProfile::set_from(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.from_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.from)
}
inline std::string* TwilioProfile::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.from)
  return _s;
}
inline const std::string& TwilioProfile::_internal_from() const {
  return _impl_.from_.Get();
}
inline void TwilioProfile::_internal_set_from(const std::string& value) {
  ;


  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_from() {
  ;
  return _impl_.from_.Mutable( GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_from() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.from)
  return _impl_.from_.Release();
}
inline void TwilioProfile::set_allocated_from(std::string* value) {
  _impl_.from_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.from_.IsDefault()) {
          _impl_.from_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.from)
}

// string account_sid = 2;
inline void TwilioProfile::clear_account_sid() {
  _impl_.account_sid_.ClearToEmpty();
}
inline const std::string& TwilioProfile::account_sid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.account_sid)
  return _internal_account_sid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TwilioProfile::set_account_sid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_sid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.account_sid)
}
inline std::string* TwilioProfile::mutable_account_sid() {
  std::string* _s = _internal_mutable_account_sid();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.account_sid)
  return _s;
}
inline const std::string& TwilioProfile::_internal_account_sid() const {
  return _impl_.account_sid_.Get();
}
inline void TwilioProfile::_internal_set_account_sid(const std::string& value) {
  ;


  _impl_.account_sid_.Set(value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_account_sid() {
  ;
  return _impl_.account_sid_.Mutable( GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_account_sid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.account_sid)
  return _impl_.account_sid_.Release();
}
inline void TwilioProfile::set_allocated_account_sid(std::string* value) {
  _impl_.account_sid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_sid_.IsDefault()) {
          _impl_.account_sid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.account_sid)
}

// string auth_token = 3;
inline void TwilioProfile::clear_auth_token() {
  _impl_.auth_token_.ClearToEmpty();
}
inline const std::string& TwilioProfile::auth_token() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.auth_token)
  return _internal_auth_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TwilioProfile::set_auth_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.auth_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.auth_token)
}
inline std::string* TwilioProfile::mutable_auth_token() {
  std::string* _s = _internal_mutable_auth_token();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.auth_token)
  return _s;
}
inline const std::string& TwilioProfile::_internal_auth_token() const {
  return _impl_.auth_token_.Get();
}
inline void TwilioProfile::_internal_set_auth_token(const std::string& value) {
  ;


  _impl_.auth_token_.Set(value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_auth_token() {
  ;
  return _impl_.auth_token_.Mutable( GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_auth_token() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.auth_token)
  return _impl_.auth_token_.Release();
}
inline void TwilioProfile::set_allocated_auth_token(std::string* value) {
  _impl_.auth_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.auth_token_.IsDefault()) {
          _impl_.auth_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.auth_token)
}

// optional string sms_status_callback = 9;
inline bool TwilioProfile::has_sms_status_callback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TwilioProfile::clear_sms_status_callback() {
  _impl_.sms_status_callback_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TwilioProfile::sms_status_callback() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.sms_status_callback)
  return _internal_sms_status_callback();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TwilioProfile::set_sms_status_callback(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sms_status_callback_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.sms_status_callback)
}
inline std::string* TwilioProfile::mutable_sms_status_callback() {
  std::string* _s = _internal_mutable_sms_status_callback();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.sms_status_callback)
  return _s;
}
inline const std::string& TwilioProfile::_internal_sms_status_callback() const {
  return _impl_.sms_status_callback_.Get();
}
inline void TwilioProfile::_internal_set_sms_status_callback(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.sms_status_callback_.Set(value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_sms_status_callback() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sms_status_callback_.Mutable( GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_sms_status_callback() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.sms_status_callback)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sms_status_callback_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sms_status_callback_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TwilioProfile::set_allocated_sms_status_callback(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sms_status_callback_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sms_status_callback_.IsDefault()) {
          _impl_.sms_status_callback_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.sms_status_callback)
}

// -------------------------------------------------------------------

// SmtpProfile

// string host = 1;
inline void SmtpProfile::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& SmtpProfile::host() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmtpProfile::set_host(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.host)
}
inline std::string* SmtpProfile::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.host)
  return _s;
}
inline const std::string& SmtpProfile::_internal_host() const {
  return _impl_.host_.Get();
}
inline void SmtpProfile::_internal_set_host(const std::string& value) {
  ;


  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_host() {
  ;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_host() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpProfile.host)
  return _impl_.host_.Release();
}
inline void SmtpProfile::set_allocated_host(std::string* value) {
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpProfile.host)
}

// uint32 port = 2;
inline void SmtpProfile::clear_port() {
  _impl_.port_ = 0u;
}
inline ::uint32_t SmtpProfile::port() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.port)
  return _internal_port();
}
inline void SmtpProfile::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.port)
}
inline ::uint32_t SmtpProfile::_internal_port() const {
  return _impl_.port_;
}
inline void SmtpProfile::_internal_set_port(::uint32_t value) {
  ;
  _impl_.port_ = value;
}

// .palm.nut.v1.SmtpProfile.AuthMethod auth_method = 3;
inline void SmtpProfile::clear_auth_method() {
  _impl_.auth_method_ = 0;
}
inline ::palm::nut::v1::SmtpProfile_AuthMethod SmtpProfile::auth_method() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.auth_method)
  return _internal_auth_method();
}
inline void SmtpProfile::set_auth_method(::palm::nut::v1::SmtpProfile_AuthMethod value) {
   _internal_set_auth_method(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.auth_method)
}
inline ::palm::nut::v1::SmtpProfile_AuthMethod SmtpProfile::_internal_auth_method() const {
  return static_cast<::palm::nut::v1::SmtpProfile_AuthMethod>(_impl_.auth_method_);
}
inline void SmtpProfile::_internal_set_auth_method(::palm::nut::v1::SmtpProfile_AuthMethod value) {
  ;
  _impl_.auth_method_ = value;
}

// repeated .palm.nut.v1.EmailTask.Address cc = 8;
inline int SmtpProfile::_internal_cc_size() const {
  return _impl_.cc_.size();
}
inline int SmtpProfile::cc_size() const {
  return _internal_cc_size();
}
inline void SmtpProfile::clear_cc() {
  _internal_mutable_cc()->Clear();
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.cc)
  return _internal_mutable_cc()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
SmtpProfile::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpProfile.cc)
  return _internal_mutable_cc();
}
inline const ::palm::nut::v1::EmailTask_Address& SmtpProfile::_internal_cc(int index) const {
  return _internal_cc().Get(index);
}
inline const ::palm::nut::v1::EmailTask_Address& SmtpProfile::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.cc)
  return _internal_cc(index);
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::_internal_add_cc() {
  return _internal_mutable_cc()->Add();
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::add_cc() {
  ::palm::nut::v1::EmailTask_Address* _add = _internal_add_cc();
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpProfile.cc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
SmtpProfile::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpProfile.cc)
  return _internal_cc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>&
SmtpProfile::_internal_cc() const {
  return _impl_.cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>*
SmtpProfile::_internal_mutable_cc() {
  return &_impl_.cc_;
}

// repeated .palm.nut.v1.EmailTask.Address bcc = 9;
inline int SmtpProfile::_internal_bcc_size() const {
  return _impl_.bcc_.size();
}
inline int SmtpProfile::bcc_size() const {
  return _internal_bcc_size();
}
inline void SmtpProfile::clear_bcc() {
  _internal_mutable_bcc()->Clear();
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.bcc)
  return _internal_mutable_bcc()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
SmtpProfile::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpProfile.bcc)
  return _internal_mutable_bcc();
}
inline const ::palm::nut::v1::EmailTask_Address& SmtpProfile::_internal_bcc(int index) const {
  return _internal_bcc().Get(index);
}
inline const ::palm::nut::v1::EmailTask_Address& SmtpProfile::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.bcc)
  return _internal_bcc(index);
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::_internal_add_bcc() {
  return _internal_mutable_bcc()->Add();
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::add_bcc() {
  ::palm::nut::v1::EmailTask_Address* _add = _internal_add_bcc();
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpProfile.bcc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
SmtpProfile::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpProfile.bcc)
  return _internal_bcc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>&
SmtpProfile::_internal_bcc() const {
  return _impl_.bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>*
SmtpProfile::_internal_mutable_bcc() {
  return &_impl_.bcc_;
}

// .palm.nut.v1.EmailTask.Address from = 11;
inline bool SmtpProfile::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline void SmtpProfile::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::EmailTask_Address& SmtpProfile::_internal_from() const {
  const ::palm::nut::v1::EmailTask_Address* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::EmailTask_Address&>(
      ::palm::nut::v1::_EmailTask_Address_default_instance_);
}
inline const ::palm::nut::v1::EmailTask_Address& SmtpProfile::from() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.from)
  return _internal_from();
}
inline void SmtpProfile::unsafe_arena_set_allocated_from(
    ::palm::nut::v1::EmailTask_Address* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SmtpProfile.from)
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::release_from() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpProfile.from)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::EmailTask_Address>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::palm::nut::v1::EmailTask_Address* SmtpProfile::mutable_from() {
  ::palm::nut::v1::EmailTask_Address* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.from)
  return _msg;
}
inline void SmtpProfile::set_allocated_from(::palm::nut::v1::EmailTask_Address* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpProfile.from)
}

// string password = 12;
inline void SmtpProfile::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& SmtpProfile::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmtpProfile::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.password)
}
inline std::string* SmtpProfile::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.password)
  return _s;
}
inline const std::string& SmtpProfile::_internal_password() const {
  return _impl_.password_.Get();
}
inline void SmtpProfile::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpProfile.password)
  return _impl_.password_.Release();
}
inline void SmtpProfile::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpProfile.password)
}

// -------------------------------------------------------------------

// EmailTask_Address

// string name = 1;
inline void EmailTask_Address::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailTask_Address::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Address.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Address::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Address.name)
}
inline std::string* EmailTask_Address::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Address.name)
  return _s;
}
inline const std::string& EmailTask_Address::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EmailTask_Address::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Address::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EmailTask_Address::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Address.name)
  return _impl_.name_.Release();
}
inline void EmailTask_Address::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Address.name)
}

// string email = 2;
inline void EmailTask_Address::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EmailTask_Address::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Address.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Address::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Address.email)
}
inline std::string* EmailTask_Address::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Address.email)
  return _s;
}
inline const std::string& EmailTask_Address::_internal_email() const {
  return _impl_.email_.Get();
}
inline void EmailTask_Address::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Address::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* EmailTask_Address::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Address.email)
  return _impl_.email_.Release();
}
inline void EmailTask_Address::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Address.email)
}

// -------------------------------------------------------------------

// EmailTask_Body

// string text = 1;
inline void EmailTask_Body::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& EmailTask_Body::text() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Body.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Body::set_text(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Body.text)
}
inline std::string* EmailTask_Body::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Body.text)
  return _s;
}
inline const std::string& EmailTask_Body::_internal_text() const {
  return _impl_.text_.Get();
}
inline void EmailTask_Body::_internal_set_text(const std::string& value) {
  ;


  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Body::_internal_mutable_text() {
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* EmailTask_Body::release_text() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Body.text)
  return _impl_.text_.Release();
}
inline void EmailTask_Body::set_allocated_text(std::string* value) {
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Body.text)
}

// bool html = 2;
inline void EmailTask_Body::clear_html() {
  _impl_.html_ = false;
}
inline bool EmailTask_Body::html() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Body.html)
  return _internal_html();
}
inline void EmailTask_Body::set_html(bool value) {
  _internal_set_html(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Body.html)
}
inline bool EmailTask_Body::_internal_html() const {
  return _impl_.html_;
}
inline void EmailTask_Body::_internal_set_html(bool value) {
  ;
  _impl_.html_ = value;
}

// -------------------------------------------------------------------

// EmailTask_Attachment

// string name = 1;
inline void EmailTask_Attachment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Attachment.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Attachment::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Attachment.name)
}
inline std::string* EmailTask_Attachment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Attachment.name)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EmailTask_Attachment::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Attachment.name)
  return _impl_.name_.Release();
}
inline void EmailTask_Attachment::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Attachment.name)
}

// bytes payload = 2;
inline void EmailTask_Attachment::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::payload() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Attachment.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask_Attachment::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Attachment.payload)
}
inline std::string* EmailTask_Attachment::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Attachment.payload)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void EmailTask_Attachment::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::release_payload() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Attachment.payload)
  return _impl_.payload_.Release();
}
inline void EmailTask_Attachment::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Attachment.payload)
}

// -------------------------------------------------------------------

// EmailTask

// .palm.nut.v1.EmailTask.Address to = 1;
inline bool EmailTask::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline void EmailTask::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::_internal_to() const {
  const ::palm::nut::v1::EmailTask_Address* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::EmailTask_Address&>(
      ::palm::nut::v1::_EmailTask_Address_default_instance_);
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::to() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.to)
  return _internal_to();
}
inline void EmailTask::unsafe_arena_set_allocated_to(
    ::palm::nut::v1::EmailTask_Address* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.EmailTask.to)
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::release_to() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.to)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::_internal_mutable_to() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::EmailTask_Address>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::mutable_to() {
  ::palm::nut::v1::EmailTask_Address* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.to)
  return _msg;
}
inline void EmailTask::set_allocated_to(::palm::nut::v1::EmailTask_Address* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.to)
}

// repeated .palm.nut.v1.EmailTask.Address cc = 2;
inline int EmailTask::_internal_cc_size() const {
  return _impl_.cc_.size();
}
inline int EmailTask::cc_size() const {
  return _internal_cc_size();
}
inline void EmailTask::clear_cc() {
  _internal_mutable_cc()->Clear();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.cc)
  return _internal_mutable_cc()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
EmailTask::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.EmailTask.cc)
  return _internal_mutable_cc();
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::_internal_cc(int index) const {
  return _internal_cc().Get(index);
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.cc)
  return _internal_cc(index);
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::_internal_add_cc() {
  return _internal_mutable_cc()->Add();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::add_cc() {
  ::palm::nut::v1::EmailTask_Address* _add = _internal_add_cc();
  // @@protoc_insertion_point(field_add:palm.nut.v1.EmailTask.cc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
EmailTask::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.EmailTask.cc)
  return _internal_cc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>&
EmailTask::_internal_cc() const {
  return _impl_.cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>*
EmailTask::_internal_mutable_cc() {
  return &_impl_.cc_;
}

// repeated .palm.nut.v1.EmailTask.Address bcc = 3;
inline int EmailTask::_internal_bcc_size() const {
  return _impl_.bcc_.size();
}
inline int EmailTask::bcc_size() const {
  return _internal_bcc_size();
}
inline void EmailTask::clear_bcc() {
  _internal_mutable_bcc()->Clear();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.bcc)
  return _internal_mutable_bcc()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
EmailTask::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.EmailTask.bcc)
  return _internal_mutable_bcc();
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::_internal_bcc(int index) const {
  return _internal_bcc().Get(index);
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.bcc)
  return _internal_bcc(index);
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::_internal_add_bcc() {
  return _internal_mutable_bcc()->Add();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::add_bcc() {
  ::palm::nut::v1::EmailTask_Address* _add = _internal_add_bcc();
  // @@protoc_insertion_point(field_add:palm.nut.v1.EmailTask.bcc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
EmailTask::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.EmailTask.bcc)
  return _internal_bcc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>&
EmailTask::_internal_bcc() const {
  return _impl_.bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Address>*
EmailTask::_internal_mutable_bcc() {
  return &_impl_.bcc_;
}

// string subject = 11;
inline void EmailTask::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& EmailTask::subject() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailTask::set_subject(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.subject)
}
inline std::string* EmailTask::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.subject)
  return _s;
}
inline const std::string& EmailTask::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void EmailTask::_internal_set_subject(const std::string& value) {
  ;


  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask::_internal_mutable_subject() {
  ;
  return _impl_.subject_.Mutable( GetArenaForAllocation());
}
inline std::string* EmailTask::release_subject() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.subject)
  return _impl_.subject_.Release();
}
inline void EmailTask::set_allocated_subject(std::string* value) {
  _impl_.subject_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.subject)
}

// .palm.nut.v1.EmailTask.Body body = 12;
inline bool EmailTask::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void EmailTask::clear_body() {
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::nut::v1::EmailTask_Body& EmailTask::_internal_body() const {
  const ::palm::nut::v1::EmailTask_Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::EmailTask_Body&>(
      ::palm::nut::v1::_EmailTask_Body_default_instance_);
}
inline const ::palm::nut::v1::EmailTask_Body& EmailTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.body)
  return _internal_body();
}
inline void EmailTask::unsafe_arena_set_allocated_body(
    ::palm::nut::v1::EmailTask_Body* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.EmailTask.body)
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::release_body() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::EmailTask_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.body)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::EmailTask_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::EmailTask_Body>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::mutable_body() {
  ::palm::nut::v1::EmailTask_Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.body)
  return _msg;
}
inline void EmailTask::set_allocated_body(::palm::nut::v1::EmailTask_Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.body)
}

// repeated .palm.nut.v1.EmailTask.Attachment attachments = 13;
inline int EmailTask::_internal_attachments_size() const {
  return _impl_.attachments_.size();
}
inline int EmailTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void EmailTask::clear_attachments() {
  _internal_mutable_attachments()->Clear();
}
inline ::palm::nut::v1::EmailTask_Attachment* EmailTask::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.attachments)
  return _internal_mutable_attachments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >*
EmailTask::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.EmailTask.attachments)
  return _internal_mutable_attachments();
}
inline const ::palm::nut::v1::EmailTask_Attachment& EmailTask::_internal_attachments(int index) const {
  return _internal_attachments().Get(index);
}
inline const ::palm::nut::v1::EmailTask_Attachment& EmailTask::attachments(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.attachments)
  return _internal_attachments(index);
}
inline ::palm::nut::v1::EmailTask_Attachment* EmailTask::_internal_add_attachments() {
  return _internal_mutable_attachments()->Add();
}
inline ::palm::nut::v1::EmailTask_Attachment* EmailTask::add_attachments() {
  ::palm::nut::v1::EmailTask_Attachment* _add = _internal_add_attachments();
  // @@protoc_insertion_point(field_add:palm.nut.v1.EmailTask.attachments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >&
EmailTask::attachments() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.EmailTask.attachments)
  return _internal_attachments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Attachment>&
EmailTask::_internal_attachments() const {
  return _impl_.attachments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::EmailTask_Attachment>*
EmailTask::_internal_mutable_attachments() {
  return &_impl_.attachments_;
}

// -------------------------------------------------------------------

// SiteTwilioPingRequest

// string to = 1;
inline void SiteTwilioPingRequest::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& SiteTwilioPingRequest::to() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteTwilioPingRequest.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteTwilioPingRequest::set_to(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteTwilioPingRequest.to)
}
inline std::string* SiteTwilioPingRequest::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteTwilioPingRequest.to)
  return _s;
}
inline const std::string& SiteTwilioPingRequest::_internal_to() const {
  return _impl_.to_.Get();
}
inline void SiteTwilioPingRequest::_internal_set_to(const std::string& value) {
  ;


  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteTwilioPingRequest::_internal_mutable_to() {
  ;
  return _impl_.to_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteTwilioPingRequest::release_to() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteTwilioPingRequest.to)
  return _impl_.to_.Release();
}
inline void SiteTwilioPingRequest::set_allocated_to(std::string* value) {
  _impl_.to_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_.IsDefault()) {
          _impl_.to_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteTwilioPingRequest.to)
}

// string message = 2;
inline void SiteTwilioPingRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SiteTwilioPingRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteTwilioPingRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteTwilioPingRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteTwilioPingRequest.message)
}
inline std::string* SiteTwilioPingRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteTwilioPingRequest.message)
  return _s;
}
inline const std::string& SiteTwilioPingRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SiteTwilioPingRequest::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteTwilioPingRequest::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteTwilioPingRequest::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteTwilioPingRequest.message)
  return _impl_.message_.Release();
}
inline void SiteTwilioPingRequest::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteTwilioPingRequest.message)
}

// .palm.nut.v1.TwilioProfile profile = 9;
inline bool SiteTwilioPingRequest::has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profile_ != nullptr);
  return value;
}
inline void SiteTwilioPingRequest::clear_profile() {
  if (_impl_.profile_ != nullptr) _impl_.profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::TwilioProfile& SiteTwilioPingRequest::_internal_profile() const {
  const ::palm::nut::v1::TwilioProfile* p = _impl_.profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::TwilioProfile&>(
      ::palm::nut::v1::_TwilioProfile_default_instance_);
}
inline const ::palm::nut::v1::TwilioProfile& SiteTwilioPingRequest::profile() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteTwilioPingRequest.profile)
  return _internal_profile();
}
inline void SiteTwilioPingRequest::unsafe_arena_set_allocated_profile(
    ::palm::nut::v1::TwilioProfile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profile_);
  }
  _impl_.profile_ = profile;
  if (profile) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteTwilioPingRequest.profile)
}
inline ::palm::nut::v1::TwilioProfile* SiteTwilioPingRequest::release_profile() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::TwilioProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::TwilioProfile* SiteTwilioPingRequest::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteTwilioPingRequest.profile)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::TwilioProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::TwilioProfile* SiteTwilioPingRequest::_internal_mutable_profile() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::TwilioProfile>(GetArenaForAllocation());
    _impl_.profile_ = p;
  }
  return _impl_.profile_;
}
inline ::palm::nut::v1::TwilioProfile* SiteTwilioPingRequest::mutable_profile() {
  ::palm::nut::v1::TwilioProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteTwilioPingRequest.profile)
  return _msg;
}
inline void SiteTwilioPingRequest::set_allocated_profile(::palm::nut::v1::TwilioProfile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profile);
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteTwilioPingRequest.profile)
}

// -------------------------------------------------------------------

// SiteSmtpPingRequest

// .palm.nut.v1.EmailTask.Address to = 1;
inline bool SiteSmtpPingRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline void SiteSmtpPingRequest::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::EmailTask_Address& SiteSmtpPingRequest::_internal_to() const {
  const ::palm::nut::v1::EmailTask_Address* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::EmailTask_Address&>(
      ::palm::nut::v1::_EmailTask_Address_default_instance_);
}
inline const ::palm::nut::v1::EmailTask_Address& SiteSmtpPingRequest::to() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSmtpPingRequest.to)
  return _internal_to();
}
inline void SiteSmtpPingRequest::unsafe_arena_set_allocated_to(
    ::palm::nut::v1::EmailTask_Address* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteSmtpPingRequest.to)
}
inline ::palm::nut::v1::EmailTask_Address* SiteSmtpPingRequest::release_to() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* SiteSmtpPingRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSmtpPingRequest.to)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* SiteSmtpPingRequest::_internal_mutable_to() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::EmailTask_Address>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::palm::nut::v1::EmailTask_Address* SiteSmtpPingRequest::mutable_to() {
  ::palm::nut::v1::EmailTask_Address* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSmtpPingRequest.to)
  return _msg;
}
inline void SiteSmtpPingRequest::set_allocated_to(::palm::nut::v1::EmailTask_Address* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSmtpPingRequest.to)
}

// string subject = 2;
inline void SiteSmtpPingRequest::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& SiteSmtpPingRequest::subject() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSmtpPingRequest.subject)
  return _internal_subject();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSmtpPingRequest::set_subject(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subject_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSmtpPingRequest.subject)
}
inline std::string* SiteSmtpPingRequest::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSmtpPingRequest.subject)
  return _s;
}
inline const std::string& SiteSmtpPingRequest::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void SiteSmtpPingRequest::_internal_set_subject(const std::string& value) {
  ;


  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSmtpPingRequest::_internal_mutable_subject() {
  ;
  return _impl_.subject_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSmtpPingRequest::release_subject() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSmtpPingRequest.subject)
  return _impl_.subject_.Release();
}
inline void SiteSmtpPingRequest::set_allocated_subject(std::string* value) {
  _impl_.subject_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_.IsDefault()) {
          _impl_.subject_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSmtpPingRequest.subject)
}

// string content = 3;
inline void SiteSmtpPingRequest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SiteSmtpPingRequest::content() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSmtpPingRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSmtpPingRequest::set_content(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSmtpPingRequest.content)
}
inline std::string* SiteSmtpPingRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSmtpPingRequest.content)
  return _s;
}
inline const std::string& SiteSmtpPingRequest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void SiteSmtpPingRequest::_internal_set_content(const std::string& value) {
  ;


  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSmtpPingRequest::_internal_mutable_content() {
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSmtpPingRequest::release_content() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSmtpPingRequest.content)
  return _impl_.content_.Release();
}
inline void SiteSmtpPingRequest::set_allocated_content(std::string* value) {
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSmtpPingRequest.content)
}

// .palm.nut.v1.SmtpProfile profile = 9;
inline bool SiteSmtpPingRequest::has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profile_ != nullptr);
  return value;
}
inline void SiteSmtpPingRequest::clear_profile() {
  if (_impl_.profile_ != nullptr) _impl_.profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::nut::v1::SmtpProfile& SiteSmtpPingRequest::_internal_profile() const {
  const ::palm::nut::v1::SmtpProfile* p = _impl_.profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SmtpProfile&>(
      ::palm::nut::v1::_SmtpProfile_default_instance_);
}
inline const ::palm::nut::v1::SmtpProfile& SiteSmtpPingRequest::profile() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSmtpPingRequest.profile)
  return _internal_profile();
}
inline void SiteSmtpPingRequest::unsafe_arena_set_allocated_profile(
    ::palm::nut::v1::SmtpProfile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profile_);
  }
  _impl_.profile_ = profile;
  if (profile) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteSmtpPingRequest.profile)
}
inline ::palm::nut::v1::SmtpProfile* SiteSmtpPingRequest::release_profile() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::SmtpProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SmtpProfile* SiteSmtpPingRequest::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSmtpPingRequest.profile)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::SmtpProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SmtpProfile* SiteSmtpPingRequest::_internal_mutable_profile() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SmtpProfile>(GetArenaForAllocation());
    _impl_.profile_ = p;
  }
  return _impl_.profile_;
}
inline ::palm::nut::v1::SmtpProfile* SiteSmtpPingRequest::mutable_profile() {
  ::palm::nut::v1::SmtpProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSmtpPingRequest.profile)
  return _msg;
}
inline void SiteSmtpPingRequest::set_allocated_profile(::palm::nut::v1::SmtpProfile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profile);
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSmtpPingRequest.profile)
}

// -------------------------------------------------------------------

// SiteSetLogoRequest

// string url = 1;
inline void SiteSetLogoRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& SiteSetLogoRequest::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetLogoRequest.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSetLogoRequest::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetLogoRequest.url)
}
inline std::string* SiteSetLogoRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetLogoRequest.url)
  return _s;
}
inline const std::string& SiteSetLogoRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void SiteSetLogoRequest::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetLogoRequest::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSetLogoRequest::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetLogoRequest.url)
  return _impl_.url_.Release();
}
inline void SiteSetLogoRequest::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetLogoRequest.url)
}

// -------------------------------------------------------------------

// SiteSetCopyrightRequest

// string payload = 1;
inline void SiteSetCopyrightRequest::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SiteSetCopyrightRequest::payload() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetCopyrightRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSetCopyrightRequest::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetCopyrightRequest.payload)
}
inline std::string* SiteSetCopyrightRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetCopyrightRequest.payload)
  return _s;
}
inline const std::string& SiteSetCopyrightRequest::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void SiteSetCopyrightRequest::_internal_set_payload(const std::string& value) {
  ;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetCopyrightRequest::_internal_mutable_payload() {
  ;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSetCopyrightRequest::release_payload() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetCopyrightRequest.payload)
  return _impl_.payload_.Release();
}
inline void SiteSetCopyrightRequest::set_allocated_payload(std::string* value) {
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetCopyrightRequest.payload)
}

// -------------------------------------------------------------------

// SiteSetKeywordsRequest

// repeated string items = 1;
inline int SiteSetKeywordsRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int SiteSetKeywordsRequest::items_size() const {
  return _internal_items_size();
}
inline void SiteSetKeywordsRequest::clear_items() {
  _internal_mutable_items()->Clear();
}
inline std::string* SiteSetKeywordsRequest::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _s;
}
inline const std::string& SiteSetKeywordsRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _internal_items(index);
}
inline std::string* SiteSetKeywordsRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _internal_mutable_items()->Mutable(index);
}
inline void SiteSetKeywordsRequest::set_items(int index, const std::string& value) {
  _internal_mutable_items()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, std::string&& value) {
  _internal_mutable_items()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_items()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_items()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, absl::string_view value) {
  _internal_mutable_items()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const std::string& value) {
  _internal_mutable_items()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(std::string&& value) {
  _internal_mutable_items()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_items()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const char* value, std::size_t size) {
  _internal_mutable_items()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(absl::string_view value) {
  _internal_mutable_items()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteSetKeywordsRequest::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SiteSetKeywordsRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _internal_mutable_items();
}
inline const std::string& SiteSetKeywordsRequest::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline std::string* SiteSetKeywordsRequest::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteSetKeywordsRequest::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteSetKeywordsRequest::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SiteSetInfoRequest

// string lang = 1;
inline void SiteSetInfoRequest::clear_lang() {
  _impl_.lang_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetInfoRequest.lang)
  return _internal_lang();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSetInfoRequest::set_lang(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lang_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetInfoRequest.lang)
}
inline std::string* SiteSetInfoRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetInfoRequest.lang)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_lang() const {
  return _impl_.lang_.Get();
}
inline void SiteSetInfoRequest::_internal_set_lang(const std::string& value) {
  ;


  _impl_.lang_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_lang() {
  ;
  return _impl_.lang_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetInfoRequest.lang)
  return _impl_.lang_.Release();
}
inline void SiteSetInfoRequest::set_allocated_lang(std::string* value) {
  _impl_.lang_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lang_.IsDefault()) {
          _impl_.lang_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetInfoRequest.lang)
}

// string title = 11;
inline void SiteSetInfoRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::title() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetInfoRequest.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSetInfoRequest::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetInfoRequest.title)
}
inline std::string* SiteSetInfoRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetInfoRequest.title)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SiteSetInfoRequest::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_title() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetInfoRequest.title)
  return _impl_.title_.Release();
}
inline void SiteSetInfoRequest::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetInfoRequest.title)
}

// string subhead = 12;
inline void SiteSetInfoRequest::clear_subhead() {
  _impl_.subhead_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::subhead() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetInfoRequest.subhead)
  return _internal_subhead();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSetInfoRequest::set_subhead(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subhead_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetInfoRequest.subhead)
}
inline std::string* SiteSetInfoRequest::mutable_subhead() {
  std::string* _s = _internal_mutable_subhead();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetInfoRequest.subhead)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_subhead() const {
  return _impl_.subhead_.Get();
}
inline void SiteSetInfoRequest::_internal_set_subhead(const std::string& value) {
  ;


  _impl_.subhead_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_subhead() {
  ;
  return _impl_.subhead_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_subhead() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetInfoRequest.subhead)
  return _impl_.subhead_.Release();
}
inline void SiteSetInfoRequest::set_allocated_subhead(std::string* value) {
  _impl_.subhead_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subhead_.IsDefault()) {
          _impl_.subhead_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetInfoRequest.subhead)
}

// string description = 13;
inline void SiteSetInfoRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::description() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetInfoRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteSetInfoRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetInfoRequest.description)
}
inline std::string* SiteSetInfoRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetInfoRequest.description)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SiteSetInfoRequest::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_description() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetInfoRequest.description)
  return _impl_.description_.Release();
}
inline void SiteSetInfoRequest::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetInfoRequest.description)
}

// -------------------------------------------------------------------

// SiteLayoutResponse_Author

// string name = 1;
inline void SiteLayoutResponse_Author::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse_Author::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.Author.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse_Author::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.Author.name)
}
inline std::string* SiteLayoutResponse_Author::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.Author.name)
  return _s;
}
inline const std::string& SiteLayoutResponse_Author::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SiteLayoutResponse_Author::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.Author.name)
  return _impl_.name_.Release();
}
inline void SiteLayoutResponse_Author::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.Author.name)
}

// string email = 2;
inline void SiteLayoutResponse_Author::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse_Author::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.Author.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse_Author::set_email(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.Author.email)
}
inline std::string* SiteLayoutResponse_Author::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.Author.email)
  return _s;
}
inline const std::string& SiteLayoutResponse_Author::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SiteLayoutResponse_Author::_internal_set_email(const std::string& value) {
  ;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::_internal_mutable_email() {
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse_Author::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.Author.email)
  return _impl_.email_.Release();
}
inline void SiteLayoutResponse_Author::set_allocated_email(std::string* value) {
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.Author.email)
}

// -------------------------------------------------------------------

// SiteLayoutResponse

// string title = 1;
inline void SiteLayoutResponse::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::title() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.title)
}
inline std::string* SiteLayoutResponse::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.title)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SiteLayoutResponse::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_title() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.title)
  return _impl_.title_.Release();
}
inline void SiteLayoutResponse::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.title)
}

// string subhead = 2;
inline void SiteLayoutResponse::clear_subhead() {
  _impl_.subhead_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::subhead() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.subhead)
  return _internal_subhead();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse::set_subhead(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subhead_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.subhead)
}
inline std::string* SiteLayoutResponse::mutable_subhead() {
  std::string* _s = _internal_mutable_subhead();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.subhead)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_subhead() const {
  return _impl_.subhead_.Get();
}
inline void SiteLayoutResponse::_internal_set_subhead(const std::string& value) {
  ;


  _impl_.subhead_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_subhead() {
  ;
  return _impl_.subhead_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_subhead() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.subhead)
  return _impl_.subhead_.Release();
}
inline void SiteLayoutResponse::set_allocated_subhead(std::string* value) {
  _impl_.subhead_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subhead_.IsDefault()) {
          _impl_.subhead_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.subhead)
}

// repeated string keywords = 3;
inline int SiteLayoutResponse::_internal_keywords_size() const {
  return _impl_.keywords_.size();
}
inline int SiteLayoutResponse::keywords_size() const {
  return _internal_keywords_size();
}
inline void SiteLayoutResponse::clear_keywords() {
  _internal_mutable_keywords()->Clear();
}
inline std::string* SiteLayoutResponse::add_keywords() {
  std::string* _s = _internal_add_keywords();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SiteLayoutResponse.keywords)
  return _s;
}
inline const std::string& SiteLayoutResponse::keywords(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.keywords)
  return _internal_keywords(index);
}
inline std::string* SiteLayoutResponse::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.keywords)
  return _internal_mutable_keywords()->Mutable(index);
}
inline void SiteLayoutResponse::set_keywords(int index, const std::string& value) {
  _internal_mutable_keywords()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, std::string&& value) {
  _internal_mutable_keywords()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keywords()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keywords()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::set_keywords(int index, absl::string_view value) {
  _internal_mutable_keywords()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(const std::string& value) {
  _internal_mutable_keywords()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(std::string&& value) {
  _internal_mutable_keywords()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keywords()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(const char* value, std::size_t size) {
  _internal_mutable_keywords()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline void SiteLayoutResponse::add_keywords(absl::string_view value) {
  _internal_mutable_keywords()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.SiteLayoutResponse.keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteLayoutResponse::keywords() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteLayoutResponse.keywords)
  return _internal_keywords();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SiteLayoutResponse::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteLayoutResponse.keywords)
  return _internal_mutable_keywords();
}
inline const std::string& SiteLayoutResponse::_internal_keywords(int index) const {
  return _internal_keywords().Get(index);
}
inline std::string* SiteLayoutResponse::_internal_add_keywords() {
  return _internal_mutable_keywords()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteLayoutResponse::_internal_keywords() const {
  return _impl_.keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteLayoutResponse::_internal_mutable_keywords() {
  return &_impl_.keywords_;
}

// string description = 4;
inline void SiteLayoutResponse::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::description() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.description)
}
inline std::string* SiteLayoutResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.description)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SiteLayoutResponse::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_description() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.description)
  return _impl_.description_.Release();
}
inline void SiteLayoutResponse::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.description)
}

// .palm.nut.v1.SiteLayoutResponse.Author author = 5;
inline bool SiteLayoutResponse::has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.author_ != nullptr);
  return value;
}
inline void SiteLayoutResponse::clear_author() {
  if (_impl_.author_ != nullptr) _impl_.author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::SiteLayoutResponse_Author& SiteLayoutResponse::_internal_author() const {
  const ::palm::nut::v1::SiteLayoutResponse_Author* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteLayoutResponse_Author&>(
      ::palm::nut::v1::_SiteLayoutResponse_Author_default_instance_);
}
inline const ::palm::nut::v1::SiteLayoutResponse_Author& SiteLayoutResponse::author() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.author)
  return _internal_author();
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_author(
    ::palm::nut::v1::SiteLayoutResponse_Author* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = author;
  if (author) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteLayoutResponse.author)
}
inline ::palm::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::release_author() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::SiteLayoutResponse_Author* temp = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.author)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::SiteLayoutResponse_Author* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::_internal_mutable_author() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteLayoutResponse_Author>(GetArenaForAllocation());
    _impl_.author_ = p;
  }
  return _impl_.author_;
}
inline ::palm::nut::v1::SiteLayoutResponse_Author* SiteLayoutResponse::mutable_author() {
  ::palm::nut::v1::SiteLayoutResponse_Author* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.author)
  return _msg;
}
inline void SiteLayoutResponse::set_allocated_author(::palm::nut::v1::SiteLayoutResponse_Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.author_ = author;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.author)
}

// string copyright = 6;
inline void SiteLayoutResponse::clear_copyright() {
  _impl_.copyright_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::copyright() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.copyright)
  return _internal_copyright();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse::set_copyright(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.copyright_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.copyright)
}
inline std::string* SiteLayoutResponse::mutable_copyright() {
  std::string* _s = _internal_mutable_copyright();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.copyright)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_copyright() const {
  return _impl_.copyright_.Get();
}
inline void SiteLayoutResponse::_internal_set_copyright(const std::string& value) {
  ;


  _impl_.copyright_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_copyright() {
  ;
  return _impl_.copyright_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_copyright() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.copyright)
  return _impl_.copyright_.Release();
}
inline void SiteLayoutResponse::set_allocated_copyright(std::string* value) {
  _impl_.copyright_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.copyright_.IsDefault()) {
          _impl_.copyright_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.copyright)
}

// string logo = 7;
inline void SiteLayoutResponse::clear_logo() {
  _impl_.logo_.ClearToEmpty();
}
inline const std::string& SiteLayoutResponse::logo() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.logo)
  return _internal_logo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutResponse::set_logo(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.logo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.logo)
}
inline std::string* SiteLayoutResponse::mutable_logo() {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.logo)
  return _s;
}
inline const std::string& SiteLayoutResponse::_internal_logo() const {
  return _impl_.logo_.Get();
}
inline void SiteLayoutResponse::_internal_set_logo(const std::string& value) {
  ;


  _impl_.logo_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::_internal_mutable_logo() {
  ;
  return _impl_.logo_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutResponse::release_logo() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteLayoutResponse.logo)
  return _impl_.logo_.Release();
}
inline void SiteLayoutResponse::set_allocated_logo(std::string* value) {
  _impl_.logo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logo_.IsDefault()) {
          _impl_.logo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteLayoutResponse.logo)
}

// repeated string languages = 9;
inline int SiteLayoutResponse::_internal_languages_size() const {
  return _impl_.languages_.size();
}
inline int SiteLayoutResponse::languages_size() const {
  return _internal_languages_size();
}
inline void SiteLayoutResponse::clear_languages() {
  _internal_mutable_languages()->Clear();
}
inline std::string* SiteLayoutResponse::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SiteLayoutResponse.languages)
  return _s;
}
inline const std::string& SiteLayoutResponse::languages(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteLayoutResponse.languages)
  return _internal_languages(index);
}
inline std::string* SiteLayoutResponse::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteLayoutResponse.languages)
  return _internal_mutable_languages()->Mutable(index);
}
inline void SiteLayoutResponse::set_languages(int index, const std::string& value) {
  _internal_mutable_languages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, std::string&& value) {
  _internal_mutable_languages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_languages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_languages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::set_languages(int index, absl::string_view value) {
  _internal_mutable_languages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(const std::string& value) {
  _internal_mutable_languages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(std::string&& value) {
  _internal_mutable_languages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_languages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(const char* value, std::size_t size) {
  _internal_mutable_languages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SiteLayoutResponse.languages)
}
inline void SiteLayoutResponse::add_languages(absl::string_view value) {
  _internal_mutable_languages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.SiteLayoutResponse.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteLayoutResponse::languages() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteLayoutResponse.languages)
  return _internal_languages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SiteLayoutResponse::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteLayoutResponse.languages)
  return _internal_mutable_languages();
}
inline const std::string& SiteLayoutResponse::_internal_languages(int index) const {
  return _internal_languages().Get(index);
}
inline std::string* SiteLayoutResponse::_internal_add_languages() {
  return _internal_mutable_languages()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteLayoutResponse::_internal_languages() const {
  return _impl_.languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteLayoutResponse::_internal_mutable_languages() {
  return &_impl_.languages_;
}

// -------------------------------------------------------------------

// GoogleProfile_ReCaptcha

// string site_key = 1;
inline void GoogleProfile_ReCaptcha::clear_site_key() {
  _impl_.site_key_.ClearToEmpty();
}
inline const std::string& GoogleProfile_ReCaptcha::site_key() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleProfile.ReCaptcha.site_key)
  return _internal_site_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleProfile_ReCaptcha::set_site_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.site_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleProfile.ReCaptcha.site_key)
}
inline std::string* GoogleProfile_ReCaptcha::mutable_site_key() {
  std::string* _s = _internal_mutable_site_key();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleProfile.ReCaptcha.site_key)
  return _s;
}
inline const std::string& GoogleProfile_ReCaptcha::_internal_site_key() const {
  return _impl_.site_key_.Get();
}
inline void GoogleProfile_ReCaptcha::_internal_set_site_key(const std::string& value) {
  ;


  _impl_.site_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::_internal_mutable_site_key() {
  ;
  return _impl_.site_key_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::release_site_key() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleProfile.ReCaptcha.site_key)
  return _impl_.site_key_.Release();
}
inline void GoogleProfile_ReCaptcha::set_allocated_site_key(std::string* value) {
  _impl_.site_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.site_key_.IsDefault()) {
          _impl_.site_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleProfile.ReCaptcha.site_key)
}

// string secret = 2;
inline void GoogleProfile_ReCaptcha::clear_secret() {
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& GoogleProfile_ReCaptcha::secret() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleProfile.ReCaptcha.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleProfile_ReCaptcha::set_secret(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleProfile.ReCaptcha.secret)
}
inline std::string* GoogleProfile_ReCaptcha::mutable_secret() {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleProfile.ReCaptcha.secret)
  return _s;
}
inline const std::string& GoogleProfile_ReCaptcha::_internal_secret() const {
  return _impl_.secret_.Get();
}
inline void GoogleProfile_ReCaptcha::_internal_set_secret(const std::string& value) {
  ;


  _impl_.secret_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::_internal_mutable_secret() {
  ;
  return _impl_.secret_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleProfile_ReCaptcha::release_secret() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleProfile.ReCaptcha.secret)
  return _impl_.secret_.Release();
}
inline void GoogleProfile_ReCaptcha::set_allocated_secret(std::string* value) {
  _impl_.secret_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secret_.IsDefault()) {
          _impl_.secret_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleProfile.ReCaptcha.secret)
}

// -------------------------------------------------------------------

// GoogleProfile

// optional string site_verify_id = 1;
inline bool GoogleProfile::has_site_verify_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GoogleProfile::clear_site_verify_id() {
  _impl_.site_verify_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GoogleProfile::site_verify_id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleProfile.site_verify_id)
  return _internal_site_verify_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GoogleProfile::set_site_verify_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.site_verify_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleProfile.site_verify_id)
}
inline std::string* GoogleProfile::mutable_site_verify_id() {
  std::string* _s = _internal_mutable_site_verify_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleProfile.site_verify_id)
  return _s;
}
inline const std::string& GoogleProfile::_internal_site_verify_id() const {
  return _impl_.site_verify_id_.Get();
}
inline void GoogleProfile::_internal_set_site_verify_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.site_verify_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GoogleProfile::_internal_mutable_site_verify_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.site_verify_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GoogleProfile::release_site_verify_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleProfile.site_verify_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.site_verify_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.site_verify_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GoogleProfile::set_allocated_site_verify_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.site_verify_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.site_verify_id_.IsDefault()) {
          _impl_.site_verify_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleProfile.site_verify_id)
}

// optional .palm.nut.v1.GoogleProfile.ReCaptcha re_captcha = 2;
inline bool GoogleProfile::has_re_captcha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.re_captcha_ != nullptr);
  return value;
}
inline void GoogleProfile::clear_re_captcha() {
  if (_impl_.re_captcha_ != nullptr) _impl_.re_captcha_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::nut::v1::GoogleProfile_ReCaptcha& GoogleProfile::_internal_re_captcha() const {
  const ::palm::nut::v1::GoogleProfile_ReCaptcha* p = _impl_.re_captcha_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::GoogleProfile_ReCaptcha&>(
      ::palm::nut::v1::_GoogleProfile_ReCaptcha_default_instance_);
}
inline const ::palm::nut::v1::GoogleProfile_ReCaptcha& GoogleProfile::re_captcha() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleProfile.re_captcha)
  return _internal_re_captcha();
}
inline void GoogleProfile::unsafe_arena_set_allocated_re_captcha(
    ::palm::nut::v1::GoogleProfile_ReCaptcha* re_captcha) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.re_captcha_);
  }
  _impl_.re_captcha_ = re_captcha;
  if (re_captcha) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.GoogleProfile.re_captcha)
}
inline ::palm::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::release_re_captcha() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::GoogleProfile_ReCaptcha* temp = _impl_.re_captcha_;
  _impl_.re_captcha_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::unsafe_arena_release_re_captcha() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleProfile.re_captcha)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::GoogleProfile_ReCaptcha* temp = _impl_.re_captcha_;
  _impl_.re_captcha_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::_internal_mutable_re_captcha() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.re_captcha_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::GoogleProfile_ReCaptcha>(GetArenaForAllocation());
    _impl_.re_captcha_ = p;
  }
  return _impl_.re_captcha_;
}
inline ::palm::nut::v1::GoogleProfile_ReCaptcha* GoogleProfile::mutable_re_captcha() {
  ::palm::nut::v1::GoogleProfile_ReCaptcha* _msg = _internal_mutable_re_captcha();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleProfile.re_captcha)
  return _msg;
}
inline void GoogleProfile::set_allocated_re_captcha(::palm::nut::v1::GoogleProfile_ReCaptcha* re_captcha) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.re_captcha_;
  }
  if (re_captcha) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(re_captcha);
    if (message_arena != submessage_arena) {
      re_captcha = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, re_captcha, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.re_captcha_ = re_captcha;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleProfile.re_captcha)
}

// -------------------------------------------------------------------

// BaiduProfile_SiteVerify

// string id = 1;
inline void BaiduProfile_SiteVerify::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BaiduProfile_SiteVerify::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.SiteVerify.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaiduProfile_SiteVerify::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.BaiduProfile.SiteVerify.id)
}
inline std::string* BaiduProfile_SiteVerify::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.SiteVerify.id)
  return _s;
}
inline const std::string& BaiduProfile_SiteVerify::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BaiduProfile_SiteVerify::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::release_id() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.SiteVerify.id)
  return _impl_.id_.Release();
}
inline void BaiduProfile_SiteVerify::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.SiteVerify.id)
}

// string content = 2;
inline void BaiduProfile_SiteVerify::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& BaiduProfile_SiteVerify::content() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.SiteVerify.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaiduProfile_SiteVerify::set_content(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.BaiduProfile.SiteVerify.content)
}
inline std::string* BaiduProfile_SiteVerify::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.SiteVerify.content)
  return _s;
}
inline const std::string& BaiduProfile_SiteVerify::_internal_content() const {
  return _impl_.content_.Get();
}
inline void BaiduProfile_SiteVerify::_internal_set_content(const std::string& value) {
  ;


  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::_internal_mutable_content() {
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* BaiduProfile_SiteVerify::release_content() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.SiteVerify.content)
  return _impl_.content_.Release();
}
inline void BaiduProfile_SiteVerify::set_allocated_content(std::string* value) {
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.SiteVerify.content)
}

// -------------------------------------------------------------------

// BaiduProfile

// optional .palm.nut.v1.BaiduProfile.SiteVerify site_verify = 1;
inline bool BaiduProfile::has_site_verify() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.site_verify_ != nullptr);
  return value;
}
inline void BaiduProfile::clear_site_verify() {
  if (_impl_.site_verify_ != nullptr) _impl_.site_verify_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::BaiduProfile_SiteVerify& BaiduProfile::_internal_site_verify() const {
  const ::palm::nut::v1::BaiduProfile_SiteVerify* p = _impl_.site_verify_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::BaiduProfile_SiteVerify&>(
      ::palm::nut::v1::_BaiduProfile_SiteVerify_default_instance_);
}
inline const ::palm::nut::v1::BaiduProfile_SiteVerify& BaiduProfile::site_verify() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.site_verify)
  return _internal_site_verify();
}
inline void BaiduProfile::unsafe_arena_set_allocated_site_verify(
    ::palm::nut::v1::BaiduProfile_SiteVerify* site_verify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.site_verify_);
  }
  _impl_.site_verify_ = site_verify;
  if (site_verify) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.BaiduProfile.site_verify)
}
inline ::palm::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::release_site_verify() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::BaiduProfile_SiteVerify* temp = _impl_.site_verify_;
  _impl_.site_verify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::unsafe_arena_release_site_verify() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.site_verify)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::BaiduProfile_SiteVerify* temp = _impl_.site_verify_;
  _impl_.site_verify_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::_internal_mutable_site_verify() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.site_verify_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::BaiduProfile_SiteVerify>(GetArenaForAllocation());
    _impl_.site_verify_ = p;
  }
  return _impl_.site_verify_;
}
inline ::palm::nut::v1::BaiduProfile_SiteVerify* BaiduProfile::mutable_site_verify() {
  ::palm::nut::v1::BaiduProfile_SiteVerify* _msg = _internal_mutable_site_verify();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.site_verify)
  return _msg;
}
inline void BaiduProfile::set_allocated_site_verify(::palm::nut::v1::BaiduProfile_SiteVerify* site_verify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.site_verify_;
  }
  if (site_verify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(site_verify);
    if (message_arena != submessage_arena) {
      site_verify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site_verify, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.site_verify_ = site_verify;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.site_verify)
}

// -------------------------------------------------------------------

// SmsTask

// string from = 1;
inline void SmsTask::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& SmsTask::from() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmsTask.from)
  return _internal_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmsTask::set_from(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.from_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmsTask.from)
}
inline std::string* SmsTask::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmsTask.from)
  return _s;
}
inline const std::string& SmsTask::_internal_from() const {
  return _impl_.from_.Get();
}
inline void SmsTask::_internal_set_from(const std::string& value) {
  ;


  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* SmsTask::_internal_mutable_from() {
  ;
  return _impl_.from_.Mutable( GetArenaForAllocation());
}
inline std::string* SmsTask::release_from() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmsTask.from)
  return _impl_.from_.Release();
}
inline void SmsTask::set_allocated_from(std::string* value) {
  _impl_.from_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.from_.IsDefault()) {
          _impl_.from_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmsTask.from)
}

// repeated string to = 2;
inline int SmsTask::_internal_to_size() const {
  return _impl_.to_.size();
}
inline int SmsTask::to_size() const {
  return _internal_to_size();
}
inline void SmsTask::clear_to() {
  _internal_mutable_to()->Clear();
}
inline std::string* SmsTask::add_to() {
  std::string* _s = _internal_add_to();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SmsTask.to)
  return _s;
}
inline const std::string& SmsTask::to(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmsTask.to)
  return _internal_to(index);
}
inline std::string* SmsTask::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmsTask.to)
  return _internal_mutable_to()->Mutable(index);
}
inline void SmsTask::set_to(int index, const std::string& value) {
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, std::string&& value) {
  _internal_mutable_to()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_to()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::set_to(int index, absl::string_view value) {
  _internal_mutable_to()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::add_to(const std::string& value) {
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::add_to(std::string&& value) {
  _internal_mutable_to()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::add_to(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::add_to(const char* value, std::size_t size) {
  _internal_mutable_to()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SmsTask.to)
}
inline void SmsTask::add_to(absl::string_view value) {
  _internal_mutable_to()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.nut.v1.SmsTask.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmsTask::to() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmsTask.to)
  return _internal_to();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SmsTask::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmsTask.to)
  return _internal_mutable_to();
}
inline const std::string& SmsTask::_internal_to(int index) const {
  return _internal_to().Get(index);
}
inline std::string* SmsTask::_internal_add_to() {
  return _internal_mutable_to()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmsTask::_internal_to() const {
  return _impl_.to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmsTask::_internal_mutable_to() {
  return &_impl_.to_;
}

// string body = 3;
inline void SmsTask::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& SmsTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmsTask.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SmsTask::set_body(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmsTask.body)
}
inline std::string* SmsTask::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmsTask.body)
  return _s;
}
inline const std::string& SmsTask::_internal_body() const {
  return _impl_.body_.Get();
}
inline void SmsTask::_internal_set_body(const std::string& value) {
  ;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* SmsTask::_internal_mutable_body() {
  ;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* SmsTask::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmsTask.body)
  return _impl_.body_.Release();
}
inline void SmsTask::set_allocated_body(std::string* value) {
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmsTask.body)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Database

// string name = 1;
inline void SiteStatusResponse_Database::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Database::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Database.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Database::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Database.name)
}
inline std::string* SiteStatusResponse_Database::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Database.name)
  return _s;
}
inline const std::string& SiteStatusResponse_Database::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SiteStatusResponse_Database::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Database.name)
  return _impl_.name_.Release();
}
inline void SiteStatusResponse_Database::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Database.name)
}

// string size = 2;
inline void SiteStatusResponse_Database::clear_size() {
  _impl_.size_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Database::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Database.size)
  return _internal_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Database::set_size(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.size_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Database.size)
}
inline std::string* SiteStatusResponse_Database::mutable_size() {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Database.size)
  return _s;
}
inline const std::string& SiteStatusResponse_Database::_internal_size() const {
  return _impl_.size_.Get();
}
inline void SiteStatusResponse_Database::_internal_set_size(const std::string& value) {
  ;


  _impl_.size_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::_internal_mutable_size() {
  ;
  return _impl_.size_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Database::release_size() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Database.size)
  return _impl_.size_.Release();
}
inline void SiteStatusResponse_Database::set_allocated_size(std::string* value) {
  _impl_.size_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.size_.IsDefault()) {
          _impl_.size_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Database.size)
}

// -------------------------------------------------------------------

// SiteStatusResponse_PostgreSql

// string version = 1;
inline void SiteStatusResponse_PostgreSql::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_PostgreSql::version() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.PostgreSql.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_PostgreSql::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.PostgreSql.version)
}
inline std::string* SiteStatusResponse_PostgreSql::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.PostgreSql.version)
  return _s;
}
inline const std::string& SiteStatusResponse_PostgreSql::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SiteStatusResponse_PostgreSql::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_PostgreSql::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_PostgreSql::release_version() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.PostgreSql.version)
  return _impl_.version_.Release();
}
inline void SiteStatusResponse_PostgreSql::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.PostgreSql.version)
}

// .google.protobuf.Timestamp now = 2;
inline bool SiteStatusResponse_PostgreSql::has_now() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.now_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SiteStatusResponse_PostgreSql::_internal_now() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.now_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SiteStatusResponse_PostgreSql::now() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.PostgreSql.now)
  return _internal_now();
}
inline void SiteStatusResponse_PostgreSql::unsafe_arena_set_allocated_now(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* now) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  _impl_.now_ = now;
  if (now) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.PostgreSql.now)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::release_now() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::unsafe_arena_release_now() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.PostgreSql.now)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.now_;
  _impl_.now_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::_internal_mutable_now() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.now_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.now_ = p;
  }
  return _impl_.now_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SiteStatusResponse_PostgreSql::mutable_now() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_now();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.PostgreSql.now)
  return _msg;
}
inline void SiteStatusResponse_PostgreSql::set_allocated_now(::PROTOBUF_NAMESPACE_ID::Timestamp* now) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.now_);
  }
  if (now) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(now));
    if (message_arena != submessage_arena) {
      now = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, now, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.now_ = now;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.PostgreSql.now)
}

// repeated .palm.nut.v1.SiteStatusResponse.Database databases = 9;
inline int SiteStatusResponse_PostgreSql::_internal_databases_size() const {
  return _impl_.databases_.size();
}
inline int SiteStatusResponse_PostgreSql::databases_size() const {
  return _internal_databases_size();
}
inline void SiteStatusResponse_PostgreSql::clear_databases() {
  _internal_mutable_databases()->Clear();
}
inline ::palm::nut::v1::SiteStatusResponse_Database* SiteStatusResponse_PostgreSql::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _internal_mutable_databases()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Database >*
SiteStatusResponse_PostgreSql::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _internal_mutable_databases();
}
inline const ::palm::nut::v1::SiteStatusResponse_Database& SiteStatusResponse_PostgreSql::_internal_databases(int index) const {
  return _internal_databases().Get(index);
}
inline const ::palm::nut::v1::SiteStatusResponse_Database& SiteStatusResponse_PostgreSql::databases(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _internal_databases(index);
}
inline ::palm::nut::v1::SiteStatusResponse_Database* SiteStatusResponse_PostgreSql::_internal_add_databases() {
  return _internal_mutable_databases()->Add();
}
inline ::palm::nut::v1::SiteStatusResponse_Database* SiteStatusResponse_PostgreSql::add_databases() {
  ::palm::nut::v1::SiteStatusResponse_Database* _add = _internal_add_databases();
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Database >&
SiteStatusResponse_PostgreSql::databases() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteStatusResponse.PostgreSql.databases)
  return _internal_databases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Database>&
SiteStatusResponse_PostgreSql::_internal_databases() const {
  return _impl_.databases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Database>*
SiteStatusResponse_PostgreSql::_internal_mutable_databases() {
  return &_impl_.databases_;
}

// -------------------------------------------------------------------

// SiteStatusResponse_MySql

// uint64 size = 1;
inline void SiteStatusResponse_MySql::clear_size() {
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t SiteStatusResponse_MySql::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.MySql.size)
  return _internal_size();
}
inline void SiteStatusResponse_MySql::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.MySql.size)
}
inline ::uint64_t SiteStatusResponse_MySql::_internal_size() const {
  return _impl_.size_;
}
inline void SiteStatusResponse_MySql::_internal_set_size(::uint64_t value) {
  ;
  _impl_.size_ = value;
}

// string version = 2;
inline void SiteStatusResponse_MySql::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_MySql::version() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.MySql.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_MySql::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.MySql.version)
}
inline std::string* SiteStatusResponse_MySql::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.MySql.version)
  return _s;
}
inline const std::string& SiteStatusResponse_MySql::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SiteStatusResponse_MySql::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_MySql::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_MySql::release_version() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.MySql.version)
  return _impl_.version_.Release();
}
inline void SiteStatusResponse_MySql::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.MySql.version)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Redis_Item

// string node = 1;
inline void SiteStatusResponse_Redis_Item::clear_node() {
  _impl_.node_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Redis_Item::node() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Redis.Item.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Redis_Item::set_node(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Redis.Item.node)
}
inline std::string* SiteStatusResponse_Redis_Item::mutable_node() {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Redis.Item.node)
  return _s;
}
inline const std::string& SiteStatusResponse_Redis_Item::_internal_node() const {
  return _impl_.node_.Get();
}
inline void SiteStatusResponse_Redis_Item::_internal_set_node(const std::string& value) {
  ;


  _impl_.node_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis_Item::_internal_mutable_node() {
  ;
  return _impl_.node_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis_Item::release_node() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Redis.Item.node)
  return _impl_.node_.Release();
}
inline void SiteStatusResponse_Redis_Item::set_allocated_node(std::string* value) {
  _impl_.node_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.node_.IsDefault()) {
          _impl_.node_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Redis.Item.node)
}

// string key = 2;
inline void SiteStatusResponse_Redis_Item::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Redis_Item::key() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Redis.Item.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Redis_Item::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Redis.Item.key)
}
inline std::string* SiteStatusResponse_Redis_Item::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Redis.Item.key)
  return _s;
}
inline const std::string& SiteStatusResponse_Redis_Item::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SiteStatusResponse_Redis_Item::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis_Item::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis_Item::release_key() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Redis.Item.key)
  return _impl_.key_.Release();
}
inline void SiteStatusResponse_Redis_Item::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Redis.Item.key)
}

// int64 ttl = 3;
inline void SiteStatusResponse_Redis_Item::clear_ttl() {
  _impl_.ttl_ = ::int64_t{0};
}
inline ::int64_t SiteStatusResponse_Redis_Item::ttl() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Redis.Item.ttl)
  return _internal_ttl();
}
inline void SiteStatusResponse_Redis_Item::set_ttl(::int64_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Redis.Item.ttl)
}
inline ::int64_t SiteStatusResponse_Redis_Item::_internal_ttl() const {
  return _impl_.ttl_;
}
inline void SiteStatusResponse_Redis_Item::_internal_set_ttl(::int64_t value) {
  ;
  _impl_.ttl_ = value;
}

// -------------------------------------------------------------------

// SiteStatusResponse_Redis

// string info = 1;
inline void SiteStatusResponse_Redis::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Redis::info() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Redis.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Redis::set_info(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Redis.info)
}
inline std::string* SiteStatusResponse_Redis::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Redis.info)
  return _s;
}
inline const std::string& SiteStatusResponse_Redis::_internal_info() const {
  return _impl_.info_.Get();
}
inline void SiteStatusResponse_Redis::_internal_set_info(const std::string& value) {
  ;


  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis::_internal_mutable_info() {
  ;
  return _impl_.info_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Redis::release_info() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Redis.info)
  return _impl_.info_.Release();
}
inline void SiteStatusResponse_Redis::set_allocated_info(std::string* value) {
  _impl_.info_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Redis.info)
}

// repeated .palm.nut.v1.SiteStatusResponse.Redis.Item items = 2;
inline int SiteStatusResponse_Redis::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int SiteStatusResponse_Redis::items_size() const {
  return _internal_items_size();
}
inline void SiteStatusResponse_Redis::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::SiteStatusResponse_Redis_Item* SiteStatusResponse_Redis::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Redis.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Redis_Item >*
SiteStatusResponse_Redis::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteStatusResponse.Redis.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::SiteStatusResponse_Redis_Item& SiteStatusResponse_Redis::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::SiteStatusResponse_Redis_Item& SiteStatusResponse_Redis::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Redis.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::SiteStatusResponse_Redis_Item* SiteStatusResponse_Redis::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::SiteStatusResponse_Redis_Item* SiteStatusResponse_Redis::add_items() {
  ::palm::nut::v1::SiteStatusResponse_Redis_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteStatusResponse.Redis.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Redis_Item >&
SiteStatusResponse_Redis::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteStatusResponse.Redis.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Redis_Item>&
SiteStatusResponse_Redis::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Redis_Item>*
SiteStatusResponse_Redis::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// SiteStatusResponse_RabbitMq

// string protocol = 1;
inline void SiteStatusResponse_RabbitMq::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_RabbitMq::protocol() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.RabbitMq.protocol)
  return _internal_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_RabbitMq::set_protocol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.RabbitMq.protocol)
}
inline std::string* SiteStatusResponse_RabbitMq::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.RabbitMq.protocol)
  return _s;
}
inline const std::string& SiteStatusResponse_RabbitMq::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void SiteStatusResponse_RabbitMq::_internal_set_protocol(const std::string& value) {
  ;


  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_RabbitMq::_internal_mutable_protocol() {
  ;
  return _impl_.protocol_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_RabbitMq::release_protocol() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.RabbitMq.protocol)
  return _impl_.protocol_.Release();
}
inline void SiteStatusResponse_RabbitMq::set_allocated_protocol(std::string* value) {
  _impl_.protocol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.protocol_.IsDefault()) {
          _impl_.protocol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.RabbitMq.protocol)
}

// uint32 heartbeat = 2;
inline void SiteStatusResponse_RabbitMq::clear_heartbeat() {
  _impl_.heartbeat_ = 0u;
}
inline ::uint32_t SiteStatusResponse_RabbitMq::heartbeat() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.RabbitMq.heartbeat)
  return _internal_heartbeat();
}
inline void SiteStatusResponse_RabbitMq::set_heartbeat(::uint32_t value) {
  _internal_set_heartbeat(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.RabbitMq.heartbeat)
}
inline ::uint32_t SiteStatusResponse_RabbitMq::_internal_heartbeat() const {
  return _impl_.heartbeat_;
}
inline void SiteStatusResponse_RabbitMq::_internal_set_heartbeat(::uint32_t value) {
  ;
  _impl_.heartbeat_ = value;
}

// -------------------------------------------------------------------

// SiteStatusResponse_OpenSearch

// string url = 1;
inline void SiteStatusResponse_OpenSearch::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_OpenSearch::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.OpenSearch.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_OpenSearch::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.OpenSearch.url)
}
inline std::string* SiteStatusResponse_OpenSearch::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.OpenSearch.url)
  return _s;
}
inline const std::string& SiteStatusResponse_OpenSearch::_internal_url() const {
  return _impl_.url_.Get();
}
inline void SiteStatusResponse_OpenSearch::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.OpenSearch.url)
  return _impl_.url_.Release();
}
inline void SiteStatusResponse_OpenSearch::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.OpenSearch.url)
}

// string info = 2;
inline void SiteStatusResponse_OpenSearch::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_OpenSearch::info() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.OpenSearch.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_OpenSearch::set_info(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.OpenSearch.info)
}
inline std::string* SiteStatusResponse_OpenSearch::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.OpenSearch.info)
  return _s;
}
inline const std::string& SiteStatusResponse_OpenSearch::_internal_info() const {
  return _impl_.info_.Get();
}
inline void SiteStatusResponse_OpenSearch::_internal_set_info(const std::string& value) {
  ;


  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::_internal_mutable_info() {
  ;
  return _impl_.info_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_OpenSearch::release_info() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.OpenSearch.info)
  return _impl_.info_.Release();
}
inline void SiteStatusResponse_OpenSearch::set_allocated_info(std::string* value) {
  _impl_.info_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.OpenSearch.info)
}

// -------------------------------------------------------------------

// SiteStatusResponse_Health

// string name = 1;
inline void SiteStatusResponse_Health::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Health::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Health.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Health::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Health.name)
}
inline std::string* SiteStatusResponse_Health::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Health.name)
  return _s;
}
inline const std::string& SiteStatusResponse_Health::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SiteStatusResponse_Health::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Health.name)
  return _impl_.name_.Release();
}
inline void SiteStatusResponse_Health::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Health.name)
}

// string status = 2;
inline void SiteStatusResponse_Health::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_Health::status() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.Health.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_Health::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.Health.status)
}
inline std::string* SiteStatusResponse_Health::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.Health.status)
  return _s;
}
inline const std::string& SiteStatusResponse_Health::_internal_status() const {
  return _impl_.status_.Get();
}
inline void SiteStatusResponse_Health::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_Health::release_status() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.Health.status)
  return _impl_.status_.Release();
}
inline void SiteStatusResponse_Health::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.Health.status)
}

// -------------------------------------------------------------------

// SiteStatusResponse_System

// string version = 1;
inline void SiteStatusResponse_System::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::version() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.version)
}
inline std::string* SiteStatusResponse_System::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.version)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_version() const {
  return _impl_.version_.Get();
}
inline void SiteStatusResponse_System::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_version() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.version)
  return _impl_.version_.Release();
}
inline void SiteStatusResponse_System::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.version)
}

// string cpu = 2;
inline void SiteStatusResponse_System::clear_cpu() {
  _impl_.cpu_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::cpu() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.cpu)
  return _internal_cpu();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_cpu(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cpu_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.cpu)
}
inline std::string* SiteStatusResponse_System::mutable_cpu() {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.cpu)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_cpu() const {
  return _impl_.cpu_.Get();
}
inline void SiteStatusResponse_System::_internal_set_cpu(const std::string& value) {
  ;


  _impl_.cpu_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_cpu() {
  ;
  return _impl_.cpu_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_cpu() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.cpu)
  return _impl_.cpu_.Release();
}
inline void SiteStatusResponse_System::set_allocated_cpu(std::string* value) {
  _impl_.cpu_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cpu_.IsDefault()) {
          _impl_.cpu_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.cpu)
}

// string memory = 3;
inline void SiteStatusResponse_System::clear_memory() {
  _impl_.memory_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::memory() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.memory)
  return _internal_memory();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_memory(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.memory_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.memory)
}
inline std::string* SiteStatusResponse_System::mutable_memory() {
  std::string* _s = _internal_mutable_memory();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.memory)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_memory() const {
  return _impl_.memory_.Get();
}
inline void SiteStatusResponse_System::_internal_set_memory(const std::string& value) {
  ;


  _impl_.memory_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_memory() {
  ;
  return _impl_.memory_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_memory() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.memory)
  return _impl_.memory_.Release();
}
inline void SiteStatusResponse_System::set_allocated_memory(std::string* value) {
  _impl_.memory_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memory_.IsDefault()) {
          _impl_.memory_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.memory)
}

// string boot = 4;
inline void SiteStatusResponse_System::clear_boot() {
  _impl_.boot_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::boot() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.boot)
  return _internal_boot();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_boot(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.boot_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.boot)
}
inline std::string* SiteStatusResponse_System::mutable_boot() {
  std::string* _s = _internal_mutable_boot();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.boot)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_boot() const {
  return _impl_.boot_.Get();
}
inline void SiteStatusResponse_System::_internal_set_boot(const std::string& value) {
  ;


  _impl_.boot_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_boot() {
  ;
  return _impl_.boot_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_boot() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.boot)
  return _impl_.boot_.Release();
}
inline void SiteStatusResponse_System::set_allocated_boot(std::string* value) {
  _impl_.boot_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.boot_.IsDefault()) {
          _impl_.boot_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.boot)
}

// string disk = 5;
inline void SiteStatusResponse_System::clear_disk() {
  _impl_.disk_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::disk() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.disk)
  return _internal_disk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_disk(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.disk_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.disk)
}
inline std::string* SiteStatusResponse_System::mutable_disk() {
  std::string* _s = _internal_mutable_disk();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.disk)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_disk() const {
  return _impl_.disk_.Get();
}
inline void SiteStatusResponse_System::_internal_set_disk(const std::string& value) {
  ;


  _impl_.disk_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_disk() {
  ;
  return _impl_.disk_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_disk() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.disk)
  return _impl_.disk_.Release();
}
inline void SiteStatusResponse_System::set_allocated_disk(std::string* value) {
  _impl_.disk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.disk_.IsDefault()) {
          _impl_.disk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.disk)
}

// string load = 6;
inline void SiteStatusResponse_System::clear_load() {
  _impl_.load_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::load() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.load)
  return _internal_load();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_load(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.load_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.load)
}
inline std::string* SiteStatusResponse_System::mutable_load() {
  std::string* _s = _internal_mutable_load();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.load)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_load() const {
  return _impl_.load_.Get();
}
inline void SiteStatusResponse_System::_internal_set_load(const std::string& value) {
  ;


  _impl_.load_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_load() {
  ;
  return _impl_.load_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_load() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.load)
  return _impl_.load_.Release();
}
inline void SiteStatusResponse_System::set_allocated_load(std::string* value) {
  _impl_.load_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.load_.IsDefault()) {
          _impl_.load_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.load)
}

// string fs = 7;
inline void SiteStatusResponse_System::clear_fs() {
  _impl_.fs_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::fs() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.fs)
  return _internal_fs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_fs(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fs_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.fs)
}
inline std::string* SiteStatusResponse_System::mutable_fs() {
  std::string* _s = _internal_mutable_fs();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.fs)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_fs() const {
  return _impl_.fs_.Get();
}
inline void SiteStatusResponse_System::_internal_set_fs(const std::string& value) {
  ;


  _impl_.fs_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_fs() {
  ;
  return _impl_.fs_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_fs() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.fs)
  return _impl_.fs_.Release();
}
inline void SiteStatusResponse_System::set_allocated_fs(std::string* value) {
  _impl_.fs_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fs_.IsDefault()) {
          _impl_.fs_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.fs)
}

// string swap = 8;
inline void SiteStatusResponse_System::clear_swap() {
  _impl_.swap_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::swap() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.swap)
  return _internal_swap();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_swap(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.swap_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.swap)
}
inline std::string* SiteStatusResponse_System::mutable_swap() {
  std::string* _s = _internal_mutable_swap();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.swap)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_swap() const {
  return _impl_.swap_.Get();
}
inline void SiteStatusResponse_System::_internal_set_swap(const std::string& value) {
  ;


  _impl_.swap_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_swap() {
  ;
  return _impl_.swap_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_swap() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.swap)
  return _impl_.swap_.Release();
}
inline void SiteStatusResponse_System::set_allocated_swap(std::string* value) {
  _impl_.swap_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.swap_.IsDefault()) {
          _impl_.swap_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.swap)
}

// string uptime = 9;
inline void SiteStatusResponse_System::clear_uptime() {
  _impl_.uptime_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::uptime() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.uptime)
  return _internal_uptime();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_uptime(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.uptime_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.uptime)
}
inline std::string* SiteStatusResponse_System::mutable_uptime() {
  std::string* _s = _internal_mutable_uptime();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.uptime)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_uptime() const {
  return _impl_.uptime_.Get();
}
inline void SiteStatusResponse_System::_internal_set_uptime(const std::string& value) {
  ;


  _impl_.uptime_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_uptime() {
  ;
  return _impl_.uptime_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_uptime() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.uptime)
  return _impl_.uptime_.Release();
}
inline void SiteStatusResponse_System::set_allocated_uptime(std::string* value) {
  _impl_.uptime_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uptime_.IsDefault()) {
          _impl_.uptime_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.uptime)
}

// string network = 10;
inline void SiteStatusResponse_System::clear_network() {
  _impl_.network_.ClearToEmpty();
}
inline const std::string& SiteStatusResponse_System::network() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.System.network)
  return _internal_network();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteStatusResponse_System::set_network(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.network_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteStatusResponse.System.network)
}
inline std::string* SiteStatusResponse_System::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.System.network)
  return _s;
}
inline const std::string& SiteStatusResponse_System::_internal_network() const {
  return _impl_.network_.Get();
}
inline void SiteStatusResponse_System::_internal_set_network(const std::string& value) {
  ;


  _impl_.network_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::_internal_mutable_network() {
  ;
  return _impl_.network_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteStatusResponse_System::release_network() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.System.network)
  return _impl_.network_.Release();
}
inline void SiteStatusResponse_System::set_allocated_network(std::string* value) {
  _impl_.network_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.network_.IsDefault()) {
          _impl_.network_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.System.network)
}

// -------------------------------------------------------------------

// SiteStatusResponse

// .palm.nut.v1.SiteStatusResponse.PostgreSql postgresql = 1;
inline bool SiteStatusResponse::has_postgresql() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.postgresql_ != nullptr);
  return value;
}
inline void SiteStatusResponse::clear_postgresql() {
  if (_impl_.postgresql_ != nullptr) _impl_.postgresql_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::SiteStatusResponse_PostgreSql& SiteStatusResponse::_internal_postgresql() const {
  const ::palm::nut::v1::SiteStatusResponse_PostgreSql* p = _impl_.postgresql_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteStatusResponse_PostgreSql&>(
      ::palm::nut::v1::_SiteStatusResponse_PostgreSql_default_instance_);
}
inline const ::palm::nut::v1::SiteStatusResponse_PostgreSql& SiteStatusResponse::postgresql() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.postgresql)
  return _internal_postgresql();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_postgresql(
    ::palm::nut::v1::SiteStatusResponse_PostgreSql* postgresql) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postgresql_);
  }
  _impl_.postgresql_ = postgresql;
  if (postgresql) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.postgresql)
}
inline ::palm::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::release_postgresql() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::SiteStatusResponse_PostgreSql* temp = _impl_.postgresql_;
  _impl_.postgresql_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::unsafe_arena_release_postgresql() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.postgresql)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::SiteStatusResponse_PostgreSql* temp = _impl_.postgresql_;
  _impl_.postgresql_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::_internal_mutable_postgresql() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.postgresql_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_PostgreSql>(GetArenaForAllocation());
    _impl_.postgresql_ = p;
  }
  return _impl_.postgresql_;
}
inline ::palm::nut::v1::SiteStatusResponse_PostgreSql* SiteStatusResponse::mutable_postgresql() {
  ::palm::nut::v1::SiteStatusResponse_PostgreSql* _msg = _internal_mutable_postgresql();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.postgresql)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_postgresql(::palm::nut::v1::SiteStatusResponse_PostgreSql* postgresql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.postgresql_;
  }
  if (postgresql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(postgresql);
    if (message_arena != submessage_arena) {
      postgresql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postgresql, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.postgresql_ = postgresql;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.postgresql)
}

// .palm.nut.v1.SiteStatusResponse.MySql mysql = 2;
inline bool SiteStatusResponse::has_mysql() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mysql_ != nullptr);
  return value;
}
inline void SiteStatusResponse::clear_mysql() {
  if (_impl_.mysql_ != nullptr) _impl_.mysql_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::palm::nut::v1::SiteStatusResponse_MySql& SiteStatusResponse::_internal_mysql() const {
  const ::palm::nut::v1::SiteStatusResponse_MySql* p = _impl_.mysql_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteStatusResponse_MySql&>(
      ::palm::nut::v1::_SiteStatusResponse_MySql_default_instance_);
}
inline const ::palm::nut::v1::SiteStatusResponse_MySql& SiteStatusResponse::mysql() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.mysql)
  return _internal_mysql();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_mysql(
    ::palm::nut::v1::SiteStatusResponse_MySql* mysql) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mysql_);
  }
  _impl_.mysql_ = mysql;
  if (mysql) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.mysql)
}
inline ::palm::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::release_mysql() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::SiteStatusResponse_MySql* temp = _impl_.mysql_;
  _impl_.mysql_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::unsafe_arena_release_mysql() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.mysql)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::palm::nut::v1::SiteStatusResponse_MySql* temp = _impl_.mysql_;
  _impl_.mysql_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::_internal_mutable_mysql() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mysql_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_MySql>(GetArenaForAllocation());
    _impl_.mysql_ = p;
  }
  return _impl_.mysql_;
}
inline ::palm::nut::v1::SiteStatusResponse_MySql* SiteStatusResponse::mutable_mysql() {
  ::palm::nut::v1::SiteStatusResponse_MySql* _msg = _internal_mutable_mysql();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.mysql)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_mysql(::palm::nut::v1::SiteStatusResponse_MySql* mysql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mysql_;
  }
  if (mysql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mysql);
    if (message_arena != submessage_arena) {
      mysql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.mysql)
}

// .palm.nut.v1.SiteStatusResponse.Redis redis = 3;
inline bool SiteStatusResponse::has_redis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redis_ != nullptr);
  return value;
}
inline void SiteStatusResponse::clear_redis() {
  if (_impl_.redis_ != nullptr) _impl_.redis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::palm::nut::v1::SiteStatusResponse_Redis& SiteStatusResponse::_internal_redis() const {
  const ::palm::nut::v1::SiteStatusResponse_Redis* p = _impl_.redis_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteStatusResponse_Redis&>(
      ::palm::nut::v1::_SiteStatusResponse_Redis_default_instance_);
}
inline const ::palm::nut::v1::SiteStatusResponse_Redis& SiteStatusResponse::redis() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.redis)
  return _internal_redis();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_redis(
    ::palm::nut::v1::SiteStatusResponse_Redis* redis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redis_);
  }
  _impl_.redis_ = redis;
  if (redis) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.redis)
}
inline ::palm::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::release_redis() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::palm::nut::v1::SiteStatusResponse_Redis* temp = _impl_.redis_;
  _impl_.redis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::unsafe_arena_release_redis() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.redis)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::palm::nut::v1::SiteStatusResponse_Redis* temp = _impl_.redis_;
  _impl_.redis_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::_internal_mutable_redis() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redis_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_Redis>(GetArenaForAllocation());
    _impl_.redis_ = p;
  }
  return _impl_.redis_;
}
inline ::palm::nut::v1::SiteStatusResponse_Redis* SiteStatusResponse::mutable_redis() {
  ::palm::nut::v1::SiteStatusResponse_Redis* _msg = _internal_mutable_redis();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.redis)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_redis(::palm::nut::v1::SiteStatusResponse_Redis* redis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.redis_;
  }
  if (redis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(redis);
    if (message_arena != submessage_arena) {
      redis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redis, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redis_ = redis;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.redis)
}

// .palm.nut.v1.SiteStatusResponse.RabbitMq rabbitmq = 4;
inline bool SiteStatusResponse::has_rabbitmq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rabbitmq_ != nullptr);
  return value;
}
inline void SiteStatusResponse::clear_rabbitmq() {
  if (_impl_.rabbitmq_ != nullptr) _impl_.rabbitmq_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::palm::nut::v1::SiteStatusResponse_RabbitMq& SiteStatusResponse::_internal_rabbitmq() const {
  const ::palm::nut::v1::SiteStatusResponse_RabbitMq* p = _impl_.rabbitmq_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteStatusResponse_RabbitMq&>(
      ::palm::nut::v1::_SiteStatusResponse_RabbitMq_default_instance_);
}
inline const ::palm::nut::v1::SiteStatusResponse_RabbitMq& SiteStatusResponse::rabbitmq() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.rabbitmq)
  return _internal_rabbitmq();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_rabbitmq(
    ::palm::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rabbitmq_);
  }
  _impl_.rabbitmq_ = rabbitmq;
  if (rabbitmq) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.rabbitmq)
}
inline ::palm::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::release_rabbitmq() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::palm::nut::v1::SiteStatusResponse_RabbitMq* temp = _impl_.rabbitmq_;
  _impl_.rabbitmq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::unsafe_arena_release_rabbitmq() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.rabbitmq)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::palm::nut::v1::SiteStatusResponse_RabbitMq* temp = _impl_.rabbitmq_;
  _impl_.rabbitmq_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::_internal_mutable_rabbitmq() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rabbitmq_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_RabbitMq>(GetArenaForAllocation());
    _impl_.rabbitmq_ = p;
  }
  return _impl_.rabbitmq_;
}
inline ::palm::nut::v1::SiteStatusResponse_RabbitMq* SiteStatusResponse::mutable_rabbitmq() {
  ::palm::nut::v1::SiteStatusResponse_RabbitMq* _msg = _internal_mutable_rabbitmq();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.rabbitmq)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_rabbitmq(::palm::nut::v1::SiteStatusResponse_RabbitMq* rabbitmq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rabbitmq_;
  }
  if (rabbitmq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rabbitmq);
    if (message_arena != submessage_arena) {
      rabbitmq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rabbitmq, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rabbitmq_ = rabbitmq;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.rabbitmq)
}

// .palm.nut.v1.SiteStatusResponse.OpenSearch opensearch = 5;
inline bool SiteStatusResponse::has_opensearch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.opensearch_ != nullptr);
  return value;
}
inline void SiteStatusResponse::clear_opensearch() {
  if (_impl_.opensearch_ != nullptr) _impl_.opensearch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::palm::nut::v1::SiteStatusResponse_OpenSearch& SiteStatusResponse::_internal_opensearch() const {
  const ::palm::nut::v1::SiteStatusResponse_OpenSearch* p = _impl_.opensearch_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteStatusResponse_OpenSearch&>(
      ::palm::nut::v1::_SiteStatusResponse_OpenSearch_default_instance_);
}
inline const ::palm::nut::v1::SiteStatusResponse_OpenSearch& SiteStatusResponse::opensearch() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.opensearch)
  return _internal_opensearch();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_opensearch(
    ::palm::nut::v1::SiteStatusResponse_OpenSearch* opensearch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.opensearch_);
  }
  _impl_.opensearch_ = opensearch;
  if (opensearch) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.opensearch)
}
inline ::palm::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::release_opensearch() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::palm::nut::v1::SiteStatusResponse_OpenSearch* temp = _impl_.opensearch_;
  _impl_.opensearch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::unsafe_arena_release_opensearch() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.opensearch)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::palm::nut::v1::SiteStatusResponse_OpenSearch* temp = _impl_.opensearch_;
  _impl_.opensearch_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::_internal_mutable_opensearch() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.opensearch_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_OpenSearch>(GetArenaForAllocation());
    _impl_.opensearch_ = p;
  }
  return _impl_.opensearch_;
}
inline ::palm::nut::v1::SiteStatusResponse_OpenSearch* SiteStatusResponse::mutable_opensearch() {
  ::palm::nut::v1::SiteStatusResponse_OpenSearch* _msg = _internal_mutable_opensearch();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.opensearch)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_opensearch(::palm::nut::v1::SiteStatusResponse_OpenSearch* opensearch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.opensearch_;
  }
  if (opensearch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(opensearch);
    if (message_arena != submessage_arena) {
      opensearch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opensearch, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.opensearch_ = opensearch;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.opensearch)
}

// .palm.nut.v1.SiteStatusResponse.System system = 11;
inline bool SiteStatusResponse::has_system() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.system_ != nullptr);
  return value;
}
inline void SiteStatusResponse::clear_system() {
  if (_impl_.system_ != nullptr) _impl_.system_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::palm::nut::v1::SiteStatusResponse_System& SiteStatusResponse::_internal_system() const {
  const ::palm::nut::v1::SiteStatusResponse_System* p = _impl_.system_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::SiteStatusResponse_System&>(
      ::palm::nut::v1::_SiteStatusResponse_System_default_instance_);
}
inline const ::palm::nut::v1::SiteStatusResponse_System& SiteStatusResponse::system() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.system)
  return _internal_system();
}
inline void SiteStatusResponse::unsafe_arena_set_allocated_system(
    ::palm::nut::v1::SiteStatusResponse_System* system) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_);
  }
  _impl_.system_ = system;
  if (system) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteStatusResponse.system)
}
inline ::palm::nut::v1::SiteStatusResponse_System* SiteStatusResponse::release_system() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::palm::nut::v1::SiteStatusResponse_System* temp = _impl_.system_;
  _impl_.system_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_System* SiteStatusResponse::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteStatusResponse.system)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::palm::nut::v1::SiteStatusResponse_System* temp = _impl_.system_;
  _impl_.system_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::SiteStatusResponse_System* SiteStatusResponse::_internal_mutable_system() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.system_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::SiteStatusResponse_System>(GetArenaForAllocation());
    _impl_.system_ = p;
  }
  return _impl_.system_;
}
inline ::palm::nut::v1::SiteStatusResponse_System* SiteStatusResponse::mutable_system() {
  ::palm::nut::v1::SiteStatusResponse_System* _msg = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.system)
  return _msg;
}
inline void SiteStatusResponse::set_allocated_system(::palm::nut::v1::SiteStatusResponse_System* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.system_;
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(system);
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.system_ = system;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteStatusResponse.system)
}

// repeated .palm.nut.v1.SiteStatusResponse.Health healthes = 21;
inline int SiteStatusResponse::_internal_healthes_size() const {
  return _impl_.healthes_.size();
}
inline int SiteStatusResponse::healthes_size() const {
  return _internal_healthes_size();
}
inline void SiteStatusResponse::clear_healthes() {
  _internal_mutable_healthes()->Clear();
}
inline ::palm::nut::v1::SiteStatusResponse_Health* SiteStatusResponse::mutable_healthes(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteStatusResponse.healthes)
  return _internal_mutable_healthes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Health >*
SiteStatusResponse::mutable_healthes() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteStatusResponse.healthes)
  return _internal_mutable_healthes();
}
inline const ::palm::nut::v1::SiteStatusResponse_Health& SiteStatusResponse::_internal_healthes(int index) const {
  return _internal_healthes().Get(index);
}
inline const ::palm::nut::v1::SiteStatusResponse_Health& SiteStatusResponse::healthes(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteStatusResponse.healthes)
  return _internal_healthes(index);
}
inline ::palm::nut::v1::SiteStatusResponse_Health* SiteStatusResponse::_internal_add_healthes() {
  return _internal_mutable_healthes()->Add();
}
inline ::palm::nut::v1::SiteStatusResponse_Health* SiteStatusResponse::add_healthes() {
  ::palm::nut::v1::SiteStatusResponse_Health* _add = _internal_add_healthes();
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteStatusResponse.healthes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::SiteStatusResponse_Health >&
SiteStatusResponse::healthes() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteStatusResponse.healthes)
  return _internal_healthes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Health>&
SiteStatusResponse::_internal_healthes() const {
  return _impl_.healthes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::SiteStatusResponse_Health>*
SiteStatusResponse::_internal_mutable_healthes() {
  return &_impl_.healthes_;
}

// -------------------------------------------------------------------

// ShorterLinkIndexResponse_Item

// int32 id = 1;
inline void ShorterLinkIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ShorterLinkIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.Item.id)
  return _internal_id();
}
inline void ShorterLinkIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkIndexResponse.Item.id)
}
inline ::int32_t ShorterLinkIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void ShorterLinkIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string url = 2;
inline void ShorterLinkIndexResponse_Item::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ShorterLinkIndexResponse_Item::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.Item.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkIndexResponse_Item::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkIndexResponse.Item.url)
}
inline std::string* ShorterLinkIndexResponse_Item::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkIndexResponse.Item.url)
  return _s;
}
inline const std::string& ShorterLinkIndexResponse_Item::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ShorterLinkIndexResponse_Item::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkIndexResponse_Item::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkIndexResponse_Item::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkIndexResponse.Item.url)
  return _impl_.url_.Release();
}
inline void ShorterLinkIndexResponse_Item::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.Item.url)
}

// string details = 3;
inline void ShorterLinkIndexResponse_Item::clear_details() {
  _impl_.details_.ClearToEmpty();
}
inline const std::string& ShorterLinkIndexResponse_Item::details() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.Item.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkIndexResponse_Item::set_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkIndexResponse.Item.details)
}
inline std::string* ShorterLinkIndexResponse_Item::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkIndexResponse.Item.details)
  return _s;
}
inline const std::string& ShorterLinkIndexResponse_Item::_internal_details() const {
  return _impl_.details_.Get();
}
inline void ShorterLinkIndexResponse_Item::_internal_set_details(const std::string& value) {
  ;


  _impl_.details_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkIndexResponse_Item::_internal_mutable_details() {
  ;
  return _impl_.details_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkIndexResponse_Item::release_details() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkIndexResponse.Item.details)
  return _impl_.details_.Release();
}
inline void ShorterLinkIndexResponse_Item::set_allocated_details(std::string* value) {
  _impl_.details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.details_.IsDefault()) {
          _impl_.details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.Item.details)
}

// string code = 9;
inline void ShorterLinkIndexResponse_Item::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& ShorterLinkIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.Item.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkIndexResponse_Item::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkIndexResponse.Item.code)
}
inline std::string* ShorterLinkIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkIndexResponse.Item.code)
  return _s;
}
inline const std::string& ShorterLinkIndexResponse_Item::_internal_code() const {
  return _impl_.code_.Get();
}
inline void ShorterLinkIndexResponse_Item::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkIndexResponse_Item::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkIndexResponse.Item.code)
  return _impl_.code_.Release();
}
inline void ShorterLinkIndexResponse_Item::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.Item.code)
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool ShorterLinkIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ShorterLinkIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ShorterLinkIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void ShorterLinkIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ShorterLinkIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ShorterLinkIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ShorterLinkIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ShorterLinkIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkIndexResponse.Item.updated_at)
  return _msg;
}
inline void ShorterLinkIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// ShorterLinkIndexResponse

// .palm.nut.v1.Pagination pagination = 1;
inline bool ShorterLinkIndexResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline void ShorterLinkIndexResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::nut::v1::Pagination& ShorterLinkIndexResponse::_internal_pagination() const {
  const ::palm::nut::v1::Pagination* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::Pagination&>(
      ::palm::nut::v1::_Pagination_default_instance_);
}
inline const ::palm::nut::v1::Pagination& ShorterLinkIndexResponse::pagination() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.pagination)
  return _internal_pagination();
}
inline void ShorterLinkIndexResponse::unsafe_arena_set_allocated_pagination(
    ::palm::nut::v1::Pagination* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.pagination)
}
inline ::palm::nut::v1::Pagination* ShorterLinkIndexResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::Pagination* ShorterLinkIndexResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkIndexResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::nut::v1::Pagination* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::Pagination* ShorterLinkIndexResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::Pagination>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::palm::nut::v1::Pagination* ShorterLinkIndexResponse::mutable_pagination() {
  ::palm::nut::v1::Pagination* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkIndexResponse.pagination)
  return _msg;
}
inline void ShorterLinkIndexResponse::set_allocated_pagination(::palm::nut::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkIndexResponse.pagination)
}

// repeated .palm.nut.v1.ShorterLinkIndexResponse.Item items = 11;
inline int ShorterLinkIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ShorterLinkIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void ShorterLinkIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::ShorterLinkIndexResponse_Item* ShorterLinkIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::ShorterLinkIndexResponse_Item >*
ShorterLinkIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.ShorterLinkIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::ShorterLinkIndexResponse_Item& ShorterLinkIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::ShorterLinkIndexResponse_Item& ShorterLinkIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::ShorterLinkIndexResponse_Item* ShorterLinkIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::ShorterLinkIndexResponse_Item* ShorterLinkIndexResponse::add_items() {
  ::palm::nut::v1::ShorterLinkIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.ShorterLinkIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::ShorterLinkIndexResponse_Item >&
ShorterLinkIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.ShorterLinkIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::ShorterLinkIndexResponse_Item>&
ShorterLinkIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::ShorterLinkIndexResponse_Item>*
ShorterLinkIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// ShorterLinkCreateRequest

// string url = 1;
inline void ShorterLinkCreateRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ShorterLinkCreateRequest::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkCreateRequest.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkCreateRequest::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkCreateRequest.url)
}
inline std::string* ShorterLinkCreateRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkCreateRequest.url)
  return _s;
}
inline const std::string& ShorterLinkCreateRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ShorterLinkCreateRequest::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkCreateRequest::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkCreateRequest::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkCreateRequest.url)
  return _impl_.url_.Release();
}
inline void ShorterLinkCreateRequest::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkCreateRequest.url)
}

// string details = 2;
inline void ShorterLinkCreateRequest::clear_details() {
  _impl_.details_.ClearToEmpty();
}
inline const std::string& ShorterLinkCreateRequest::details() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkCreateRequest.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkCreateRequest::set_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkCreateRequest.details)
}
inline std::string* ShorterLinkCreateRequest::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkCreateRequest.details)
  return _s;
}
inline const std::string& ShorterLinkCreateRequest::_internal_details() const {
  return _impl_.details_.Get();
}
inline void ShorterLinkCreateRequest::_internal_set_details(const std::string& value) {
  ;


  _impl_.details_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkCreateRequest::_internal_mutable_details() {
  ;
  return _impl_.details_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkCreateRequest::release_details() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkCreateRequest.details)
  return _impl_.details_.Release();
}
inline void ShorterLinkCreateRequest::set_allocated_details(std::string* value) {
  _impl_.details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.details_.IsDefault()) {
          _impl_.details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkCreateRequest.details)
}

// -------------------------------------------------------------------

// ShorterLinkUpdateRequest

// int32 id = 1;
inline void ShorterLinkUpdateRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ShorterLinkUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkUpdateRequest.id)
  return _internal_id();
}
inline void ShorterLinkUpdateRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkUpdateRequest.id)
}
inline ::int32_t ShorterLinkUpdateRequest::_internal_id() const {
  return _impl_.id_;
}
inline void ShorterLinkUpdateRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string url = 2;
inline void ShorterLinkUpdateRequest::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ShorterLinkUpdateRequest::url() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkUpdateRequest.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkUpdateRequest::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkUpdateRequest.url)
}
inline std::string* ShorterLinkUpdateRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkUpdateRequest.url)
  return _s;
}
inline const std::string& ShorterLinkUpdateRequest::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ShorterLinkUpdateRequest::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkUpdateRequest::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkUpdateRequest::release_url() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkUpdateRequest.url)
  return _impl_.url_.Release();
}
inline void ShorterLinkUpdateRequest::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkUpdateRequest.url)
}

// string details = 3;
inline void ShorterLinkUpdateRequest::clear_details() {
  _impl_.details_.ClearToEmpty();
}
inline const std::string& ShorterLinkUpdateRequest::details() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.ShorterLinkUpdateRequest.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShorterLinkUpdateRequest::set_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.ShorterLinkUpdateRequest.details)
}
inline std::string* ShorterLinkUpdateRequest::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.ShorterLinkUpdateRequest.details)
  return _s;
}
inline const std::string& ShorterLinkUpdateRequest::_internal_details() const {
  return _impl_.details_.Get();
}
inline void ShorterLinkUpdateRequest::_internal_set_details(const std::string& value) {
  ;


  _impl_.details_.Set(value, GetArenaForAllocation());
}
inline std::string* ShorterLinkUpdateRequest::_internal_mutable_details() {
  ;
  return _impl_.details_.Mutable( GetArenaForAllocation());
}
inline std::string* ShorterLinkUpdateRequest::release_details() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.ShorterLinkUpdateRequest.details)
  return _impl_.details_.Release();
}
inline void ShorterLinkUpdateRequest::set_allocated_details(std::string* value) {
  _impl_.details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.details_.IsDefault()) {
          _impl_.details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.ShorterLinkUpdateRequest.details)
}

// -------------------------------------------------------------------

// TagIndexResponse_Item

// int32 id = 1;
inline void TagIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t TagIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagIndexResponse.Item.id)
  return _internal_id();
}
inline void TagIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagIndexResponse.Item.id)
}
inline ::int32_t TagIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void TagIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string code = 2;
inline void TagIndexResponse_Item::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& TagIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagIndexResponse.Item.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TagIndexResponse_Item::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagIndexResponse.Item.code)
}
inline std::string* TagIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TagIndexResponse.Item.code)
  return _s;
}
inline const std::string& TagIndexResponse_Item::_internal_code() const {
  return _impl_.code_.Get();
}
inline void TagIndexResponse_Item::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* TagIndexResponse_Item::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* TagIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TagIndexResponse.Item.code)
  return _impl_.code_.Release();
}
inline void TagIndexResponse_Item::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TagIndexResponse.Item.code)
}

// int32 priority = 3;
inline void TagIndexResponse_Item::clear_priority() {
  _impl_.priority_ = 0;
}
inline ::int32_t TagIndexResponse_Item::priority() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagIndexResponse.Item.priority)
  return _internal_priority();
}
inline void TagIndexResponse_Item::set_priority(::int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagIndexResponse.Item.priority)
}
inline ::int32_t TagIndexResponse_Item::_internal_priority() const {
  return _impl_.priority_;
}
inline void TagIndexResponse_Item::_internal_set_priority(::int32_t value) {
  ;
  _impl_.priority_ = value;
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool TagIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TagIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TagIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void TagIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.TagIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TagIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TagIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TagIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TagIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TagIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TagIndexResponse.Item.updated_at)
  return _msg;
}
inline void TagIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TagIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// TagIndexResponse

// repeated .palm.nut.v1.TagIndexResponse.Item items = 1;
inline int TagIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int TagIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void TagIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::TagIndexResponse_Item* TagIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TagIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::TagIndexResponse_Item >*
TagIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.TagIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::TagIndexResponse_Item& TagIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::TagIndexResponse_Item& TagIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::TagIndexResponse_Item* TagIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::TagIndexResponse_Item* TagIndexResponse::add_items() {
  ::palm::nut::v1::TagIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.TagIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::TagIndexResponse_Item >&
TagIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.TagIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::TagIndexResponse_Item>&
TagIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::TagIndexResponse_Item>*
TagIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// TagCreateRequest

// string code = 1;
inline void TagCreateRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& TagCreateRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagCreateRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TagCreateRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagCreateRequest.code)
}
inline std::string* TagCreateRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TagCreateRequest.code)
  return _s;
}
inline const std::string& TagCreateRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void TagCreateRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* TagCreateRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* TagCreateRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TagCreateRequest.code)
  return _impl_.code_.Release();
}
inline void TagCreateRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TagCreateRequest.code)
}

// int32 priority = 11;
inline void TagCreateRequest::clear_priority() {
  _impl_.priority_ = 0;
}
inline ::int32_t TagCreateRequest::priority() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagCreateRequest.priority)
  return _internal_priority();
}
inline void TagCreateRequest::set_priority(::int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagCreateRequest.priority)
}
inline ::int32_t TagCreateRequest::_internal_priority() const {
  return _impl_.priority_;
}
inline void TagCreateRequest::_internal_set_priority(::int32_t value) {
  ;
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// TagUpdateRequest

// int32 id = 1;
inline void TagUpdateRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t TagUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagUpdateRequest.id)
  return _internal_id();
}
inline void TagUpdateRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagUpdateRequest.id)
}
inline ::int32_t TagUpdateRequest::_internal_id() const {
  return _impl_.id_;
}
inline void TagUpdateRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string code = 2;
inline void TagUpdateRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& TagUpdateRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagUpdateRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TagUpdateRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagUpdateRequest.code)
}
inline std::string* TagUpdateRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TagUpdateRequest.code)
  return _s;
}
inline const std::string& TagUpdateRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void TagUpdateRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* TagUpdateRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* TagUpdateRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TagUpdateRequest.code)
  return _impl_.code_.Release();
}
inline void TagUpdateRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TagUpdateRequest.code)
}

// int32 priority = 11;
inline void TagUpdateRequest::clear_priority() {
  _impl_.priority_ = 0;
}
inline ::int32_t TagUpdateRequest::priority() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TagUpdateRequest.priority)
  return _internal_priority();
}
inline void TagUpdateRequest::set_priority(::int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.TagUpdateRequest.priority)
}
inline ::int32_t TagUpdateRequest::_internal_priority() const {
  return _impl_.priority_;
}
inline void TagUpdateRequest::_internal_set_priority(::int32_t value) {
  ;
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// CategoryIndexResponse_Item

// int32 id = 1;
inline void CategoryIndexResponse_Item::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CategoryIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryIndexResponse.Item.id)
  return _internal_id();
}
inline void CategoryIndexResponse_Item::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryIndexResponse.Item.id)
}
inline ::int32_t CategoryIndexResponse_Item::_internal_id() const {
  return _impl_.id_;
}
inline void CategoryIndexResponse_Item::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string code = 2;
inline void CategoryIndexResponse_Item::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& CategoryIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryIndexResponse.Item.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CategoryIndexResponse_Item::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryIndexResponse.Item.code)
}
inline std::string* CategoryIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.CategoryIndexResponse.Item.code)
  return _s;
}
inline const std::string& CategoryIndexResponse_Item::_internal_code() const {
  return _impl_.code_.Get();
}
inline void CategoryIndexResponse_Item::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* CategoryIndexResponse_Item::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* CategoryIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.CategoryIndexResponse.Item.code)
  return _impl_.code_.Release();
}
inline void CategoryIndexResponse_Item::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.CategoryIndexResponse.Item.code)
}

// int32 left = 3;
inline void CategoryIndexResponse_Item::clear_left() {
  _impl_.left_ = 0;
}
inline ::int32_t CategoryIndexResponse_Item::left() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryIndexResponse.Item.left)
  return _internal_left();
}
inline void CategoryIndexResponse_Item::set_left(::int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryIndexResponse.Item.left)
}
inline ::int32_t CategoryIndexResponse_Item::_internal_left() const {
  return _impl_.left_;
}
inline void CategoryIndexResponse_Item::_internal_set_left(::int32_t value) {
  ;
  _impl_.left_ = value;
}

// int32 right = 4;
inline void CategoryIndexResponse_Item::clear_right() {
  _impl_.right_ = 0;
}
inline ::int32_t CategoryIndexResponse_Item::right() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryIndexResponse.Item.right)
  return _internal_right();
}
inline void CategoryIndexResponse_Item::set_right(::int32_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryIndexResponse.Item.right)
}
inline ::int32_t CategoryIndexResponse_Item::_internal_right() const {
  return _impl_.right_;
}
inline void CategoryIndexResponse_Item::_internal_set_right(::int32_t value) {
  ;
  _impl_.right_ = value;
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool CategoryIndexResponse_Item::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CategoryIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CategoryIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void CategoryIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.CategoryIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CategoryIndexResponse_Item::release_updated_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CategoryIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.CategoryIndexResponse.Item.updated_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CategoryIndexResponse_Item::_internal_mutable_updated_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CategoryIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.CategoryIndexResponse.Item.updated_at)
  return _msg;
}
inline void CategoryIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.CategoryIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// CategoryIndexResponse

// repeated .palm.nut.v1.CategoryIndexResponse.Item items = 1;
inline int CategoryIndexResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CategoryIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void CategoryIndexResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::palm::nut::v1::CategoryIndexResponse_Item* CategoryIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.CategoryIndexResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::CategoryIndexResponse_Item >*
CategoryIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.CategoryIndexResponse.items)
  return _internal_mutable_items();
}
inline const ::palm::nut::v1::CategoryIndexResponse_Item& CategoryIndexResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::palm::nut::v1::CategoryIndexResponse_Item& CategoryIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::CategoryIndexResponse_Item* CategoryIndexResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::palm::nut::v1::CategoryIndexResponse_Item* CategoryIndexResponse::add_items() {
  ::palm::nut::v1::CategoryIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.CategoryIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::CategoryIndexResponse_Item >&
CategoryIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.CategoryIndexResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::CategoryIndexResponse_Item>&
CategoryIndexResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::palm::nut::v1::CategoryIndexResponse_Item>*
CategoryIndexResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// CategoryCreateRequest

// string code = 1;
inline void CategoryCreateRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& CategoryCreateRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryCreateRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CategoryCreateRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryCreateRequest.code)
}
inline std::string* CategoryCreateRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.CategoryCreateRequest.code)
  return _s;
}
inline const std::string& CategoryCreateRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void CategoryCreateRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* CategoryCreateRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* CategoryCreateRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.CategoryCreateRequest.code)
  return _impl_.code_.Release();
}
inline void CategoryCreateRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.CategoryCreateRequest.code)
}

// int32 left = 2;
inline bool CategoryCreateRequest::has_left() const {
  return by_case() == kLeft;
}
inline void CategoryCreateRequest::set_has_left() {
  _impl_._oneof_case_[0] = kLeft;
}
inline void CategoryCreateRequest::clear_left() {
  if (by_case() == kLeft) {
    _impl_.by_.left_ = 0;
    clear_has_by();
  }
}
inline ::int32_t CategoryCreateRequest::left() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryCreateRequest.left)
  return _internal_left();
}
inline void CategoryCreateRequest::set_left(::int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryCreateRequest.left)
}
inline ::int32_t CategoryCreateRequest::_internal_left() const {
  if (by_case() == kLeft) {
    return _impl_.by_.left_;
  }
  return 0;
}
inline void CategoryCreateRequest::_internal_set_left(::int32_t value) {
  if (by_case() != kLeft) {
    clear_by();
    set_has_left();
  }
  _impl_.by_.left_ = value;
}

// int32 parent = 3;
inline bool CategoryCreateRequest::has_parent() const {
  return by_case() == kParent;
}
inline void CategoryCreateRequest::set_has_parent() {
  _impl_._oneof_case_[0] = kParent;
}
inline void CategoryCreateRequest::clear_parent() {
  if (by_case() == kParent) {
    _impl_.by_.parent_ = 0;
    clear_has_by();
  }
}
inline ::int32_t CategoryCreateRequest::parent() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryCreateRequest.parent)
  return _internal_parent();
}
inline void CategoryCreateRequest::set_parent(::int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryCreateRequest.parent)
}
inline ::int32_t CategoryCreateRequest::_internal_parent() const {
  if (by_case() == kParent) {
    return _impl_.by_.parent_;
  }
  return 0;
}
inline void CategoryCreateRequest::_internal_set_parent(::int32_t value) {
  if (by_case() != kParent) {
    clear_by();
    set_has_parent();
  }
  _impl_.by_.parent_ = value;
}

inline bool CategoryCreateRequest::has_by() const {
  return by_case() != BY_NOT_SET;
}
inline void CategoryCreateRequest::clear_has_by() {
  _impl_._oneof_case_[0] = BY_NOT_SET;
}
inline CategoryCreateRequest::ByCase CategoryCreateRequest::by_case() const {
  return CategoryCreateRequest::ByCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CategoryUpdateRequest

// int32 id = 1;
inline void CategoryUpdateRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CategoryUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryUpdateRequest.id)
  return _internal_id();
}
inline void CategoryUpdateRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryUpdateRequest.id)
}
inline ::int32_t CategoryUpdateRequest::_internal_id() const {
  return _impl_.id_;
}
inline void CategoryUpdateRequest::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string code = 2;
inline void CategoryUpdateRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& CategoryUpdateRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.CategoryUpdateRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CategoryUpdateRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.CategoryUpdateRequest.code)
}
inline std::string* CategoryUpdateRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.CategoryUpdateRequest.code)
  return _s;
}
inline const std::string& CategoryUpdateRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void CategoryUpdateRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* CategoryUpdateRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* CategoryUpdateRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.CategoryUpdateRequest.code)
  return _impl_.code_.Release();
}
inline void CategoryUpdateRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.CategoryUpdateRequest.code)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace nut
}  // namespace palm


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::palm::nut::v1::MediaContent_Editor> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::nut::v1::MediaContent_Editor>() {
  return ::palm::nut::v1::MediaContent_Editor_descriptor();
}
template <>
struct is_proto_enum<::palm::nut::v1::MediaContent_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::nut::v1::MediaContent_Status>() {
  return ::palm::nut::v1::MediaContent_Status_descriptor();
}
template <>
struct is_proto_enum<::palm::nut::v1::UserLogsResponse_Item_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::nut::v1::UserLogsResponse_Item_Level>() {
  return ::palm::nut::v1::UserLogsResponse_Item_Level_descriptor();
}
template <>
struct is_proto_enum<::palm::nut::v1::SmtpProfile_AuthMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::nut::v1::SmtpProfile_AuthMethod>() {
  return ::palm::nut::v1::SmtpProfile_AuthMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_nut_2eproto_2epb_2eh
