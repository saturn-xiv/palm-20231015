// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orchid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orchid_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_orchid_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_orchid_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orchid_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_orchid_2eproto;
namespace palm {
namespace orchid {
namespace v1 {
class WechatMiniProgramLoginRequest;
struct WechatMiniProgramLoginRequestDefaultTypeInternal;
extern WechatMiniProgramLoginRequestDefaultTypeInternal _WechatMiniProgramLoginRequest_default_instance_;
class WechatMiniProgramLoginResponse;
struct WechatMiniProgramLoginResponseDefaultTypeInternal;
extern WechatMiniProgramLoginResponseDefaultTypeInternal _WechatMiniProgramLoginResponse_default_instance_;
class WechatMiniProgramPhoneNumberRequest;
struct WechatMiniProgramPhoneNumberRequestDefaultTypeInternal;
extern WechatMiniProgramPhoneNumberRequestDefaultTypeInternal _WechatMiniProgramPhoneNumberRequest_default_instance_;
class WechatMiniProgramPhoneNumberResponse;
struct WechatMiniProgramPhoneNumberResponseDefaultTypeInternal;
extern WechatMiniProgramPhoneNumberResponseDefaultTypeInternal _WechatMiniProgramPhoneNumberResponse_default_instance_;
class WechatOauth2LoginRequest;
struct WechatOauth2LoginRequestDefaultTypeInternal;
extern WechatOauth2LoginRequestDefaultTypeInternal _WechatOauth2LoginRequest_default_instance_;
class WechatOauth2LoginResponse;
struct WechatOauth2LoginResponseDefaultTypeInternal;
extern WechatOauth2LoginResponseDefaultTypeInternal _WechatOauth2LoginResponse_default_instance_;
class WechatOauth2QrConnectRequest;
struct WechatOauth2QrConnectRequestDefaultTypeInternal;
extern WechatOauth2QrConnectRequestDefaultTypeInternal _WechatOauth2QrConnectRequest_default_instance_;
class WechatOauth2QrConnectResponse;
struct WechatOauth2QrConnectResponseDefaultTypeInternal;
extern WechatOauth2QrConnectResponseDefaultTypeInternal _WechatOauth2QrConnectResponse_default_instance_;
}  // namespace v1
}  // namespace orchid
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template <>
::palm::orchid::v1::WechatMiniProgramLoginRequest* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatMiniProgramLoginRequest>(Arena*);
template <>
::palm::orchid::v1::WechatMiniProgramLoginResponse* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatMiniProgramLoginResponse>(Arena*);
template <>
::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest>(Arena*);
template <>
::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse>(Arena*);
template <>
::palm::orchid::v1::WechatOauth2LoginRequest* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatOauth2LoginRequest>(Arena*);
template <>
::palm::orchid::v1::WechatOauth2LoginResponse* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatOauth2LoginResponse>(Arena*);
template <>
::palm::orchid::v1::WechatOauth2QrConnectRequest* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatOauth2QrConnectRequest>(Arena*);
template <>
::palm::orchid::v1::WechatOauth2QrConnectResponse* Arena::CreateMaybeMessage<::palm::orchid::v1::WechatOauth2QrConnectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace palm {
namespace orchid {
namespace v1 {
enum WechatOauth2QrConnectRequest_Language : int {
  WechatOauth2QrConnectRequest_Language_EN = 0,
  WechatOauth2QrConnectRequest_Language_CN = 1,
  WechatOauth2QrConnectRequest_Language_TW = 2,
  WechatOauth2QrConnectRequest_Language_WechatOauth2QrConnectRequest_Language_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatOauth2QrConnectRequest_Language_WechatOauth2QrConnectRequest_Language_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatOauth2QrConnectRequest_Language_IsValid(int value);
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest_Language_Language_MIN = static_cast<WechatOauth2QrConnectRequest_Language>(0);
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest_Language_Language_MAX = static_cast<WechatOauth2QrConnectRequest_Language>(2);
constexpr int WechatOauth2QrConnectRequest_Language_Language_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatOauth2QrConnectRequest_Language_descriptor();
template <typename T>
const std::string& WechatOauth2QrConnectRequest_Language_Name(T value) {
  static_assert(std::is_same<T, WechatOauth2QrConnectRequest_Language>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Language_Name().");
  return WechatOauth2QrConnectRequest_Language_Name(static_cast<WechatOauth2QrConnectRequest_Language>(value));
}
template <>
inline const std::string& WechatOauth2QrConnectRequest_Language_Name(WechatOauth2QrConnectRequest_Language value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatOauth2QrConnectRequest_Language_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool WechatOauth2QrConnectRequest_Language_Parse(absl::string_view name, WechatOauth2QrConnectRequest_Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatOauth2QrConnectRequest_Language>(
      WechatOauth2QrConnectRequest_Language_descriptor(), name, value);
}
enum WechatOauth2LoginResponse_Sex : int {
  WechatOauth2LoginResponse_Sex_MALE = 0,
  WechatOauth2LoginResponse_Sex_FEMALE = 1,
  WechatOauth2LoginResponse_Sex_WechatOauth2LoginResponse_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WechatOauth2LoginResponse_Sex_WechatOauth2LoginResponse_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WechatOauth2LoginResponse_Sex_IsValid(int value);
constexpr WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse_Sex_Sex_MIN = static_cast<WechatOauth2LoginResponse_Sex>(0);
constexpr WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse_Sex_Sex_MAX = static_cast<WechatOauth2LoginResponse_Sex>(1);
constexpr int WechatOauth2LoginResponse_Sex_Sex_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WechatOauth2LoginResponse_Sex_descriptor();
template <typename T>
const std::string& WechatOauth2LoginResponse_Sex_Name(T value) {
  static_assert(std::is_same<T, WechatOauth2LoginResponse_Sex>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Sex_Name().");
  return WechatOauth2LoginResponse_Sex_Name(static_cast<WechatOauth2LoginResponse_Sex>(value));
}
template <>
inline const std::string& WechatOauth2LoginResponse_Sex_Name(WechatOauth2LoginResponse_Sex value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WechatOauth2LoginResponse_Sex_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool WechatOauth2LoginResponse_Sex_Parse(absl::string_view name, WechatOauth2LoginResponse_Sex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WechatOauth2LoginResponse_Sex>(
      WechatOauth2LoginResponse_Sex_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WechatMiniProgramLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatMiniProgramLoginRequest) */ {
 public:
  inline WechatMiniProgramLoginRequest() : WechatMiniProgramLoginRequest(nullptr) {}
  ~WechatMiniProgramLoginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatMiniProgramLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatMiniProgramLoginRequest(const WechatMiniProgramLoginRequest& from);
  WechatMiniProgramLoginRequest(WechatMiniProgramLoginRequest&& from) noexcept
    : WechatMiniProgramLoginRequest() {
    *this = ::std::move(from);
  }

  inline WechatMiniProgramLoginRequest& operator=(const WechatMiniProgramLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatMiniProgramLoginRequest& operator=(WechatMiniProgramLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatMiniProgramLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatMiniProgramLoginRequest* internal_default_instance() {
    return reinterpret_cast<const WechatMiniProgramLoginRequest*>(
               &_WechatMiniProgramLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WechatMiniProgramLoginRequest& a, WechatMiniProgramLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatMiniProgramLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatMiniProgramLoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatMiniProgramLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatMiniProgramLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatMiniProgramLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatMiniProgramLoginRequest& from) {
    WechatMiniProgramLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatMiniProgramLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatMiniProgramLoginRequest";
  }
  protected:
  explicit WechatMiniProgramLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatMiniProgramLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatMiniProgramLoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatMiniProgramLoginResponse) */ {
 public:
  inline WechatMiniProgramLoginResponse() : WechatMiniProgramLoginResponse(nullptr) {}
  ~WechatMiniProgramLoginResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatMiniProgramLoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatMiniProgramLoginResponse(const WechatMiniProgramLoginResponse& from);
  WechatMiniProgramLoginResponse(WechatMiniProgramLoginResponse&& from) noexcept
    : WechatMiniProgramLoginResponse() {
    *this = ::std::move(from);
  }

  inline WechatMiniProgramLoginResponse& operator=(const WechatMiniProgramLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatMiniProgramLoginResponse& operator=(WechatMiniProgramLoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatMiniProgramLoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatMiniProgramLoginResponse* internal_default_instance() {
    return reinterpret_cast<const WechatMiniProgramLoginResponse*>(
               &_WechatMiniProgramLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WechatMiniProgramLoginResponse& a, WechatMiniProgramLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatMiniProgramLoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatMiniProgramLoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatMiniProgramLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatMiniProgramLoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatMiniProgramLoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatMiniProgramLoginResponse& from) {
    WechatMiniProgramLoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatMiniProgramLoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatMiniProgramLoginResponse";
  }
  protected:
  explicit WechatMiniProgramLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnionidFieldNumber = 1,
    kOpenidFieldNumber = 2,
    kSessionKeyFieldNumber = 3,
  };
  // string unionid = 1;
  void clear_unionid() ;
  const std::string& unionid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unionid(Arg_&& arg, Args_... args);
  std::string* mutable_unionid();
  PROTOBUF_NODISCARD std::string* release_unionid();
  void set_allocated_unionid(std::string* ptr);

  private:
  const std::string& _internal_unionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unionid(
      const std::string& value);
  std::string* _internal_mutable_unionid();

  public:
  // string openid = 2;
  void clear_openid() ;
  const std::string& openid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openid(Arg_&& arg, Args_... args);
  std::string* mutable_openid();
  PROTOBUF_NODISCARD std::string* release_openid();
  void set_allocated_openid(std::string* ptr);

  private:
  const std::string& _internal_openid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openid(
      const std::string& value);
  std::string* _internal_mutable_openid();

  public:
  // string session_key = 3;
  void clear_session_key() ;
  const std::string& session_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_key(Arg_&& arg, Args_... args);
  std::string* mutable_session_key();
  PROTOBUF_NODISCARD std::string* release_session_key();
  void set_allocated_session_key(std::string* ptr);

  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(
      const std::string& value);
  std::string* _internal_mutable_session_key();

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatMiniProgramLoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatMiniProgramPhoneNumberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest) */ {
 public:
  inline WechatMiniProgramPhoneNumberRequest() : WechatMiniProgramPhoneNumberRequest(nullptr) {}
  ~WechatMiniProgramPhoneNumberRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatMiniProgramPhoneNumberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatMiniProgramPhoneNumberRequest(const WechatMiniProgramPhoneNumberRequest& from);
  WechatMiniProgramPhoneNumberRequest(WechatMiniProgramPhoneNumberRequest&& from) noexcept
    : WechatMiniProgramPhoneNumberRequest() {
    *this = ::std::move(from);
  }

  inline WechatMiniProgramPhoneNumberRequest& operator=(const WechatMiniProgramPhoneNumberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatMiniProgramPhoneNumberRequest& operator=(WechatMiniProgramPhoneNumberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatMiniProgramPhoneNumberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatMiniProgramPhoneNumberRequest* internal_default_instance() {
    return reinterpret_cast<const WechatMiniProgramPhoneNumberRequest*>(
               &_WechatMiniProgramPhoneNumberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WechatMiniProgramPhoneNumberRequest& a, WechatMiniProgramPhoneNumberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatMiniProgramPhoneNumberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatMiniProgramPhoneNumberRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatMiniProgramPhoneNumberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatMiniProgramPhoneNumberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatMiniProgramPhoneNumberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatMiniProgramPhoneNumberRequest& from) {
    WechatMiniProgramPhoneNumberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatMiniProgramPhoneNumberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatMiniProgramPhoneNumberRequest";
  }
  protected:
  explicit WechatMiniProgramPhoneNumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatMiniProgramPhoneNumberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse) */ {
 public:
  inline WechatMiniProgramPhoneNumberResponse() : WechatMiniProgramPhoneNumberResponse(nullptr) {}
  ~WechatMiniProgramPhoneNumberResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatMiniProgramPhoneNumberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatMiniProgramPhoneNumberResponse(const WechatMiniProgramPhoneNumberResponse& from);
  WechatMiniProgramPhoneNumberResponse(WechatMiniProgramPhoneNumberResponse&& from) noexcept
    : WechatMiniProgramPhoneNumberResponse() {
    *this = ::std::move(from);
  }

  inline WechatMiniProgramPhoneNumberResponse& operator=(const WechatMiniProgramPhoneNumberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatMiniProgramPhoneNumberResponse& operator=(WechatMiniProgramPhoneNumberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatMiniProgramPhoneNumberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatMiniProgramPhoneNumberResponse* internal_default_instance() {
    return reinterpret_cast<const WechatMiniProgramPhoneNumberResponse*>(
               &_WechatMiniProgramPhoneNumberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WechatMiniProgramPhoneNumberResponse& a, WechatMiniProgramPhoneNumberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatMiniProgramPhoneNumberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatMiniProgramPhoneNumberResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatMiniProgramPhoneNumberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatMiniProgramPhoneNumberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatMiniProgramPhoneNumberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatMiniProgramPhoneNumberResponse& from) {
    WechatMiniProgramPhoneNumberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatMiniProgramPhoneNumberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse";
  }
  protected:
  explicit WechatMiniProgramPhoneNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumberFieldNumber = 1,
    kPurePhoneNumberFieldNumber = 2,
    kCountryCodeFieldNumber = 3,
    kWaterMarkFieldNumber = 4,
  };
  // string phone_number = 1;
  void clear_phone_number() ;
  const std::string& phone_number() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone_number(Arg_&& arg, Args_... args);
  std::string* mutable_phone_number();
  PROTOBUF_NODISCARD std::string* release_phone_number();
  void set_allocated_phone_number(std::string* ptr);

  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(
      const std::string& value);
  std::string* _internal_mutable_phone_number();

  public:
  // string pure_phone_number = 2;
  void clear_pure_phone_number() ;
  const std::string& pure_phone_number() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pure_phone_number(Arg_&& arg, Args_... args);
  std::string* mutable_pure_phone_number();
  PROTOBUF_NODISCARD std::string* release_pure_phone_number();
  void set_allocated_pure_phone_number(std::string* ptr);

  private:
  const std::string& _internal_pure_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pure_phone_number(
      const std::string& value);
  std::string* _internal_mutable_pure_phone_number();

  public:
  // string country_code = 3;
  void clear_country_code() ;
  const std::string& country_code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country_code(Arg_&& arg, Args_... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* ptr);

  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(
      const std::string& value);
  std::string* _internal_mutable_country_code();

  public:
  // uint64 water_mark = 4;
  void clear_water_mark() ;
  ::uint64_t water_mark() const;
  void set_water_mark(::uint64_t value);

  private:
  ::uint64_t _internal_water_mark() const;
  void _internal_set_water_mark(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pure_phone_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::uint64_t water_mark_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2QrConnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatOauth2QrConnectRequest) */ {
 public:
  inline WechatOauth2QrConnectRequest() : WechatOauth2QrConnectRequest(nullptr) {}
  ~WechatOauth2QrConnectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2QrConnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatOauth2QrConnectRequest(const WechatOauth2QrConnectRequest& from);
  WechatOauth2QrConnectRequest(WechatOauth2QrConnectRequest&& from) noexcept
    : WechatOauth2QrConnectRequest() {
    *this = ::std::move(from);
  }

  inline WechatOauth2QrConnectRequest& operator=(const WechatOauth2QrConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2QrConnectRequest& operator=(WechatOauth2QrConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2QrConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2QrConnectRequest* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2QrConnectRequest*>(
               &_WechatOauth2QrConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WechatOauth2QrConnectRequest& a, WechatOauth2QrConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2QrConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2QrConnectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2QrConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2QrConnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatOauth2QrConnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatOauth2QrConnectRequest& from) {
    WechatOauth2QrConnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2QrConnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatOauth2QrConnectRequest";
  }
  protected:
  explicit WechatOauth2QrConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Language = WechatOauth2QrConnectRequest_Language;
  static constexpr Language EN = WechatOauth2QrConnectRequest_Language_EN;
  static constexpr Language CN = WechatOauth2QrConnectRequest_Language_CN;
  static constexpr Language TW = WechatOauth2QrConnectRequest_Language_TW;
  static inline bool Language_IsValid(int value) {
    return WechatOauth2QrConnectRequest_Language_IsValid(value);
  }
  static constexpr Language Language_MIN = WechatOauth2QrConnectRequest_Language_Language_MIN;
  static constexpr Language Language_MAX = WechatOauth2QrConnectRequest_Language_Language_MAX;
  static constexpr int Language_ARRAYSIZE = WechatOauth2QrConnectRequest_Language_Language_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor() {
    return WechatOauth2QrConnectRequest_Language_descriptor();
  }
  template <typename T>
  static inline const std::string& Language_Name(T value) {
    return WechatOauth2QrConnectRequest_Language_Name(value);
  }
  static inline bool Language_Parse(absl::string_view name, Language* value) {
    return WechatOauth2QrConnectRequest_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kRedirectUriFieldNumber = 2,
    kStateFieldNumber = 3,
    kLanguageFieldNumber = 9,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string redirect_uri = 2;
  void clear_redirect_uri() ;
  const std::string& redirect_uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_redirect_uri(Arg_&& arg, Args_... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* ptr);

  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(
      const std::string& value);
  std::string* _internal_mutable_redirect_uri();

  public:
  // string state = 3;
  void clear_state() ;
  const std::string& state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
  void clear_language() ;
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language language() const;
  void set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  private:
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language _internal_language() const;
  void _internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatOauth2QrConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    int language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2QrConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatOauth2QrConnectResponse) */ {
 public:
  inline WechatOauth2QrConnectResponse() : WechatOauth2QrConnectResponse(nullptr) {}
  ~WechatOauth2QrConnectResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2QrConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatOauth2QrConnectResponse(const WechatOauth2QrConnectResponse& from);
  WechatOauth2QrConnectResponse(WechatOauth2QrConnectResponse&& from) noexcept
    : WechatOauth2QrConnectResponse() {
    *this = ::std::move(from);
  }

  inline WechatOauth2QrConnectResponse& operator=(const WechatOauth2QrConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2QrConnectResponse& operator=(WechatOauth2QrConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2QrConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2QrConnectResponse* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2QrConnectResponse*>(
               &_WechatOauth2QrConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WechatOauth2QrConnectResponse& a, WechatOauth2QrConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2QrConnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2QrConnectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2QrConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2QrConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatOauth2QrConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatOauth2QrConnectResponse& from) {
    WechatOauth2QrConnectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2QrConnectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatOauth2QrConnectResponse";
  }
  protected:
  explicit WechatOauth2QrConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatOauth2QrConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatOauth2LoginResponse) */ {
 public:
  inline WechatOauth2LoginResponse() : WechatOauth2LoginResponse(nullptr) {}
  ~WechatOauth2LoginResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatOauth2LoginResponse(const WechatOauth2LoginResponse& from);
  WechatOauth2LoginResponse(WechatOauth2LoginResponse&& from) noexcept
    : WechatOauth2LoginResponse() {
    *this = ::std::move(from);
  }

  inline WechatOauth2LoginResponse& operator=(const WechatOauth2LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2LoginResponse& operator=(WechatOauth2LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2LoginResponse* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2LoginResponse*>(
               &_WechatOauth2LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WechatOauth2LoginResponse& a, WechatOauth2LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatOauth2LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatOauth2LoginResponse& from) {
    WechatOauth2LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatOauth2LoginResponse";
  }
  protected:
  explicit WechatOauth2LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Sex = WechatOauth2LoginResponse_Sex;
  static constexpr Sex MALE = WechatOauth2LoginResponse_Sex_MALE;
  static constexpr Sex FEMALE = WechatOauth2LoginResponse_Sex_FEMALE;
  static inline bool Sex_IsValid(int value) {
    return WechatOauth2LoginResponse_Sex_IsValid(value);
  }
  static constexpr Sex Sex_MIN = WechatOauth2LoginResponse_Sex_Sex_MIN;
  static constexpr Sex Sex_MAX = WechatOauth2LoginResponse_Sex_Sex_MAX;
  static constexpr int Sex_ARRAYSIZE = WechatOauth2LoginResponse_Sex_Sex_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sex_descriptor() {
    return WechatOauth2LoginResponse_Sex_descriptor();
  }
  template <typename T>
  static inline const std::string& Sex_Name(T value) {
    return WechatOauth2LoginResponse_Sex_Name(value);
  }
  static inline bool Sex_Parse(absl::string_view name, Sex* value) {
    return WechatOauth2LoginResponse_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeFieldNumber = 17,
    kUnionidFieldNumber = 1,
    kOpenidFieldNumber = 2,
    kNicknameFieldNumber = 11,
    kProvinceFieldNumber = 13,
    kCityFieldNumber = 14,
    kCountryFieldNumber = 15,
    kHeadimgurlFieldNumber = 16,
    kSexFieldNumber = 12,
  };
  // repeated string privilege = 17;
  int privilege_size() const;
  private:
  int _internal_privilege_size() const;

  public:
  void clear_privilege() ;
  const std::string& privilege(int index) const;
  std::string* mutable_privilege(int index);
  void set_privilege(int index, const std::string& value);
  void set_privilege(int index, std::string&& value);
  void set_privilege(int index, const char* value);
  void set_privilege(int index, const char* value, std::size_t size);
  void set_privilege(int index, absl::string_view value);
  std::string* add_privilege();
  void add_privilege(const std::string& value);
  void add_privilege(std::string&& value);
  void add_privilege(const char* value);
  void add_privilege(const char* value, std::size_t size);
  void add_privilege(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& privilege() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_privilege();

  private:
  const std::string& _internal_privilege(int index) const;
  std::string* _internal_add_privilege();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_privilege() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_privilege();

  public:
  // string unionid = 1;
  void clear_unionid() ;
  const std::string& unionid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unionid(Arg_&& arg, Args_... args);
  std::string* mutable_unionid();
  PROTOBUF_NODISCARD std::string* release_unionid();
  void set_allocated_unionid(std::string* ptr);

  private:
  const std::string& _internal_unionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unionid(
      const std::string& value);
  std::string* _internal_mutable_unionid();

  public:
  // string openid = 2;
  void clear_openid() ;
  const std::string& openid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_openid(Arg_&& arg, Args_... args);
  std::string* mutable_openid();
  PROTOBUF_NODISCARD std::string* release_openid();
  void set_allocated_openid(std::string* ptr);

  private:
  const std::string& _internal_openid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openid(
      const std::string& value);
  std::string* _internal_mutable_openid();

  public:
  // string nickname = 11;
  void clear_nickname() ;
  const std::string& nickname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* ptr);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string province = 13;
  void clear_province() ;
  const std::string& province() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_province(Arg_&& arg, Args_... args);
  std::string* mutable_province();
  PROTOBUF_NODISCARD std::string* release_province();
  void set_allocated_province(std::string* ptr);

  private:
  const std::string& _internal_province() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_province(
      const std::string& value);
  std::string* _internal_mutable_province();

  public:
  // string city = 14;
  void clear_city() ;
  const std::string& city() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* ptr);

  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(
      const std::string& value);
  std::string* _internal_mutable_city();

  public:
  // string country = 15;
  void clear_country() ;
  const std::string& country() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* ptr);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // optional string headimgurl = 16;
  bool has_headimgurl() const;
  void clear_headimgurl() ;
  const std::string& headimgurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_headimgurl(Arg_&& arg, Args_... args);
  std::string* mutable_headimgurl();
  PROTOBUF_NODISCARD std::string* release_headimgurl();
  void set_allocated_headimgurl(std::string* ptr);

  private:
  const std::string& _internal_headimgurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headimgurl(
      const std::string& value);
  std::string* _internal_mutable_headimgurl();

  public:
  // .palm.orchid.v1.WechatOauth2LoginResponse.Sex sex = 12;
  void clear_sex() ;
  ::palm::orchid::v1::WechatOauth2LoginResponse_Sex sex() const;
  void set_sex(::palm::orchid::v1::WechatOauth2LoginResponse_Sex value);

  private:
  ::palm::orchid::v1::WechatOauth2LoginResponse_Sex _internal_sex() const;
  void _internal_set_sex(::palm::orchid::v1::WechatOauth2LoginResponse_Sex value);

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatOauth2LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> privilege_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headimgurl_;
    int sex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};// -------------------------------------------------------------------

class WechatOauth2LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.orchid.v1.WechatOauth2LoginRequest) */ {
 public:
  inline WechatOauth2LoginRequest() : WechatOauth2LoginRequest(nullptr) {}
  ~WechatOauth2LoginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WechatOauth2LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatOauth2LoginRequest(const WechatOauth2LoginRequest& from);
  WechatOauth2LoginRequest(WechatOauth2LoginRequest&& from) noexcept
    : WechatOauth2LoginRequest() {
    *this = ::std::move(from);
  }

  inline WechatOauth2LoginRequest& operator=(const WechatOauth2LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatOauth2LoginRequest& operator=(WechatOauth2LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatOauth2LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatOauth2LoginRequest* internal_default_instance() {
    return reinterpret_cast<const WechatOauth2LoginRequest*>(
               &_WechatOauth2LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WechatOauth2LoginRequest& a, WechatOauth2LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatOauth2LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatOauth2LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatOauth2LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatOauth2LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WechatOauth2LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WechatOauth2LoginRequest& from) {
    WechatOauth2LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WechatOauth2LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.orchid.v1.WechatOauth2LoginRequest";
  }
  protected:
  explicit WechatOauth2LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kCodeFieldNumber = 2,
    kStateFieldNumber = 3,
    kLanguageFieldNumber = 9,
  };
  // string app_id = 1;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string code = 2;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // string state = 3;
  void clear_state() ;
  const std::string& state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
  void clear_language() ;
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language language() const;
  void set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  private:
  ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language _internal_language() const;
  void _internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value);

  public:
  // @@protoc_insertion_point(class_scope:palm.orchid.v1.WechatOauth2LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    int language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchid_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WechatMiniProgramLoginRequest

// string app_id = 1;
inline void WechatMiniProgramLoginRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramLoginRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramLoginRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramLoginRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramLoginRequest.app_id)
}
inline std::string* WechatMiniProgramLoginRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramLoginRequest.app_id)
  return _s;
}
inline const std::string& WechatMiniProgramLoginRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatMiniProgramLoginRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramLoginRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatMiniProgramLoginRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramLoginRequest.app_id)
}

// string code = 2;
inline void WechatMiniProgramLoginRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramLoginRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramLoginRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramLoginRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramLoginRequest.code)
}
inline std::string* WechatMiniProgramLoginRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramLoginRequest.code)
  return _s;
}
inline const std::string& WechatMiniProgramLoginRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void WechatMiniProgramLoginRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramLoginRequest.code)
  return _impl_.code_.Release();
}
inline void WechatMiniProgramLoginRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramLoginRequest.code)
}

// -------------------------------------------------------------------

// WechatMiniProgramLoginResponse

// string unionid = 1;
inline void WechatMiniProgramLoginResponse::clear_unionid() {
  _impl_.unionid_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramLoginResponse::unionid() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramLoginResponse.unionid)
  return _internal_unionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramLoginResponse::set_unionid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unionid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramLoginResponse.unionid)
}
inline std::string* WechatMiniProgramLoginResponse::mutable_unionid() {
  std::string* _s = _internal_mutable_unionid();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramLoginResponse.unionid)
  return _s;
}
inline const std::string& WechatMiniProgramLoginResponse::_internal_unionid() const {
  return _impl_.unionid_.Get();
}
inline void WechatMiniProgramLoginResponse::_internal_set_unionid(const std::string& value) {
  ;


  _impl_.unionid_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginResponse::_internal_mutable_unionid() {
  ;
  return _impl_.unionid_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginResponse::release_unionid() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramLoginResponse.unionid)
  return _impl_.unionid_.Release();
}
inline void WechatMiniProgramLoginResponse::set_allocated_unionid(std::string* value) {
  _impl_.unionid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unionid_.IsDefault()) {
          _impl_.unionid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramLoginResponse.unionid)
}

// string openid = 2;
inline void WechatMiniProgramLoginResponse::clear_openid() {
  _impl_.openid_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramLoginResponse::openid() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramLoginResponse.openid)
  return _internal_openid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramLoginResponse::set_openid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.openid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramLoginResponse.openid)
}
inline std::string* WechatMiniProgramLoginResponse::mutable_openid() {
  std::string* _s = _internal_mutable_openid();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramLoginResponse.openid)
  return _s;
}
inline const std::string& WechatMiniProgramLoginResponse::_internal_openid() const {
  return _impl_.openid_.Get();
}
inline void WechatMiniProgramLoginResponse::_internal_set_openid(const std::string& value) {
  ;


  _impl_.openid_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginResponse::_internal_mutable_openid() {
  ;
  return _impl_.openid_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginResponse::release_openid() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramLoginResponse.openid)
  return _impl_.openid_.Release();
}
inline void WechatMiniProgramLoginResponse::set_allocated_openid(std::string* value) {
  _impl_.openid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openid_.IsDefault()) {
          _impl_.openid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramLoginResponse.openid)
}

// string session_key = 3;
inline void WechatMiniProgramLoginResponse::clear_session_key() {
  _impl_.session_key_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramLoginResponse::session_key() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramLoginResponse.session_key)
  return _internal_session_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramLoginResponse::set_session_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.session_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramLoginResponse.session_key)
}
inline std::string* WechatMiniProgramLoginResponse::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramLoginResponse.session_key)
  return _s;
}
inline const std::string& WechatMiniProgramLoginResponse::_internal_session_key() const {
  return _impl_.session_key_.Get();
}
inline void WechatMiniProgramLoginResponse::_internal_set_session_key(const std::string& value) {
  ;


  _impl_.session_key_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginResponse::_internal_mutable_session_key() {
  ;
  return _impl_.session_key_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramLoginResponse::release_session_key() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramLoginResponse.session_key)
  return _impl_.session_key_.Release();
}
inline void WechatMiniProgramLoginResponse::set_allocated_session_key(std::string* value) {
  _impl_.session_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_key_.IsDefault()) {
          _impl_.session_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramLoginResponse.session_key)
}

// -------------------------------------------------------------------

// WechatMiniProgramPhoneNumberRequest

// string app_id = 1;
inline void WechatMiniProgramPhoneNumberRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramPhoneNumberRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramPhoneNumberRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id)
}
inline std::string* WechatMiniProgramPhoneNumberRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id)
  return _s;
}
inline const std::string& WechatMiniProgramPhoneNumberRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatMiniProgramPhoneNumberRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatMiniProgramPhoneNumberRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id)
}

// string code = 2;
inline void WechatMiniProgramPhoneNumberRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramPhoneNumberRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramPhoneNumberRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code)
}
inline std::string* WechatMiniProgramPhoneNumberRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code)
  return _s;
}
inline const std::string& WechatMiniProgramPhoneNumberRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void WechatMiniProgramPhoneNumberRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code)
  return _impl_.code_.Release();
}
inline void WechatMiniProgramPhoneNumberRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code)
}

// -------------------------------------------------------------------

// WechatMiniProgramPhoneNumberResponse

// string phone_number = 1;
inline void WechatMiniProgramPhoneNumberResponse::clear_phone_number() {
  _impl_.phone_number_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramPhoneNumberResponse::phone_number() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number)
  return _internal_phone_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramPhoneNumberResponse::set_phone_number(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.phone_number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number)
}
inline std::string* WechatMiniProgramPhoneNumberResponse::mutable_phone_number() {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number)
  return _s;
}
inline const std::string& WechatMiniProgramPhoneNumberResponse::_internal_phone_number() const {
  return _impl_.phone_number_.Get();
}
inline void WechatMiniProgramPhoneNumberResponse::_internal_set_phone_number(const std::string& value) {
  ;


  _impl_.phone_number_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberResponse::_internal_mutable_phone_number() {
  ;
  return _impl_.phone_number_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberResponse::release_phone_number() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number)
  return _impl_.phone_number_.Release();
}
inline void WechatMiniProgramPhoneNumberResponse::set_allocated_phone_number(std::string* value) {
  _impl_.phone_number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_number_.IsDefault()) {
          _impl_.phone_number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number)
}

// string pure_phone_number = 2;
inline void WechatMiniProgramPhoneNumberResponse::clear_pure_phone_number() {
  _impl_.pure_phone_number_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramPhoneNumberResponse::pure_phone_number() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number)
  return _internal_pure_phone_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramPhoneNumberResponse::set_pure_phone_number(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pure_phone_number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number)
}
inline std::string* WechatMiniProgramPhoneNumberResponse::mutable_pure_phone_number() {
  std::string* _s = _internal_mutable_pure_phone_number();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number)
  return _s;
}
inline const std::string& WechatMiniProgramPhoneNumberResponse::_internal_pure_phone_number() const {
  return _impl_.pure_phone_number_.Get();
}
inline void WechatMiniProgramPhoneNumberResponse::_internal_set_pure_phone_number(const std::string& value) {
  ;


  _impl_.pure_phone_number_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberResponse::_internal_mutable_pure_phone_number() {
  ;
  return _impl_.pure_phone_number_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberResponse::release_pure_phone_number() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number)
  return _impl_.pure_phone_number_.Release();
}
inline void WechatMiniProgramPhoneNumberResponse::set_allocated_pure_phone_number(std::string* value) {
  _impl_.pure_phone_number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pure_phone_number_.IsDefault()) {
          _impl_.pure_phone_number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number)
}

// string country_code = 3;
inline void WechatMiniProgramPhoneNumberResponse::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
}
inline const std::string& WechatMiniProgramPhoneNumberResponse::country_code() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code)
  return _internal_country_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatMiniProgramPhoneNumberResponse::set_country_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.country_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code)
}
inline std::string* WechatMiniProgramPhoneNumberResponse::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code)
  return _s;
}
inline const std::string& WechatMiniProgramPhoneNumberResponse::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void WechatMiniProgramPhoneNumberResponse::_internal_set_country_code(const std::string& value) {
  ;


  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberResponse::_internal_mutable_country_code() {
  ;
  return _impl_.country_code_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatMiniProgramPhoneNumberResponse::release_country_code() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code)
  return _impl_.country_code_.Release();
}
inline void WechatMiniProgramPhoneNumberResponse::set_allocated_country_code(std::string* value) {
  _impl_.country_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_code_.IsDefault()) {
          _impl_.country_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code)
}

// uint64 water_mark = 4;
inline void WechatMiniProgramPhoneNumberResponse::clear_water_mark() {
  _impl_.water_mark_ = ::uint64_t{0u};
}
inline ::uint64_t WechatMiniProgramPhoneNumberResponse::water_mark() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.water_mark)
  return _internal_water_mark();
}
inline void WechatMiniProgramPhoneNumberResponse::set_water_mark(::uint64_t value) {
  _internal_set_water_mark(value);
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.water_mark)
}
inline ::uint64_t WechatMiniProgramPhoneNumberResponse::_internal_water_mark() const {
  return _impl_.water_mark_;
}
inline void WechatMiniProgramPhoneNumberResponse::_internal_set_water_mark(::uint64_t value) {
  ;
  _impl_.water_mark_ = value;
}

// -------------------------------------------------------------------

// WechatOauth2QrConnectRequest

// string app_id = 1;
inline void WechatOauth2QrConnectRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatOauth2QrConnectRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2QrConnectRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2QrConnectRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2QrConnectRequest.app_id)
}
inline std::string* WechatOauth2QrConnectRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2QrConnectRequest.app_id)
  return _s;
}
inline const std::string& WechatOauth2QrConnectRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatOauth2QrConnectRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2QrConnectRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatOauth2QrConnectRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2QrConnectRequest.app_id)
}

// string redirect_uri = 2;
inline void WechatOauth2QrConnectRequest::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
}
inline const std::string& WechatOauth2QrConnectRequest::redirect_uri() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri)
  return _internal_redirect_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2QrConnectRequest::set_redirect_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.redirect_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri)
}
inline std::string* WechatOauth2QrConnectRequest::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri)
  return _s;
}
inline const std::string& WechatOauth2QrConnectRequest::_internal_redirect_uri() const {
  return _impl_.redirect_uri_.Get();
}
inline void WechatOauth2QrConnectRequest::_internal_set_redirect_uri(const std::string& value) {
  ;


  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectRequest::_internal_mutable_redirect_uri() {
  ;
  return _impl_.redirect_uri_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectRequest::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri)
  return _impl_.redirect_uri_.Release();
}
inline void WechatOauth2QrConnectRequest::set_allocated_redirect_uri(std::string* value) {
  _impl_.redirect_uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.redirect_uri_.IsDefault()) {
          _impl_.redirect_uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri)
}

// string state = 3;
inline void WechatOauth2QrConnectRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& WechatOauth2QrConnectRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2QrConnectRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2QrConnectRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2QrConnectRequest.state)
}
inline std::string* WechatOauth2QrConnectRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2QrConnectRequest.state)
  return _s;
}
inline const std::string& WechatOauth2QrConnectRequest::_internal_state() const {
  return _impl_.state_.Get();
}
inline void WechatOauth2QrConnectRequest::_internal_set_state(const std::string& value) {
  ;


  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectRequest::_internal_mutable_state() {
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectRequest::release_state() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2QrConnectRequest.state)
  return _impl_.state_.Release();
}
inline void WechatOauth2QrConnectRequest::set_allocated_state(std::string* value) {
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2QrConnectRequest.state)
}

// .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
inline void WechatOauth2QrConnectRequest::clear_language() {
  _impl_.language_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::language() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2QrConnectRequest.language)
  return _internal_language();
}
inline void WechatOauth2QrConnectRequest::set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
   _internal_set_language(value);
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2QrConnectRequest.language)
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::_internal_language() const {
  return static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(_impl_.language_);
}
inline void WechatOauth2QrConnectRequest::_internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  ;
  _impl_.language_ = value;
}

// -------------------------------------------------------------------

// WechatOauth2QrConnectResponse

// string url = 1;
inline void WechatOauth2QrConnectResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& WechatOauth2QrConnectResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2QrConnectResponse.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2QrConnectResponse::set_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2QrConnectResponse.url)
}
inline std::string* WechatOauth2QrConnectResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2QrConnectResponse.url)
  return _s;
}
inline const std::string& WechatOauth2QrConnectResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void WechatOauth2QrConnectResponse::_internal_set_url(const std::string& value) {
  ;


  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectResponse::_internal_mutable_url() {
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2QrConnectResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2QrConnectResponse.url)
  return _impl_.url_.Release();
}
inline void WechatOauth2QrConnectResponse::set_allocated_url(std::string* value) {
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2QrConnectResponse.url)
}

// -------------------------------------------------------------------

// WechatOauth2LoginResponse

// string unionid = 1;
inline void WechatOauth2LoginResponse::clear_unionid() {
  _impl_.unionid_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginResponse::unionid() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.unionid)
  return _internal_unionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_unionid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unionid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.unionid)
}
inline std::string* WechatOauth2LoginResponse::mutable_unionid() {
  std::string* _s = _internal_mutable_unionid();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.unionid)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_unionid() const {
  return _impl_.unionid_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_unionid(const std::string& value) {
  ;


  _impl_.unionid_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_unionid() {
  ;
  return _impl_.unionid_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_unionid() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.unionid)
  return _impl_.unionid_.Release();
}
inline void WechatOauth2LoginResponse::set_allocated_unionid(std::string* value) {
  _impl_.unionid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unionid_.IsDefault()) {
          _impl_.unionid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.unionid)
}

// string openid = 2;
inline void WechatOauth2LoginResponse::clear_openid() {
  _impl_.openid_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginResponse::openid() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.openid)
  return _internal_openid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_openid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.openid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.openid)
}
inline std::string* WechatOauth2LoginResponse::mutable_openid() {
  std::string* _s = _internal_mutable_openid();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.openid)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_openid() const {
  return _impl_.openid_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_openid(const std::string& value) {
  ;


  _impl_.openid_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_openid() {
  ;
  return _impl_.openid_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_openid() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.openid)
  return _impl_.openid_.Release();
}
inline void WechatOauth2LoginResponse::set_allocated_openid(std::string* value) {
  _impl_.openid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.openid_.IsDefault()) {
          _impl_.openid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.openid)
}

// string nickname = 11;
inline void WechatOauth2LoginResponse::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginResponse::nickname() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.nickname)
}
inline std::string* WechatOauth2LoginResponse::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.nickname)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_nickname(const std::string& value) {
  ;


  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_nickname() {
  ;
  return _impl_.nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.nickname)
  return _impl_.nickname_.Release();
}
inline void WechatOauth2LoginResponse::set_allocated_nickname(std::string* value) {
  _impl_.nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nickname_.IsDefault()) {
          _impl_.nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.nickname)
}

// .palm.orchid.v1.WechatOauth2LoginResponse.Sex sex = 12;
inline void WechatOauth2LoginResponse::clear_sex() {
  _impl_.sex_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse::sex() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.sex)
  return _internal_sex();
}
inline void WechatOauth2LoginResponse::set_sex(::palm::orchid::v1::WechatOauth2LoginResponse_Sex value) {
   _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.sex)
}
inline ::palm::orchid::v1::WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse::_internal_sex() const {
  return static_cast<::palm::orchid::v1::WechatOauth2LoginResponse_Sex>(_impl_.sex_);
}
inline void WechatOauth2LoginResponse::_internal_set_sex(::palm::orchid::v1::WechatOauth2LoginResponse_Sex value) {
  ;
  _impl_.sex_ = value;
}

// string province = 13;
inline void WechatOauth2LoginResponse::clear_province() {
  _impl_.province_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginResponse::province() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.province)
  return _internal_province();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_province(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.province_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.province)
}
inline std::string* WechatOauth2LoginResponse::mutable_province() {
  std::string* _s = _internal_mutable_province();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.province)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_province() const {
  return _impl_.province_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_province(const std::string& value) {
  ;


  _impl_.province_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_province() {
  ;
  return _impl_.province_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_province() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.province)
  return _impl_.province_.Release();
}
inline void WechatOauth2LoginResponse::set_allocated_province(std::string* value) {
  _impl_.province_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.province_.IsDefault()) {
          _impl_.province_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.province)
}

// string city = 14;
inline void WechatOauth2LoginResponse::clear_city() {
  _impl_.city_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginResponse::city() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_city(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.city)
}
inline std::string* WechatOauth2LoginResponse::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.city)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_city() const {
  return _impl_.city_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_city(const std::string& value) {
  ;


  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_city() {
  ;
  return _impl_.city_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_city() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.city)
  return _impl_.city_.Release();
}
inline void WechatOauth2LoginResponse::set_allocated_city(std::string* value) {
  _impl_.city_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.city_.IsDefault()) {
          _impl_.city_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.city)
}

// string country = 15;
inline void WechatOauth2LoginResponse::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginResponse::country() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_country(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.country)
}
inline std::string* WechatOauth2LoginResponse::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.country)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_country() const {
  return _impl_.country_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_country(const std::string& value) {
  ;


  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_country() {
  ;
  return _impl_.country_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_country() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.country)
  return _impl_.country_.Release();
}
inline void WechatOauth2LoginResponse::set_allocated_country(std::string* value) {
  _impl_.country_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.country_.IsDefault()) {
          _impl_.country_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.country)
}

// optional string headimgurl = 16;
inline bool WechatOauth2LoginResponse::has_headimgurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WechatOauth2LoginResponse::clear_headimgurl() {
  _impl_.headimgurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WechatOauth2LoginResponse::headimgurl() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.headimgurl)
  return _internal_headimgurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginResponse::set_headimgurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.headimgurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.headimgurl)
}
inline std::string* WechatOauth2LoginResponse::mutable_headimgurl() {
  std::string* _s = _internal_mutable_headimgurl();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.headimgurl)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::_internal_headimgurl() const {
  return _impl_.headimgurl_.Get();
}
inline void WechatOauth2LoginResponse::_internal_set_headimgurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.headimgurl_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::_internal_mutable_headimgurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.headimgurl_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginResponse::release_headimgurl() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginResponse.headimgurl)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.headimgurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.headimgurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WechatOauth2LoginResponse::set_allocated_headimgurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.headimgurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.headimgurl_.IsDefault()) {
          _impl_.headimgurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginResponse.headimgurl)
}

// repeated string privilege = 17;
inline int WechatOauth2LoginResponse::_internal_privilege_size() const {
  return _impl_.privilege_.size();
}
inline int WechatOauth2LoginResponse::privilege_size() const {
  return _internal_privilege_size();
}
inline void WechatOauth2LoginResponse::clear_privilege() {
  _internal_mutable_privilege()->Clear();
}
inline std::string* WechatOauth2LoginResponse::add_privilege() {
  std::string* _s = _internal_add_privilege();
  // @@protoc_insertion_point(field_add_mutable:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
  return _s;
}
inline const std::string& WechatOauth2LoginResponse::privilege(int index) const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
  return _internal_privilege(index);
}
inline std::string* WechatOauth2LoginResponse::mutable_privilege(int index) {
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
  return _internal_mutable_privilege()->Mutable(index);
}
inline void WechatOauth2LoginResponse::set_privilege(int index, const std::string& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::set_privilege(int index, std::string&& value) {
  _internal_mutable_privilege()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::set_privilege(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::set_privilege(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_privilege()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::set_privilege(int index, absl::string_view value) {
  _internal_mutable_privilege()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::add_privilege(const std::string& value) {
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::add_privilege(std::string&& value) {
  _internal_mutable_privilege()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::add_privilege(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_privilege()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::add_privilege(const char* value, std::size_t size) {
  _internal_mutable_privilege()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline void WechatOauth2LoginResponse::add_privilege(absl::string_view value) {
  _internal_mutable_privilege()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WechatOauth2LoginResponse::privilege() const {
  // @@protoc_insertion_point(field_list:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
  return _internal_privilege();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* WechatOauth2LoginResponse::mutable_privilege() {
  // @@protoc_insertion_point(field_mutable_list:palm.orchid.v1.WechatOauth2LoginResponse.privilege)
  return _internal_mutable_privilege();
}
inline const std::string& WechatOauth2LoginResponse::_internal_privilege(int index) const {
  return _internal_privilege().Get(index);
}
inline std::string* WechatOauth2LoginResponse::_internal_add_privilege() {
  return _internal_mutable_privilege()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WechatOauth2LoginResponse::_internal_privilege() const {
  return _impl_.privilege_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WechatOauth2LoginResponse::_internal_mutable_privilege() {
  return &_impl_.privilege_;
}

// -------------------------------------------------------------------

// WechatOauth2LoginRequest

// string app_id = 1;
inline void WechatOauth2LoginRequest::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginRequest::app_id() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginRequest.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginRequest::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginRequest.app_id)
}
inline std::string* WechatOauth2LoginRequest::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginRequest.app_id)
  return _s;
}
inline const std::string& WechatOauth2LoginRequest::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void WechatOauth2LoginRequest::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginRequest::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginRequest.app_id)
  return _impl_.app_id_.Release();
}
inline void WechatOauth2LoginRequest::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginRequest.app_id)
}

// string code = 2;
inline void WechatOauth2LoginRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginRequest.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginRequest::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginRequest.code)
}
inline std::string* WechatOauth2LoginRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginRequest.code)
  return _s;
}
inline const std::string& WechatOauth2LoginRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void WechatOauth2LoginRequest::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginRequest::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginRequest.code)
  return _impl_.code_.Release();
}
inline void WechatOauth2LoginRequest::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginRequest.code)
}

// string state = 3;
inline void WechatOauth2LoginRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& WechatOauth2LoginRequest::state() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatOauth2LoginRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginRequest.state)
}
inline std::string* WechatOauth2LoginRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:palm.orchid.v1.WechatOauth2LoginRequest.state)
  return _s;
}
inline const std::string& WechatOauth2LoginRequest::_internal_state() const {
  return _impl_.state_.Get();
}
inline void WechatOauth2LoginRequest::_internal_set_state(const std::string& value) {
  ;


  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginRequest::_internal_mutable_state() {
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* WechatOauth2LoginRequest::release_state() {
  // @@protoc_insertion_point(field_release:palm.orchid.v1.WechatOauth2LoginRequest.state)
  return _impl_.state_.Release();
}
inline void WechatOauth2LoginRequest::set_allocated_state(std::string* value) {
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.orchid.v1.WechatOauth2LoginRequest.state)
}

// .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
inline void WechatOauth2LoginRequest::clear_language() {
  _impl_.language_ = 0;
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2LoginRequest::language() const {
  // @@protoc_insertion_point(field_get:palm.orchid.v1.WechatOauth2LoginRequest.language)
  return _internal_language();
}
inline void WechatOauth2LoginRequest::set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
   _internal_set_language(value);
  // @@protoc_insertion_point(field_set:palm.orchid.v1.WechatOauth2LoginRequest.language)
}
inline ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language WechatOauth2LoginRequest::_internal_language() const {
  return static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(_impl_.language_);
}
inline void WechatOauth2LoginRequest::_internal_set_language(::palm::orchid::v1::WechatOauth2QrConnectRequest_Language value) {
  ;
  _impl_.language_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace orchid
}  // namespace palm


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>() {
  return ::palm::orchid::v1::WechatOauth2QrConnectRequest_Language_descriptor();
}
template <>
struct is_proto_enum<::palm::orchid::v1::WechatOauth2LoginResponse_Sex> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::orchid::v1::WechatOauth2LoginResponse_Sex>() {
  return ::palm::orchid::v1::WechatOauth2LoginResponse_Sex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_orchid_2eproto_2epb_2eh
