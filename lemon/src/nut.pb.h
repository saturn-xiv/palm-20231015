// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto;
namespace palm {
namespace nut {
namespace v1 {
class EmailTask;
struct EmailTaskDefaultTypeInternal;
extern EmailTaskDefaultTypeInternal _EmailTask_default_instance_;
class EmailTask_Address;
struct EmailTask_AddressDefaultTypeInternal;
extern EmailTask_AddressDefaultTypeInternal _EmailTask_Address_default_instance_;
class EmailTask_Attachment;
struct EmailTask_AttachmentDefaultTypeInternal;
extern EmailTask_AttachmentDefaultTypeInternal _EmailTask_Attachment_default_instance_;
class EmailTask_Body;
struct EmailTask_BodyDefaultTypeInternal;
extern EmailTask_BodyDefaultTypeInternal _EmailTask_Body_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::nut::v1::EmailTask* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask>(Arena*);
template<> ::palm::nut::v1::EmailTask_Address* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask_Address>(Arena*);
template<> ::palm::nut::v1::EmailTask_Attachment* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask_Attachment>(Arena*);
template<> ::palm::nut::v1::EmailTask_Body* Arena::CreateMaybeMessage<::palm::nut::v1::EmailTask_Body>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace nut {
namespace v1 {

// ===================================================================

class EmailTask_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask.Address) */ {
 public:
  inline EmailTask_Address() : EmailTask_Address(nullptr) {}
  ~EmailTask_Address() override;
  explicit PROTOBUF_CONSTEXPR EmailTask_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Address(const EmailTask_Address& from);
  EmailTask_Address(EmailTask_Address&& from) noexcept
    : EmailTask_Address() {
    *this = ::std::move(from);
  }

  inline EmailTask_Address& operator=(const EmailTask_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Address& operator=(EmailTask_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Address* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Address*>(
               &_EmailTask_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmailTask_Address& a, EmailTask_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Address& from) {
    EmailTask_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.EmailTask.Address";
  }
  protected:
  explicit EmailTask_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class EmailTask_Body final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask.Body) */ {
 public:
  inline EmailTask_Body() : EmailTask_Body(nullptr) {}
  ~EmailTask_Body() override;
  explicit PROTOBUF_CONSTEXPR EmailTask_Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Body(const EmailTask_Body& from);
  EmailTask_Body(EmailTask_Body&& from) noexcept
    : EmailTask_Body() {
    *this = ::std::move(from);
  }

  inline EmailTask_Body& operator=(const EmailTask_Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Body& operator=(EmailTask_Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Body* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Body*>(
               &_EmailTask_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmailTask_Body& a, EmailTask_Body& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Body>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Body& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Body& from) {
    EmailTask_Body::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Body* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.EmailTask.Body";
  }
  protected:
  explicit EmailTask_Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kHtmlFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bool html = 2;
  void clear_html();
  bool html() const;
  void set_html(bool value);
  private:
  bool _internal_html() const;
  void _internal_set_html(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    bool html_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class EmailTask_Attachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask.Attachment) */ {
 public:
  inline EmailTask_Attachment() : EmailTask_Attachment(nullptr) {}
  ~EmailTask_Attachment() override;
  explicit PROTOBUF_CONSTEXPR EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask_Attachment(const EmailTask_Attachment& from);
  EmailTask_Attachment(EmailTask_Attachment&& from) noexcept
    : EmailTask_Attachment() {
    *this = ::std::move(from);
  }

  inline EmailTask_Attachment& operator=(const EmailTask_Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask_Attachment& operator=(EmailTask_Attachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask_Attachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask_Attachment* internal_default_instance() {
    return reinterpret_cast<const EmailTask_Attachment*>(
               &_EmailTask_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmailTask_Attachment& a, EmailTask_Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask_Attachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask_Attachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask_Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask_Attachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask_Attachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask_Attachment& from) {
    EmailTask_Attachment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask_Attachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.EmailTask.Attachment";
  }
  protected:
  explicit EmailTask_Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask.Attachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class EmailTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.EmailTask) */ {
 public:
  inline EmailTask() : EmailTask(nullptr) {}
  ~EmailTask() override;
  explicit PROTOBUF_CONSTEXPR EmailTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailTask(const EmailTask& from);
  EmailTask(EmailTask&& from) noexcept
    : EmailTask() {
    *this = ::std::move(from);
  }

  inline EmailTask& operator=(const EmailTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailTask& operator=(EmailTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailTask* internal_default_instance() {
    return reinterpret_cast<const EmailTask*>(
               &_EmailTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmailTask& a, EmailTask& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailTask& from) {
    EmailTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.EmailTask";
  }
  protected:
  explicit EmailTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EmailTask_Address Address;
  typedef EmailTask_Body Body;
  typedef EmailTask_Attachment Attachment;

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 2,
    kBccFieldNumber = 3,
    kAttachmentsFieldNumber = 13,
    kSubjectFieldNumber = 11,
    kToFieldNumber = 1,
    kBodyFieldNumber = 12,
  };
  // repeated .palm.nut.v1.EmailTask.Address cc = 2;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  ::palm::nut::v1::EmailTask_Address* mutable_cc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
      mutable_cc();
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_cc(int index) const;
  ::palm::nut::v1::EmailTask_Address* _internal_add_cc();
  public:
  const ::palm::nut::v1::EmailTask_Address& cc(int index) const;
  ::palm::nut::v1::EmailTask_Address* add_cc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
      cc() const;

  // repeated .palm.nut.v1.EmailTask.Address bcc = 3;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  ::palm::nut::v1::EmailTask_Address* mutable_bcc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
      mutable_bcc();
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_bcc(int index) const;
  ::palm::nut::v1::EmailTask_Address* _internal_add_bcc();
  public:
  const ::palm::nut::v1::EmailTask_Address& bcc(int index) const;
  ::palm::nut::v1::EmailTask_Address* add_bcc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
      bcc() const;

  // repeated .palm.nut.v1.EmailTask.Attachment attachments = 13;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::palm::nut::v1::EmailTask_Attachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >*
      mutable_attachments();
  private:
  const ::palm::nut::v1::EmailTask_Attachment& _internal_attachments(int index) const;
  ::palm::nut::v1::EmailTask_Attachment* _internal_add_attachments();
  public:
  const ::palm::nut::v1::EmailTask_Attachment& attachments(int index) const;
  ::palm::nut::v1::EmailTask_Attachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >&
      attachments() const;

  // string subject = 11;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .palm.nut.v1.EmailTask.Address to = 1;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::palm::nut::v1::EmailTask_Address& to() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask_Address* release_to();
  ::palm::nut::v1::EmailTask_Address* mutable_to();
  void set_allocated_to(::palm::nut::v1::EmailTask_Address* to);
  private:
  const ::palm::nut::v1::EmailTask_Address& _internal_to() const;
  ::palm::nut::v1::EmailTask_Address* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::palm::nut::v1::EmailTask_Address* to);
  ::palm::nut::v1::EmailTask_Address* unsafe_arena_release_to();

  // .palm.nut.v1.EmailTask.Body body = 12;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::palm::nut::v1::EmailTask_Body& body() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::EmailTask_Body* release_body();
  ::palm::nut::v1::EmailTask_Body* mutable_body();
  void set_allocated_body(::palm::nut::v1::EmailTask_Body* body);
  private:
  const ::palm::nut::v1::EmailTask_Body& _internal_body() const;
  ::palm::nut::v1::EmailTask_Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::palm::nut::v1::EmailTask_Body* body);
  ::palm::nut::v1::EmailTask_Body* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:palm.nut.v1.EmailTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address > cc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address > bcc_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment > attachments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
    ::palm::nut::v1::EmailTask_Address* to_;
    ::palm::nut::v1::EmailTask_Body* body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmailTask_Address

// string name = 1;
inline void EmailTask_Address::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailTask_Address::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Address.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Address::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Address.name)
}
inline std::string* EmailTask_Address::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Address.name)
  return _s;
}
inline const std::string& EmailTask_Address::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EmailTask_Address::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Address::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Address::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Address.name)
  return _impl_.name_.Release();
}
inline void EmailTask_Address::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Address.name)
}

// string email = 2;
inline void EmailTask_Address::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EmailTask_Address::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Address.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Address::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Address.email)
}
inline std::string* EmailTask_Address::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Address.email)
  return _s;
}
inline const std::string& EmailTask_Address::_internal_email() const {
  return _impl_.email_.Get();
}
inline void EmailTask_Address::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Address::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Address::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Address.email)
  return _impl_.email_.Release();
}
inline void EmailTask_Address::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Address.email)
}

// -------------------------------------------------------------------

// EmailTask_Body

// string text = 1;
inline void EmailTask_Body::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& EmailTask_Body::text() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Body.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Body::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Body.text)
}
inline std::string* EmailTask_Body::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Body.text)
  return _s;
}
inline const std::string& EmailTask_Body::_internal_text() const {
  return _impl_.text_.Get();
}
inline void EmailTask_Body::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Body::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Body::release_text() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Body.text)
  return _impl_.text_.Release();
}
inline void EmailTask_Body::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Body.text)
}

// bool html = 2;
inline void EmailTask_Body::clear_html() {
  _impl_.html_ = false;
}
inline bool EmailTask_Body::_internal_html() const {
  return _impl_.html_;
}
inline bool EmailTask_Body::html() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Body.html)
  return _internal_html();
}
inline void EmailTask_Body::_internal_set_html(bool value) {
  
  _impl_.html_ = value;
}
inline void EmailTask_Body::set_html(bool value) {
  _internal_set_html(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Body.html)
}

// -------------------------------------------------------------------

// EmailTask_Attachment

// string name = 1;
inline void EmailTask_Attachment::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Attachment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Attachment::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Attachment.name)
}
inline std::string* EmailTask_Attachment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Attachment.name)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EmailTask_Attachment::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Attachment.name)
  return _impl_.name_.Release();
}
inline void EmailTask_Attachment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Attachment.name)
}

// bytes payload = 2;
inline void EmailTask_Attachment::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& EmailTask_Attachment::payload() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.Attachment.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask_Attachment::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.Attachment.payload)
}
inline std::string* EmailTask_Attachment::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.Attachment.payload)
  return _s;
}
inline const std::string& EmailTask_Attachment::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void EmailTask_Attachment::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask_Attachment::release_payload() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.Attachment.payload)
  return _impl_.payload_.Release();
}
inline void EmailTask_Attachment::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.Attachment.payload)
}

// -------------------------------------------------------------------

// EmailTask

// .palm.nut.v1.EmailTask.Address to = 1;
inline bool EmailTask::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool EmailTask::has_to() const {
  return _internal_has_to();
}
inline void EmailTask::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::_internal_to() const {
  const ::palm::nut::v1::EmailTask_Address* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::EmailTask_Address&>(
      ::palm::nut::v1::_EmailTask_Address_default_instance_);
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::to() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.to)
  return _internal_to();
}
inline void EmailTask::unsafe_arena_set_allocated_to(
    ::palm::nut::v1::EmailTask_Address* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.EmailTask.to)
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::release_to() {
  
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.to)
  
  ::palm::nut::v1::EmailTask_Address* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::EmailTask_Address>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::mutable_to() {
  ::palm::nut::v1::EmailTask_Address* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.to)
  return _msg;
}
inline void EmailTask::set_allocated_to(::palm::nut::v1::EmailTask_Address* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.to)
}

// repeated .palm.nut.v1.EmailTask.Address cc = 2;
inline int EmailTask::_internal_cc_size() const {
  return _impl_.cc_.size();
}
inline int EmailTask::cc_size() const {
  return _internal_cc_size();
}
inline void EmailTask::clear_cc() {
  _impl_.cc_.Clear();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.cc)
  return _impl_.cc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
EmailTask::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.EmailTask.cc)
  return &_impl_.cc_;
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::_internal_cc(int index) const {
  return _impl_.cc_.Get(index);
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.cc)
  return _internal_cc(index);
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::_internal_add_cc() {
  return _impl_.cc_.Add();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::add_cc() {
  ::palm::nut::v1::EmailTask_Address* _add = _internal_add_cc();
  // @@protoc_insertion_point(field_add:palm.nut.v1.EmailTask.cc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
EmailTask::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.EmailTask.cc)
  return _impl_.cc_;
}

// repeated .palm.nut.v1.EmailTask.Address bcc = 3;
inline int EmailTask::_internal_bcc_size() const {
  return _impl_.bcc_.size();
}
inline int EmailTask::bcc_size() const {
  return _internal_bcc_size();
}
inline void EmailTask::clear_bcc() {
  _impl_.bcc_.Clear();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.bcc)
  return _impl_.bcc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >*
EmailTask::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.EmailTask.bcc)
  return &_impl_.bcc_;
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::_internal_bcc(int index) const {
  return _impl_.bcc_.Get(index);
}
inline const ::palm::nut::v1::EmailTask_Address& EmailTask::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.bcc)
  return _internal_bcc(index);
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::_internal_add_bcc() {
  return _impl_.bcc_.Add();
}
inline ::palm::nut::v1::EmailTask_Address* EmailTask::add_bcc() {
  ::palm::nut::v1::EmailTask_Address* _add = _internal_add_bcc();
  // @@protoc_insertion_point(field_add:palm.nut.v1.EmailTask.bcc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Address >&
EmailTask::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.EmailTask.bcc)
  return _impl_.bcc_;
}

// string subject = 11;
inline void EmailTask::clear_subject() {
  _impl_.subject_.ClearToEmpty();
}
inline const std::string& EmailTask::subject() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailTask::set_subject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subject_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.EmailTask.subject)
}
inline std::string* EmailTask::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.subject)
  return _s;
}
inline const std::string& EmailTask::_internal_subject() const {
  return _impl_.subject_.Get();
}
inline void EmailTask::_internal_set_subject(const std::string& value) {
  
  _impl_.subject_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailTask::_internal_mutable_subject() {
  
  return _impl_.subject_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailTask::release_subject() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.subject)
  return _impl_.subject_.Release();
}
inline void EmailTask::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  _impl_.subject_.SetAllocated(subject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subject_.IsDefault()) {
    _impl_.subject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.subject)
}

// .palm.nut.v1.EmailTask.Body body = 12;
inline bool EmailTask::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool EmailTask::has_body() const {
  return _internal_has_body();
}
inline void EmailTask::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::palm::nut::v1::EmailTask_Body& EmailTask::_internal_body() const {
  const ::palm::nut::v1::EmailTask_Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::EmailTask_Body&>(
      ::palm::nut::v1::_EmailTask_Body_default_instance_);
}
inline const ::palm::nut::v1::EmailTask_Body& EmailTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.body)
  return _internal_body();
}
inline void EmailTask::unsafe_arena_set_allocated_body(
    ::palm::nut::v1::EmailTask_Body* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.EmailTask.body)
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::release_body() {
  
  ::palm::nut::v1::EmailTask_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.EmailTask.body)
  
  ::palm::nut::v1::EmailTask_Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::EmailTask_Body>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::palm::nut::v1::EmailTask_Body* EmailTask::mutable_body() {
  ::palm::nut::v1::EmailTask_Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.body)
  return _msg;
}
inline void EmailTask::set_allocated_body(::palm::nut::v1::EmailTask_Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.EmailTask.body)
}

// repeated .palm.nut.v1.EmailTask.Attachment attachments = 13;
inline int EmailTask::_internal_attachments_size() const {
  return _impl_.attachments_.size();
}
inline int EmailTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void EmailTask::clear_attachments() {
  _impl_.attachments_.Clear();
}
inline ::palm::nut::v1::EmailTask_Attachment* EmailTask::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.EmailTask.attachments)
  return _impl_.attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >*
EmailTask::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.EmailTask.attachments)
  return &_impl_.attachments_;
}
inline const ::palm::nut::v1::EmailTask_Attachment& EmailTask::_internal_attachments(int index) const {
  return _impl_.attachments_.Get(index);
}
inline const ::palm::nut::v1::EmailTask_Attachment& EmailTask::attachments(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.EmailTask.attachments)
  return _internal_attachments(index);
}
inline ::palm::nut::v1::EmailTask_Attachment* EmailTask::_internal_add_attachments() {
  return _impl_.attachments_.Add();
}
inline ::palm::nut::v1::EmailTask_Attachment* EmailTask::add_attachments() {
  ::palm::nut::v1::EmailTask_Attachment* _add = _internal_add_attachments();
  // @@protoc_insertion_point(field_add:palm.nut.v1.EmailTask.attachments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::EmailTask_Attachment >&
EmailTask::attachments() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.EmailTask.attachments)
  return _impl_.attachments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace nut
}  // namespace palm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
