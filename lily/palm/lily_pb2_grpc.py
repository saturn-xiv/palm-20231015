# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import lily_pb2 as lily__pb2


class ExcelStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Load = channel.unary_unary(
                '/palm.lily.v1.Excel/Load',
                request_serializer=lily__pb2.ExcelLoadRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Query = channel.unary_unary(
                '/palm.lily.v1.Excel/Query',
                request_serializer=lily__pb2.ExcelQueryRequest.SerializeToString,
                response_deserializer=lily__pb2.ExcelQueryResponse.FromString,
                )


class ExcelServicer(object):
    """----------------------------------------------------------------------------

    """

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExcelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=lily__pb2.ExcelLoadRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=lily__pb2.ExcelQueryRequest.FromString,
                    response_serializer=lily__pb2.ExcelQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.Excel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Excel(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Excel/Load',
            lily__pb2.ExcelLoadRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Excel/Query',
            lily__pb2.ExcelQueryRequest.SerializeToString,
            lily__pb2.ExcelQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TexStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ToPdf = channel.unary_unary(
                '/palm.lily.v1.Tex/ToPdf',
                request_serializer=lily__pb2.TexToRequest.SerializeToString,
                response_deserializer=lily__pb2.HttpResponse.FromString,
                )
        self.ToWords = channel.unary_unary(
                '/palm.lily.v1.Tex/ToWords',
                request_serializer=lily__pb2.TexToRequest.SerializeToString,
                response_deserializer=lily__pb2.HttpResponse.FromString,
                )


class TexServicer(object):
    """----------------------------------------------------------------------------

    """

    def ToPdf(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToWords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TexServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ToPdf': grpc.unary_unary_rpc_method_handler(
                    servicer.ToPdf,
                    request_deserializer=lily__pb2.TexToRequest.FromString,
                    response_serializer=lily__pb2.HttpResponse.SerializeToString,
            ),
            'ToWords': grpc.unary_unary_rpc_method_handler(
                    servicer.ToWords,
                    request_deserializer=lily__pb2.TexToRequest.FromString,
                    response_serializer=lily__pb2.HttpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.Tex', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tex(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def ToPdf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Tex/ToPdf',
            lily__pb2.TexToRequest.SerializeToString,
            lily__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ToWords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Tex/ToWords',
            lily__pb2.TexToRequest.SerializeToString,
            lily__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EpubStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Build = channel.unary_unary(
                '/palm.lily.v1.Epub/Build',
                request_serializer=lily__pb2.EpubBuildRequest.SerializeToString,
                response_deserializer=lily__pb2.HttpResponse.FromString,
                )


class EpubServicer(object):
    """----------------------------------------------------------------------------

    """

    def Build(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EpubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Build': grpc.unary_unary_rpc_method_handler(
                    servicer.Build,
                    request_deserializer=lily__pb2.EpubBuildRequest.FromString,
                    response_serializer=lily__pb2.HttpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.Epub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Epub(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Build(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Epub/Build',
            lily__pb2.EpubBuildRequest.SerializeToString,
            lily__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
