// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#include "nut.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace palm {
namespace nut {
namespace v1 {
constexpr LocaleSetRequest::LocaleSetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocaleSetRequestDefaultTypeInternal {
  constexpr LocaleSetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleSetRequestDefaultTypeInternal() {}
  union {
    LocaleSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
constexpr LocaleIndexRequest::LocaleIndexRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocaleIndexRequestDefaultTypeInternal {
  constexpr LocaleIndexRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleIndexRequestDefaultTypeInternal() {}
  union {
    LocaleIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleIndexRequestDefaultTypeInternal _LocaleIndexRequest_default_instance_;
constexpr LocaleIndexResponse_Item::LocaleIndexResponse_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lang_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(nullptr)
  , id_(int64_t{0}){}
struct LocaleIndexResponse_ItemDefaultTypeInternal {
  constexpr LocaleIndexResponse_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LocaleIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
constexpr LocaleIndexResponse::LocaleIndexResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct LocaleIndexResponseDefaultTypeInternal {
  constexpr LocaleIndexResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleIndexResponseDefaultTypeInternal() {}
  union {
    LocaleIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
constexpr StmpProfile::StmpProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cc_()
  , bcc_()
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u){}
struct StmpProfileDefaultTypeInternal {
  constexpr StmpProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StmpProfileDefaultTypeInternal() {}
  union {
    StmpProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StmpProfileDefaultTypeInternal _StmpProfile_default_instance_;
constexpr StmpTask_AttachmentsEntry_DoNotUse::StmpTask_AttachmentsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StmpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal {
  constexpr StmpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StmpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StmpTask_AttachmentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StmpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal _StmpTask_AttachmentsEntry_DoNotUse_default_instance_;
constexpr StmpTask::StmpTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachments_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , to_()
  , cc_()
  , bcc_()
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(0)
{}
struct StmpTaskDefaultTypeInternal {
  constexpr StmpTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StmpTaskDefaultTypeInternal() {}
  union {
    StmpTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StmpTaskDefaultTypeInternal _StmpTask_default_instance_;
constexpr TwilioProfile::TwilioProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_sid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TwilioProfileDefaultTypeInternal {
  constexpr TwilioProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TwilioProfileDefaultTypeInternal() {}
  union {
    TwilioProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TwilioProfileDefaultTypeInternal _TwilioProfile_default_instance_;
constexpr TwilioTask::TwilioTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_()
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , callback_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TwilioTaskDefaultTypeInternal {
  constexpr TwilioTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TwilioTaskDefaultTypeInternal() {}
  union {
    TwilioTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TwilioTaskDefaultTypeInternal _TwilioTask_default_instance_;
constexpr GoogleProfile::GoogleProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : siteverifyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GoogleProfileDefaultTypeInternal {
  constexpr GoogleProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GoogleProfileDefaultTypeInternal() {}
  union {
    GoogleProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
constexpr BaiduProfile::BaiduProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : siteverifyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , siteverifycontent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BaiduProfileDefaultTypeInternal {
  constexpr BaiduProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaiduProfileDefaultTypeInternal() {}
  union {
    BaiduProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nut_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nut_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nut_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nut_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleSetRequest, code_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleSetRequest, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleSetRequest, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexRequest, lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse_Item, id_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse_Item, code_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse_Item, lang_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse_Item, message_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse_Item, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::LocaleIndexResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, host_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, port_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, user_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, password_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, cc_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpProfile, bcc_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, subject_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, body_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, attachments_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, to_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, cc_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::StmpTask, bcc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioProfile, account_sid_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioProfile, auto_token_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioProfile, from_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioTask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioTask, to_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioTask, body_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::TwilioTask, callback_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::GoogleProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::GoogleProfile, siteverifyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::BaiduProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::BaiduProfile, siteverifyid_),
  PROTOBUF_FIELD_OFFSET(::palm::nut::v1::BaiduProfile, siteverifycontent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::palm::nut::v1::LocaleSetRequest)},
  { 8, -1, sizeof(::palm::nut::v1::LocaleIndexRequest)},
  { 14, -1, sizeof(::palm::nut::v1::LocaleIndexResponse_Item)},
  { 24, -1, sizeof(::palm::nut::v1::LocaleIndexResponse)},
  { 30, -1, sizeof(::palm::nut::v1::StmpProfile)},
  { 41, 48, sizeof(::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse)},
  { 50, -1, sizeof(::palm::nut::v1::StmpTask)},
  { 62, -1, sizeof(::palm::nut::v1::TwilioProfile)},
  { 70, 78, sizeof(::palm::nut::v1::TwilioTask)},
  { 81, -1, sizeof(::palm::nut::v1::GoogleProfile)},
  { 87, -1, sizeof(::palm::nut::v1::BaiduProfile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_LocaleSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_LocaleIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_LocaleIndexResponse_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_LocaleIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_StmpProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_StmpTask_AttachmentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_StmpTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_TwilioProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_TwilioTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_GoogleProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palm::nut::v1::_BaiduProfile_default_instance_),
};

const char descriptor_table_protodef_nut_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnut.proto\022\013palm.nut.v1\032\033google/protobu"
  "f/empty.proto\032\037google/protobuf/timestamp"
  ".proto\"\?\n\020LocaleSetRequest\022\014\n\004code\030\001 \001(\t"
  "\022\014\n\004lang\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"\"\n\022Local"
  "eIndexRequest\022\014\n\004lang\030\001 \001(\t\"\274\001\n\023LocaleIn"
  "dexResponse\0224\n\005items\030\001 \003(\0132%.palm.nut.v1"
  ".LocaleIndexResponse.Item\032o\n\004Item\022\n\n\002id\030"
  "\001 \001(\003\022\014\n\004code\030\002 \001(\t\022\014\n\004lang\030\003 \001(\t\022\017\n\007mes"
  "sage\030\004 \001(\t\022.\n\nupdated_at\030\005 \001(\0132\032.google."
  "protobuf.Timestamp\"b\n\013StmpProfile\022\014\n\004hos"
  "t\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\014\n\004user\030\003 \001(\t\022\020\n\010p"
  "assword\030\004 \001(\t\022\n\n\002cc\030\005 \003(\t\022\013\n\003bcc\030\006 \003(\t\"\223"
  "\002\n\010StmpTask\022\017\n\007subject\030\001 \001(\t\022\014\n\004body\030\002 \001"
  "(\t\0220\n\014content_type\030\003 \001(\0162\032.palm.nut.v1.S"
  "tmpTask.Type\022;\n\013attachments\030\004 \003(\0132&.palm"
  ".nut.v1.StmpTask.AttachmentsEntry\022\n\n\002to\030"
  "\013 \003(\t\022\n\n\002cc\030\014 \003(\t\022\013\n\003bcc\030\r \003(\t\0322\n\020Attach"
  "mentsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\002"
  "8\001\" \n\004Type\022\016\n\nPLAIN_TEXT\020\000\022\010\n\004HTML\020\001\"F\n\r"
  "TwilioProfile\022\023\n\013account_sid\030\001 \001(\t\022\022\n\nau"
  "to_token\030\002 \001(\t\022\014\n\004from\030\003 \001(\t\"J\n\nTwilioTa"
  "sk\022\n\n\002to\030\001 \003(\t\022\014\n\004body\030\002 \001(\t\022\025\n\010callback"
  "\030\003 \001(\tH\000\210\001\001B\013\n\t_callback\"%\n\rGoogleProfil"
  "e\022\024\n\014siteVerifyId\030\001 \001(\t\"\?\n\014BaiduProfile\022"
  "\024\n\014siteVerifyId\030\001 \001(\t\022\031\n\021siteVerifyConte"
  "nt\030\002 \001(\t2\334\001\n\006Locale\022C\n\005Index\022\026.google.pr"
  "otobuf.Empty\032 .palm.nut.v1.LocaleIndexRe"
  "sponse\"\000\022M\n\006ByLang\022\037.palm.nut.v1.LocaleI"
  "ndexRequest\032 .palm.nut.v1.LocaleIndexRes"
  "ponse\"\000\022>\n\003Set\022\035.palm.nut.v1.LocaleSetRe"
  "quest\032\026.google.protobuf.Empty\"\0002|\n\004Stmp\022"
  "9\n\003Get\022\026.google.protobuf.Empty\032\030.palm.nu"
  "t.v1.StmpProfile\"\000\0229\n\003Set\022\030.palm.nut.v1."
  "StmpProfile\032\026.google.protobuf.Empty\"\0002\202\001"
  "\n\006Twilio\022;\n\003Get\022\026.google.protobuf.Empty\032"
  "\032.palm.nut.v1.TwilioProfile\"\000\022;\n\003Set\022\032.p"
  "alm.nut.v1.TwilioProfile\032\026.google.protob"
  "uf.Empty\"\0002\274\001\n\006Google\022;\n\003Get\022\026.google.pr"
  "otobuf.Empty\032\032.palm.nut.v1.GoogleProfile"
  "\"\000\022;\n\003Set\022\032.palm.nut.v1.GoogleProfile\032\026."
  "google.protobuf.Empty\"\000\0228\n\004Ping\022\026.google"
  ".protobuf.Empty\032\026.google.protobuf.Empty\""
  "\0002\273\001\n\005Baidu\022;\n\003Get\022\026.google.protobuf.Emp"
  "ty\032\032.palm.nut.v1.GoogleProfile\"\000\022;\n\003Set\022"
  "\032.palm.nut.v1.GoogleProfile\032\026.google.pro"
  "tobuf.Empty\"\000\0228\n\004Ping\022\026.google.protobuf."
  "Empty\032\026.google.protobuf.Empty\"\000B\002P\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nut_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nut_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto = {
  false, false, 1883, descriptor_table_protodef_nut_2eproto, "nut.proto", 
  &descriptor_table_nut_2eproto_once, descriptor_table_nut_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_nut_2eproto::offsets,
  file_level_metadata_nut_2eproto, file_level_enum_descriptors_nut_2eproto, file_level_service_descriptors_nut_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_nut_2eproto_getter() {
  return &descriptor_table_nut_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_nut_2eproto(&descriptor_table_nut_2eproto);
namespace palm {
namespace nut {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StmpTask_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nut_2eproto);
  return file_level_enum_descriptors_nut_2eproto[0];
}
bool StmpTask_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StmpTask_Type StmpTask::PLAIN_TEXT;
constexpr StmpTask_Type StmpTask::HTML;
constexpr StmpTask_Type StmpTask::Type_MIN;
constexpr StmpTask_Type StmpTask::Type_MAX;
constexpr int StmpTask::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LocaleSetRequest::_Internal {
 public:
};

LocaleSetRequest::LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.LocaleSetRequest)
}
LocaleSetRequest::LocaleSetRequest(const LocaleSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.LocaleSetRequest)
}

void LocaleSetRequest::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocaleSetRequest::~LocaleSetRequest() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.LocaleSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocaleSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocaleSetRequest::ArenaDtor(void* object) {
  LocaleSetRequest* _this = reinterpret_cast< LocaleSetRequest* >(object);
  (void)_this;
}
void LocaleSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.LocaleSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  lang_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleSetRequest.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleSetRequest.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleSetRequest.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.LocaleSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleSetRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string lang = 2;
  if (!this->lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleSetRequest.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string message = 3;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleSetRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.LocaleSetRequest)
  return target;
}

size_t LocaleSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.LocaleSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string lang = 2;
  if (!this->lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string message = 3;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocaleSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.LocaleSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LocaleSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocaleSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.LocaleSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.LocaleSetRequest)
    MergeFrom(*source);
  }
}

void LocaleSetRequest::MergeFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.LocaleSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from.lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
}

void LocaleSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.LocaleSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocaleSetRequest::CopyFrom(const LocaleSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.LocaleSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleSetRequest::IsInitialized() const {
  return true;
}

void LocaleSetRequest::InternalSwap(LocaleSetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, GetArenaForAllocation(),
      &other->lang_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleSetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[0]);
}

// ===================================================================

class LocaleIndexRequest::_Internal {
 public:
};

LocaleIndexRequest::LocaleIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.LocaleIndexRequest)
}
LocaleIndexRequest::LocaleIndexRequest(const LocaleIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.LocaleIndexRequest)
}

void LocaleIndexRequest::SharedCtor() {
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocaleIndexRequest::~LocaleIndexRequest() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.LocaleIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocaleIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocaleIndexRequest::ArenaDtor(void* object) {
  LocaleIndexRequest* _this = reinterpret_cast< LocaleIndexRequest* >(object);
  (void)_this;
}
void LocaleIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.LocaleIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lang_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleIndexRequest.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.LocaleIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleIndexRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.LocaleIndexRequest)
  return target;
}

size_t LocaleIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.LocaleIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocaleIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.LocaleIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LocaleIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocaleIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.LocaleIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.LocaleIndexRequest)
    MergeFrom(*source);
  }
}

void LocaleIndexRequest::MergeFrom(const LocaleIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.LocaleIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
}

void LocaleIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.LocaleIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocaleIndexRequest::CopyFrom(const LocaleIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.LocaleIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexRequest::IsInitialized() const {
  return true;
}

void LocaleIndexRequest::InternalSwap(LocaleIndexRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, GetArenaForAllocation(),
      &other->lang_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[1]);
}

// ===================================================================

class LocaleIndexResponse_Item::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LocaleIndexResponse_Item* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LocaleIndexResponse_Item::_Internal::updated_at(const LocaleIndexResponse_Item* msg) {
  return *msg->updated_at_;
}
void LocaleIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.LocaleIndexResponse.Item)
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lang(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.LocaleIndexResponse.Item)
}

void LocaleIndexResponse_Item::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&updated_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&updated_at_)) + sizeof(id_));
}

LocaleIndexResponse_Item::~LocaleIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.LocaleIndexResponse.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocaleIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_at_;
}

void LocaleIndexResponse_Item::ArenaDtor(void* object) {
  LocaleIndexResponse_Item* _this = reinterpret_cast< LocaleIndexResponse_Item* >(object);
  (void)_this;
}
void LocaleIndexResponse_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleIndexResponse_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.LocaleIndexResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  lang_.ClearToEmpty();
  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleIndexResponse.Item.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleIndexResponse.Item.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.LocaleIndexResponse.Item.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleIndexResponse_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.LocaleIndexResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (!this->code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string lang = 3;
  if (!this->lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lang(), target);
  }

  // string message = 4;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.LocaleIndexResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::updated_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.LocaleIndexResponse.Item)
  return target;
}

size_t LocaleIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.LocaleIndexResponse.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (!this->code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string lang = 3;
  if (!this->lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string message = 4;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocaleIndexResponse_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.LocaleIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const LocaleIndexResponse_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocaleIndexResponse_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.LocaleIndexResponse.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.LocaleIndexResponse.Item)
    MergeFrom(*source);
  }
}

void LocaleIndexResponse_Item::MergeFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.LocaleIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from.lang().empty()) {
    _internal_set_lang(from._internal_lang());
  }
  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LocaleIndexResponse_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.LocaleIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocaleIndexResponse_Item::CopyFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.LocaleIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse_Item::IsInitialized() const {
  return true;
}

void LocaleIndexResponse_Item::InternalSwap(LocaleIndexResponse_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lang_, GetArenaForAllocation(),
      &other->lang_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, id_)
      + sizeof(LocaleIndexResponse_Item::id_)
      - PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, updated_at_)>(
          reinterpret_cast<char*>(&updated_at_),
          reinterpret_cast<char*>(&other->updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[2]);
}

// ===================================================================

class LocaleIndexResponse::_Internal {
 public:
};

LocaleIndexResponse::LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.LocaleIndexResponse)
}
LocaleIndexResponse::LocaleIndexResponse(const LocaleIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.LocaleIndexResponse)
}

void LocaleIndexResponse::SharedCtor() {
}

LocaleIndexResponse::~LocaleIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.LocaleIndexResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocaleIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocaleIndexResponse::ArenaDtor(void* object) {
  LocaleIndexResponse* _this = reinterpret_cast< LocaleIndexResponse* >(object);
  (void)_this;
}
void LocaleIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocaleIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocaleIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.LocaleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocaleIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.LocaleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.LocaleIndexResponse)
  return target;
}

size_t LocaleIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.LocaleIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocaleIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.LocaleIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LocaleIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocaleIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.LocaleIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.LocaleIndexResponse)
    MergeFrom(*source);
  }
}

void LocaleIndexResponse::MergeFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.LocaleIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void LocaleIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.LocaleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocaleIndexResponse::CopyFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.LocaleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse::IsInitialized() const {
  return true;
}

void LocaleIndexResponse::InternalSwap(LocaleIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[3]);
}

// ===================================================================

class StmpProfile::_Internal {
 public:
};

StmpProfile::StmpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cc_(arena),
  bcc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.StmpProfile)
}
StmpProfile::StmpProfile(const StmpProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cc_(from.cc_),
      bcc_(from.bcc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.StmpProfile)
}

void StmpProfile::SharedCtor() {
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0u;
}

StmpProfile::~StmpProfile() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.StmpProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StmpProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StmpProfile::ArenaDtor(void* object) {
  StmpProfile* _this = reinterpret_cast< StmpProfile* >(object);
  (void)_this;
}
void StmpProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StmpProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StmpProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.StmpProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cc_.Clear();
  bcc_.Clear();
  host_.ClearToEmpty();
  user_.ClearToEmpty();
  password_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StmpProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpProfile.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpProfile.user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpProfile.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpProfile.cc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string bcc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bcc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpProfile.bcc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StmpProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.StmpProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpProfile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // string user = 3;
  if (!this->user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpProfile.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // string password = 4;
  if (!this->password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpProfile.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // repeated string cc = 5;
  for (int i = 0, n = this->_internal_cc_size(); i < n; i++) {
    const auto& s = this->_internal_cc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpProfile.cc");
    target = stream->WriteString(5, s, target);
  }

  // repeated string bcc = 6;
  for (int i = 0, n = this->_internal_bcc_size(); i < n; i++) {
    const auto& s = this->_internal_bcc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpProfile.bcc");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.StmpProfile)
  return target;
}

size_t StmpProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.StmpProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cc = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cc_.size());
  for (int i = 0, n = cc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cc_.Get(i));
  }

  // repeated string bcc = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bcc_.size());
  for (int i = 0, n = bcc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bcc_.Get(i));
  }

  // string host = 1;
  if (!this->host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string user = 3;
  if (!this->user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string password = 4;
  if (!this->password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StmpProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.StmpProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const StmpProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StmpProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.StmpProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.StmpProfile)
    MergeFrom(*source);
  }
}

void StmpProfile::MergeFrom(const StmpProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.StmpProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cc_.MergeFrom(from.cc_);
  bcc_.MergeFrom(from.bcc_);
  if (!from.host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (!from.user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from.password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void StmpProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.StmpProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StmpProfile::CopyFrom(const StmpProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.StmpProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmpProfile::IsInitialized() const {
  return true;
}

void StmpProfile::InternalSwap(StmpProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cc_.InternalSwap(&other->cc_);
  bcc_.InternalSwap(&other->bcc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, GetArenaForAllocation(),
      &other->host_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, GetArenaForAllocation(),
      &other->user_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StmpProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[4]);
}

// ===================================================================

StmpTask_AttachmentsEntry_DoNotUse::StmpTask_AttachmentsEntry_DoNotUse() {}
StmpTask_AttachmentsEntry_DoNotUse::StmpTask_AttachmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StmpTask_AttachmentsEntry_DoNotUse::MergeFrom(const StmpTask_AttachmentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StmpTask_AttachmentsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[5]);
}
void StmpTask_AttachmentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class StmpTask::_Internal {
 public:
};

StmpTask::StmpTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attachments_(arena),
  to_(arena),
  cc_(arena),
  bcc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.StmpTask)
}
StmpTask::StmpTask(const StmpTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      to_(from.to_),
      cc_(from.cc_),
      bcc_(from.bcc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attachments_.MergeFrom(from.attachments_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.StmpTask)
}

void StmpTask::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_type_ = 0;
}

StmpTask::~StmpTask() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.StmpTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StmpTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StmpTask::ArenaDtor(void* object) {
  StmpTask* _this = reinterpret_cast< StmpTask* >(object);
  (void)_this;
  _this->attachments_. ~MapField();
}
inline void StmpTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &StmpTask::ArenaDtor);
  }
}
void StmpTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StmpTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.StmpTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  to_.Clear();
  cc_.Clear();
  bcc_.Clear();
  subject_.ClearToEmpty();
  body_.ClearToEmpty();
  content_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StmpTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpTask.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpTask.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .palm.nut.v1.StmpTask.Type content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::palm::nut::v1::StmpTask_Type>(val));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> attachments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attachments_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string to = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpTask.to"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpTask.cc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string bcc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bcc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.StmpTask.bcc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StmpTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.StmpTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (!this->subject().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpTask.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // string body = 2;
  if (!this->body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpTask.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // .palm.nut.v1.StmpTask.Type content_type = 3;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_content_type(), target);
  }

  // map<string, bytes> attachments = 4;
  if (!this->_internal_attachments().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "palm.nut.v1.StmpTask.AttachmentsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attachments().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attachments().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attachments().begin();
          it != this->_internal_attachments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StmpTask_AttachmentsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attachments().begin();
          it != this->_internal_attachments().end(); ++it) {
        target = StmpTask_AttachmentsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string to = 11;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpTask.to");
    target = stream->WriteString(11, s, target);
  }

  // repeated string cc = 12;
  for (int i = 0, n = this->_internal_cc_size(); i < n; i++) {
    const auto& s = this->_internal_cc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpTask.cc");
    target = stream->WriteString(12, s, target);
  }

  // repeated string bcc = 13;
  for (int i = 0, n = this->_internal_bcc_size(); i < n; i++) {
    const auto& s = this->_internal_bcc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.StmpTask.bcc");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.StmpTask)
  return target;
}

size_t StmpTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.StmpTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> attachments = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attachments_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attachments().begin();
      it != this->_internal_attachments().end(); ++it) {
    total_size += StmpTask_AttachmentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string to = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(to_.size());
  for (int i = 0, n = to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      to_.Get(i));
  }

  // repeated string cc = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cc_.size());
  for (int i = 0, n = cc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cc_.Get(i));
  }

  // repeated string bcc = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bcc_.size());
  for (int i = 0, n = bcc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bcc_.Get(i));
  }

  // string subject = 1;
  if (!this->subject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 2;
  if (!this->body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .palm.nut.v1.StmpTask.Type content_type = 3;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StmpTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.StmpTask)
  GOOGLE_DCHECK_NE(&from, this);
  const StmpTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StmpTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.StmpTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.StmpTask)
    MergeFrom(*source);
  }
}

void StmpTask::MergeFrom(const StmpTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.StmpTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  to_.MergeFrom(from.to_);
  cc_.MergeFrom(from.cc_);
  bcc_.MergeFrom(from.bcc_);
  if (!from.subject().empty()) {
    _internal_set_subject(from._internal_subject());
  }
  if (!from.body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
}

void StmpTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.StmpTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StmpTask::CopyFrom(const StmpTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.StmpTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmpTask::IsInitialized() const {
  return true;
}

void StmpTask::InternalSwap(StmpTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  to_.InternalSwap(&other->to_);
  cc_.InternalSwap(&other->cc_);
  bcc_.InternalSwap(&other->bcc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subject_, GetArenaForAllocation(),
      &other->subject_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, GetArenaForAllocation(),
      &other->body_, other->GetArenaForAllocation()
  );
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StmpTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[6]);
}

// ===================================================================

class TwilioProfile::_Internal {
 public:
};

TwilioProfile::TwilioProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.TwilioProfile)
}
TwilioProfile::TwilioProfile(const TwilioProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_sid().empty()) {
    account_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_sid(), 
      GetArenaForAllocation());
  }
  auto_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_token().empty()) {
    auto_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_token(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.TwilioProfile)
}

void TwilioProfile::SharedCtor() {
account_sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TwilioProfile::~TwilioProfile() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.TwilioProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TwilioProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TwilioProfile::ArenaDtor(void* object) {
  TwilioProfile* _this = reinterpret_cast< TwilioProfile* >(object);
  (void)_this;
}
void TwilioProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwilioProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TwilioProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.TwilioProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_sid_.ClearToEmpty();
  auto_token_.ClearToEmpty();
  from_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwilioProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_sid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.TwilioProfile.account_sid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_auto_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.TwilioProfile.auto_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.TwilioProfile.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwilioProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.TwilioProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_sid = 1;
  if (!this->account_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_sid().data(), static_cast<int>(this->_internal_account_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.TwilioProfile.account_sid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_sid(), target);
  }

  // string auto_token = 2;
  if (!this->auto_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_token().data(), static_cast<int>(this->_internal_auto_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.TwilioProfile.auto_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auto_token(), target);
  }

  // string from = 3;
  if (!this->from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.TwilioProfile.from");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.TwilioProfile)
  return target;
}

size_t TwilioProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.TwilioProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_sid = 1;
  if (!this->account_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_sid());
  }

  // string auto_token = 2;
  if (!this->auto_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_token());
  }

  // string from = 3;
  if (!this->from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwilioProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.TwilioProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const TwilioProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwilioProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.TwilioProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.TwilioProfile)
    MergeFrom(*source);
  }
}

void TwilioProfile::MergeFrom(const TwilioProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.TwilioProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account_sid().empty()) {
    _internal_set_account_sid(from._internal_account_sid());
  }
  if (!from.auto_token().empty()) {
    _internal_set_auto_token(from._internal_auto_token());
  }
  if (!from.from().empty()) {
    _internal_set_from(from._internal_from());
  }
}

void TwilioProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.TwilioProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwilioProfile::CopyFrom(const TwilioProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.TwilioProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwilioProfile::IsInitialized() const {
  return true;
}

void TwilioProfile::InternalSwap(TwilioProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_sid_, GetArenaForAllocation(),
      &other->account_sid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auto_token_, GetArenaForAllocation(),
      &other->auto_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TwilioProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[7]);
}

// ===================================================================

class TwilioTask::_Internal {
 public:
  using HasBits = decltype(std::declval<TwilioTask>()._has_bits_);
  static void set_has_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TwilioTask::TwilioTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  to_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.TwilioTask)
}
TwilioTask::TwilioTask(const TwilioTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      to_(from.to_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  callback_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callback()) {
    callback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callback(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.TwilioTask)
}

void TwilioTask::SharedCtor() {
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
callback_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TwilioTask::~TwilioTask() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.TwilioTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TwilioTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callback_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TwilioTask::ArenaDtor(void* object) {
  TwilioTask* _this = reinterpret_cast< TwilioTask* >(object);
  (void)_this;
}
void TwilioTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TwilioTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TwilioTask::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.TwilioTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.Clear();
  body_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    callback_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwilioTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.TwilioTask.to"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.TwilioTask.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string callback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_callback();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.TwilioTask.callback"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwilioTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.TwilioTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string to = 1;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.TwilioTask.to");
    target = stream->WriteString(1, s, target);
  }

  // string body = 2;
  if (!this->body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.TwilioTask.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional string callback = 3;
  if (_internal_has_callback()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callback().data(), static_cast<int>(this->_internal_callback().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.TwilioTask.callback");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_callback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.TwilioTask)
  return target;
}

size_t TwilioTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.TwilioTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string to = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(to_.size());
  for (int i = 0, n = to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      to_.Get(i));
  }

  // string body = 2;
  if (!this->body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // optional string callback = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callback());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwilioTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.TwilioTask)
  GOOGLE_DCHECK_NE(&from, this);
  const TwilioTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwilioTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.TwilioTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.TwilioTask)
    MergeFrom(*source);
  }
}

void TwilioTask::MergeFrom(const TwilioTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.TwilioTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_.MergeFrom(from.to_);
  if (!from.body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from._internal_has_callback()) {
    _internal_set_callback(from._internal_callback());
  }
}

void TwilioTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.TwilioTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwilioTask::CopyFrom(const TwilioTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.TwilioTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwilioTask::IsInitialized() const {
  return true;
}

void TwilioTask::InternalSwap(TwilioTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_.InternalSwap(&other->to_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, GetArenaForAllocation(),
      &other->body_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &callback_, GetArenaForAllocation(),
      &other->callback_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TwilioTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[8]);
}

// ===================================================================

class GoogleProfile::_Internal {
 public:
};

GoogleProfile::GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.GoogleProfile)
}
GoogleProfile::GoogleProfile(const GoogleProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  siteverifyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_siteverifyid().empty()) {
    siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_siteverifyid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.GoogleProfile)
}

void GoogleProfile::SharedCtor() {
siteverifyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GoogleProfile::~GoogleProfile() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.GoogleProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GoogleProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  siteverifyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GoogleProfile::ArenaDtor(void* object) {
  GoogleProfile* _this = reinterpret_cast< GoogleProfile* >(object);
  (void)_this;
}
void GoogleProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoogleProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GoogleProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.GoogleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  siteverifyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string siteVerifyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_siteverifyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.GoogleProfile.siteVerifyId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoogleProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.GoogleProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string siteVerifyId = 1;
  if (!this->siteverifyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_siteverifyid().data(), static_cast<int>(this->_internal_siteverifyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.GoogleProfile.siteVerifyId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_siteverifyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.GoogleProfile)
  return target;
}

size_t GoogleProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.GoogleProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string siteVerifyId = 1;
  if (!this->siteverifyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_siteverifyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoogleProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.GoogleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const GoogleProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoogleProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.GoogleProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.GoogleProfile)
    MergeFrom(*source);
  }
}

void GoogleProfile::MergeFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.GoogleProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.siteverifyid().empty()) {
    _internal_set_siteverifyid(from._internal_siteverifyid());
  }
}

void GoogleProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.GoogleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoogleProfile::CopyFrom(const GoogleProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.GoogleProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleProfile::IsInitialized() const {
  return true;
}

void GoogleProfile::InternalSwap(GoogleProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &siteverifyid_, GetArenaForAllocation(),
      &other->siteverifyid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[9]);
}

// ===================================================================

class BaiduProfile::_Internal {
 public:
};

BaiduProfile::BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.nut.v1.BaiduProfile)
}
BaiduProfile::BaiduProfile(const BaiduProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  siteverifyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_siteverifyid().empty()) {
    siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_siteverifyid(), 
      GetArenaForAllocation());
  }
  siteverifycontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_siteverifycontent().empty()) {
    siteverifycontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_siteverifycontent(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.nut.v1.BaiduProfile)
}

void BaiduProfile::SharedCtor() {
siteverifyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
siteverifycontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BaiduProfile::~BaiduProfile() {
  // @@protoc_insertion_point(destructor:palm.nut.v1.BaiduProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaiduProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  siteverifyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  siteverifycontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaiduProfile::ArenaDtor(void* object) {
  BaiduProfile* _this = reinterpret_cast< BaiduProfile* >(object);
  (void)_this;
}
void BaiduProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaiduProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaiduProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.nut.v1.BaiduProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  siteverifyid_.ClearToEmpty();
  siteverifycontent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaiduProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string siteVerifyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_siteverifyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.BaiduProfile.siteVerifyId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string siteVerifyContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_siteverifycontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palm.nut.v1.BaiduProfile.siteVerifyContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaiduProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.nut.v1.BaiduProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string siteVerifyId = 1;
  if (!this->siteverifyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_siteverifyid().data(), static_cast<int>(this->_internal_siteverifyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.BaiduProfile.siteVerifyId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_siteverifyid(), target);
  }

  // string siteVerifyContent = 2;
  if (!this->siteverifycontent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_siteverifycontent().data(), static_cast<int>(this->_internal_siteverifycontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.nut.v1.BaiduProfile.siteVerifyContent");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_siteverifycontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.nut.v1.BaiduProfile)
  return target;
}

size_t BaiduProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.nut.v1.BaiduProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string siteVerifyId = 1;
  if (!this->siteverifyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_siteverifyid());
  }

  // string siteVerifyContent = 2;
  if (!this->siteverifycontent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_siteverifycontent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaiduProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:palm.nut.v1.BaiduProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const BaiduProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaiduProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:palm.nut.v1.BaiduProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:palm.nut.v1.BaiduProfile)
    MergeFrom(*source);
  }
}

void BaiduProfile::MergeFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palm.nut.v1.BaiduProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.siteverifyid().empty()) {
    _internal_set_siteverifyid(from._internal_siteverifyid());
  }
  if (!from.siteverifycontent().empty()) {
    _internal_set_siteverifycontent(from._internal_siteverifycontent());
  }
}

void BaiduProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:palm.nut.v1.BaiduProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaiduProfile::CopyFrom(const BaiduProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.nut.v1.BaiduProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaiduProfile::IsInitialized() const {
  return true;
}

void BaiduProfile::InternalSwap(BaiduProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &siteverifyid_, GetArenaForAllocation(),
      &other->siteverifyid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &siteverifycontent_, GetArenaForAllocation(),
      &other->siteverifycontent_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BaiduProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nut_2eproto_getter, &descriptor_table_nut_2eproto_once,
      file_level_metadata_nut_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::nut::v1::LocaleSetRequest* Arena::CreateMaybeMessage< ::palm::nut::v1::LocaleSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::LocaleSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::LocaleIndexRequest* Arena::CreateMaybeMessage< ::palm::nut::v1::LocaleIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::LocaleIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::LocaleIndexResponse_Item* Arena::CreateMaybeMessage< ::palm::nut::v1::LocaleIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::LocaleIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::LocaleIndexResponse* Arena::CreateMaybeMessage< ::palm::nut::v1::LocaleIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::LocaleIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::StmpProfile* Arena::CreateMaybeMessage< ::palm::nut::v1::StmpProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::StmpProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::StmpTask* Arena::CreateMaybeMessage< ::palm::nut::v1::StmpTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::StmpTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::TwilioProfile* Arena::CreateMaybeMessage< ::palm::nut::v1::TwilioProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::TwilioProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::TwilioTask* Arena::CreateMaybeMessage< ::palm::nut::v1::TwilioTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::TwilioTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::GoogleProfile* Arena::CreateMaybeMessage< ::palm::nut::v1::GoogleProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::GoogleProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::nut::v1::BaiduProfile* Arena::CreateMaybeMessage< ::palm::nut::v1::BaiduProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::nut::v1::BaiduProfile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
