// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto;
namespace palm {
namespace nut {
namespace v1 {
class AliPayProfile;
struct AliPayProfileDefaultTypeInternal;
extern AliPayProfileDefaultTypeInternal _AliPayProfile_default_instance_;
class BaiduProfile;
struct BaiduProfileDefaultTypeInternal;
extern BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
class GoogleProfile;
struct GoogleProfileDefaultTypeInternal;
extern GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
class LayoutResponse;
struct LayoutResponseDefaultTypeInternal;
extern LayoutResponseDefaultTypeInternal _LayoutResponse_default_instance_;
class LayoutResponse_Menu;
struct LayoutResponse_MenuDefaultTypeInternal;
extern LayoutResponse_MenuDefaultTypeInternal _LayoutResponse_Menu_default_instance_;
class LayoutResponse_Site;
struct LayoutResponse_SiteDefaultTypeInternal;
extern LayoutResponse_SiteDefaultTypeInternal _LayoutResponse_Site_default_instance_;
class LayoutResponse_Site_Author;
struct LayoutResponse_Site_AuthorDefaultTypeInternal;
extern LayoutResponse_Site_AuthorDefaultTypeInternal _LayoutResponse_Site_Author_default_instance_;
class LayoutResponse_User;
struct LayoutResponse_UserDefaultTypeInternal;
extern LayoutResponse_UserDefaultTypeInternal _LayoutResponse_User_default_instance_;
class LocaleIndexRequest;
struct LocaleIndexRequestDefaultTypeInternal;
extern LocaleIndexRequestDefaultTypeInternal _LocaleIndexRequest_default_instance_;
class LocaleIndexResponse;
struct LocaleIndexResponseDefaultTypeInternal;
extern LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
class LocaleIndexResponse_Item;
struct LocaleIndexResponse_ItemDefaultTypeInternal;
extern LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
class LocaleSetRequest;
struct LocaleSetRequestDefaultTypeInternal;
extern LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
class SiteGetInfoRequest;
struct SiteGetInfoRequestDefaultTypeInternal;
extern SiteGetInfoRequestDefaultTypeInternal _SiteGetInfoRequest_default_instance_;
class SiteSetCopyrightRequest;
struct SiteSetCopyrightRequestDefaultTypeInternal;
extern SiteSetCopyrightRequestDefaultTypeInternal _SiteSetCopyrightRequest_default_instance_;
class SiteSetInfoRequest;
struct SiteSetInfoRequestDefaultTypeInternal;
extern SiteSetInfoRequestDefaultTypeInternal _SiteSetInfoRequest_default_instance_;
class SiteSetKeywordsRequest;
struct SiteSetKeywordsRequestDefaultTypeInternal;
extern SiteSetKeywordsRequestDefaultTypeInternal _SiteSetKeywordsRequest_default_instance_;
class SmtpProfile;
struct SmtpProfileDefaultTypeInternal;
extern SmtpProfileDefaultTypeInternal _SmtpProfile_default_instance_;
class SmtpTask;
struct SmtpTaskDefaultTypeInternal;
extern SmtpTaskDefaultTypeInternal _SmtpTask_default_instance_;
class SmtpTask_AttachmentsEntry_DoNotUse;
struct SmtpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal;
extern SmtpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal _SmtpTask_AttachmentsEntry_DoNotUse_default_instance_;
class TwilioProfile;
struct TwilioProfileDefaultTypeInternal;
extern TwilioProfileDefaultTypeInternal _TwilioProfile_default_instance_;
class TwilioTask;
struct TwilioTaskDefaultTypeInternal;
extern TwilioTaskDefaultTypeInternal _TwilioTask_default_instance_;
class WechatPayProfile;
struct WechatPayProfileDefaultTypeInternal;
extern WechatPayProfileDefaultTypeInternal _WechatPayProfile_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::nut::v1::AliPayProfile* Arena::CreateMaybeMessage<::palm::nut::v1::AliPayProfile>(Arena*);
template<> ::palm::nut::v1::BaiduProfile* Arena::CreateMaybeMessage<::palm::nut::v1::BaiduProfile>(Arena*);
template<> ::palm::nut::v1::GoogleProfile* Arena::CreateMaybeMessage<::palm::nut::v1::GoogleProfile>(Arena*);
template<> ::palm::nut::v1::LayoutResponse* Arena::CreateMaybeMessage<::palm::nut::v1::LayoutResponse>(Arena*);
template<> ::palm::nut::v1::LayoutResponse_Menu* Arena::CreateMaybeMessage<::palm::nut::v1::LayoutResponse_Menu>(Arena*);
template<> ::palm::nut::v1::LayoutResponse_Site* Arena::CreateMaybeMessage<::palm::nut::v1::LayoutResponse_Site>(Arena*);
template<> ::palm::nut::v1::LayoutResponse_Site_Author* Arena::CreateMaybeMessage<::palm::nut::v1::LayoutResponse_Site_Author>(Arena*);
template<> ::palm::nut::v1::LayoutResponse_User* Arena::CreateMaybeMessage<::palm::nut::v1::LayoutResponse_User>(Arena*);
template<> ::palm::nut::v1::LocaleIndexRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexRequest>(Arena*);
template<> ::palm::nut::v1::LocaleIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexResponse>(Arena*);
template<> ::palm::nut::v1::LocaleIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexResponse_Item>(Arena*);
template<> ::palm::nut::v1::LocaleSetRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleSetRequest>(Arena*);
template<> ::palm::nut::v1::SiteGetInfoRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteGetInfoRequest>(Arena*);
template<> ::palm::nut::v1::SiteSetCopyrightRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetCopyrightRequest>(Arena*);
template<> ::palm::nut::v1::SiteSetInfoRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetInfoRequest>(Arena*);
template<> ::palm::nut::v1::SiteSetKeywordsRequest* Arena::CreateMaybeMessage<::palm::nut::v1::SiteSetKeywordsRequest>(Arena*);
template<> ::palm::nut::v1::SmtpProfile* Arena::CreateMaybeMessage<::palm::nut::v1::SmtpProfile>(Arena*);
template<> ::palm::nut::v1::SmtpTask* Arena::CreateMaybeMessage<::palm::nut::v1::SmtpTask>(Arena*);
template<> ::palm::nut::v1::SmtpTask_AttachmentsEntry_DoNotUse* Arena::CreateMaybeMessage<::palm::nut::v1::SmtpTask_AttachmentsEntry_DoNotUse>(Arena*);
template<> ::palm::nut::v1::TwilioProfile* Arena::CreateMaybeMessage<::palm::nut::v1::TwilioProfile>(Arena*);
template<> ::palm::nut::v1::TwilioTask* Arena::CreateMaybeMessage<::palm::nut::v1::TwilioTask>(Arena*);
template<> ::palm::nut::v1::WechatPayProfile* Arena::CreateMaybeMessage<::palm::nut::v1::WechatPayProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace nut {
namespace v1 {

enum SmtpTask_Type : int {
  SmtpTask_Type_PLAIN_TEXT = 0,
  SmtpTask_Type_HTML = 1,
  SmtpTask_Type_SmtpTask_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SmtpTask_Type_SmtpTask_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SmtpTask_Type_IsValid(int value);
constexpr SmtpTask_Type SmtpTask_Type_Type_MIN = SmtpTask_Type_PLAIN_TEXT;
constexpr SmtpTask_Type SmtpTask_Type_Type_MAX = SmtpTask_Type_HTML;
constexpr int SmtpTask_Type_Type_ARRAYSIZE = SmtpTask_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmtpTask_Type_descriptor();
template<typename T>
inline const std::string& SmtpTask_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SmtpTask_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SmtpTask_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SmtpTask_Type_descriptor(), enum_t_value);
}
inline bool SmtpTask_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SmtpTask_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SmtpTask_Type>(
    SmtpTask_Type_descriptor(), name, value);
}
// ===================================================================

class SiteSetInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetInfoRequest) */ {
 public:
  inline SiteSetInfoRequest() : SiteSetInfoRequest(nullptr) {}
  ~SiteSetInfoRequest() override;
  explicit constexpr SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetInfoRequest(const SiteSetInfoRequest& from);
  SiteSetInfoRequest(SiteSetInfoRequest&& from) noexcept
    : SiteSetInfoRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetInfoRequest& operator=(const SiteSetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetInfoRequest& operator=(SiteSetInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetInfoRequest*>(
               &_SiteSetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteSetInfoRequest& a, SiteSetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteSetInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.SiteSetInfoRequest";
  }
  protected:
  explicit SiteSetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // string lang = 1;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // .palm.nut.v1.LayoutResponse.Site info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::palm::nut::v1::LayoutResponse_Site& info() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::LayoutResponse_Site* release_info();
  ::palm::nut::v1::LayoutResponse_Site* mutable_info();
  void set_allocated_info(::palm::nut::v1::LayoutResponse_Site* info);
  private:
  const ::palm::nut::v1::LayoutResponse_Site& _internal_info() const;
  ::palm::nut::v1::LayoutResponse_Site* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::palm::nut::v1::LayoutResponse_Site* info);
  ::palm::nut::v1::LayoutResponse_Site* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::palm::nut::v1::LayoutResponse_Site* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteGetInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteGetInfoRequest) */ {
 public:
  inline SiteGetInfoRequest() : SiteGetInfoRequest(nullptr) {}
  ~SiteGetInfoRequest() override;
  explicit constexpr SiteGetInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteGetInfoRequest(const SiteGetInfoRequest& from);
  SiteGetInfoRequest(SiteGetInfoRequest&& from) noexcept
    : SiteGetInfoRequest() {
    *this = ::std::move(from);
  }

  inline SiteGetInfoRequest& operator=(const SiteGetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteGetInfoRequest& operator=(SiteGetInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteGetInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteGetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SiteGetInfoRequest*>(
               &_SiteGetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SiteGetInfoRequest& a, SiteGetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteGetInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteGetInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteGetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteGetInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteGetInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteGetInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteGetInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.SiteGetInfoRequest";
  }
  protected:
  explicit SiteGetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
  };
  // string lang = 1;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteGetInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSetKeywordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetKeywordsRequest) */ {
 public:
  inline SiteSetKeywordsRequest() : SiteSetKeywordsRequest(nullptr) {}
  ~SiteSetKeywordsRequest() override;
  explicit constexpr SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetKeywordsRequest(const SiteSetKeywordsRequest& from);
  SiteSetKeywordsRequest(SiteSetKeywordsRequest&& from) noexcept
    : SiteSetKeywordsRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetKeywordsRequest& operator=(const SiteSetKeywordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetKeywordsRequest& operator=(SiteSetKeywordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetKeywordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetKeywordsRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetKeywordsRequest*>(
               &_SiteSetKeywordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SiteSetKeywordsRequest& a, SiteSetKeywordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetKeywordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetKeywordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetKeywordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetKeywordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetKeywordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteSetKeywordsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetKeywordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.SiteSetKeywordsRequest";
  }
  protected:
  explicit SiteSetKeywordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetKeywordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SiteSetCopyrightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SiteSetCopyrightRequest) */ {
 public:
  inline SiteSetCopyrightRequest() : SiteSetCopyrightRequest(nullptr) {}
  ~SiteSetCopyrightRequest() override;
  explicit constexpr SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteSetCopyrightRequest(const SiteSetCopyrightRequest& from);
  SiteSetCopyrightRequest(SiteSetCopyrightRequest&& from) noexcept
    : SiteSetCopyrightRequest() {
    *this = ::std::move(from);
  }

  inline SiteSetCopyrightRequest& operator=(const SiteSetCopyrightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSetCopyrightRequest& operator=(SiteSetCopyrightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSetCopyrightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSetCopyrightRequest* internal_default_instance() {
    return reinterpret_cast<const SiteSetCopyrightRequest*>(
               &_SiteSetCopyrightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SiteSetCopyrightRequest& a, SiteSetCopyrightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSetCopyrightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSetCopyrightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSetCopyrightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSetCopyrightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteSetCopyrightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteSetCopyrightRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSetCopyrightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.SiteSetCopyrightRequest";
  }
  protected:
  explicit SiteSetCopyrightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.SiteSetCopyrightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LayoutResponse_Site_Author final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LayoutResponse.Site.Author) */ {
 public:
  inline LayoutResponse_Site_Author() : LayoutResponse_Site_Author(nullptr) {}
  ~LayoutResponse_Site_Author() override;
  explicit constexpr LayoutResponse_Site_Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutResponse_Site_Author(const LayoutResponse_Site_Author& from);
  LayoutResponse_Site_Author(LayoutResponse_Site_Author&& from) noexcept
    : LayoutResponse_Site_Author() {
    *this = ::std::move(from);
  }

  inline LayoutResponse_Site_Author& operator=(const LayoutResponse_Site_Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutResponse_Site_Author& operator=(LayoutResponse_Site_Author&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutResponse_Site_Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutResponse_Site_Author* internal_default_instance() {
    return reinterpret_cast<const LayoutResponse_Site_Author*>(
               &_LayoutResponse_Site_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LayoutResponse_Site_Author& a, LayoutResponse_Site_Author& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutResponse_Site_Author* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutResponse_Site_Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutResponse_Site_Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutResponse_Site_Author>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutResponse_Site_Author& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutResponse_Site_Author& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutResponse_Site_Author* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LayoutResponse.Site.Author";
  }
  protected:
  explicit LayoutResponse_Site_Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LayoutResponse.Site.Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LayoutResponse_Site final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LayoutResponse.Site) */ {
 public:
  inline LayoutResponse_Site() : LayoutResponse_Site(nullptr) {}
  ~LayoutResponse_Site() override;
  explicit constexpr LayoutResponse_Site(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutResponse_Site(const LayoutResponse_Site& from);
  LayoutResponse_Site(LayoutResponse_Site&& from) noexcept
    : LayoutResponse_Site() {
    *this = ::std::move(from);
  }

  inline LayoutResponse_Site& operator=(const LayoutResponse_Site& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutResponse_Site& operator=(LayoutResponse_Site&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutResponse_Site& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutResponse_Site* internal_default_instance() {
    return reinterpret_cast<const LayoutResponse_Site*>(
               &_LayoutResponse_Site_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LayoutResponse_Site& a, LayoutResponse_Site& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutResponse_Site* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutResponse_Site* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutResponse_Site* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutResponse_Site>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutResponse_Site& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutResponse_Site& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutResponse_Site* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LayoutResponse.Site";
  }
  protected:
  explicit LayoutResponse_Site(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LayoutResponse_Site_Author Author;

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordsFieldNumber = 3,
    kTitleFieldNumber = 1,
    kSubheadFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kCopyrightFieldNumber = 5,
    kAuthorFieldNumber = 11,
  };
  // repeated string keywords = 3;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();
  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  public:

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subhead = 2;
  void clear_subhead();
  const std::string& subhead() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subhead(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subhead();
  PROTOBUF_NODISCARD std::string* release_subhead();
  void set_allocated_subhead(std::string* subhead);
  private:
  const std::string& _internal_subhead() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subhead(const std::string& value);
  std::string* _internal_mutable_subhead();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string copyright = 5;
  void clear_copyright();
  const std::string& copyright() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyright(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyright();
  PROTOBUF_NODISCARD std::string* release_copyright();
  void set_allocated_copyright(std::string* copyright);
  private:
  const std::string& _internal_copyright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyright(const std::string& value);
  std::string* _internal_mutable_copyright();
  public:

  // .palm.nut.v1.LayoutResponse.Site.Author author = 11;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::palm::nut::v1::LayoutResponse_Site_Author& author() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::LayoutResponse_Site_Author* release_author();
  ::palm::nut::v1::LayoutResponse_Site_Author* mutable_author();
  void set_allocated_author(::palm::nut::v1::LayoutResponse_Site_Author* author);
  private:
  const ::palm::nut::v1::LayoutResponse_Site_Author& _internal_author() const;
  ::palm::nut::v1::LayoutResponse_Site_Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::palm::nut::v1::LayoutResponse_Site_Author* author);
  ::palm::nut::v1::LayoutResponse_Site_Author* unsafe_arena_release_author();

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LayoutResponse.Site)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subhead_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyright_;
  ::palm::nut::v1::LayoutResponse_Site_Author* author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LayoutResponse_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LayoutResponse.User) */ {
 public:
  inline LayoutResponse_User() : LayoutResponse_User(nullptr) {}
  ~LayoutResponse_User() override;
  explicit constexpr LayoutResponse_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutResponse_User(const LayoutResponse_User& from);
  LayoutResponse_User(LayoutResponse_User&& from) noexcept
    : LayoutResponse_User() {
    *this = ::std::move(from);
  }

  inline LayoutResponse_User& operator=(const LayoutResponse_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutResponse_User& operator=(LayoutResponse_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutResponse_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutResponse_User* internal_default_instance() {
    return reinterpret_cast<const LayoutResponse_User*>(
               &_LayoutResponse_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LayoutResponse_User& a, LayoutResponse_User& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutResponse_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutResponse_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutResponse_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutResponse_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutResponse_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutResponse_User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutResponse_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LayoutResponse.User";
  }
  protected:
  explicit LayoutResponse_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 1,
    kLogoFieldNumber = 2,
    kLangFieldNumber = 11,
    kTimeZoneFieldNumber = 12,
    kTokenFieldNumber = 21,
  };
  // string real_name = 1;
  void clear_real_name();
  const std::string& real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // string logo = 2;
  void clear_logo();
  const std::string& logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logo();
  PROTOBUF_NODISCARD std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // string lang = 11;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string time_zone = 12;
  void clear_time_zone();
  const std::string& time_zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_zone();
  PROTOBUF_NODISCARD std::string* release_time_zone();
  void set_allocated_time_zone(std::string* time_zone);
  private:
  const std::string& _internal_time_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_zone(const std::string& value);
  std::string* _internal_mutable_time_zone();
  public:

  // optional string token = 21;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LayoutResponse.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LayoutResponse_Menu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LayoutResponse.Menu) */ {
 public:
  inline LayoutResponse_Menu() : LayoutResponse_Menu(nullptr) {}
  ~LayoutResponse_Menu() override;
  explicit constexpr LayoutResponse_Menu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutResponse_Menu(const LayoutResponse_Menu& from);
  LayoutResponse_Menu(LayoutResponse_Menu&& from) noexcept
    : LayoutResponse_Menu() {
    *this = ::std::move(from);
  }

  inline LayoutResponse_Menu& operator=(const LayoutResponse_Menu& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutResponse_Menu& operator=(LayoutResponse_Menu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutResponse_Menu& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutResponse_Menu* internal_default_instance() {
    return reinterpret_cast<const LayoutResponse_Menu*>(
               &_LayoutResponse_Menu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LayoutResponse_Menu& a, LayoutResponse_Menu& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutResponse_Menu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutResponse_Menu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutResponse_Menu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutResponse_Menu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutResponse_Menu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutResponse_Menu& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutResponse_Menu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LayoutResponse.Menu";
  }
  protected:
  explicit LayoutResponse_Menu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 9,
    kLabelFieldNumber = 1,
    kPathFieldNumber = 2,
    kIconFieldNumber = 3,
  };
  // repeated .palm.nut.v1.LayoutResponse.Menu items = 9;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::nut::v1::LayoutResponse_Menu* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >*
      mutable_items();
  private:
  const ::palm::nut::v1::LayoutResponse_Menu& _internal_items(int index) const;
  ::palm::nut::v1::LayoutResponse_Menu* _internal_add_items();
  public:
  const ::palm::nut::v1::LayoutResponse_Menu& items(int index) const;
  ::palm::nut::v1::LayoutResponse_Menu* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >&
      items() const;

  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string icon = 3;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LayoutResponse.Menu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LayoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LayoutResponse) */ {
 public:
  inline LayoutResponse() : LayoutResponse(nullptr) {}
  ~LayoutResponse() override;
  explicit constexpr LayoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutResponse(const LayoutResponse& from);
  LayoutResponse(LayoutResponse&& from) noexcept
    : LayoutResponse() {
    *this = ::std::move(from);
  }

  inline LayoutResponse& operator=(const LayoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutResponse& operator=(LayoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutResponse* internal_default_instance() {
    return reinterpret_cast<const LayoutResponse*>(
               &_LayoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LayoutResponse& a, LayoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LayoutResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LayoutResponse";
  }
  protected:
  explicit LayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LayoutResponse_Site Site;
  typedef LayoutResponse_User User;
  typedef LayoutResponse_Menu Menu;

  // accessors -------------------------------------------------------

  enum : int {
    kMenusFieldNumber = 13,
    kLanguagesFieldNumber = 14,
    kSiteFieldNumber = 11,
    kUserFieldNumber = 12,
  };
  // repeated .palm.nut.v1.LayoutResponse.Menu menus = 13;
  int menus_size() const;
  private:
  int _internal_menus_size() const;
  public:
  void clear_menus();
  ::palm::nut::v1::LayoutResponse_Menu* mutable_menus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >*
      mutable_menus();
  private:
  const ::palm::nut::v1::LayoutResponse_Menu& _internal_menus(int index) const;
  ::palm::nut::v1::LayoutResponse_Menu* _internal_add_menus();
  public:
  const ::palm::nut::v1::LayoutResponse_Menu& menus(int index) const;
  ::palm::nut::v1::LayoutResponse_Menu* add_menus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >&
      menus() const;

  // repeated string languages = 14;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // .palm.nut.v1.LayoutResponse.Site site = 11;
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::palm::nut::v1::LayoutResponse_Site& site() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::LayoutResponse_Site* release_site();
  ::palm::nut::v1::LayoutResponse_Site* mutable_site();
  void set_allocated_site(::palm::nut::v1::LayoutResponse_Site* site);
  private:
  const ::palm::nut::v1::LayoutResponse_Site& _internal_site() const;
  ::palm::nut::v1::LayoutResponse_Site* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::palm::nut::v1::LayoutResponse_Site* site);
  ::palm::nut::v1::LayoutResponse_Site* unsafe_arena_release_site();

  // .palm.nut.v1.LayoutResponse.User user = 12;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::palm::nut::v1::LayoutResponse_User& user() const;
  PROTOBUF_NODISCARD ::palm::nut::v1::LayoutResponse_User* release_user();
  ::palm::nut::v1::LayoutResponse_User* mutable_user();
  void set_allocated_user(::palm::nut::v1::LayoutResponse_User* user);
  private:
  const ::palm::nut::v1::LayoutResponse_User& _internal_user() const;
  ::palm::nut::v1::LayoutResponse_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::palm::nut::v1::LayoutResponse_User* user);
  ::palm::nut::v1::LayoutResponse_User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LayoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu > menus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
  ::palm::nut::v1::LayoutResponse_Site* site_;
  ::palm::nut::v1::LayoutResponse_User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleSetRequest) */ {
 public:
  inline LocaleSetRequest() : LocaleSetRequest(nullptr) {}
  ~LocaleSetRequest() override;
  explicit constexpr LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleSetRequest(const LocaleSetRequest& from);
  LocaleSetRequest(LocaleSetRequest&& from) noexcept
    : LocaleSetRequest() {
    *this = ::std::move(from);
  }

  inline LocaleSetRequest& operator=(const LocaleSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleSetRequest& operator=(LocaleSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleSetRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleSetRequest*>(
               &_LocaleSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LocaleSetRequest& a, LocaleSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocaleSetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleSetRequest";
  }
  protected:
  explicit LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kLangFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string lang = 2;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexRequest) */ {
 public:
  inline LocaleIndexRequest() : LocaleIndexRequest(nullptr) {}
  ~LocaleIndexRequest() override;
  explicit constexpr LocaleIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexRequest(const LocaleIndexRequest& from);
  LocaleIndexRequest(LocaleIndexRequest&& from) noexcept
    : LocaleIndexRequest() {
    *this = ::std::move(from);
  }

  inline LocaleIndexRequest& operator=(const LocaleIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexRequest& operator=(LocaleIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexRequest*>(
               &_LocaleIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LocaleIndexRequest& a, LocaleIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocaleIndexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleIndexRequest";
  }
  protected:
  explicit LocaleIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
  };
  // string lang = 1;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexResponse.Item) */ {
 public:
  inline LocaleIndexResponse_Item() : LocaleIndexResponse_Item(nullptr) {}
  ~LocaleIndexResponse_Item() override;
  explicit constexpr LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from);
  LocaleIndexResponse_Item(LocaleIndexResponse_Item&& from) noexcept
    : LocaleIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse_Item& operator=(const LocaleIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse_Item& operator=(LocaleIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse_Item*>(
               &_LocaleIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LocaleIndexResponse_Item& a, LocaleIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocaleIndexResponse_Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleIndexResponse.Item";
  }
  protected:
  explicit LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kLangFieldNumber = 3,
    kMessageFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string lang = 3;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp updated_at = 5;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexResponse) */ {
 public:
  inline LocaleIndexResponse() : LocaleIndexResponse(nullptr) {}
  ~LocaleIndexResponse() override;
  explicit constexpr LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse(const LocaleIndexResponse& from);
  LocaleIndexResponse(LocaleIndexResponse&& from) noexcept
    : LocaleIndexResponse() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse& operator=(const LocaleIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse& operator=(LocaleIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse*>(
               &_LocaleIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LocaleIndexResponse& a, LocaleIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocaleIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocaleIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocaleIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocaleIndexResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleIndexResponse";
  }
  protected:
  explicit LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocaleIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::nut::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::LocaleIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* _internal_add_items();
  public:
  const ::palm::nut::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SmtpProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SmtpProfile) */ {
 public:
  inline SmtpProfile() : SmtpProfile(nullptr) {}
  ~SmtpProfile() override;
  explicit constexpr SmtpProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmtpProfile(const SmtpProfile& from);
  SmtpProfile(SmtpProfile&& from) noexcept
    : SmtpProfile() {
    *this = ::std::move(from);
  }

  inline SmtpProfile& operator=(const SmtpProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmtpProfile& operator=(SmtpProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmtpProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmtpProfile* internal_default_instance() {
    return reinterpret_cast<const SmtpProfile*>(
               &_SmtpProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SmtpProfile& a, SmtpProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SmtpProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmtpProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmtpProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmtpProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmtpProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SmtpProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmtpProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.SmtpProfile";
  }
  protected:
  explicit SmtpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 5,
    kBccFieldNumber = 6,
    kHostFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
  };
  // repeated string cc = 5;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  const std::string& cc(int index) const;
  std::string* mutable_cc(int index);
  void set_cc(int index, const std::string& value);
  void set_cc(int index, std::string&& value);
  void set_cc(int index, const char* value);
  void set_cc(int index, const char* value, size_t size);
  std::string* add_cc();
  void add_cc(const std::string& value);
  void add_cc(std::string&& value);
  void add_cc(const char* value);
  void add_cc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cc();
  private:
  const std::string& _internal_cc(int index) const;
  std::string* _internal_add_cc();
  public:

  // repeated string bcc = 6;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  const std::string& bcc(int index) const;
  std::string* mutable_bcc(int index);
  void set_bcc(int index, const std::string& value);
  void set_bcc(int index, std::string&& value);
  void set_bcc(int index, const char* value);
  void set_bcc(int index, const char* value, size_t size);
  std::string* add_bcc();
  void add_bcc(const std::string& value);
  void add_bcc(std::string&& value);
  void add_bcc(const char* value);
  void add_bcc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bcc();
  private:
  const std::string& _internal_bcc(int index) const;
  std::string* _internal_add_bcc();
  public:

  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.SmtpProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class SmtpTask_AttachmentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SmtpTask_AttachmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SmtpTask_AttachmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  SmtpTask_AttachmentsEntry_DoNotUse();
  explicit constexpr SmtpTask_AttachmentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SmtpTask_AttachmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SmtpTask_AttachmentsEntry_DoNotUse& other);
  static const SmtpTask_AttachmentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SmtpTask_AttachmentsEntry_DoNotUse*>(&_SmtpTask_AttachmentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "palm.nut.v1.SmtpTask.AttachmentsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SmtpTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.SmtpTask) */ {
 public:
  inline SmtpTask() : SmtpTask(nullptr) {}
  ~SmtpTask() override;
  explicit constexpr SmtpTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmtpTask(const SmtpTask& from);
  SmtpTask(SmtpTask&& from) noexcept
    : SmtpTask() {
    *this = ::std::move(from);
  }

  inline SmtpTask& operator=(const SmtpTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmtpTask& operator=(SmtpTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmtpTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmtpTask* internal_default_instance() {
    return reinterpret_cast<const SmtpTask*>(
               &_SmtpTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SmtpTask& a, SmtpTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SmtpTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmtpTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmtpTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmtpTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmtpTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SmtpTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmtpTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.SmtpTask";
  }
  protected:
  explicit SmtpTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef SmtpTask_Type Type;
  static constexpr Type PLAIN_TEXT =
    SmtpTask_Type_PLAIN_TEXT;
  static constexpr Type HTML =
    SmtpTask_Type_HTML;
  static inline bool Type_IsValid(int value) {
    return SmtpTask_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SmtpTask_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SmtpTask_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SmtpTask_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SmtpTask_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SmtpTask_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SmtpTask_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 4,
    kToFieldNumber = 11,
    kCcFieldNumber = 12,
    kBccFieldNumber = 13,
    kSubjectFieldNumber = 1,
    kBodyFieldNumber = 2,
    kContentTypeFieldNumber = 3,
  };
  // map<string, bytes> attachments = 4;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attachments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attachments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attachments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attachments();

  // repeated string to = 11;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // repeated string cc = 12;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  const std::string& cc(int index) const;
  std::string* mutable_cc(int index);
  void set_cc(int index, const std::string& value);
  void set_cc(int index, std::string&& value);
  void set_cc(int index, const char* value);
  void set_cc(int index, const char* value, size_t size);
  std::string* add_cc();
  void add_cc(const std::string& value);
  void add_cc(std::string&& value);
  void add_cc(const char* value);
  void add_cc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cc();
  private:
  const std::string& _internal_cc(int index) const;
  std::string* _internal_add_cc();
  public:

  // repeated string bcc = 13;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  const std::string& bcc(int index) const;
  std::string* mutable_bcc(int index);
  void set_bcc(int index, const std::string& value);
  void set_bcc(int index, std::string&& value);
  void set_bcc(int index, const char* value);
  void set_bcc(int index, const char* value, size_t size);
  std::string* add_bcc();
  void add_bcc(const std::string& value);
  void add_bcc(std::string&& value);
  void add_bcc(const char* value);
  void add_bcc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bcc();
  private:
  const std::string& _internal_bcc(int index) const;
  std::string* _internal_add_bcc();
  public:

  // string subject = 1;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .palm.nut.v1.SmtpTask.Type content_type = 3;
  void clear_content_type();
  ::palm::nut::v1::SmtpTask_Type content_type() const;
  void set_content_type(::palm::nut::v1::SmtpTask_Type value);
  private:
  ::palm::nut::v1::SmtpTask_Type _internal_content_type() const;
  void _internal_set_content_type(::palm::nut::v1::SmtpTask_Type value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.SmtpTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SmtpTask_AttachmentsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> attachments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  int content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class TwilioProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TwilioProfile) */ {
 public:
  inline TwilioProfile() : TwilioProfile(nullptr) {}
  ~TwilioProfile() override;
  explicit constexpr TwilioProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwilioProfile(const TwilioProfile& from);
  TwilioProfile(TwilioProfile&& from) noexcept
    : TwilioProfile() {
    *this = ::std::move(from);
  }

  inline TwilioProfile& operator=(const TwilioProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwilioProfile& operator=(TwilioProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwilioProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwilioProfile* internal_default_instance() {
    return reinterpret_cast<const TwilioProfile*>(
               &_TwilioProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TwilioProfile& a, TwilioProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(TwilioProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwilioProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwilioProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwilioProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwilioProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TwilioProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwilioProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.TwilioProfile";
  }
  protected:
  explicit TwilioProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountSidFieldNumber = 1,
    kAutoTokenFieldNumber = 2,
    kFromFieldNumber = 3,
  };
  // string account_sid = 1;
  void clear_account_sid();
  const std::string& account_sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_sid();
  PROTOBUF_NODISCARD std::string* release_account_sid();
  void set_allocated_account_sid(std::string* account_sid);
  private:
  const std::string& _internal_account_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_sid(const std::string& value);
  std::string* _internal_mutable_account_sid();
  public:

  // string auto_token = 2;
  void clear_auto_token();
  const std::string& auto_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auto_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auto_token();
  PROTOBUF_NODISCARD std::string* release_auto_token();
  void set_allocated_auto_token(std::string* auto_token);
  private:
  const std::string& _internal_auto_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auto_token(const std::string& value);
  std::string* _internal_mutable_auto_token();
  public:

  // string from = 3;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.TwilioProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class TwilioTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TwilioTask) */ {
 public:
  inline TwilioTask() : TwilioTask(nullptr) {}
  ~TwilioTask() override;
  explicit constexpr TwilioTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwilioTask(const TwilioTask& from);
  TwilioTask(TwilioTask&& from) noexcept
    : TwilioTask() {
    *this = ::std::move(from);
  }

  inline TwilioTask& operator=(const TwilioTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwilioTask& operator=(TwilioTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwilioTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwilioTask* internal_default_instance() {
    return reinterpret_cast<const TwilioTask*>(
               &_TwilioTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TwilioTask& a, TwilioTask& b) {
    a.Swap(&b);
  }
  inline void Swap(TwilioTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwilioTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwilioTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwilioTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwilioTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TwilioTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwilioTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.TwilioTask";
  }
  protected:
  explicit TwilioTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kBodyFieldNumber = 2,
    kCallbackFieldNumber = 3,
  };
  // repeated string to = 1;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional string callback = 3;
  bool has_callback() const;
  private:
  bool _internal_has_callback() const;
  public:
  void clear_callback();
  const std::string& callback() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callback(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callback();
  PROTOBUF_NODISCARD std::string* release_callback();
  void set_allocated_callback(std::string* callback);
  private:
  const std::string& _internal_callback() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback(const std::string& value);
  std::string* _internal_mutable_callback();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.TwilioTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class GoogleProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.GoogleProfile) */ {
 public:
  inline GoogleProfile() : GoogleProfile(nullptr) {}
  ~GoogleProfile() override;
  explicit constexpr GoogleProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleProfile(const GoogleProfile& from);
  GoogleProfile(GoogleProfile&& from) noexcept
    : GoogleProfile() {
    *this = ::std::move(from);
  }

  inline GoogleProfile& operator=(const GoogleProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleProfile& operator=(GoogleProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleProfile* internal_default_instance() {
    return reinterpret_cast<const GoogleProfile*>(
               &_GoogleProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GoogleProfile& a, GoogleProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GoogleProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GoogleProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoogleProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GoogleProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.GoogleProfile";
  }
  protected:
  explicit GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
  };
  // string siteVerifyId = 1;
  void clear_siteverifyid();
  const std::string& siteverifyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_siteverifyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_siteverifyid();
  PROTOBUF_NODISCARD std::string* release_siteverifyid();
  void set_allocated_siteverifyid(std::string* siteverifyid);
  private:
  const std::string& _internal_siteverifyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_siteverifyid(const std::string& value);
  std::string* _internal_mutable_siteverifyid();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.GoogleProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siteverifyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class BaiduProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.BaiduProfile) */ {
 public:
  inline BaiduProfile() : BaiduProfile(nullptr) {}
  ~BaiduProfile() override;
  explicit constexpr BaiduProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaiduProfile(const BaiduProfile& from);
  BaiduProfile(BaiduProfile&& from) noexcept
    : BaiduProfile() {
    *this = ::std::move(from);
  }

  inline BaiduProfile& operator=(const BaiduProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaiduProfile& operator=(BaiduProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaiduProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaiduProfile* internal_default_instance() {
    return reinterpret_cast<const BaiduProfile*>(
               &_BaiduProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BaiduProfile& a, BaiduProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BaiduProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaiduProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaiduProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaiduProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaiduProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaiduProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaiduProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.BaiduProfile";
  }
  protected:
  explicit BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
    kSiteVerifyContentFieldNumber = 2,
  };
  // string siteVerifyId = 1;
  void clear_siteverifyid();
  const std::string& siteverifyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_siteverifyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_siteverifyid();
  PROTOBUF_NODISCARD std::string* release_siteverifyid();
  void set_allocated_siteverifyid(std::string* siteverifyid);
  private:
  const std::string& _internal_siteverifyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_siteverifyid(const std::string& value);
  std::string* _internal_mutable_siteverifyid();
  public:

  // string siteVerifyContent = 2;
  void clear_siteverifycontent();
  const std::string& siteverifycontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_siteverifycontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_siteverifycontent();
  PROTOBUF_NODISCARD std::string* release_siteverifycontent();
  void set_allocated_siteverifycontent(std::string* siteverifycontent);
  private:
  const std::string& _internal_siteverifycontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_siteverifycontent(const std::string& value);
  std::string* _internal_mutable_siteverifycontent();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.BaiduProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siteverifyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siteverifycontent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class WechatPayProfile final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.nut.v1.WechatPayProfile) */ {
 public:
  inline WechatPayProfile() : WechatPayProfile(nullptr) {}
  explicit constexpr WechatPayProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WechatPayProfile(const WechatPayProfile& from);
  WechatPayProfile(WechatPayProfile&& from) noexcept
    : WechatPayProfile() {
    *this = ::std::move(from);
  }

  inline WechatPayProfile& operator=(const WechatPayProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline WechatPayProfile& operator=(WechatPayProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WechatPayProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const WechatPayProfile* internal_default_instance() {
    return reinterpret_cast<const WechatPayProfile*>(
               &_WechatPayProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WechatPayProfile& a, WechatPayProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(WechatPayProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WechatPayProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WechatPayProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WechatPayProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WechatPayProfile& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WechatPayProfile& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.WechatPayProfile";
  }
  protected:
  explicit WechatPayProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.nut.v1.WechatPayProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class AliPayProfile final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.nut.v1.AliPayProfile) */ {
 public:
  inline AliPayProfile() : AliPayProfile(nullptr) {}
  explicit constexpr AliPayProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AliPayProfile(const AliPayProfile& from);
  AliPayProfile(AliPayProfile&& from) noexcept
    : AliPayProfile() {
    *this = ::std::move(from);
  }

  inline AliPayProfile& operator=(const AliPayProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline AliPayProfile& operator=(AliPayProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AliPayProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const AliPayProfile* internal_default_instance() {
    return reinterpret_cast<const AliPayProfile*>(
               &_AliPayProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AliPayProfile& a, AliPayProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(AliPayProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AliPayProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AliPayProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AliPayProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AliPayProfile& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AliPayProfile& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.AliPayProfile";
  }
  protected:
  explicit AliPayProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.nut.v1.AliPayProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteSetInfoRequest

// string lang = 1;
inline void SiteSetInfoRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& SiteSetInfoRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetInfoRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetInfoRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetInfoRequest.lang)
}
inline std::string* SiteSetInfoRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetInfoRequest.lang)
  return _s;
}
inline const std::string& SiteSetInfoRequest::_internal_lang() const {
  return lang_.Get();
}
inline void SiteSetInfoRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteSetInfoRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetInfoRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SiteSetInfoRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetInfoRequest.lang)
}

// .palm.nut.v1.LayoutResponse.Site info = 2;
inline bool SiteSetInfoRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SiteSetInfoRequest::has_info() const {
  return _internal_has_info();
}
inline void SiteSetInfoRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::palm::nut::v1::LayoutResponse_Site& SiteSetInfoRequest::_internal_info() const {
  const ::palm::nut::v1::LayoutResponse_Site* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::LayoutResponse_Site&>(
      ::palm::nut::v1::_LayoutResponse_Site_default_instance_);
}
inline const ::palm::nut::v1::LayoutResponse_Site& SiteSetInfoRequest::info() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetInfoRequest.info)
  return _internal_info();
}
inline void SiteSetInfoRequest::unsafe_arena_set_allocated_info(
    ::palm::nut::v1::LayoutResponse_Site* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.SiteSetInfoRequest.info)
}
inline ::palm::nut::v1::LayoutResponse_Site* SiteSetInfoRequest::release_info() {
  
  ::palm::nut::v1::LayoutResponse_Site* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_Site* SiteSetInfoRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetInfoRequest.info)
  
  ::palm::nut::v1::LayoutResponse_Site* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_Site* SiteSetInfoRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::LayoutResponse_Site>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::palm::nut::v1::LayoutResponse_Site* SiteSetInfoRequest::mutable_info() {
  ::palm::nut::v1::LayoutResponse_Site* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetInfoRequest.info)
  return _msg;
}
inline void SiteSetInfoRequest::set_allocated_info(::palm::nut::v1::LayoutResponse_Site* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::palm::nut::v1::LayoutResponse_Site>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetInfoRequest.info)
}

// -------------------------------------------------------------------

// SiteGetInfoRequest

// string lang = 1;
inline void SiteGetInfoRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& SiteGetInfoRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteGetInfoRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteGetInfoRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteGetInfoRequest.lang)
}
inline std::string* SiteGetInfoRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteGetInfoRequest.lang)
  return _s;
}
inline const std::string& SiteGetInfoRequest::_internal_lang() const {
  return lang_.Get();
}
inline void SiteGetInfoRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteGetInfoRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteGetInfoRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteGetInfoRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SiteGetInfoRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteGetInfoRequest.lang)
}

// -------------------------------------------------------------------

// SiteSetKeywordsRequest

// repeated string items = 1;
inline int SiteSetKeywordsRequest::_internal_items_size() const {
  return items_.size();
}
inline int SiteSetKeywordsRequest::items_size() const {
  return _internal_items_size();
}
inline void SiteSetKeywordsRequest::clear_items() {
  items_.Clear();
}
inline std::string* SiteSetKeywordsRequest::add_items() {
  std::string* _s = _internal_add_items();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _s;
}
inline const std::string& SiteSetKeywordsRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const std::string& SiteSetKeywordsRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetKeywordsRequest.items)
  return _internal_items(index);
}
inline std::string* SiteSetKeywordsRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetKeywordsRequest.items)
  return items_.Mutable(index);
}
inline void SiteSetKeywordsRequest::set_items(int index, const std::string& value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, std::string&& value) {
  items_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline std::string* SiteSetKeywordsRequest::_internal_add_items() {
  return items_.Add();
}
inline void SiteSetKeywordsRequest::add_items(const std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline void SiteSetKeywordsRequest::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SiteSetKeywordsRequest.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SiteSetKeywordsRequest::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SiteSetKeywordsRequest.items)
  return items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SiteSetKeywordsRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SiteSetKeywordsRequest.items)
  return &items_;
}

// -------------------------------------------------------------------

// SiteSetCopyrightRequest

// string content = 1;
inline void SiteSetCopyrightRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& SiteSetCopyrightRequest::content() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SiteSetCopyrightRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteSetCopyrightRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SiteSetCopyrightRequest.content)
}
inline std::string* SiteSetCopyrightRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SiteSetCopyrightRequest.content)
  return _s;
}
inline const std::string& SiteSetCopyrightRequest::_internal_content() const {
  return content_.Get();
}
inline void SiteSetCopyrightRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteSetCopyrightRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteSetCopyrightRequest::release_content() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SiteSetCopyrightRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SiteSetCopyrightRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SiteSetCopyrightRequest.content)
}

// -------------------------------------------------------------------

// LayoutResponse_Site_Author

// string name = 1;
inline void LayoutResponse_Site_Author::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Site_Author::name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.Author.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Site_Author::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.Author.name)
}
inline std::string* LayoutResponse_Site_Author::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.Author.name)
  return _s;
}
inline const std::string& LayoutResponse_Site_Author::_internal_name() const {
  return name_.Get();
}
inline void LayoutResponse_Site_Author::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site_Author::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site_Author::release_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.Author.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Site_Author::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.Author.name)
}

// string email = 2;
inline void LayoutResponse_Site_Author::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Site_Author::email() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.Author.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Site_Author::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.Author.email)
}
inline std::string* LayoutResponse_Site_Author::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.Author.email)
  return _s;
}
inline const std::string& LayoutResponse_Site_Author::_internal_email() const {
  return email_.Get();
}
inline void LayoutResponse_Site_Author::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site_Author::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site_Author::release_email() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.Author.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Site_Author::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.Author.email)
}

// -------------------------------------------------------------------

// LayoutResponse_Site

// string title = 1;
inline void LayoutResponse_Site::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Site::title() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Site::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.title)
}
inline std::string* LayoutResponse_Site::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.title)
  return _s;
}
inline const std::string& LayoutResponse_Site::_internal_title() const {
  return title_.Get();
}
inline void LayoutResponse_Site::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::release_title() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Site::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.title)
}

// string subhead = 2;
inline void LayoutResponse_Site::clear_subhead() {
  subhead_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Site::subhead() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.subhead)
  return _internal_subhead();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Site::set_subhead(ArgT0&& arg0, ArgT... args) {
 
 subhead_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.subhead)
}
inline std::string* LayoutResponse_Site::mutable_subhead() {
  std::string* _s = _internal_mutable_subhead();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.subhead)
  return _s;
}
inline const std::string& LayoutResponse_Site::_internal_subhead() const {
  return subhead_.Get();
}
inline void LayoutResponse_Site::_internal_set_subhead(const std::string& value) {
  
  subhead_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::_internal_mutable_subhead() {
  
  return subhead_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::release_subhead() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.subhead)
  return subhead_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Site::set_allocated_subhead(std::string* subhead) {
  if (subhead != nullptr) {
    
  } else {
    
  }
  subhead_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subhead,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subhead_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subhead_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.subhead)
}

// repeated string keywords = 3;
inline int LayoutResponse_Site::_internal_keywords_size() const {
  return keywords_.size();
}
inline int LayoutResponse_Site::keywords_size() const {
  return _internal_keywords_size();
}
inline void LayoutResponse_Site::clear_keywords() {
  keywords_.Clear();
}
inline std::string* LayoutResponse_Site::add_keywords() {
  std::string* _s = _internal_add_keywords();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.LayoutResponse.Site.keywords)
  return _s;
}
inline const std::string& LayoutResponse_Site::_internal_keywords(int index) const {
  return keywords_.Get(index);
}
inline const std::string& LayoutResponse_Site::keywords(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.keywords)
  return _internal_keywords(index);
}
inline std::string* LayoutResponse_Site::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.keywords)
  return keywords_.Mutable(index);
}
inline void LayoutResponse_Site::set_keywords(int index, const std::string& value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline void LayoutResponse_Site::set_keywords(int index, std::string&& value) {
  keywords_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline void LayoutResponse_Site::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline void LayoutResponse_Site::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline std::string* LayoutResponse_Site::_internal_add_keywords() {
  return keywords_.Add();
}
inline void LayoutResponse_Site::add_keywords(const std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline void LayoutResponse_Site::add_keywords(std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline void LayoutResponse_Site::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline void LayoutResponse_Site::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.LayoutResponse.Site.keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayoutResponse_Site::keywords() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LayoutResponse.Site.keywords)
  return keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayoutResponse_Site::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LayoutResponse.Site.keywords)
  return &keywords_;
}

// string description = 4;
inline void LayoutResponse_Site::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Site::description() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Site::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.description)
}
inline std::string* LayoutResponse_Site::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.description)
  return _s;
}
inline const std::string& LayoutResponse_Site::_internal_description() const {
  return description_.Get();
}
inline void LayoutResponse_Site::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::release_description() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Site::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.description)
}

// string copyright = 5;
inline void LayoutResponse_Site::clear_copyright() {
  copyright_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Site::copyright() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.copyright)
  return _internal_copyright();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Site::set_copyright(ArgT0&& arg0, ArgT... args) {
 
 copyright_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Site.copyright)
}
inline std::string* LayoutResponse_Site::mutable_copyright() {
  std::string* _s = _internal_mutable_copyright();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.copyright)
  return _s;
}
inline const std::string& LayoutResponse_Site::_internal_copyright() const {
  return copyright_.Get();
}
inline void LayoutResponse_Site::_internal_set_copyright(const std::string& value) {
  
  copyright_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::_internal_mutable_copyright() {
  
  return copyright_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Site::release_copyright() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.copyright)
  return copyright_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Site::set_allocated_copyright(std::string* copyright) {
  if (copyright != nullptr) {
    
  } else {
    
  }
  copyright_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), copyright,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (copyright_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    copyright_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.copyright)
}

// .palm.nut.v1.LayoutResponse.Site.Author author = 11;
inline bool LayoutResponse_Site::_internal_has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline bool LayoutResponse_Site::has_author() const {
  return _internal_has_author();
}
inline void LayoutResponse_Site::clear_author() {
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
}
inline const ::palm::nut::v1::LayoutResponse_Site_Author& LayoutResponse_Site::_internal_author() const {
  const ::palm::nut::v1::LayoutResponse_Site_Author* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::LayoutResponse_Site_Author&>(
      ::palm::nut::v1::_LayoutResponse_Site_Author_default_instance_);
}
inline const ::palm::nut::v1::LayoutResponse_Site_Author& LayoutResponse_Site::author() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Site.author)
  return _internal_author();
}
inline void LayoutResponse_Site::unsafe_arena_set_allocated_author(
    ::palm::nut::v1::LayoutResponse_Site_Author* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LayoutResponse.Site.author)
}
inline ::palm::nut::v1::LayoutResponse_Site_Author* LayoutResponse_Site::release_author() {
  
  ::palm::nut::v1::LayoutResponse_Site_Author* temp = author_;
  author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_Site_Author* LayoutResponse_Site::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Site.author)
  
  ::palm::nut::v1::LayoutResponse_Site_Author* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_Site_Author* LayoutResponse_Site::_internal_mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::LayoutResponse_Site_Author>(GetArenaForAllocation());
    author_ = p;
  }
  return author_;
}
inline ::palm::nut::v1::LayoutResponse_Site_Author* LayoutResponse_Site::mutable_author() {
  ::palm::nut::v1::LayoutResponse_Site_Author* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Site.author)
  return _msg;
}
inline void LayoutResponse_Site::set_allocated_author(::palm::nut::v1::LayoutResponse_Site_Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::palm::nut::v1::LayoutResponse_Site_Author>::GetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Site.author)
}

// -------------------------------------------------------------------

// LayoutResponse_User

// string real_name = 1;
inline void LayoutResponse_User::clear_real_name() {
  real_name_.ClearToEmpty();
}
inline const std::string& LayoutResponse_User::real_name() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.User.real_name)
  return _internal_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_User::set_real_name(ArgT0&& arg0, ArgT... args) {
 
 real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.User.real_name)
}
inline std::string* LayoutResponse_User::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.User.real_name)
  return _s;
}
inline const std::string& LayoutResponse_User::_internal_real_name() const {
  return real_name_.Get();
}
inline void LayoutResponse_User::_internal_set_real_name(const std::string& value) {
  
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::_internal_mutable_real_name() {
  
  return real_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::release_real_name() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.User.real_name)
  return real_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_User::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    
  } else {
    
  }
  real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (real_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    real_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.User.real_name)
}

// string logo = 2;
inline void LayoutResponse_User::clear_logo() {
  logo_.ClearToEmpty();
}
inline const std::string& LayoutResponse_User::logo() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.User.logo)
  return _internal_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_User::set_logo(ArgT0&& arg0, ArgT... args) {
 
 logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.User.logo)
}
inline std::string* LayoutResponse_User::mutable_logo() {
  std::string* _s = _internal_mutable_logo();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.User.logo)
  return _s;
}
inline const std::string& LayoutResponse_User::_internal_logo() const {
  return logo_.Get();
}
inline void LayoutResponse_User::_internal_set_logo(const std::string& value) {
  
  logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::_internal_mutable_logo() {
  
  return logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::release_logo() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.User.logo)
  return logo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_User::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (logo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.User.logo)
}

// string lang = 11;
inline void LayoutResponse_User::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LayoutResponse_User::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.User.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_User::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.User.lang)
}
inline std::string* LayoutResponse_User::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.User.lang)
  return _s;
}
inline const std::string& LayoutResponse_User::_internal_lang() const {
  return lang_.Get();
}
inline void LayoutResponse_User::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.User.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_User::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.User.lang)
}

// string time_zone = 12;
inline void LayoutResponse_User::clear_time_zone() {
  time_zone_.ClearToEmpty();
}
inline const std::string& LayoutResponse_User::time_zone() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.User.time_zone)
  return _internal_time_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_User::set_time_zone(ArgT0&& arg0, ArgT... args) {
 
 time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.User.time_zone)
}
inline std::string* LayoutResponse_User::mutable_time_zone() {
  std::string* _s = _internal_mutable_time_zone();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.User.time_zone)
  return _s;
}
inline const std::string& LayoutResponse_User::_internal_time_zone() const {
  return time_zone_.Get();
}
inline void LayoutResponse_User::_internal_set_time_zone(const std::string& value) {
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::_internal_mutable_time_zone() {
  
  return time_zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::release_time_zone() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.User.time_zone)
  return time_zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_User::set_allocated_time_zone(std::string* time_zone) {
  if (time_zone != nullptr) {
    
  } else {
    
  }
  time_zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_zone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    time_zone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.User.time_zone)
}

// optional string token = 21;
inline bool LayoutResponse_User::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayoutResponse_User::has_token() const {
  return _internal_has_token();
}
inline void LayoutResponse_User::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayoutResponse_User::token() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.User.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_User::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.User.token)
}
inline std::string* LayoutResponse_User::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.User.token)
  return _s;
}
inline const std::string& LayoutResponse_User::_internal_token() const {
  return token_.Get();
}
inline void LayoutResponse_User::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_User::release_token() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.User.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayoutResponse_User::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.User.token)
}

// -------------------------------------------------------------------

// LayoutResponse_Menu

// string label = 1;
inline void LayoutResponse_Menu::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Menu::label() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Menu.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Menu::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Menu.label)
}
inline std::string* LayoutResponse_Menu::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Menu.label)
  return _s;
}
inline const std::string& LayoutResponse_Menu::_internal_label() const {
  return label_.Get();
}
inline void LayoutResponse_Menu::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Menu::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Menu::release_label() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Menu.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Menu::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Menu.label)
}

// string path = 2;
inline void LayoutResponse_Menu::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& LayoutResponse_Menu::path() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Menu.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Menu::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Menu.path)
}
inline std::string* LayoutResponse_Menu::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Menu.path)
  return _s;
}
inline const std::string& LayoutResponse_Menu::_internal_path() const {
  return path_.Get();
}
inline void LayoutResponse_Menu::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Menu::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Menu::release_path() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Menu.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LayoutResponse_Menu::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Menu.path)
}

// optional string icon = 3;
inline bool LayoutResponse_Menu::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayoutResponse_Menu::has_icon() const {
  return _internal_has_icon();
}
inline void LayoutResponse_Menu::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayoutResponse_Menu::icon() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Menu.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayoutResponse_Menu::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.Menu.icon)
}
inline std::string* LayoutResponse_Menu::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Menu.icon)
  return _s;
}
inline const std::string& LayoutResponse_Menu::_internal_icon() const {
  return icon_.Get();
}
inline void LayoutResponse_Menu::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Menu::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000001u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LayoutResponse_Menu::release_icon() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.Menu.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayoutResponse_Menu::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.Menu.icon)
}

// repeated .palm.nut.v1.LayoutResponse.Menu items = 9;
inline int LayoutResponse_Menu::_internal_items_size() const {
  return items_.size();
}
inline int LayoutResponse_Menu::items_size() const {
  return _internal_items_size();
}
inline void LayoutResponse_Menu::clear_items() {
  items_.Clear();
}
inline ::palm::nut::v1::LayoutResponse_Menu* LayoutResponse_Menu::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.Menu.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >*
LayoutResponse_Menu::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LayoutResponse.Menu.items)
  return &items_;
}
inline const ::palm::nut::v1::LayoutResponse_Menu& LayoutResponse_Menu::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::palm::nut::v1::LayoutResponse_Menu& LayoutResponse_Menu::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.Menu.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::LayoutResponse_Menu* LayoutResponse_Menu::_internal_add_items() {
  return items_.Add();
}
inline ::palm::nut::v1::LayoutResponse_Menu* LayoutResponse_Menu::add_items() {
  ::palm::nut::v1::LayoutResponse_Menu* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.LayoutResponse.Menu.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >&
LayoutResponse_Menu::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LayoutResponse.Menu.items)
  return items_;
}

// -------------------------------------------------------------------

// LayoutResponse

// .palm.nut.v1.LayoutResponse.Site site = 11;
inline bool LayoutResponse::_internal_has_site() const {
  return this != internal_default_instance() && site_ != nullptr;
}
inline bool LayoutResponse::has_site() const {
  return _internal_has_site();
}
inline void LayoutResponse::clear_site() {
  if (GetArenaForAllocation() == nullptr && site_ != nullptr) {
    delete site_;
  }
  site_ = nullptr;
}
inline const ::palm::nut::v1::LayoutResponse_Site& LayoutResponse::_internal_site() const {
  const ::palm::nut::v1::LayoutResponse_Site* p = site_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::LayoutResponse_Site&>(
      ::palm::nut::v1::_LayoutResponse_Site_default_instance_);
}
inline const ::palm::nut::v1::LayoutResponse_Site& LayoutResponse::site() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.site)
  return _internal_site();
}
inline void LayoutResponse::unsafe_arena_set_allocated_site(
    ::palm::nut::v1::LayoutResponse_Site* site) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(site_);
  }
  site_ = site;
  if (site) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LayoutResponse.site)
}
inline ::palm::nut::v1::LayoutResponse_Site* LayoutResponse::release_site() {
  
  ::palm::nut::v1::LayoutResponse_Site* temp = site_;
  site_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_Site* LayoutResponse::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.site)
  
  ::palm::nut::v1::LayoutResponse_Site* temp = site_;
  site_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_Site* LayoutResponse::_internal_mutable_site() {
  
  if (site_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::LayoutResponse_Site>(GetArenaForAllocation());
    site_ = p;
  }
  return site_;
}
inline ::palm::nut::v1::LayoutResponse_Site* LayoutResponse::mutable_site() {
  ::palm::nut::v1::LayoutResponse_Site* _msg = _internal_mutable_site();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.site)
  return _msg;
}
inline void LayoutResponse::set_allocated_site(::palm::nut::v1::LayoutResponse_Site* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete site_;
  }
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::palm::nut::v1::LayoutResponse_Site>::GetOwningArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.site)
}

// .palm.nut.v1.LayoutResponse.User user = 12;
inline bool LayoutResponse::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool LayoutResponse::has_user() const {
  return _internal_has_user();
}
inline void LayoutResponse::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::palm::nut::v1::LayoutResponse_User& LayoutResponse::_internal_user() const {
  const ::palm::nut::v1::LayoutResponse_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::nut::v1::LayoutResponse_User&>(
      ::palm::nut::v1::_LayoutResponse_User_default_instance_);
}
inline const ::palm::nut::v1::LayoutResponse_User& LayoutResponse::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.user)
  return _internal_user();
}
inline void LayoutResponse::unsafe_arena_set_allocated_user(
    ::palm::nut::v1::LayoutResponse_User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LayoutResponse.user)
}
inline ::palm::nut::v1::LayoutResponse_User* LayoutResponse::release_user() {
  
  ::palm::nut::v1::LayoutResponse_User* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_User* LayoutResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LayoutResponse.user)
  
  ::palm::nut::v1::LayoutResponse_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::palm::nut::v1::LayoutResponse_User* LayoutResponse::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::nut::v1::LayoutResponse_User>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::palm::nut::v1::LayoutResponse_User* LayoutResponse::mutable_user() {
  ::palm::nut::v1::LayoutResponse_User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.user)
  return _msg;
}
inline void LayoutResponse::set_allocated_user(::palm::nut::v1::LayoutResponse_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::palm::nut::v1::LayoutResponse_User>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LayoutResponse.user)
}

// repeated .palm.nut.v1.LayoutResponse.Menu menus = 13;
inline int LayoutResponse::_internal_menus_size() const {
  return menus_.size();
}
inline int LayoutResponse::menus_size() const {
  return _internal_menus_size();
}
inline void LayoutResponse::clear_menus() {
  menus_.Clear();
}
inline ::palm::nut::v1::LayoutResponse_Menu* LayoutResponse::mutable_menus(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.menus)
  return menus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >*
LayoutResponse::mutable_menus() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LayoutResponse.menus)
  return &menus_;
}
inline const ::palm::nut::v1::LayoutResponse_Menu& LayoutResponse::_internal_menus(int index) const {
  return menus_.Get(index);
}
inline const ::palm::nut::v1::LayoutResponse_Menu& LayoutResponse::menus(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.menus)
  return _internal_menus(index);
}
inline ::palm::nut::v1::LayoutResponse_Menu* LayoutResponse::_internal_add_menus() {
  return menus_.Add();
}
inline ::palm::nut::v1::LayoutResponse_Menu* LayoutResponse::add_menus() {
  ::palm::nut::v1::LayoutResponse_Menu* _add = _internal_add_menus();
  // @@protoc_insertion_point(field_add:palm.nut.v1.LayoutResponse.menus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LayoutResponse_Menu >&
LayoutResponse::menus() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LayoutResponse.menus)
  return menus_;
}

// repeated string languages = 14;
inline int LayoutResponse::_internal_languages_size() const {
  return languages_.size();
}
inline int LayoutResponse::languages_size() const {
  return _internal_languages_size();
}
inline void LayoutResponse::clear_languages() {
  languages_.Clear();
}
inline std::string* LayoutResponse::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.LayoutResponse.languages)
  return _s;
}
inline const std::string& LayoutResponse::_internal_languages(int index) const {
  return languages_.Get(index);
}
inline const std::string& LayoutResponse::languages(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LayoutResponse.languages)
  return _internal_languages(index);
}
inline std::string* LayoutResponse::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LayoutResponse.languages)
  return languages_.Mutable(index);
}
inline void LayoutResponse::set_languages(int index, const std::string& value) {
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.languages)
}
inline void LayoutResponse::set_languages(int index, std::string&& value) {
  languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.LayoutResponse.languages)
}
inline void LayoutResponse::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.LayoutResponse.languages)
}
inline void LayoutResponse::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.LayoutResponse.languages)
}
inline std::string* LayoutResponse::_internal_add_languages() {
  return languages_.Add();
}
inline void LayoutResponse::add_languages(const std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.LayoutResponse.languages)
}
inline void LayoutResponse::add_languages(std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.LayoutResponse.languages)
}
inline void LayoutResponse::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.LayoutResponse.languages)
}
inline void LayoutResponse::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.LayoutResponse.languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LayoutResponse::languages() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LayoutResponse.languages)
  return languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LayoutResponse::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LayoutResponse.languages)
  return &languages_;
}

// -------------------------------------------------------------------

// LocaleSetRequest

// string code = 1;
inline void LocaleSetRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleSetRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleSetRequest.code)
}
inline std::string* LocaleSetRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleSetRequest.code)
  return _s;
}
inline const std::string& LocaleSetRequest::_internal_code() const {
  return code_.Get();
}
inline void LocaleSetRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleSetRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleSetRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleSetRequest.code)
}

// string lang = 2;
inline void LocaleSetRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleSetRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleSetRequest.lang)
}
inline std::string* LocaleSetRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleSetRequest.lang)
  return _s;
}
inline const std::string& LocaleSetRequest::_internal_lang() const {
  return lang_.Get();
}
inline void LocaleSetRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleSetRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleSetRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleSetRequest.lang)
}

// string message = 3;
inline void LocaleSetRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleSetRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleSetRequest.message)
}
inline std::string* LocaleSetRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleSetRequest.message)
  return _s;
}
inline const std::string& LocaleSetRequest::_internal_message() const {
  return message_.Get();
}
inline void LocaleSetRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleSetRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleSetRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleSetRequest.message)
}

// -------------------------------------------------------------------

// LocaleIndexRequest

// string lang = 1;
inline void LocaleIndexRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexRequest.lang)
}
inline std::string* LocaleIndexRequest::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexRequest.lang)
  return _s;
}
inline const std::string& LocaleIndexRequest::_internal_lang() const {
  return lang_.Get();
}
inline void LocaleIndexRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexRequest.lang)
}

// -------------------------------------------------------------------

// LocaleIndexResponse_Item

// int64 id = 1;
inline void LocaleIndexResponse_Item::clear_id() {
  id_ = int64_t{0};
}
inline int64_t LocaleIndexResponse_Item::_internal_id() const {
  return id_;
}
inline int64_t LocaleIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.id)
  return _internal_id();
}
inline void LocaleIndexResponse_Item::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void LocaleIndexResponse_Item::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.id)
}

// string code = 2;
inline void LocaleIndexResponse_Item::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.code)
}
inline std::string* LocaleIndexResponse_Item::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_code() const {
  return code_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexResponse_Item::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.code)
}

// string lang = 3;
inline void LocaleIndexResponse_Item::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.lang)
}
inline std::string* LocaleIndexResponse_Item::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_lang() const {
  return lang_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexResponse_Item::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lang_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.lang)
}

// string message = 4;
inline void LocaleIndexResponse_Item::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.message)
}
inline std::string* LocaleIndexResponse_Item::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _s;
}
inline const std::string& LocaleIndexResponse_Item::_internal_message() const {
  return message_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexResponse_Item::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.message)
}

// .google.protobuf.Timestamp updated_at = 5;
inline bool LocaleIndexResponse_Item::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool LocaleIndexResponse_Item::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void LocaleIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_at_ = p;
  }
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _msg;
}
inline void LocaleIndexResponse_Item::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// LocaleIndexResponse

// repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleIndexResponse::_internal_items_size() const {
  return items_.size();
}
inline int LocaleIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleIndexResponse::clear_items() {
  items_.Clear();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
LocaleIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LocaleIndexResponse.items)
  return &items_;
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::_internal_add_items() {
  return items_.Add();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::add_items() {
  ::palm::nut::v1::LocaleIndexResponse_Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:palm.nut.v1.LocaleIndexResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
LocaleIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LocaleIndexResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// SmtpProfile

// string host = 1;
inline void SmtpProfile::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& SmtpProfile::host() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.host)
}
inline std::string* SmtpProfile::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.host)
  return _s;
}
inline const std::string& SmtpProfile::_internal_host() const {
  return host_.Get();
}
inline void SmtpProfile::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_host() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpProfile.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SmtpProfile::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpProfile.host)
}

// uint32 port = 2;
inline void SmtpProfile::clear_port() {
  port_ = 0u;
}
inline uint32_t SmtpProfile::_internal_port() const {
  return port_;
}
inline uint32_t SmtpProfile::port() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.port)
  return _internal_port();
}
inline void SmtpProfile::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void SmtpProfile::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.port)
}

// string user = 3;
inline void SmtpProfile::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& SmtpProfile::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.user)
}
inline std::string* SmtpProfile::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.user)
  return _s;
}
inline const std::string& SmtpProfile::_internal_user() const {
  return user_.Get();
}
inline void SmtpProfile::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_user() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpProfile.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SmtpProfile::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpProfile.user)
}

// string password = 4;
inline void SmtpProfile::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& SmtpProfile::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpProfile::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.password)
}
inline std::string* SmtpProfile::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.password)
  return _s;
}
inline const std::string& SmtpProfile::_internal_password() const {
  return password_.Get();
}
inline void SmtpProfile::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SmtpProfile::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SmtpProfile::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpProfile.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SmtpProfile::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpProfile.password)
}

// repeated string cc = 5;
inline int SmtpProfile::_internal_cc_size() const {
  return cc_.size();
}
inline int SmtpProfile::cc_size() const {
  return _internal_cc_size();
}
inline void SmtpProfile::clear_cc() {
  cc_.Clear();
}
inline std::string* SmtpProfile::add_cc() {
  std::string* _s = _internal_add_cc();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SmtpProfile.cc)
  return _s;
}
inline const std::string& SmtpProfile::_internal_cc(int index) const {
  return cc_.Get(index);
}
inline const std::string& SmtpProfile::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.cc)
  return _internal_cc(index);
}
inline std::string* SmtpProfile::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.cc)
  return cc_.Mutable(index);
}
inline void SmtpProfile::set_cc(int index, const std::string& value) {
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.cc)
}
inline void SmtpProfile::set_cc(int index, std::string&& value) {
  cc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.cc)
}
inline void SmtpProfile::set_cc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SmtpProfile.cc)
}
inline void SmtpProfile::set_cc(int index, const char* value, size_t size) {
  cc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SmtpProfile.cc)
}
inline std::string* SmtpProfile::_internal_add_cc() {
  return cc_.Add();
}
inline void SmtpProfile::add_cc(const std::string& value) {
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpProfile.cc)
}
inline void SmtpProfile::add_cc(std::string&& value) {
  cc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpProfile.cc)
}
inline void SmtpProfile::add_cc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SmtpProfile.cc)
}
inline void SmtpProfile::add_cc(const char* value, size_t size) {
  cc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SmtpProfile.cc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmtpProfile::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpProfile.cc)
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmtpProfile::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpProfile.cc)
  return &cc_;
}

// repeated string bcc = 6;
inline int SmtpProfile::_internal_bcc_size() const {
  return bcc_.size();
}
inline int SmtpProfile::bcc_size() const {
  return _internal_bcc_size();
}
inline void SmtpProfile::clear_bcc() {
  bcc_.Clear();
}
inline std::string* SmtpProfile::add_bcc() {
  std::string* _s = _internal_add_bcc();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SmtpProfile.bcc)
  return _s;
}
inline const std::string& SmtpProfile::_internal_bcc(int index) const {
  return bcc_.Get(index);
}
inline const std::string& SmtpProfile::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpProfile.bcc)
  return _internal_bcc(index);
}
inline std::string* SmtpProfile::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpProfile.bcc)
  return bcc_.Mutable(index);
}
inline void SmtpProfile::set_bcc(int index, const std::string& value) {
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.bcc)
}
inline void SmtpProfile::set_bcc(int index, std::string&& value) {
  bcc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpProfile.bcc)
}
inline void SmtpProfile::set_bcc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SmtpProfile.bcc)
}
inline void SmtpProfile::set_bcc(int index, const char* value, size_t size) {
  bcc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SmtpProfile.bcc)
}
inline std::string* SmtpProfile::_internal_add_bcc() {
  return bcc_.Add();
}
inline void SmtpProfile::add_bcc(const std::string& value) {
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpProfile.bcc)
}
inline void SmtpProfile::add_bcc(std::string&& value) {
  bcc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpProfile.bcc)
}
inline void SmtpProfile::add_bcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SmtpProfile.bcc)
}
inline void SmtpProfile::add_bcc(const char* value, size_t size) {
  bcc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SmtpProfile.bcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmtpProfile::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpProfile.bcc)
  return bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmtpProfile::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpProfile.bcc)
  return &bcc_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SmtpTask

// string subject = 1;
inline void SmtpTask::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& SmtpTask::subject() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpTask.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpTask::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.subject)
}
inline std::string* SmtpTask::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpTask.subject)
  return _s;
}
inline const std::string& SmtpTask::_internal_subject() const {
  return subject_.Get();
}
inline void SmtpTask::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SmtpTask::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SmtpTask::release_subject() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpTask.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SmtpTask::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpTask.subject)
}

// string body = 2;
inline void SmtpTask::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& SmtpTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpTask.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmtpTask::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.body)
}
inline std::string* SmtpTask::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpTask.body)
  return _s;
}
inline const std::string& SmtpTask::_internal_body() const {
  return body_.Get();
}
inline void SmtpTask::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SmtpTask::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SmtpTask::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.SmtpTask.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SmtpTask::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.SmtpTask.body)
}

// .palm.nut.v1.SmtpTask.Type content_type = 3;
inline void SmtpTask::clear_content_type() {
  content_type_ = 0;
}
inline ::palm::nut::v1::SmtpTask_Type SmtpTask::_internal_content_type() const {
  return static_cast< ::palm::nut::v1::SmtpTask_Type >(content_type_);
}
inline ::palm::nut::v1::SmtpTask_Type SmtpTask::content_type() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpTask.content_type)
  return _internal_content_type();
}
inline void SmtpTask::_internal_set_content_type(::palm::nut::v1::SmtpTask_Type value) {
  
  content_type_ = value;
}
inline void SmtpTask::set_content_type(::palm::nut::v1::SmtpTask_Type value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.content_type)
}

// map<string, bytes> attachments = 4;
inline int SmtpTask::_internal_attachments_size() const {
  return attachments_.size();
}
inline int SmtpTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void SmtpTask::clear_attachments() {
  attachments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SmtpTask::_internal_attachments() const {
  return attachments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SmtpTask::attachments() const {
  // @@protoc_insertion_point(field_map:palm.nut.v1.SmtpTask.attachments)
  return _internal_attachments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SmtpTask::_internal_mutable_attachments() {
  return attachments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SmtpTask::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_map:palm.nut.v1.SmtpTask.attachments)
  return _internal_mutable_attachments();
}

// repeated string to = 11;
inline int SmtpTask::_internal_to_size() const {
  return to_.size();
}
inline int SmtpTask::to_size() const {
  return _internal_to_size();
}
inline void SmtpTask::clear_to() {
  to_.Clear();
}
inline std::string* SmtpTask::add_to() {
  std::string* _s = _internal_add_to();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SmtpTask.to)
  return _s;
}
inline const std::string& SmtpTask::_internal_to(int index) const {
  return to_.Get(index);
}
inline const std::string& SmtpTask::to(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpTask.to)
  return _internal_to(index);
}
inline std::string* SmtpTask::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpTask.to)
  return to_.Mutable(index);
}
inline void SmtpTask::set_to(int index, const std::string& value) {
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.to)
}
inline void SmtpTask::set_to(int index, std::string&& value) {
  to_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.to)
}
inline void SmtpTask::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SmtpTask.to)
}
inline void SmtpTask::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SmtpTask.to)
}
inline std::string* SmtpTask::_internal_add_to() {
  return to_.Add();
}
inline void SmtpTask::add_to(const std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpTask.to)
}
inline void SmtpTask::add_to(std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpTask.to)
}
inline void SmtpTask::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SmtpTask.to)
}
inline void SmtpTask::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SmtpTask.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmtpTask::to() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpTask.to)
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmtpTask::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpTask.to)
  return &to_;
}

// repeated string cc = 12;
inline int SmtpTask::_internal_cc_size() const {
  return cc_.size();
}
inline int SmtpTask::cc_size() const {
  return _internal_cc_size();
}
inline void SmtpTask::clear_cc() {
  cc_.Clear();
}
inline std::string* SmtpTask::add_cc() {
  std::string* _s = _internal_add_cc();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SmtpTask.cc)
  return _s;
}
inline const std::string& SmtpTask::_internal_cc(int index) const {
  return cc_.Get(index);
}
inline const std::string& SmtpTask::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpTask.cc)
  return _internal_cc(index);
}
inline std::string* SmtpTask::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpTask.cc)
  return cc_.Mutable(index);
}
inline void SmtpTask::set_cc(int index, const std::string& value) {
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.cc)
}
inline void SmtpTask::set_cc(int index, std::string&& value) {
  cc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.cc)
}
inline void SmtpTask::set_cc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SmtpTask.cc)
}
inline void SmtpTask::set_cc(int index, const char* value, size_t size) {
  cc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SmtpTask.cc)
}
inline std::string* SmtpTask::_internal_add_cc() {
  return cc_.Add();
}
inline void SmtpTask::add_cc(const std::string& value) {
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpTask.cc)
}
inline void SmtpTask::add_cc(std::string&& value) {
  cc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpTask.cc)
}
inline void SmtpTask::add_cc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SmtpTask.cc)
}
inline void SmtpTask::add_cc(const char* value, size_t size) {
  cc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SmtpTask.cc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmtpTask::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpTask.cc)
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmtpTask::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpTask.cc)
  return &cc_;
}

// repeated string bcc = 13;
inline int SmtpTask::_internal_bcc_size() const {
  return bcc_.size();
}
inline int SmtpTask::bcc_size() const {
  return _internal_bcc_size();
}
inline void SmtpTask::clear_bcc() {
  bcc_.Clear();
}
inline std::string* SmtpTask::add_bcc() {
  std::string* _s = _internal_add_bcc();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.SmtpTask.bcc)
  return _s;
}
inline const std::string& SmtpTask::_internal_bcc(int index) const {
  return bcc_.Get(index);
}
inline const std::string& SmtpTask::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.SmtpTask.bcc)
  return _internal_bcc(index);
}
inline std::string* SmtpTask::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.SmtpTask.bcc)
  return bcc_.Mutable(index);
}
inline void SmtpTask::set_bcc(int index, const std::string& value) {
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.bcc)
}
inline void SmtpTask::set_bcc(int index, std::string&& value) {
  bcc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.SmtpTask.bcc)
}
inline void SmtpTask::set_bcc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.SmtpTask.bcc)
}
inline void SmtpTask::set_bcc(int index, const char* value, size_t size) {
  bcc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.SmtpTask.bcc)
}
inline std::string* SmtpTask::_internal_add_bcc() {
  return bcc_.Add();
}
inline void SmtpTask::add_bcc(const std::string& value) {
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpTask.bcc)
}
inline void SmtpTask::add_bcc(std::string&& value) {
  bcc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.SmtpTask.bcc)
}
inline void SmtpTask::add_bcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.SmtpTask.bcc)
}
inline void SmtpTask::add_bcc(const char* value, size_t size) {
  bcc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.SmtpTask.bcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SmtpTask::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.SmtpTask.bcc)
  return bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SmtpTask::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.SmtpTask.bcc)
  return &bcc_;
}

// -------------------------------------------------------------------

// TwilioProfile

// string account_sid = 1;
inline void TwilioProfile::clear_account_sid() {
  account_sid_.ClearToEmpty();
}
inline const std::string& TwilioProfile::account_sid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.account_sid)
  return _internal_account_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioProfile::set_account_sid(ArgT0&& arg0, ArgT... args) {
 
 account_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.account_sid)
}
inline std::string* TwilioProfile::mutable_account_sid() {
  std::string* _s = _internal_mutable_account_sid();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.account_sid)
  return _s;
}
inline const std::string& TwilioProfile::_internal_account_sid() const {
  return account_sid_.Get();
}
inline void TwilioProfile::_internal_set_account_sid(const std::string& value) {
  
  account_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_account_sid() {
  
  return account_sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_account_sid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.account_sid)
  return account_sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioProfile::set_allocated_account_sid(std::string* account_sid) {
  if (account_sid != nullptr) {
    
  } else {
    
  }
  account_sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_sid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_sid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.account_sid)
}

// string auto_token = 2;
inline void TwilioProfile::clear_auto_token() {
  auto_token_.ClearToEmpty();
}
inline const std::string& TwilioProfile::auto_token() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.auto_token)
  return _internal_auto_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioProfile::set_auto_token(ArgT0&& arg0, ArgT... args) {
 
 auto_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.auto_token)
}
inline std::string* TwilioProfile::mutable_auto_token() {
  std::string* _s = _internal_mutable_auto_token();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.auto_token)
  return _s;
}
inline const std::string& TwilioProfile::_internal_auto_token() const {
  return auto_token_.Get();
}
inline void TwilioProfile::_internal_set_auto_token(const std::string& value) {
  
  auto_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_auto_token() {
  
  return auto_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_auto_token() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.auto_token)
  return auto_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioProfile::set_allocated_auto_token(std::string* auto_token) {
  if (auto_token != nullptr) {
    
  } else {
    
  }
  auto_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auto_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auto_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.auto_token)
}

// string from = 3;
inline void TwilioProfile::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TwilioProfile::from() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioProfile::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.from)
}
inline std::string* TwilioProfile::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.from)
  return _s;
}
inline const std::string& TwilioProfile::_internal_from() const {
  return from_.Get();
}
inline void TwilioProfile::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_from() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioProfile::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.from)
}

// -------------------------------------------------------------------

// TwilioTask

// repeated string to = 1;
inline int TwilioTask::_internal_to_size() const {
  return to_.size();
}
inline int TwilioTask::to_size() const {
  return _internal_to_size();
}
inline void TwilioTask::clear_to() {
  to_.Clear();
}
inline std::string* TwilioTask::add_to() {
  std::string* _s = _internal_add_to();
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.TwilioTask.to)
  return _s;
}
inline const std::string& TwilioTask::_internal_to(int index) const {
  return to_.Get(index);
}
inline const std::string& TwilioTask::to(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioTask.to)
  return _internal_to(index);
}
inline std::string* TwilioTask::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioTask.to)
  return to_.Mutable(index);
}
inline void TwilioTask::set_to(int index, const std::string& value) {
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::set_to(int index, std::string&& value) {
  to_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.TwilioTask.to)
}
inline std::string* TwilioTask::_internal_add_to() {
  return to_.Add();
}
inline void TwilioTask::add_to(const std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::add_to(std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.TwilioTask.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TwilioTask::to() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.TwilioTask.to)
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TwilioTask::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.TwilioTask.to)
  return &to_;
}

// string body = 2;
inline void TwilioTask::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& TwilioTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioTask.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioTask::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.body)
}
inline std::string* TwilioTask::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioTask.body)
  return _s;
}
inline const std::string& TwilioTask::_internal_body() const {
  return body_.Get();
}
inline void TwilioTask::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioTask::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioTask::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioTask.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioTask::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioTask.body)
}

// optional string callback = 3;
inline bool TwilioTask::_internal_has_callback() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TwilioTask::has_callback() const {
  return _internal_has_callback();
}
inline void TwilioTask::clear_callback() {
  callback_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TwilioTask::callback() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioTask.callback)
  return _internal_callback();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioTask::set_callback(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 callback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.callback)
}
inline std::string* TwilioTask::mutable_callback() {
  std::string* _s = _internal_mutable_callback();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioTask.callback)
  return _s;
}
inline const std::string& TwilioTask::_internal_callback() const {
  return callback_.Get();
}
inline void TwilioTask::_internal_set_callback(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioTask::_internal_mutable_callback() {
  _has_bits_[0] |= 0x00000001u;
  return callback_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioTask::release_callback() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioTask.callback)
  if (!_internal_has_callback()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = callback_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callback_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TwilioTask::set_allocated_callback(std::string* callback) {
  if (callback != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callback_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callback_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioTask.callback)
}

// -------------------------------------------------------------------

// GoogleProfile

// string siteVerifyId = 1;
inline void GoogleProfile::clear_siteverifyid() {
  siteverifyid_.ClearToEmpty();
}
inline const std::string& GoogleProfile::siteverifyid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleProfile.siteVerifyId)
  return _internal_siteverifyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleProfile::set_siteverifyid(ArgT0&& arg0, ArgT... args) {
 
 siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleProfile.siteVerifyId)
}
inline std::string* GoogleProfile::mutable_siteverifyid() {
  std::string* _s = _internal_mutable_siteverifyid();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleProfile.siteVerifyId)
  return _s;
}
inline const std::string& GoogleProfile::_internal_siteverifyid() const {
  return siteverifyid_.Get();
}
inline void GoogleProfile::_internal_set_siteverifyid(const std::string& value) {
  
  siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GoogleProfile::_internal_mutable_siteverifyid() {
  
  return siteverifyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GoogleProfile::release_siteverifyid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleProfile.siteVerifyId)
  return siteverifyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GoogleProfile::set_allocated_siteverifyid(std::string* siteverifyid) {
  if (siteverifyid != nullptr) {
    
  } else {
    
  }
  siteverifyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siteverifyid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (siteverifyid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    siteverifyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleProfile.siteVerifyId)
}

// -------------------------------------------------------------------

// BaiduProfile

// string siteVerifyId = 1;
inline void BaiduProfile::clear_siteverifyid() {
  siteverifyid_.ClearToEmpty();
}
inline const std::string& BaiduProfile::siteverifyid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.siteVerifyId)
  return _internal_siteverifyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaiduProfile::set_siteverifyid(ArgT0&& arg0, ArgT... args) {
 
 siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.BaiduProfile.siteVerifyId)
}
inline std::string* BaiduProfile::mutable_siteverifyid() {
  std::string* _s = _internal_mutable_siteverifyid();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.siteVerifyId)
  return _s;
}
inline const std::string& BaiduProfile::_internal_siteverifyid() const {
  return siteverifyid_.Get();
}
inline void BaiduProfile::_internal_set_siteverifyid(const std::string& value) {
  
  siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaiduProfile::_internal_mutable_siteverifyid() {
  
  return siteverifyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaiduProfile::release_siteverifyid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.siteVerifyId)
  return siteverifyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaiduProfile::set_allocated_siteverifyid(std::string* siteverifyid) {
  if (siteverifyid != nullptr) {
    
  } else {
    
  }
  siteverifyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siteverifyid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (siteverifyid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    siteverifyid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.siteVerifyId)
}

// string siteVerifyContent = 2;
inline void BaiduProfile::clear_siteverifycontent() {
  siteverifycontent_.ClearToEmpty();
}
inline const std::string& BaiduProfile::siteverifycontent() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.siteVerifyContent)
  return _internal_siteverifycontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaiduProfile::set_siteverifycontent(ArgT0&& arg0, ArgT... args) {
 
 siteverifycontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.BaiduProfile.siteVerifyContent)
}
inline std::string* BaiduProfile::mutable_siteverifycontent() {
  std::string* _s = _internal_mutable_siteverifycontent();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.siteVerifyContent)
  return _s;
}
inline const std::string& BaiduProfile::_internal_siteverifycontent() const {
  return siteverifycontent_.Get();
}
inline void BaiduProfile::_internal_set_siteverifycontent(const std::string& value) {
  
  siteverifycontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaiduProfile::_internal_mutable_siteverifycontent() {
  
  return siteverifycontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaiduProfile::release_siteverifycontent() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.siteVerifyContent)
  return siteverifycontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaiduProfile::set_allocated_siteverifycontent(std::string* siteverifycontent) {
  if (siteverifycontent != nullptr) {
    
  } else {
    
  }
  siteverifycontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siteverifycontent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (siteverifycontent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    siteverifycontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.siteVerifyContent)
}

// -------------------------------------------------------------------

// WechatPayProfile

// -------------------------------------------------------------------

// AliPayProfile

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace nut
}  // namespace palm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::palm::nut::v1::SmtpTask_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palm::nut::v1::SmtpTask_Type>() {
  return ::palm::nut::v1::SmtpTask_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
