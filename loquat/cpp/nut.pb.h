// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto;
namespace palm {
namespace nut {
namespace v1 {
class BaiduProfile;
struct BaiduProfileDefaultTypeInternal;
extern BaiduProfileDefaultTypeInternal _BaiduProfile_default_instance_;
class GoogleProfile;
struct GoogleProfileDefaultTypeInternal;
extern GoogleProfileDefaultTypeInternal _GoogleProfile_default_instance_;
class LocaleIndexRequest;
struct LocaleIndexRequestDefaultTypeInternal;
extern LocaleIndexRequestDefaultTypeInternal _LocaleIndexRequest_default_instance_;
class LocaleIndexResponse;
struct LocaleIndexResponseDefaultTypeInternal;
extern LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
class LocaleIndexResponse_Item;
struct LocaleIndexResponse_ItemDefaultTypeInternal;
extern LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
class LocaleSetRequest;
struct LocaleSetRequestDefaultTypeInternal;
extern LocaleSetRequestDefaultTypeInternal _LocaleSetRequest_default_instance_;
class StmpProfile;
struct StmpProfileDefaultTypeInternal;
extern StmpProfileDefaultTypeInternal _StmpProfile_default_instance_;
class StmpTask;
struct StmpTaskDefaultTypeInternal;
extern StmpTaskDefaultTypeInternal _StmpTask_default_instance_;
class StmpTask_AttachmentsEntry_DoNotUse;
struct StmpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal;
extern StmpTask_AttachmentsEntry_DoNotUseDefaultTypeInternal _StmpTask_AttachmentsEntry_DoNotUse_default_instance_;
class TwilioProfile;
struct TwilioProfileDefaultTypeInternal;
extern TwilioProfileDefaultTypeInternal _TwilioProfile_default_instance_;
class TwilioTask;
struct TwilioTaskDefaultTypeInternal;
extern TwilioTaskDefaultTypeInternal _TwilioTask_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::nut::v1::BaiduProfile* Arena::CreateMaybeMessage<::palm::nut::v1::BaiduProfile>(Arena*);
template<> ::palm::nut::v1::GoogleProfile* Arena::CreateMaybeMessage<::palm::nut::v1::GoogleProfile>(Arena*);
template<> ::palm::nut::v1::LocaleIndexRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexRequest>(Arena*);
template<> ::palm::nut::v1::LocaleIndexResponse* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexResponse>(Arena*);
template<> ::palm::nut::v1::LocaleIndexResponse_Item* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleIndexResponse_Item>(Arena*);
template<> ::palm::nut::v1::LocaleSetRequest* Arena::CreateMaybeMessage<::palm::nut::v1::LocaleSetRequest>(Arena*);
template<> ::palm::nut::v1::StmpProfile* Arena::CreateMaybeMessage<::palm::nut::v1::StmpProfile>(Arena*);
template<> ::palm::nut::v1::StmpTask* Arena::CreateMaybeMessage<::palm::nut::v1::StmpTask>(Arena*);
template<> ::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse* Arena::CreateMaybeMessage<::palm::nut::v1::StmpTask_AttachmentsEntry_DoNotUse>(Arena*);
template<> ::palm::nut::v1::TwilioProfile* Arena::CreateMaybeMessage<::palm::nut::v1::TwilioProfile>(Arena*);
template<> ::palm::nut::v1::TwilioTask* Arena::CreateMaybeMessage<::palm::nut::v1::TwilioTask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace nut {
namespace v1 {

enum StmpTask_Type : int {
  StmpTask_Type_PLAIN_TEXT = 0,
  StmpTask_Type_HTML = 1,
  StmpTask_Type_StmpTask_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StmpTask_Type_StmpTask_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StmpTask_Type_IsValid(int value);
constexpr StmpTask_Type StmpTask_Type_Type_MIN = StmpTask_Type_PLAIN_TEXT;
constexpr StmpTask_Type StmpTask_Type_Type_MAX = StmpTask_Type_HTML;
constexpr int StmpTask_Type_Type_ARRAYSIZE = StmpTask_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StmpTask_Type_descriptor();
template<typename T>
inline const std::string& StmpTask_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StmpTask_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StmpTask_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StmpTask_Type_descriptor(), enum_t_value);
}
inline bool StmpTask_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StmpTask_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StmpTask_Type>(
    StmpTask_Type_descriptor(), name, value);
}
// ===================================================================

class LocaleSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleSetRequest) */ {
 public:
  inline LocaleSetRequest() : LocaleSetRequest(nullptr) {}
  ~LocaleSetRequest() override;
  explicit constexpr LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleSetRequest(const LocaleSetRequest& from);
  LocaleSetRequest(LocaleSetRequest&& from) noexcept
    : LocaleSetRequest() {
    *this = ::std::move(from);
  }

  inline LocaleSetRequest& operator=(const LocaleSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleSetRequest& operator=(LocaleSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleSetRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleSetRequest*>(
               &_LocaleSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocaleSetRequest& a, LocaleSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleSetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocaleSetRequest* New() const final {
    return new LocaleSetRequest();
  }

  LocaleSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocaleSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocaleSetRequest& from);
  void MergeFrom(const LocaleSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleSetRequest";
  }
  protected:
  explicit LocaleSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kLangFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string lang = 2;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexRequest) */ {
 public:
  inline LocaleIndexRequest() : LocaleIndexRequest(nullptr) {}
  ~LocaleIndexRequest() override;
  explicit constexpr LocaleIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexRequest(const LocaleIndexRequest& from);
  LocaleIndexRequest(LocaleIndexRequest&& from) noexcept
    : LocaleIndexRequest() {
    *this = ::std::move(from);
  }

  inline LocaleIndexRequest& operator=(const LocaleIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexRequest& operator=(LocaleIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexRequest* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexRequest*>(
               &_LocaleIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocaleIndexRequest& a, LocaleIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocaleIndexRequest* New() const final {
    return new LocaleIndexRequest();
  }

  LocaleIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocaleIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocaleIndexRequest& from);
  void MergeFrom(const LocaleIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleIndexRequest";
  }
  protected:
  explicit LocaleIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 1,
  };
  // string lang = 1;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexResponse_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexResponse.Item) */ {
 public:
  inline LocaleIndexResponse_Item() : LocaleIndexResponse_Item(nullptr) {}
  ~LocaleIndexResponse_Item() override;
  explicit constexpr LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from);
  LocaleIndexResponse_Item(LocaleIndexResponse_Item&& from) noexcept
    : LocaleIndexResponse_Item() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse_Item& operator=(const LocaleIndexResponse_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse_Item& operator=(LocaleIndexResponse_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse_Item* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse_Item*>(
               &_LocaleIndexResponse_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocaleIndexResponse_Item& a, LocaleIndexResponse_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocaleIndexResponse_Item* New() const final {
    return new LocaleIndexResponse_Item();
  }

  LocaleIndexResponse_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocaleIndexResponse_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocaleIndexResponse_Item& from);
  void MergeFrom(const LocaleIndexResponse_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleIndexResponse.Item";
  }
  protected:
  explicit LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kLangFieldNumber = 3,
    kMessageFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string lang = 3;
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp updated_at = 5;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexResponse.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class LocaleIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.LocaleIndexResponse) */ {
 public:
  inline LocaleIndexResponse() : LocaleIndexResponse(nullptr) {}
  ~LocaleIndexResponse() override;
  explicit constexpr LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocaleIndexResponse(const LocaleIndexResponse& from);
  LocaleIndexResponse(LocaleIndexResponse&& from) noexcept
    : LocaleIndexResponse() {
    *this = ::std::move(from);
  }

  inline LocaleIndexResponse& operator=(const LocaleIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocaleIndexResponse& operator=(LocaleIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocaleIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocaleIndexResponse* internal_default_instance() {
    return reinterpret_cast<const LocaleIndexResponse*>(
               &_LocaleIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocaleIndexResponse& a, LocaleIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocaleIndexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocaleIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocaleIndexResponse* New() const final {
    return new LocaleIndexResponse();
  }

  LocaleIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocaleIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocaleIndexResponse& from);
  void MergeFrom(const LocaleIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocaleIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.LocaleIndexResponse";
  }
  protected:
  explicit LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocaleIndexResponse_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::palm::nut::v1::LocaleIndexResponse_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
      mutable_items();
  private:
  const ::palm::nut::v1::LocaleIndexResponse_Item& _internal_items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* _internal_add_items();
  public:
  const ::palm::nut::v1::LocaleIndexResponse_Item& items(int index) const;
  ::palm::nut::v1::LocaleIndexResponse_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:palm.nut.v1.LocaleIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class StmpProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.StmpProfile) */ {
 public:
  inline StmpProfile() : StmpProfile(nullptr) {}
  ~StmpProfile() override;
  explicit constexpr StmpProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StmpProfile(const StmpProfile& from);
  StmpProfile(StmpProfile&& from) noexcept
    : StmpProfile() {
    *this = ::std::move(from);
  }

  inline StmpProfile& operator=(const StmpProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline StmpProfile& operator=(StmpProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StmpProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const StmpProfile* internal_default_instance() {
    return reinterpret_cast<const StmpProfile*>(
               &_StmpProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StmpProfile& a, StmpProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(StmpProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StmpProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StmpProfile* New() const final {
    return new StmpProfile();
  }

  StmpProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StmpProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StmpProfile& from);
  void MergeFrom(const StmpProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StmpProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.StmpProfile";
  }
  protected:
  explicit StmpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 5,
    kBccFieldNumber = 6,
    kHostFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
  };
  // repeated string cc = 5;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  const std::string& cc(int index) const;
  std::string* mutable_cc(int index);
  void set_cc(int index, const std::string& value);
  void set_cc(int index, std::string&& value);
  void set_cc(int index, const char* value);
  void set_cc(int index, const char* value, size_t size);
  std::string* add_cc();
  void add_cc(const std::string& value);
  void add_cc(std::string&& value);
  void add_cc(const char* value);
  void add_cc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cc();
  private:
  const std::string& _internal_cc(int index) const;
  std::string* _internal_add_cc();
  public:

  // repeated string bcc = 6;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  const std::string& bcc(int index) const;
  std::string* mutable_bcc(int index);
  void set_bcc(int index, const std::string& value);
  void set_bcc(int index, std::string&& value);
  void set_bcc(int index, const char* value);
  void set_bcc(int index, const char* value, size_t size);
  std::string* add_bcc();
  void add_bcc(const std::string& value);
  void add_bcc(std::string&& value);
  void add_bcc(const char* value);
  void add_bcc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bcc();
  private:
  const std::string& _internal_bcc(int index) const;
  std::string* _internal_add_bcc();
  public:

  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.StmpProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class StmpTask_AttachmentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StmpTask_AttachmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StmpTask_AttachmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  StmpTask_AttachmentsEntry_DoNotUse();
  explicit constexpr StmpTask_AttachmentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StmpTask_AttachmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StmpTask_AttachmentsEntry_DoNotUse& other);
  static const StmpTask_AttachmentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StmpTask_AttachmentsEntry_DoNotUse*>(&_StmpTask_AttachmentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "palm.nut.v1.StmpTask.AttachmentsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class StmpTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.StmpTask) */ {
 public:
  inline StmpTask() : StmpTask(nullptr) {}
  ~StmpTask() override;
  explicit constexpr StmpTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StmpTask(const StmpTask& from);
  StmpTask(StmpTask&& from) noexcept
    : StmpTask() {
    *this = ::std::move(from);
  }

  inline StmpTask& operator=(const StmpTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline StmpTask& operator=(StmpTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StmpTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const StmpTask* internal_default_instance() {
    return reinterpret_cast<const StmpTask*>(
               &_StmpTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StmpTask& a, StmpTask& b) {
    a.Swap(&b);
  }
  inline void Swap(StmpTask* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StmpTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StmpTask* New() const final {
    return new StmpTask();
  }

  StmpTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StmpTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StmpTask& from);
  void MergeFrom(const StmpTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StmpTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.StmpTask";
  }
  protected:
  explicit StmpTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef StmpTask_Type Type;
  static constexpr Type PLAIN_TEXT =
    StmpTask_Type_PLAIN_TEXT;
  static constexpr Type HTML =
    StmpTask_Type_HTML;
  static inline bool Type_IsValid(int value) {
    return StmpTask_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StmpTask_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StmpTask_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StmpTask_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StmpTask_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StmpTask_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return StmpTask_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 4,
    kToFieldNumber = 11,
    kCcFieldNumber = 12,
    kBccFieldNumber = 13,
    kSubjectFieldNumber = 1,
    kBodyFieldNumber = 2,
    kContentTypeFieldNumber = 3,
  };
  // map<string, bytes> attachments = 4;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attachments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attachments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attachments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attachments();

  // repeated string to = 11;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // repeated string cc = 12;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  const std::string& cc(int index) const;
  std::string* mutable_cc(int index);
  void set_cc(int index, const std::string& value);
  void set_cc(int index, std::string&& value);
  void set_cc(int index, const char* value);
  void set_cc(int index, const char* value, size_t size);
  std::string* add_cc();
  void add_cc(const std::string& value);
  void add_cc(std::string&& value);
  void add_cc(const char* value);
  void add_cc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cc();
  private:
  const std::string& _internal_cc(int index) const;
  std::string* _internal_add_cc();
  public:

  // repeated string bcc = 13;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  const std::string& bcc(int index) const;
  std::string* mutable_bcc(int index);
  void set_bcc(int index, const std::string& value);
  void set_bcc(int index, std::string&& value);
  void set_bcc(int index, const char* value);
  void set_bcc(int index, const char* value, size_t size);
  std::string* add_bcc();
  void add_bcc(const std::string& value);
  void add_bcc(std::string&& value);
  void add_bcc(const char* value);
  void add_bcc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bcc();
  private:
  const std::string& _internal_bcc(int index) const;
  std::string* _internal_add_bcc();
  public:

  // string subject = 1;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .palm.nut.v1.StmpTask.Type content_type = 3;
  void clear_content_type();
  ::palm::nut::v1::StmpTask_Type content_type() const;
  void set_content_type(::palm::nut::v1::StmpTask_Type value);
  private:
  ::palm::nut::v1::StmpTask_Type _internal_content_type() const;
  void _internal_set_content_type(::palm::nut::v1::StmpTask_Type value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.StmpTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StmpTask_AttachmentsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> attachments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  int content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class TwilioProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TwilioProfile) */ {
 public:
  inline TwilioProfile() : TwilioProfile(nullptr) {}
  ~TwilioProfile() override;
  explicit constexpr TwilioProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwilioProfile(const TwilioProfile& from);
  TwilioProfile(TwilioProfile&& from) noexcept
    : TwilioProfile() {
    *this = ::std::move(from);
  }

  inline TwilioProfile& operator=(const TwilioProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwilioProfile& operator=(TwilioProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwilioProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwilioProfile* internal_default_instance() {
    return reinterpret_cast<const TwilioProfile*>(
               &_TwilioProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TwilioProfile& a, TwilioProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(TwilioProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwilioProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwilioProfile* New() const final {
    return new TwilioProfile();
  }

  TwilioProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwilioProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwilioProfile& from);
  void MergeFrom(const TwilioProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwilioProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.TwilioProfile";
  }
  protected:
  explicit TwilioProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountSidFieldNumber = 1,
    kAutoTokenFieldNumber = 2,
    kFromFieldNumber = 3,
  };
  // string account_sid = 1;
  void clear_account_sid();
  const std::string& account_sid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_sid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_sid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account_sid();
  void set_allocated_account_sid(std::string* account_sid);
  private:
  const std::string& _internal_account_sid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_sid(const std::string& value);
  std::string* _internal_mutable_account_sid();
  public:

  // string auto_token = 2;
  void clear_auto_token();
  const std::string& auto_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auto_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auto_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_auto_token();
  void set_allocated_auto_token(std::string* auto_token);
  private:
  const std::string& _internal_auto_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auto_token(const std::string& value);
  std::string* _internal_mutable_auto_token();
  public:

  // string from = 3;
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.TwilioProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_sid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class TwilioTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.TwilioTask) */ {
 public:
  inline TwilioTask() : TwilioTask(nullptr) {}
  ~TwilioTask() override;
  explicit constexpr TwilioTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwilioTask(const TwilioTask& from);
  TwilioTask(TwilioTask&& from) noexcept
    : TwilioTask() {
    *this = ::std::move(from);
  }

  inline TwilioTask& operator=(const TwilioTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwilioTask& operator=(TwilioTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwilioTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwilioTask* internal_default_instance() {
    return reinterpret_cast<const TwilioTask*>(
               &_TwilioTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TwilioTask& a, TwilioTask& b) {
    a.Swap(&b);
  }
  inline void Swap(TwilioTask* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwilioTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwilioTask* New() const final {
    return new TwilioTask();
  }

  TwilioTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwilioTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwilioTask& from);
  void MergeFrom(const TwilioTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwilioTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.TwilioTask";
  }
  protected:
  explicit TwilioTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kBodyFieldNumber = 2,
    kCallbackFieldNumber = 3,
  };
  // repeated string to = 1;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional string callback = 3;
  bool has_callback() const;
  private:
  bool _internal_has_callback() const;
  public:
  void clear_callback();
  const std::string& callback() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callback(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callback();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_callback();
  void set_allocated_callback(std::string* callback);
  private:
  const std::string& _internal_callback() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callback(const std::string& value);
  std::string* _internal_mutable_callback();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.TwilioTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class GoogleProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.GoogleProfile) */ {
 public:
  inline GoogleProfile() : GoogleProfile(nullptr) {}
  ~GoogleProfile() override;
  explicit constexpr GoogleProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoogleProfile(const GoogleProfile& from);
  GoogleProfile(GoogleProfile&& from) noexcept
    : GoogleProfile() {
    *this = ::std::move(from);
  }

  inline GoogleProfile& operator=(const GoogleProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleProfile& operator=(GoogleProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoogleProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoogleProfile* internal_default_instance() {
    return reinterpret_cast<const GoogleProfile*>(
               &_GoogleProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GoogleProfile& a, GoogleProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoogleProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoogleProfile* New() const final {
    return new GoogleProfile();
  }

  GoogleProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoogleProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoogleProfile& from);
  void MergeFrom(const GoogleProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.GoogleProfile";
  }
  protected:
  explicit GoogleProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
  };
  // string siteVerifyId = 1;
  void clear_siteverifyid();
  const std::string& siteverifyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_siteverifyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_siteverifyid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_siteverifyid();
  void set_allocated_siteverifyid(std::string* siteverifyid);
  private:
  const std::string& _internal_siteverifyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_siteverifyid(const std::string& value);
  std::string* _internal_mutable_siteverifyid();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.GoogleProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siteverifyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class BaiduProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.BaiduProfile) */ {
 public:
  inline BaiduProfile() : BaiduProfile(nullptr) {}
  ~BaiduProfile() override;
  explicit constexpr BaiduProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaiduProfile(const BaiduProfile& from);
  BaiduProfile(BaiduProfile&& from) noexcept
    : BaiduProfile() {
    *this = ::std::move(from);
  }

  inline BaiduProfile& operator=(const BaiduProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaiduProfile& operator=(BaiduProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaiduProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaiduProfile* internal_default_instance() {
    return reinterpret_cast<const BaiduProfile*>(
               &_BaiduProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BaiduProfile& a, BaiduProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BaiduProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaiduProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaiduProfile* New() const final {
    return new BaiduProfile();
  }

  BaiduProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaiduProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaiduProfile& from);
  void MergeFrom(const BaiduProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaiduProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.BaiduProfile";
  }
  protected:
  explicit BaiduProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteVerifyIdFieldNumber = 1,
    kSiteVerifyContentFieldNumber = 2,
  };
  // string siteVerifyId = 1;
  void clear_siteverifyid();
  const std::string& siteverifyid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_siteverifyid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_siteverifyid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_siteverifyid();
  void set_allocated_siteverifyid(std::string* siteverifyid);
  private:
  const std::string& _internal_siteverifyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_siteverifyid(const std::string& value);
  std::string* _internal_mutable_siteverifyid();
  public:

  // string siteVerifyContent = 2;
  void clear_siteverifycontent();
  const std::string& siteverifycontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_siteverifycontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_siteverifycontent();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_siteverifycontent();
  void set_allocated_siteverifycontent(std::string* siteverifycontent);
  private:
  const std::string& _internal_siteverifycontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_siteverifycontent(const std::string& value);
  std::string* _internal_mutable_siteverifycontent();
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.BaiduProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siteverifyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siteverifycontent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocaleSetRequest

// string code = 1;
inline void LocaleSetRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleSetRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleSetRequest.code)
}
inline std::string* LocaleSetRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleSetRequest.code)
  return _internal_mutable_code();
}
inline const std::string& LocaleSetRequest::_internal_code() const {
  return code_.Get();
}
inline void LocaleSetRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleSetRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleSetRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleSetRequest.code)
}

// string lang = 2;
inline void LocaleSetRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleSetRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleSetRequest.lang)
}
inline std::string* LocaleSetRequest::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleSetRequest.lang)
  return _internal_mutable_lang();
}
inline const std::string& LocaleSetRequest::_internal_lang() const {
  return lang_.Get();
}
inline void LocaleSetRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleSetRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleSetRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleSetRequest.lang)
}

// string message = 3;
inline void LocaleSetRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LocaleSetRequest::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleSetRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleSetRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleSetRequest.message)
}
inline std::string* LocaleSetRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleSetRequest.message)
  return _internal_mutable_message();
}
inline const std::string& LocaleSetRequest::_internal_message() const {
  return message_.Get();
}
inline void LocaleSetRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleSetRequest::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleSetRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleSetRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleSetRequest.message)
}

// -------------------------------------------------------------------

// LocaleIndexRequest

// string lang = 1;
inline void LocaleIndexRequest::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexRequest::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexRequest.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexRequest::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexRequest.lang)
}
inline std::string* LocaleIndexRequest::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexRequest.lang)
  return _internal_mutable_lang();
}
inline const std::string& LocaleIndexRequest::_internal_lang() const {
  return lang_.Get();
}
inline void LocaleIndexRequest::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexRequest::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexRequest::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexRequest.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexRequest::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexRequest.lang)
}

// -------------------------------------------------------------------

// LocaleIndexResponse_Item

// int64 id = 1;
inline void LocaleIndexResponse_Item::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocaleIndexResponse_Item::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LocaleIndexResponse_Item::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.id)
  return _internal_id();
}
inline void LocaleIndexResponse_Item::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LocaleIndexResponse_Item::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.id)
}

// string code = 2;
inline void LocaleIndexResponse_Item::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::code() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.code)
}
inline std::string* LocaleIndexResponse_Item::mutable_code() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.code)
  return _internal_mutable_code();
}
inline const std::string& LocaleIndexResponse_Item::_internal_code() const {
  return code_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_code() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexResponse_Item::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.code)
}

// string lang = 3;
inline void LocaleIndexResponse_Item::clear_lang() {
  lang_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::lang() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_lang(ArgT0&& arg0, ArgT... args) {
 
 lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.lang)
}
inline std::string* LocaleIndexResponse_Item::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return _internal_mutable_lang();
}
inline const std::string& LocaleIndexResponse_Item::_internal_lang() const {
  return lang_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_lang(const std::string& value) {
  
  lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_lang() {
  
  return lang_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_lang() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexResponse_Item::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.lang)
}

// string message = 4;
inline void LocaleIndexResponse_Item::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LocaleIndexResponse_Item::message() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocaleIndexResponse_Item::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.LocaleIndexResponse.Item.message)
}
inline std::string* LocaleIndexResponse_Item::mutable_message() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.message)
  return _internal_mutable_message();
}
inline const std::string& LocaleIndexResponse_Item::_internal_message() const {
  return message_.Get();
}
inline void LocaleIndexResponse_Item::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocaleIndexResponse_Item::release_message() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocaleIndexResponse_Item::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.message)
}

// .google.protobuf.Timestamp updated_at = 5;
inline bool LocaleIndexResponse_Item::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool LocaleIndexResponse_Item::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LocaleIndexResponse_Item::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _internal_updated_at();
}
inline void LocaleIndexResponse_Item::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocaleIndexResponse_Item::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
  return _internal_mutable_updated_at();
}
inline void LocaleIndexResponse_Item::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.LocaleIndexResponse.Item.updated_at)
}

// -------------------------------------------------------------------

// LocaleIndexResponse

// repeated .palm.nut.v1.LocaleIndexResponse.Item items = 1;
inline int LocaleIndexResponse::_internal_items_size() const {
  return items_.size();
}
inline int LocaleIndexResponse::items_size() const {
  return _internal_items_size();
}
inline void LocaleIndexResponse::clear_items() {
  items_.Clear();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.LocaleIndexResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >*
LocaleIndexResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.LocaleIndexResponse.items)
  return &items_;
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::palm::nut::v1::LocaleIndexResponse_Item& LocaleIndexResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_items(index);
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::_internal_add_items() {
  return items_.Add();
}
inline ::palm::nut::v1::LocaleIndexResponse_Item* LocaleIndexResponse::add_items() {
  // @@protoc_insertion_point(field_add:palm.nut.v1.LocaleIndexResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::nut::v1::LocaleIndexResponse_Item >&
LocaleIndexResponse::items() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.LocaleIndexResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// StmpProfile

// string host = 1;
inline void StmpProfile::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& StmpProfile::host() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpProfile.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StmpProfile::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.host)
}
inline std::string* StmpProfile::mutable_host() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpProfile.host)
  return _internal_mutable_host();
}
inline const std::string& StmpProfile::_internal_host() const {
  return host_.Get();
}
inline void StmpProfile::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StmpProfile::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StmpProfile::release_host() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.StmpProfile.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StmpProfile::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.StmpProfile.host)
}

// uint32 port = 2;
inline void StmpProfile::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StmpProfile::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StmpProfile::port() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpProfile.port)
  return _internal_port();
}
inline void StmpProfile::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void StmpProfile::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.port)
}

// string user = 3;
inline void StmpProfile::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& StmpProfile::user() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpProfile.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StmpProfile::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.user)
}
inline std::string* StmpProfile::mutable_user() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpProfile.user)
  return _internal_mutable_user();
}
inline const std::string& StmpProfile::_internal_user() const {
  return user_.Get();
}
inline void StmpProfile::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StmpProfile::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StmpProfile::release_user() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.StmpProfile.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StmpProfile::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.StmpProfile.user)
}

// string password = 4;
inline void StmpProfile::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& StmpProfile::password() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpProfile.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StmpProfile::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.password)
}
inline std::string* StmpProfile::mutable_password() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpProfile.password)
  return _internal_mutable_password();
}
inline const std::string& StmpProfile::_internal_password() const {
  return password_.Get();
}
inline void StmpProfile::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StmpProfile::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StmpProfile::release_password() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.StmpProfile.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StmpProfile::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.StmpProfile.password)
}

// repeated string cc = 5;
inline int StmpProfile::_internal_cc_size() const {
  return cc_.size();
}
inline int StmpProfile::cc_size() const {
  return _internal_cc_size();
}
inline void StmpProfile::clear_cc() {
  cc_.Clear();
}
inline std::string* StmpProfile::add_cc() {
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.StmpProfile.cc)
  return _internal_add_cc();
}
inline const std::string& StmpProfile::_internal_cc(int index) const {
  return cc_.Get(index);
}
inline const std::string& StmpProfile::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpProfile.cc)
  return _internal_cc(index);
}
inline std::string* StmpProfile::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpProfile.cc)
  return cc_.Mutable(index);
}
inline void StmpProfile::set_cc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.cc)
  cc_.Mutable(index)->assign(value);
}
inline void StmpProfile::set_cc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.cc)
  cc_.Mutable(index)->assign(std::move(value));
}
inline void StmpProfile::set_cc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.StmpProfile.cc)
}
inline void StmpProfile::set_cc(int index, const char* value, size_t size) {
  cc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.StmpProfile.cc)
}
inline std::string* StmpProfile::_internal_add_cc() {
  return cc_.Add();
}
inline void StmpProfile::add_cc(const std::string& value) {
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpProfile.cc)
}
inline void StmpProfile::add_cc(std::string&& value) {
  cc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpProfile.cc)
}
inline void StmpProfile::add_cc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.StmpProfile.cc)
}
inline void StmpProfile::add_cc(const char* value, size_t size) {
  cc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.StmpProfile.cc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StmpProfile::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.StmpProfile.cc)
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StmpProfile::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.StmpProfile.cc)
  return &cc_;
}

// repeated string bcc = 6;
inline int StmpProfile::_internal_bcc_size() const {
  return bcc_.size();
}
inline int StmpProfile::bcc_size() const {
  return _internal_bcc_size();
}
inline void StmpProfile::clear_bcc() {
  bcc_.Clear();
}
inline std::string* StmpProfile::add_bcc() {
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.StmpProfile.bcc)
  return _internal_add_bcc();
}
inline const std::string& StmpProfile::_internal_bcc(int index) const {
  return bcc_.Get(index);
}
inline const std::string& StmpProfile::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpProfile.bcc)
  return _internal_bcc(index);
}
inline std::string* StmpProfile::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpProfile.bcc)
  return bcc_.Mutable(index);
}
inline void StmpProfile::set_bcc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.bcc)
  bcc_.Mutable(index)->assign(value);
}
inline void StmpProfile::set_bcc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpProfile.bcc)
  bcc_.Mutable(index)->assign(std::move(value));
}
inline void StmpProfile::set_bcc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.StmpProfile.bcc)
}
inline void StmpProfile::set_bcc(int index, const char* value, size_t size) {
  bcc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.StmpProfile.bcc)
}
inline std::string* StmpProfile::_internal_add_bcc() {
  return bcc_.Add();
}
inline void StmpProfile::add_bcc(const std::string& value) {
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpProfile.bcc)
}
inline void StmpProfile::add_bcc(std::string&& value) {
  bcc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpProfile.bcc)
}
inline void StmpProfile::add_bcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.StmpProfile.bcc)
}
inline void StmpProfile::add_bcc(const char* value, size_t size) {
  bcc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.StmpProfile.bcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StmpProfile::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.StmpProfile.bcc)
  return bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StmpProfile::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.StmpProfile.bcc)
  return &bcc_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StmpTask

// string subject = 1;
inline void StmpTask::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& StmpTask::subject() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpTask.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StmpTask::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.subject)
}
inline std::string* StmpTask::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpTask.subject)
  return _internal_mutable_subject();
}
inline const std::string& StmpTask::_internal_subject() const {
  return subject_.Get();
}
inline void StmpTask::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StmpTask::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StmpTask::release_subject() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.StmpTask.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StmpTask::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.StmpTask.subject)
}

// string body = 2;
inline void StmpTask::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& StmpTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpTask.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StmpTask::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.body)
}
inline std::string* StmpTask::mutable_body() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpTask.body)
  return _internal_mutable_body();
}
inline const std::string& StmpTask::_internal_body() const {
  return body_.Get();
}
inline void StmpTask::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StmpTask::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StmpTask::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.StmpTask.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StmpTask::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.StmpTask.body)
}

// .palm.nut.v1.StmpTask.Type content_type = 3;
inline void StmpTask::clear_content_type() {
  content_type_ = 0;
}
inline ::palm::nut::v1::StmpTask_Type StmpTask::_internal_content_type() const {
  return static_cast< ::palm::nut::v1::StmpTask_Type >(content_type_);
}
inline ::palm::nut::v1::StmpTask_Type StmpTask::content_type() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpTask.content_type)
  return _internal_content_type();
}
inline void StmpTask::_internal_set_content_type(::palm::nut::v1::StmpTask_Type value) {
  
  content_type_ = value;
}
inline void StmpTask::set_content_type(::palm::nut::v1::StmpTask_Type value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.content_type)
}

// map<string, bytes> attachments = 4;
inline int StmpTask::_internal_attachments_size() const {
  return attachments_.size();
}
inline int StmpTask::attachments_size() const {
  return _internal_attachments_size();
}
inline void StmpTask::clear_attachments() {
  attachments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StmpTask::_internal_attachments() const {
  return attachments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StmpTask::attachments() const {
  // @@protoc_insertion_point(field_map:palm.nut.v1.StmpTask.attachments)
  return _internal_attachments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StmpTask::_internal_mutable_attachments() {
  return attachments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StmpTask::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_map:palm.nut.v1.StmpTask.attachments)
  return _internal_mutable_attachments();
}

// repeated string to = 11;
inline int StmpTask::_internal_to_size() const {
  return to_.size();
}
inline int StmpTask::to_size() const {
  return _internal_to_size();
}
inline void StmpTask::clear_to() {
  to_.Clear();
}
inline std::string* StmpTask::add_to() {
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.StmpTask.to)
  return _internal_add_to();
}
inline const std::string& StmpTask::_internal_to(int index) const {
  return to_.Get(index);
}
inline const std::string& StmpTask::to(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpTask.to)
  return _internal_to(index);
}
inline std::string* StmpTask::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpTask.to)
  return to_.Mutable(index);
}
inline void StmpTask::set_to(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.to)
  to_.Mutable(index)->assign(value);
}
inline void StmpTask::set_to(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.to)
  to_.Mutable(index)->assign(std::move(value));
}
inline void StmpTask::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.StmpTask.to)
}
inline void StmpTask::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.StmpTask.to)
}
inline std::string* StmpTask::_internal_add_to() {
  return to_.Add();
}
inline void StmpTask::add_to(const std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpTask.to)
}
inline void StmpTask::add_to(std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpTask.to)
}
inline void StmpTask::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.StmpTask.to)
}
inline void StmpTask::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.StmpTask.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StmpTask::to() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.StmpTask.to)
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StmpTask::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.StmpTask.to)
  return &to_;
}

// repeated string cc = 12;
inline int StmpTask::_internal_cc_size() const {
  return cc_.size();
}
inline int StmpTask::cc_size() const {
  return _internal_cc_size();
}
inline void StmpTask::clear_cc() {
  cc_.Clear();
}
inline std::string* StmpTask::add_cc() {
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.StmpTask.cc)
  return _internal_add_cc();
}
inline const std::string& StmpTask::_internal_cc(int index) const {
  return cc_.Get(index);
}
inline const std::string& StmpTask::cc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpTask.cc)
  return _internal_cc(index);
}
inline std::string* StmpTask::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpTask.cc)
  return cc_.Mutable(index);
}
inline void StmpTask::set_cc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.cc)
  cc_.Mutable(index)->assign(value);
}
inline void StmpTask::set_cc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.cc)
  cc_.Mutable(index)->assign(std::move(value));
}
inline void StmpTask::set_cc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.StmpTask.cc)
}
inline void StmpTask::set_cc(int index, const char* value, size_t size) {
  cc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.StmpTask.cc)
}
inline std::string* StmpTask::_internal_add_cc() {
  return cc_.Add();
}
inline void StmpTask::add_cc(const std::string& value) {
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpTask.cc)
}
inline void StmpTask::add_cc(std::string&& value) {
  cc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpTask.cc)
}
inline void StmpTask::add_cc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.StmpTask.cc)
}
inline void StmpTask::add_cc(const char* value, size_t size) {
  cc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.StmpTask.cc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StmpTask::cc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.StmpTask.cc)
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StmpTask::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.StmpTask.cc)
  return &cc_;
}

// repeated string bcc = 13;
inline int StmpTask::_internal_bcc_size() const {
  return bcc_.size();
}
inline int StmpTask::bcc_size() const {
  return _internal_bcc_size();
}
inline void StmpTask::clear_bcc() {
  bcc_.Clear();
}
inline std::string* StmpTask::add_bcc() {
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.StmpTask.bcc)
  return _internal_add_bcc();
}
inline const std::string& StmpTask::_internal_bcc(int index) const {
  return bcc_.Get(index);
}
inline const std::string& StmpTask::bcc(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.StmpTask.bcc)
  return _internal_bcc(index);
}
inline std::string* StmpTask::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.StmpTask.bcc)
  return bcc_.Mutable(index);
}
inline void StmpTask::set_bcc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.bcc)
  bcc_.Mutable(index)->assign(value);
}
inline void StmpTask::set_bcc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.StmpTask.bcc)
  bcc_.Mutable(index)->assign(std::move(value));
}
inline void StmpTask::set_bcc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.StmpTask.bcc)
}
inline void StmpTask::set_bcc(int index, const char* value, size_t size) {
  bcc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.StmpTask.bcc)
}
inline std::string* StmpTask::_internal_add_bcc() {
  return bcc_.Add();
}
inline void StmpTask::add_bcc(const std::string& value) {
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpTask.bcc)
}
inline void StmpTask::add_bcc(std::string&& value) {
  bcc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.StmpTask.bcc)
}
inline void StmpTask::add_bcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.StmpTask.bcc)
}
inline void StmpTask::add_bcc(const char* value, size_t size) {
  bcc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.StmpTask.bcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StmpTask::bcc() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.StmpTask.bcc)
  return bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StmpTask::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.StmpTask.bcc)
  return &bcc_;
}

// -------------------------------------------------------------------

// TwilioProfile

// string account_sid = 1;
inline void TwilioProfile::clear_account_sid() {
  account_sid_.ClearToEmpty();
}
inline const std::string& TwilioProfile::account_sid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.account_sid)
  return _internal_account_sid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioProfile::set_account_sid(ArgT0&& arg0, ArgT... args) {
 
 account_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.account_sid)
}
inline std::string* TwilioProfile::mutable_account_sid() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.account_sid)
  return _internal_mutable_account_sid();
}
inline const std::string& TwilioProfile::_internal_account_sid() const {
  return account_sid_.Get();
}
inline void TwilioProfile::_internal_set_account_sid(const std::string& value) {
  
  account_sid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_account_sid() {
  
  return account_sid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_account_sid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.account_sid)
  return account_sid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioProfile::set_allocated_account_sid(std::string* account_sid) {
  if (account_sid != nullptr) {
    
  } else {
    
  }
  account_sid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_sid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.account_sid)
}

// string auto_token = 2;
inline void TwilioProfile::clear_auto_token() {
  auto_token_.ClearToEmpty();
}
inline const std::string& TwilioProfile::auto_token() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.auto_token)
  return _internal_auto_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioProfile::set_auto_token(ArgT0&& arg0, ArgT... args) {
 
 auto_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.auto_token)
}
inline std::string* TwilioProfile::mutable_auto_token() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.auto_token)
  return _internal_mutable_auto_token();
}
inline const std::string& TwilioProfile::_internal_auto_token() const {
  return auto_token_.Get();
}
inline void TwilioProfile::_internal_set_auto_token(const std::string& value) {
  
  auto_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_auto_token() {
  
  return auto_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_auto_token() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.auto_token)
  return auto_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioProfile::set_allocated_auto_token(std::string* auto_token) {
  if (auto_token != nullptr) {
    
  } else {
    
  }
  auto_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.auto_token)
}

// string from = 3;
inline void TwilioProfile::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TwilioProfile::from() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioProfile.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioProfile::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioProfile.from)
}
inline std::string* TwilioProfile::mutable_from() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioProfile.from)
  return _internal_mutable_from();
}
inline const std::string& TwilioProfile::_internal_from() const {
  return from_.Get();
}
inline void TwilioProfile::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioProfile::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioProfile::release_from() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioProfile.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioProfile::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioProfile.from)
}

// -------------------------------------------------------------------

// TwilioTask

// repeated string to = 1;
inline int TwilioTask::_internal_to_size() const {
  return to_.size();
}
inline int TwilioTask::to_size() const {
  return _internal_to_size();
}
inline void TwilioTask::clear_to() {
  to_.Clear();
}
inline std::string* TwilioTask::add_to() {
  // @@protoc_insertion_point(field_add_mutable:palm.nut.v1.TwilioTask.to)
  return _internal_add_to();
}
inline const std::string& TwilioTask::_internal_to(int index) const {
  return to_.Get(index);
}
inline const std::string& TwilioTask::to(int index) const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioTask.to)
  return _internal_to(index);
}
inline std::string* TwilioTask::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioTask.to)
  return to_.Mutable(index);
}
inline void TwilioTask::set_to(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.to)
  to_.Mutable(index)->assign(value);
}
inline void TwilioTask::set_to(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.to)
  to_.Mutable(index)->assign(std::move(value));
}
inline void TwilioTask::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.nut.v1.TwilioTask.to)
}
inline std::string* TwilioTask::_internal_add_to() {
  return to_.Add();
}
inline void TwilioTask::add_to(const std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::add_to(std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.nut.v1.TwilioTask.to)
}
inline void TwilioTask::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.nut.v1.TwilioTask.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TwilioTask::to() const {
  // @@protoc_insertion_point(field_list:palm.nut.v1.TwilioTask.to)
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TwilioTask::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:palm.nut.v1.TwilioTask.to)
  return &to_;
}

// string body = 2;
inline void TwilioTask::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& TwilioTask::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioTask.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioTask::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.body)
}
inline std::string* TwilioTask::mutable_body() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioTask.body)
  return _internal_mutable_body();
}
inline const std::string& TwilioTask::_internal_body() const {
  return body_.Get();
}
inline void TwilioTask::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioTask::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioTask::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioTask.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioTask::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioTask.body)
}

// optional string callback = 3;
inline bool TwilioTask::_internal_has_callback() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TwilioTask::has_callback() const {
  return _internal_has_callback();
}
inline void TwilioTask::clear_callback() {
  callback_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TwilioTask::callback() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.TwilioTask.callback)
  return _internal_callback();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwilioTask::set_callback(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 callback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.TwilioTask.callback)
}
inline std::string* TwilioTask::mutable_callback() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.TwilioTask.callback)
  return _internal_mutable_callback();
}
inline const std::string& TwilioTask::_internal_callback() const {
  return callback_.Get();
}
inline void TwilioTask::_internal_set_callback(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callback_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TwilioTask::_internal_mutable_callback() {
  _has_bits_[0] |= 0x00000001u;
  return callback_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TwilioTask::release_callback() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.TwilioTask.callback)
  if (!_internal_has_callback()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return callback_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TwilioTask::set_allocated_callback(std::string* callback) {
  if (callback != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callback_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.TwilioTask.callback)
}

// -------------------------------------------------------------------

// GoogleProfile

// string siteVerifyId = 1;
inline void GoogleProfile::clear_siteverifyid() {
  siteverifyid_.ClearToEmpty();
}
inline const std::string& GoogleProfile::siteverifyid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.GoogleProfile.siteVerifyId)
  return _internal_siteverifyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoogleProfile::set_siteverifyid(ArgT0&& arg0, ArgT... args) {
 
 siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.GoogleProfile.siteVerifyId)
}
inline std::string* GoogleProfile::mutable_siteverifyid() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.GoogleProfile.siteVerifyId)
  return _internal_mutable_siteverifyid();
}
inline const std::string& GoogleProfile::_internal_siteverifyid() const {
  return siteverifyid_.Get();
}
inline void GoogleProfile::_internal_set_siteverifyid(const std::string& value) {
  
  siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GoogleProfile::_internal_mutable_siteverifyid() {
  
  return siteverifyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GoogleProfile::release_siteverifyid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.GoogleProfile.siteVerifyId)
  return siteverifyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GoogleProfile::set_allocated_siteverifyid(std::string* siteverifyid) {
  if (siteverifyid != nullptr) {
    
  } else {
    
  }
  siteverifyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siteverifyid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.GoogleProfile.siteVerifyId)
}

// -------------------------------------------------------------------

// BaiduProfile

// string siteVerifyId = 1;
inline void BaiduProfile::clear_siteverifyid() {
  siteverifyid_.ClearToEmpty();
}
inline const std::string& BaiduProfile::siteverifyid() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.siteVerifyId)
  return _internal_siteverifyid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaiduProfile::set_siteverifyid(ArgT0&& arg0, ArgT... args) {
 
 siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.BaiduProfile.siteVerifyId)
}
inline std::string* BaiduProfile::mutable_siteverifyid() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.siteVerifyId)
  return _internal_mutable_siteverifyid();
}
inline const std::string& BaiduProfile::_internal_siteverifyid() const {
  return siteverifyid_.Get();
}
inline void BaiduProfile::_internal_set_siteverifyid(const std::string& value) {
  
  siteverifyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaiduProfile::_internal_mutable_siteverifyid() {
  
  return siteverifyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaiduProfile::release_siteverifyid() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.siteVerifyId)
  return siteverifyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaiduProfile::set_allocated_siteverifyid(std::string* siteverifyid) {
  if (siteverifyid != nullptr) {
    
  } else {
    
  }
  siteverifyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siteverifyid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.siteVerifyId)
}

// string siteVerifyContent = 2;
inline void BaiduProfile::clear_siteverifycontent() {
  siteverifycontent_.ClearToEmpty();
}
inline const std::string& BaiduProfile::siteverifycontent() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.BaiduProfile.siteVerifyContent)
  return _internal_siteverifycontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaiduProfile::set_siteverifycontent(ArgT0&& arg0, ArgT... args) {
 
 siteverifycontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.BaiduProfile.siteVerifyContent)
}
inline std::string* BaiduProfile::mutable_siteverifycontent() {
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.BaiduProfile.siteVerifyContent)
  return _internal_mutable_siteverifycontent();
}
inline const std::string& BaiduProfile::_internal_siteverifycontent() const {
  return siteverifycontent_.Get();
}
inline void BaiduProfile::_internal_set_siteverifycontent(const std::string& value) {
  
  siteverifycontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaiduProfile::_internal_mutable_siteverifycontent() {
  
  return siteverifycontent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaiduProfile::release_siteverifycontent() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.BaiduProfile.siteVerifyContent)
  return siteverifycontent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaiduProfile::set_allocated_siteverifycontent(std::string* siteverifycontent) {
  if (siteverifycontent != nullptr) {
    
  } else {
    
  }
  siteverifycontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siteverifycontent,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.BaiduProfile.siteVerifyContent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace nut
}  // namespace palm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::palm::nut::v1::StmpTask_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palm::nut::v1::StmpTask_Type>() {
  return ::palm::nut::v1::StmpTask_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
