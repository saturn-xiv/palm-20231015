/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Aes_H
#define Aes_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "loquat_types.h"

namespace loquat {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AesIf {
 public:
  virtual ~AesIf() {}
  virtual void encrypt(std::string& _return, const std::string& zone, const std::string& plain) = 0;
  virtual void decrypt(std::string& _return, const std::string& zone, const std::string& code) = 0;
};

class AesIfFactory {
 public:
  typedef AesIf Handler;

  virtual ~AesIfFactory() {}

  virtual AesIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AesIf* /* handler */) = 0;
  };

class AesIfSingletonFactory : virtual public AesIfFactory {
 public:
  AesIfSingletonFactory(const ::std::shared_ptr<AesIf>& iface) : iface_(iface) {}
  virtual ~AesIfSingletonFactory() {}

  virtual AesIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(AesIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<AesIf> iface_;
};

class AesNull : virtual public AesIf {
 public:
  virtual ~AesNull() {}
  void encrypt(std::string& /* _return */, const std::string& /* zone */, const std::string& /* plain */) override {
    return;
  }
  void decrypt(std::string& /* _return */, const std::string& /* zone */, const std::string& /* code */) override {
    return;
  }
};

typedef struct _Aes_encrypt_args__isset {
  _Aes_encrypt_args__isset() : zone(false), plain(false) {}
  bool zone :1;
  bool plain :1;
} _Aes_encrypt_args__isset;

class Aes_encrypt_args {
 public:

  Aes_encrypt_args(const Aes_encrypt_args&);
  Aes_encrypt_args& operator=(const Aes_encrypt_args&);
  Aes_encrypt_args() noexcept
                   : zone(),
                     plain() {
  }

  virtual ~Aes_encrypt_args() noexcept;
  std::string zone;
  std::string plain;

  _Aes_encrypt_args__isset __isset;

  void __set_zone(const std::string& val);

  void __set_plain(const std::string& val);

  bool operator == (const Aes_encrypt_args & rhs) const
  {
    if (!(zone == rhs.zone))
      return false;
    if (!(plain == rhs.plain))
      return false;
    return true;
  }
  bool operator != (const Aes_encrypt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Aes_encrypt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Aes_encrypt_pargs {
 public:


  virtual ~Aes_encrypt_pargs() noexcept;
  const std::string* zone;
  const std::string* plain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Aes_encrypt_result__isset {
  _Aes_encrypt_result__isset() : success(false) {}
  bool success :1;
} _Aes_encrypt_result__isset;

class Aes_encrypt_result {
 public:

  Aes_encrypt_result(const Aes_encrypt_result&);
  Aes_encrypt_result& operator=(const Aes_encrypt_result&);
  Aes_encrypt_result() noexcept
                     : success() {
  }

  virtual ~Aes_encrypt_result() noexcept;
  std::string success;

  _Aes_encrypt_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Aes_encrypt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Aes_encrypt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Aes_encrypt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Aes_encrypt_presult__isset {
  _Aes_encrypt_presult__isset() : success(false) {}
  bool success :1;
} _Aes_encrypt_presult__isset;

class Aes_encrypt_presult {
 public:


  virtual ~Aes_encrypt_presult() noexcept;
  std::string* success;

  _Aes_encrypt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Aes_decrypt_args__isset {
  _Aes_decrypt_args__isset() : zone(false), code(false) {}
  bool zone :1;
  bool code :1;
} _Aes_decrypt_args__isset;

class Aes_decrypt_args {
 public:

  Aes_decrypt_args(const Aes_decrypt_args&);
  Aes_decrypt_args& operator=(const Aes_decrypt_args&);
  Aes_decrypt_args() noexcept
                   : zone(),
                     code() {
  }

  virtual ~Aes_decrypt_args() noexcept;
  std::string zone;
  std::string code;

  _Aes_decrypt_args__isset __isset;

  void __set_zone(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const Aes_decrypt_args & rhs) const
  {
    if (!(zone == rhs.zone))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const Aes_decrypt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Aes_decrypt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Aes_decrypt_pargs {
 public:


  virtual ~Aes_decrypt_pargs() noexcept;
  const std::string* zone;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Aes_decrypt_result__isset {
  _Aes_decrypt_result__isset() : success(false) {}
  bool success :1;
} _Aes_decrypt_result__isset;

class Aes_decrypt_result {
 public:

  Aes_decrypt_result(const Aes_decrypt_result&);
  Aes_decrypt_result& operator=(const Aes_decrypt_result&);
  Aes_decrypt_result() noexcept
                     : success() {
  }

  virtual ~Aes_decrypt_result() noexcept;
  std::string success;

  _Aes_decrypt_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Aes_decrypt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Aes_decrypt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Aes_decrypt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Aes_decrypt_presult__isset {
  _Aes_decrypt_presult__isset() : success(false) {}
  bool success :1;
} _Aes_decrypt_presult__isset;

class Aes_decrypt_presult {
 public:


  virtual ~Aes_decrypt_presult() noexcept;
  std::string* success;

  _Aes_decrypt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AesClient : virtual public AesIf {
 public:
  AesClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AesClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void encrypt(std::string& _return, const std::string& zone, const std::string& plain) override;
  void send_encrypt(const std::string& zone, const std::string& plain);
  void recv_encrypt(std::string& _return);
  void decrypt(std::string& _return, const std::string& zone, const std::string& code) override;
  void send_decrypt(const std::string& zone, const std::string& code);
  void recv_decrypt(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AesProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AesIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (AesProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_encrypt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_decrypt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AesProcessor(::std::shared_ptr<AesIf> iface) :
    iface_(iface) {
    processMap_["encrypt"] = &AesProcessor::process_encrypt;
    processMap_["decrypt"] = &AesProcessor::process_decrypt;
  }

  virtual ~AesProcessor() {}
};

class AesProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AesProcessorFactory(const ::std::shared_ptr< AesIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< AesIfFactory > handlerFactory_;
};

class AesMultiface : virtual public AesIf {
 public:
  AesMultiface(std::vector<std::shared_ptr<AesIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AesMultiface() {}
 protected:
  std::vector<std::shared_ptr<AesIf> > ifaces_;
  AesMultiface() {}
  void add(::std::shared_ptr<AesIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void encrypt(std::string& _return, const std::string& zone, const std::string& plain) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->encrypt(_return, zone, plain);
    }
    ifaces_[i]->encrypt(_return, zone, plain);
    return;
  }

  void decrypt(std::string& _return, const std::string& zone, const std::string& code) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->decrypt(_return, zone, code);
    }
    ifaces_[i]->decrypt(_return, zone, code);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AesConcurrentClient : virtual public AesIf {
 public:
  AesConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AesConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void encrypt(std::string& _return, const std::string& zone, const std::string& plain) override;
  int32_t send_encrypt(const std::string& zone, const std::string& plain);
  void recv_encrypt(std::string& _return, const int32_t seqid);
  void decrypt(std::string& _return, const std::string& zone, const std::string& code) override;
  int32_t send_decrypt(const std::string& zone, const std::string& code);
  void recv_decrypt(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
