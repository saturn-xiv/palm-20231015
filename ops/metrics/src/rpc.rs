// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod palm {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ops {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod metrics {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Cpu, aligned to 2
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Cpu(pub [u8; 2]);
impl Default for Cpu { 
  fn default() -> Self { 
    Self([0; 2])
  }
}
impl core::fmt::Debug for Cpu {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Cpu")
      .field("count", &self.count())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Cpu {}
impl<'a> flatbuffers::Follow<'a> for Cpu {
  type Inner = &'a Cpu;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Cpu>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Cpu {
  type Inner = &'a Cpu;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Cpu>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Cpu {
    type Output = Cpu;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Cpu as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Cpu {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Cpu {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    count: u16,
  ) -> Self {
    let mut s = Self([0; 2]);
    s.set_count(count);
    s
  }

  pub fn count(&self) -> u16 {
    let mut mem = core::mem::MaybeUninit::<<u16 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_count(&mut self, x: u16) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Os, aligned to 2
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Os(pub [u8; 2]);
impl Default for Os { 
  fn default() -> Self { 
    Self([0; 2])
  }
}
impl core::fmt::Debug for Os {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Os")
      .field("cpu", &self.cpu())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Os {}
impl<'a> flatbuffers::Follow<'a> for Os {
  type Inner = &'a Os;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Os>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Os {
  type Inner = &'a Os;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Os>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Os {
    type Output = Os;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Os as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Os {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Os {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    cpu: &Cpu,
  ) -> Self {
    let mut s = Self([0; 2]);
    s.set_cpu(cpu);
    s
  }

  pub fn cpu(&self) -> &Cpu {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[0..].as_ptr() as *const Cpu) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_cpu(&mut self, x: &Cpu) {
    self.0[0..0 + 2].copy_from_slice(&x.0)
  }

}

}  // pub mod metrics
}  // pub mod ops
}  // pub mod palm

