// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fig.proto

#include "fig.pb.h"
#include "fig.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace fig {
namespace v1 {

static const char* Notification_method_names[] = {
  "/palm.fig.v1.Notification/Index",
};

std::unique_ptr< Notification::Stub> Notification::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Notification::Stub> stub(new Notification::Stub(channel, options));
  return stub;
}

Notification::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Index_(Notification_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Notification::Stub::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::fig::v1::IndexNotificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::fig::v1::IndexNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Notification::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::IndexNotificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::fig::v1::IndexNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Notification::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::IndexNotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::IndexNotificationResponse>* Notification::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::IndexNotificationResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::IndexNotificationResponse>* Notification::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

Notification::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Notification_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Notification::Service, ::palm::nut::v1::Pager, ::palm::fig::v1::IndexNotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Notification::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::fig::v1::IndexNotificationResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

Notification::Service::~Service() {
}

::grpc::Status Notification::Service::Index(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::IndexNotificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LeaveWord_method_names[] = {
  "/palm.fig.v1.LeaveWord/Create",
  "/palm.fig.v1.LeaveWord/Index",
  "/palm.fig.v1.LeaveWord/Show",
  "/palm.fig.v1.LeaveWord/Destroy",
};

std::unique_ptr< LeaveWord::Stub> LeaveWord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LeaveWord::Stub> stub(new LeaveWord::Stub(channel, options));
  return stub;
}

LeaveWord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(LeaveWord_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(LeaveWord_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(LeaveWord_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(LeaveWord_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LeaveWord::Stub::Create(::grpc::ClientContext* context, const ::palm::nut::v1::MediaContent& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::MediaContent, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void LeaveWord::Stub::async::Create(::grpc::ClientContext* context, const ::palm::nut::v1::MediaContent* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::MediaContent, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Create(::grpc::ClientContext* context, const ::palm::nut::v1::MediaContent* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::nut::v1::MediaContent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::MediaContent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::nut::v1::MediaContent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::fig::v1::LeaveWordIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::fig::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void LeaveWord::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::LeaveWordIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::fig::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::LeaveWordIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::LeaveWordIndexResponse>* LeaveWord::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::LeaveWordIndexResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::LeaveWordIndexResponse>* LeaveWord::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Show(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::palm::fig::v1::LeaveWordIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::palm::fig::v1::LeaveWordIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void LeaveWord::Stub::async::Show(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::fig::v1::LeaveWordIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::palm::fig::v1::LeaveWordIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Show(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::fig::v1::LeaveWordIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::LeaveWordIndexResponse_Item>* LeaveWord::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::LeaveWordIndexResponse_Item, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::LeaveWordIndexResponse_Item>* LeaveWord::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LeaveWord::Stub::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void LeaveWord::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void LeaveWord::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LeaveWord::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

LeaveWord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::nut::v1::MediaContent, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::MediaContent* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::nut::v1::Pager, ::palm::fig::v1::LeaveWordIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::fig::v1::LeaveWordIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::nut::v1::IdRequest, ::palm::fig::v1::LeaveWordIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::palm::fig::v1::LeaveWordIndexResponse_Item* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaveWord_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaveWord::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LeaveWord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
}

LeaveWord::Service::~Service() {
}

::grpc::Status LeaveWord::Service::Create(::grpc::ServerContext* context, const ::palm::nut::v1::MediaContent* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Index(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::LeaveWordIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Show(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::fig::v1::LeaveWordIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaveWord::Service::Destroy(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Site_method_names[] = {
  "/palm.fig.v1.Site/SetMaintenanceMode",
  "/palm.fig.v1.Site/Install",
  "/palm.fig.v1.Site/ClearCache",
  "/palm.fig.v1.Site/Layout",
  "/palm.fig.v1.Site/SetAuthor",
  "/palm.fig.v1.Site/SetCopyright",
  "/palm.fig.v1.Site/SetKeywords",
  "/palm.fig.v1.Site/SetInfo",
  "/palm.fig.v1.Site/SetLogo",
  "/palm.fig.v1.Site/SetTwilio",
  "/palm.fig.v1.Site/GetTwilio",
  "/palm.fig.v1.Site/PingTwilio",
  "/palm.fig.v1.Site/SetSmtp",
  "/palm.fig.v1.Site/GetSmtp",
  "/palm.fig.v1.Site/PingSmtp",
  "/palm.fig.v1.Site/SetIndexNow",
  "/palm.fig.v1.Site/GetIndexNow",
  "/palm.fig.v1.Site/PingIndexNow",
  "/palm.fig.v1.Site/SetGoogle",
  "/palm.fig.v1.Site/GetGoogle",
  "/palm.fig.v1.Site/PingGoogle",
  "/palm.fig.v1.Site/SetBaidu",
  "/palm.fig.v1.Site/GetBaidu",
  "/palm.fig.v1.Site/PingBaidu",
  "/palm.fig.v1.Site/Status",
};

std::unique_ptr< Site::Stub> Site::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Site::Stub> stub(new Site::Stub(channel, options));
  return stub;
}

Site::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetMaintenanceMode_(Site_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Install_(Site_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearCache_(Site_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Layout_(Site_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAuthor_(Site_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCopyright_(Site_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetKeywords_(Site_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInfo_(Site_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLogo_(Site_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTwilio_(Site_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTwilio_(Site_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingTwilio_(Site_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSmtp_(Site_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSmtp_(Site_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingSmtp_(Site_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIndexNow_(Site_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexNow_(Site_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingIndexNow_(Site_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGoogle_(Site_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGoogle_(Site_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingGoogle_(Site_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBaidu_(Site_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBaidu_(Site_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingBaidu_(Site_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Site_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Site::Stub::SetMaintenanceMode(::grpc::ClientContext* context, const ::palm::fig::v1::SiteMaintenanceModeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteMaintenanceModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMaintenanceMode_, context, request, response);
}

void Site::Stub::async::SetMaintenanceMode(::grpc::ClientContext* context, const ::palm::fig::v1::SiteMaintenanceModeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteMaintenanceModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaintenanceMode_, context, request, response, std::move(f));
}

void Site::Stub::async::SetMaintenanceMode(::grpc::ClientContext* context, const ::palm::fig::v1::SiteMaintenanceModeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaintenanceMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetMaintenanceModeRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteMaintenanceModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteMaintenanceModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMaintenanceMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetMaintenanceModeRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteMaintenanceModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMaintenanceModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Install(::grpc::ClientContext* context, const ::palm::fig::v1::SiteInstallRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteInstallRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Install_, context, request, response);
}

void Site::Stub::async::Install(::grpc::ClientContext* context, const ::palm::fig::v1::SiteInstallRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteInstallRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Install_, context, request, response, std::move(f));
}

void Site::Stub::async::Install(::grpc::ClientContext* context, const ::palm::fig::v1::SiteInstallRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Install_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncInstallRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteInstallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteInstallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Install_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncInstallRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteInstallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearCache_, context, request, response);
}

void Site::Stub::async::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearCache_, context, request, response, std::move(f));
}

void Site::Stub::async::ClearCache(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncClearCacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncClearCacheRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::SiteLayoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Layout_, context, request, response);
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SiteLayoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, std::move(f));
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SiteLayoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::SiteLayoutResponse>* Site::Stub::PrepareAsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::SiteLayoutResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Layout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::SiteLayoutResponse>* Site::Stub::AsyncLayoutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLayoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetAuthor(::grpc::ClientContext* context, const ::palm::fig::v1::SiteLayoutResponse_Author& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAuthor_, context, request, response);
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::fig::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, std::move(f));
}

void Site::Stub::async::SetAuthor(::grpc::ClientContext* context, const ::palm::fig::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAuthor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteLayoutResponse_Author, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAuthor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetAuthorRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteLayoutResponse_Author& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAuthorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetCopyright(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetCopyrightRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCopyright_, context, request, response);
}

void Site::Stub::async::SetCopyright(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCopyright_, context, request, response, std::move(f));
}

void Site::Stub::async::SetCopyright(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCopyright_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetCopyrightRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetCopyrightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteSetCopyrightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCopyright_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetCopyrightRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetCopyrightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCopyrightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetKeywords(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetKeywordsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetKeywords_, context, request, response);
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, std::move(f));
}

void Site::Stub::async::SetKeywords(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKeywords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteSetKeywordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetKeywords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetKeywordsRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetKeywordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetKeywordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetInfo(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetInfoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInfo_, context, request, response);
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetInfo(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteSetInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetInfoRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetLogo(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetLogoRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLogo_, context, request, response);
}

void Site::Stub::async::SetLogo(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLogo_, context, request, response, std::move(f));
}

void Site::Stub::async::SetLogo(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLogo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetLogoRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetLogoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteSetLogoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLogo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetLogoRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSetLogoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLogoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetTwilio(::grpc::ClientContext* context, const ::palm::fig::v1::TwilioProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTwilio_, context, request, response);
}

void Site::Stub::async::SetTwilio(::grpc::ClientContext* context, const ::palm::fig::v1::TwilioProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTwilio_, context, request, response, std::move(f));
}

void Site::Stub::async::SetTwilio(::grpc::ClientContext* context, const ::palm::fig::v1::TwilioProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTwilio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetTwilioRaw(::grpc::ClientContext* context, const ::palm::fig::v1::TwilioProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTwilio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetTwilioRaw(::grpc::ClientContext* context, const ::palm::fig::v1::TwilioProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTwilioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetTwilio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::TwilioProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTwilio_, context, request, response);
}

void Site::Stub::async::GetTwilio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::TwilioProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTwilio_, context, request, response, std::move(f));
}

void Site::Stub::async::GetTwilio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::TwilioProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTwilio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::TwilioProfile>* Site::Stub::PrepareAsyncGetTwilioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTwilio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::TwilioProfile>* Site::Stub::AsyncGetTwilioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTwilioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingTwilio(::grpc::ClientContext* context, const ::palm::fig::v1::SiteTwilioPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteTwilioPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingTwilio_, context, request, response);
}

void Site::Stub::async::PingTwilio(::grpc::ClientContext* context, const ::palm::fig::v1::SiteTwilioPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteTwilioPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingTwilio_, context, request, response, std::move(f));
}

void Site::Stub::async::PingTwilio(::grpc::ClientContext* context, const ::palm::fig::v1::SiteTwilioPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingTwilio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingTwilioRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteTwilioPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteTwilioPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingTwilio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingTwilioRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteTwilioPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingTwilioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetSmtp(::grpc::ClientContext* context, const ::palm::fig::v1::SmtpProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSmtp_, context, request, response);
}

void Site::Stub::async::SetSmtp(::grpc::ClientContext* context, const ::palm::fig::v1::SmtpProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::SetSmtp(::grpc::ClientContext* context, const ::palm::fig::v1::SmtpProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetSmtpRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SmtpProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetSmtpRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SmtpProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::SmtpProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSmtp_, context, request, response);
}

void Site::Stub::async::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SmtpProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::GetSmtp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SmtpProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::SmtpProfile>* Site::Stub::PrepareAsyncGetSmtpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::SmtpProfile>* Site::Stub::AsyncGetSmtpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingSmtp(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSmtpPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SiteSmtpPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingSmtp_, context, request, response);
}

void Site::Stub::async::PingSmtp(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSmtpPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SiteSmtpPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingSmtp_, context, request, response, std::move(f));
}

void Site::Stub::async::PingSmtp(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSmtpPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingSmtp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingSmtpRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSmtpPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SiteSmtpPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingSmtp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingSmtpRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SiteSmtpPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingSmtpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetIndexNow(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetIndexNow_, context, request, response);
}

void Site::Stub::async::SetIndexNow(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIndexNow_, context, request, response, std::move(f));
}

void Site::Stub::async::SetIndexNow(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIndexNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetIndexNowRaw(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetIndexNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetIndexNowRaw(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetIndexNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetIndexNow(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::IndexNowProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIndexNow_, context, request, response);
}

void Site::Stub::async::GetIndexNow(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::IndexNowProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexNow_, context, request, response, std::move(f));
}

void Site::Stub::async::GetIndexNow(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::IndexNowProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::IndexNowProfile>* Site::Stub::PrepareAsyncGetIndexNowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIndexNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::IndexNowProfile>* Site::Stub::AsyncGetIndexNowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIndexNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingIndexNow(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::IndexNowPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingIndexNow_, context, request, response);
}

void Site::Stub::async::PingIndexNow(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::IndexNowPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingIndexNow_, context, request, response, std::move(f));
}

void Site::Stub::async::PingIndexNow(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingIndexNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingIndexNowRaw(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::IndexNowPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingIndexNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingIndexNowRaw(::grpc::ClientContext* context, const ::palm::fig::v1::IndexNowPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingIndexNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetGoogle(::grpc::ClientContext* context, const ::palm::fig::v1::GoogleProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGoogle_, context, request, response);
}

void Site::Stub::async::SetGoogle(::grpc::ClientContext* context, const ::palm::fig::v1::GoogleProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::SetGoogle(::grpc::ClientContext* context, const ::palm::fig::v1::GoogleProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetGoogleRaw(::grpc::ClientContext* context, const ::palm::fig::v1::GoogleProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetGoogleRaw(::grpc::ClientContext* context, const ::palm::fig::v1::GoogleProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::GoogleProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGoogle_, context, request, response);
}

void Site::Stub::async::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::GoogleProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::GetGoogle(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::GoogleProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::GoogleProfile>* Site::Stub::PrepareAsyncGetGoogleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::GoogleProfile>* Site::Stub::AsyncGetGoogleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingGoogle(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingGoogle_, context, request, response);
}

void Site::Stub::async::PingGoogle(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingGoogle_, context, request, response, std::move(f));
}

void Site::Stub::async::PingGoogle(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingGoogle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingGoogleRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SitemapPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingGoogle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingGoogleRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingGoogleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::SetBaidu(::grpc::ClientContext* context, const ::palm::fig::v1::BaiduProfile& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBaidu_, context, request, response);
}

void Site::Stub::async::SetBaidu(::grpc::ClientContext* context, const ::palm::fig::v1::BaiduProfile* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::SetBaidu(::grpc::ClientContext* context, const ::palm::fig::v1::BaiduProfile* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncSetBaiduRaw(::grpc::ClientContext* context, const ::palm::fig::v1::BaiduProfile& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncSetBaiduRaw(::grpc::ClientContext* context, const ::palm::fig::v1::BaiduProfile& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::BaiduProfile* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBaidu_, context, request, response);
}

void Site::Stub::async::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::BaiduProfile* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::GetBaidu(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::BaiduProfile* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::BaiduProfile>* Site::Stub::PrepareAsyncGetBaiduRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::BaiduProfile>* Site::Stub::AsyncGetBaiduRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::PingBaidu(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PingBaidu_, context, request, response);
}

void Site::Stub::async::PingBaidu(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingBaidu_, context, request, response, std::move(f));
}

void Site::Stub::async::PingBaidu(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PingBaidu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::PrepareAsyncPingBaiduRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::SitemapPingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PingBaidu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Site::Stub::AsyncPingBaiduRaw(::grpc::ClientContext* context, const ::palm::fig::v1::SitemapPingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingBaiduRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::SiteStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SiteStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Site::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SiteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::SiteStatusResponse>* Site::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::SiteStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::SiteStatusResponse>* Site::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

Site::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteMaintenanceModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteMaintenanceModeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetMaintenanceMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteInstallRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteInstallRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Install(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->ClearCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::SiteLayoutResponse* resp) {
               return service->Layout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteLayoutResponse_Author, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteLayoutResponse_Author* req,
             ::google::protobuf::Empty* resp) {
               return service->SetAuthor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteSetCopyrightRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteSetCopyrightRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCopyright(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteSetKeywordsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteSetKeywordsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetKeywords(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteSetInfoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteSetInfoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteSetLogoRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteSetLogoRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetLogo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::TwilioProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::TwilioProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTwilio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::TwilioProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::TwilioProfile* resp) {
               return service->GetTwilio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteTwilioPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteTwilioPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingTwilio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SmtpProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SmtpProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::SmtpProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::SmtpProfile* resp) {
               return service->GetSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SiteSmtpPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SiteSmtpPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingSmtp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::IndexNowProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::IndexNowProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetIndexNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::IndexNowProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::IndexNowProfile* resp) {
               return service->GetIndexNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::IndexNowPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::IndexNowPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingIndexNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::GoogleProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::GoogleProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::GoogleProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::GoogleProfile* resp) {
               return service->GetGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SitemapPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingGoogle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::BaiduProfile, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::BaiduProfile* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::BaiduProfile, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::BaiduProfile* resp) {
               return service->GetBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::fig::v1::SitemapPingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::SitemapPingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->PingBaidu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::fig::v1::SiteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::SiteStatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
}

Site::Service::~Service() {
}

::grpc::Status Site::Service::SetMaintenanceMode(::grpc::ServerContext* context, const ::palm::fig::v1::SiteMaintenanceModeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Install(::grpc::ServerContext* context, const ::palm::fig::v1::SiteInstallRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::ClearCache(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Layout(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SiteLayoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetAuthor(::grpc::ServerContext* context, const ::palm::fig::v1::SiteLayoutResponse_Author* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetCopyright(::grpc::ServerContext* context, const ::palm::fig::v1::SiteSetCopyrightRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetKeywords(::grpc::ServerContext* context, const ::palm::fig::v1::SiteSetKeywordsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetInfo(::grpc::ServerContext* context, const ::palm::fig::v1::SiteSetInfoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetLogo(::grpc::ServerContext* context, const ::palm::fig::v1::SiteSetLogoRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetTwilio(::grpc::ServerContext* context, const ::palm::fig::v1::TwilioProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetTwilio(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::TwilioProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingTwilio(::grpc::ServerContext* context, const ::palm::fig::v1::SiteTwilioPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetSmtp(::grpc::ServerContext* context, const ::palm::fig::v1::SmtpProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetSmtp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SmtpProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingSmtp(::grpc::ServerContext* context, const ::palm::fig::v1::SiteSmtpPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetIndexNow(::grpc::ServerContext* context, const ::palm::fig::v1::IndexNowProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetIndexNow(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::IndexNowProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingIndexNow(::grpc::ServerContext* context, const ::palm::fig::v1::IndexNowPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetGoogle(::grpc::ServerContext* context, const ::palm::fig::v1::GoogleProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetGoogle(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::GoogleProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingGoogle(::grpc::ServerContext* context, const ::palm::fig::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::SetBaidu(::grpc::ServerContext* context, const ::palm::fig::v1::BaiduProfile* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::GetBaidu(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::BaiduProfile* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::PingBaidu(::grpc::ServerContext* context, const ::palm::fig::v1::SitemapPingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::SiteStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ShorterLink_method_names[] = {
  "/palm.fig.v1.ShorterLink/Create",
  "/palm.fig.v1.ShorterLink/Update",
  "/palm.fig.v1.ShorterLink/Destroy",
  "/palm.fig.v1.ShorterLink/Index",
};

std::unique_ptr< ShorterLink::Stub> ShorterLink::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShorterLink::Stub> stub(new ShorterLink::Stub(channel, options));
  return stub;
}

ShorterLink::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(ShorterLink_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(ShorterLink_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(ShorterLink_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(ShorterLink_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ShorterLink::Stub::Create(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::ShorterLinkCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ShorterLink::Stub::async::Create(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::ShorterLinkCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Create(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::ShorterLinkCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShorterLink::Stub::Update(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::ShorterLinkUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void ShorterLink::Stub::async::Update(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::ShorterLinkUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Update(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::ShorterLinkUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::ShorterLinkUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShorterLink::Stub::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void ShorterLink::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ShorterLink::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ShorterLink::Stub::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::fig::v1::ShorterLinkIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::fig::v1::ShorterLinkIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void ShorterLink::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::ShorterLinkIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::fig::v1::ShorterLinkIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void ShorterLink::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::ShorterLinkIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::ShorterLinkIndexResponse>* ShorterLink::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::ShorterLinkIndexResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::ShorterLinkIndexResponse>* ShorterLink::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

ShorterLink::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::fig::v1::ShorterLinkCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::ShorterLinkCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::fig::v1::ShorterLinkUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::ShorterLinkUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShorterLink_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShorterLink::Service, ::palm::nut::v1::Pager, ::palm::fig::v1::ShorterLinkIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ShorterLink::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::fig::v1::ShorterLinkIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

ShorterLink::Service::~Service() {
}

::grpc::Status ShorterLink::Service::Create(::grpc::ServerContext* context, const ::palm::fig::v1::ShorterLinkCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShorterLink::Service::Update(::grpc::ServerContext* context, const ::palm::fig::v1::ShorterLinkUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShorterLink::Service::Destroy(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ShorterLink::Service::Index(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::fig::v1::ShorterLinkIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Tag_method_names[] = {
  "/palm.fig.v1.Tag/Create",
  "/palm.fig.v1.Tag/Update",
  "/palm.fig.v1.Tag/Destroy",
  "/palm.fig.v1.Tag/Index",
};

std::unique_ptr< Tag::Stub> Tag::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tag::Stub> stub(new Tag::Stub(channel, options));
  return stub;
}

Tag::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Tag_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Tag_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Tag_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Tag_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tag::Stub::Create(::grpc::ClientContext* context, const ::palm::fig::v1::TagCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::TagCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Tag::Stub::async::Create(::grpc::ClientContext* context, const ::palm::fig::v1::TagCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::TagCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Tag::Stub::async::Create(::grpc::ClientContext* context, const ::palm::fig::v1::TagCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::TagCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::TagCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::TagCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tag::Stub::Update(::grpc::ClientContext* context, const ::palm::fig::v1::TagUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::TagUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Tag::Stub::async::Update(::grpc::ClientContext* context, const ::palm::fig::v1::TagUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::TagUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Tag::Stub::async::Update(::grpc::ClientContext* context, const ::palm::fig::v1::TagUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::TagUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::TagUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::TagUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tag::Stub::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Tag::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Tag::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tag::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tag::Stub::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::TagIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::TagIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Tag::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::TagIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::TagIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Tag::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::TagIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::TagIndexResponse>* Tag::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::TagIndexResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::TagIndexResponse>* Tag::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

Tag::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::palm::fig::v1::TagCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::TagCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::palm::fig::v1::TagUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::TagUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tag_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tag::Service, ::google::protobuf::Empty, ::palm::fig::v1::TagIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tag::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::TagIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

Tag::Service::~Service() {
}

::grpc::Status Tag::Service::Create(::grpc::ServerContext* context, const ::palm::fig::v1::TagCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tag::Service::Update(::grpc::ServerContext* context, const ::palm::fig::v1::TagUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tag::Service::Destroy(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tag::Service::Index(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::TagIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Category_method_names[] = {
  "/palm.fig.v1.Category/Create",
  "/palm.fig.v1.Category/Update",
  "/palm.fig.v1.Category/Destroy",
  "/palm.fig.v1.Category/Index",
};

std::unique_ptr< Category::Stub> Category::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Category::Stub> stub(new Category::Stub(channel, options));
  return stub;
}

Category::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Category_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Category_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Category_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Category_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Category::Stub::Create(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::CategoryCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Category::Stub::async::Create(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::CategoryCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Category::Stub::async::Create(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::CategoryCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Category::Stub::Update(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::fig::v1::CategoryUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Category::Stub::async::Update(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::fig::v1::CategoryUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Category::Stub::async::Update(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::fig::v1::CategoryUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::fig::v1::CategoryUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Category::Stub::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Category::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Category::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Category::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Category::Stub::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::fig::v1::CategoryIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::CategoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Category::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::CategoryIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::fig::v1::CategoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Category::Stub::async::Index(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::CategoryIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::CategoryIndexResponse>* Category::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::fig::v1::CategoryIndexResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::fig::v1::CategoryIndexResponse>* Category::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

Category::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::palm::fig::v1::CategoryCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::CategoryCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::palm::fig::v1::CategoryUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::fig::v1::CategoryUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Category_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Category::Service, ::google::protobuf::Empty, ::palm::fig::v1::CategoryIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Category::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::fig::v1::CategoryIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
}

Category::Service::~Service() {
}

::grpc::Status Category::Service::Create(::grpc::ServerContext* context, const ::palm::fig::v1::CategoryCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Category::Service::Update(::grpc::ServerContext* context, const ::palm::fig::v1::CategoryUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Category::Service::Destroy(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Category::Service::Index(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::fig::v1::CategoryIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace fig
}  // namespace v1

