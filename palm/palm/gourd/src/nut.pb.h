// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto;
namespace palm {
namespace nut {
namespace v1 {
class IdRequest;
struct IdRequestDefaultTypeInternal;
extern IdRequestDefaultTypeInternal _IdRequest_default_instance_;
class MediaContent;
struct MediaContentDefaultTypeInternal;
extern MediaContentDefaultTypeInternal _MediaContent_default_instance_;
class Pager;
struct PagerDefaultTypeInternal;
extern PagerDefaultTypeInternal _Pager_default_instance_;
class Pagination;
struct PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
}  // namespace v1
}  // namespace nut
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::nut::v1::IdRequest* Arena::CreateMaybeMessage<::palm::nut::v1::IdRequest>(Arena*);
template<> ::palm::nut::v1::MediaContent* Arena::CreateMaybeMessage<::palm::nut::v1::MediaContent>(Arena*);
template<> ::palm::nut::v1::Pager* Arena::CreateMaybeMessage<::palm::nut::v1::Pager>(Arena*);
template<> ::palm::nut::v1::Pagination* Arena::CreateMaybeMessage<::palm::nut::v1::Pagination>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace nut {
namespace v1 {

enum MediaContent_Editor : int {
  MediaContent_Editor_TEXTAREA = 0,
  MediaContent_Editor_QUILL = 1,
  MediaContent_Editor_MediaContent_Editor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MediaContent_Editor_MediaContent_Editor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MediaContent_Editor_IsValid(int value);
constexpr MediaContent_Editor MediaContent_Editor_Editor_MIN = MediaContent_Editor_TEXTAREA;
constexpr MediaContent_Editor MediaContent_Editor_Editor_MAX = MediaContent_Editor_QUILL;
constexpr int MediaContent_Editor_Editor_ARRAYSIZE = MediaContent_Editor_Editor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaContent_Editor_descriptor();
template<typename T>
inline const std::string& MediaContent_Editor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MediaContent_Editor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MediaContent_Editor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MediaContent_Editor_descriptor(), enum_t_value);
}
inline bool MediaContent_Editor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MediaContent_Editor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaContent_Editor>(
    MediaContent_Editor_descriptor(), name, value);
}
enum MediaContent_Status : int {
  MediaContent_Status_Published = 0,
  MediaContent_Status_Draft = 1,
  MediaContent_Status_Pending = 2,
  MediaContent_Status_Private = 3,
  MediaContent_Status_Future = 4,
  MediaContent_Status_Trash = 99,
  MediaContent_Status_MediaContent_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MediaContent_Status_MediaContent_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MediaContent_Status_IsValid(int value);
constexpr MediaContent_Status MediaContent_Status_Status_MIN = MediaContent_Status_Published;
constexpr MediaContent_Status MediaContent_Status_Status_MAX = MediaContent_Status_Trash;
constexpr int MediaContent_Status_Status_ARRAYSIZE = MediaContent_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaContent_Status_descriptor();
template<typename T>
inline const std::string& MediaContent_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MediaContent_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MediaContent_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MediaContent_Status_descriptor(), enum_t_value);
}
inline bool MediaContent_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MediaContent_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediaContent_Status>(
    MediaContent_Status_descriptor(), name, value);
}
// ===================================================================

class IdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.IdRequest) */ {
 public:
  inline IdRequest() : IdRequest(nullptr) {}
  ~IdRequest() override;
  explicit PROTOBUF_CONSTEXPR IdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdRequest(const IdRequest& from);
  IdRequest(IdRequest&& from) noexcept
    : IdRequest() {
    *this = ::std::move(from);
  }

  inline IdRequest& operator=(const IdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdRequest& operator=(IdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdRequest* internal_default_instance() {
    return reinterpret_cast<const IdRequest*>(
               &_IdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IdRequest& a, IdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdRequest& from) {
    IdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.IdRequest";
  }
  protected:
  explicit IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.IdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class Pager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.Pager) */ {
 public:
  inline Pager() : Pager(nullptr) {}
  ~Pager() override;
  explicit PROTOBUF_CONSTEXPR Pager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pager(const Pager& from);
  Pager(Pager&& from) noexcept
    : Pager() {
    *this = ::std::move(from);
  }

  inline Pager& operator=(const Pager& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pager& operator=(Pager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pager& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pager* internal_default_instance() {
    return reinterpret_cast<const Pager*>(
               &_Pager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pager& a, Pager& b) {
    a.Swap(&b);
  }
  inline void Swap(Pager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pager& from) {
    Pager::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.Pager";
  }
  protected:
  explicit Pager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // int64 page = 1;
  void clear_page();
  int64_t page() const;
  void set_page(int64_t value);
  private:
  int64_t _internal_page() const;
  void _internal_set_page(int64_t value);
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.Pager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t page_;
    int64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class Pagination final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  ~Pagination() override;
  explicit PROTOBUF_CONSTEXPR Pagination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pagination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pagination& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pagination& from) {
    Pagination::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kSizeFieldNumber = 2,
    kTotalFieldNumber = 3,
    kHasNextFieldNumber = 11,
    kHasPreviousFieldNumber = 12,
  };
  // int64 page = 1;
  void clear_page();
  int64_t page() const;
  void set_page(int64_t value);
  private:
  int64_t _internal_page() const;
  void _internal_set_page(int64_t value);
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 total = 3;
  void clear_total();
  int64_t total() const;
  void set_total(int64_t value);
  private:
  int64_t _internal_total() const;
  void _internal_set_total(int64_t value);
  public:

  // bool has_next = 11;
  void clear_has_next();
  bool has_next() const;
  void set_has_next(bool value);
  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);
  public:

  // bool has_previous = 12;
  void clear_has_previous();
  bool has_previous() const;
  void set_has_previous(bool value);
  private:
  bool _internal_has_previous() const;
  void _internal_set_has_previous(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t page_;
    int64_t size_;
    int64_t total_;
    bool has_next_;
    bool has_previous_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// -------------------------------------------------------------------

class MediaContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.nut.v1.MediaContent) */ {
 public:
  inline MediaContent() : MediaContent(nullptr) {}
  ~MediaContent() override;
  explicit PROTOBUF_CONSTEXPR MediaContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaContent(const MediaContent& from);
  MediaContent(MediaContent&& from) noexcept
    : MediaContent() {
    *this = ::std::move(from);
  }

  inline MediaContent& operator=(const MediaContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaContent& operator=(MediaContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaContent* internal_default_instance() {
    return reinterpret_cast<const MediaContent*>(
               &_MediaContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MediaContent& a, MediaContent& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaContent& from) {
    MediaContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.nut.v1.MediaContent";
  }
  protected:
  explicit MediaContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MediaContent_Editor Editor;
  static constexpr Editor TEXTAREA =
    MediaContent_Editor_TEXTAREA;
  static constexpr Editor QUILL =
    MediaContent_Editor_QUILL;
  static inline bool Editor_IsValid(int value) {
    return MediaContent_Editor_IsValid(value);
  }
  static constexpr Editor Editor_MIN =
    MediaContent_Editor_Editor_MIN;
  static constexpr Editor Editor_MAX =
    MediaContent_Editor_Editor_MAX;
  static constexpr int Editor_ARRAYSIZE =
    MediaContent_Editor_Editor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Editor_descriptor() {
    return MediaContent_Editor_descriptor();
  }
  template<typename T>
  static inline const std::string& Editor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Editor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Editor_Name.");
    return MediaContent_Editor_Name(enum_t_value);
  }
  static inline bool Editor_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Editor* value) {
    return MediaContent_Editor_Parse(name, value);
  }

  typedef MediaContent_Status Status;
  static constexpr Status Published =
    MediaContent_Status_Published;
  static constexpr Status Draft =
    MediaContent_Status_Draft;
  static constexpr Status Pending =
    MediaContent_Status_Pending;
  static constexpr Status Private =
    MediaContent_Status_Private;
  static constexpr Status Future =
    MediaContent_Status_Future;
  static constexpr Status Trash =
    MediaContent_Status_Trash;
  static inline bool Status_IsValid(int value) {
    return MediaContent_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    MediaContent_Status_Status_MIN;
  static constexpr Status Status_MAX =
    MediaContent_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    MediaContent_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return MediaContent_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return MediaContent_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return MediaContent_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kPublishedAtFieldNumber = 11,
    kEditorFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional .google.protobuf.Timestamp published_at = 11;
  bool has_published_at() const;
  private:
  bool _internal_has_published_at() const;
  public:
  void clear_published_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& published_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_published_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_published_at();
  void set_allocated_published_at(::PROTOBUF_NAMESPACE_ID::Timestamp* published_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_published_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_published_at();
  public:
  void unsafe_arena_set_allocated_published_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* published_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_published_at();

  // .palm.nut.v1.MediaContent.Editor editor = 1;
  void clear_editor();
  ::palm::nut::v1::MediaContent_Editor editor() const;
  void set_editor(::palm::nut::v1::MediaContent_Editor value);
  private:
  ::palm::nut::v1::MediaContent_Editor _internal_editor() const;
  void _internal_set_editor(::palm::nut::v1::MediaContent_Editor value);
  public:

  // .palm.nut.v1.MediaContent.Status status = 3;
  void clear_status();
  ::palm::nut::v1::MediaContent_Status status() const;
  void set_status(::palm::nut::v1::MediaContent_Status value);
  private:
  ::palm::nut::v1::MediaContent_Status _internal_status() const;
  void _internal_set_status(::palm::nut::v1::MediaContent_Status value);
  public:

  // @@protoc_insertion_point(class_scope:palm.nut.v1.MediaContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* published_at_;
    int editor_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nut_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdRequest

// int32 id = 1;
inline void IdRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t IdRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t IdRequest::id() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.IdRequest.id)
  return _internal_id();
}
inline void IdRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void IdRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.IdRequest.id)
}

// -------------------------------------------------------------------

// Pager

// int64 page = 1;
inline void Pager::clear_page() {
  _impl_.page_ = int64_t{0};
}
inline int64_t Pager::_internal_page() const {
  return _impl_.page_;
}
inline int64_t Pager::page() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pager.page)
  return _internal_page();
}
inline void Pager::_internal_set_page(int64_t value) {
  
  _impl_.page_ = value;
}
inline void Pager::set_page(int64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pager.page)
}

// int64 size = 2;
inline void Pager::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t Pager::_internal_size() const {
  return _impl_.size_;
}
inline int64_t Pager::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pager.size)
  return _internal_size();
}
inline void Pager::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void Pager::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pager.size)
}

// -------------------------------------------------------------------

// Pagination

// int64 page = 1;
inline void Pagination::clear_page() {
  _impl_.page_ = int64_t{0};
}
inline int64_t Pagination::_internal_page() const {
  return _impl_.page_;
}
inline int64_t Pagination::page() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.page)
  return _internal_page();
}
inline void Pagination::_internal_set_page(int64_t value) {
  
  _impl_.page_ = value;
}
inline void Pagination::set_page(int64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.page)
}

// int64 size = 2;
inline void Pagination::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t Pagination::_internal_size() const {
  return _impl_.size_;
}
inline int64_t Pagination::size() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.size)
  return _internal_size();
}
inline void Pagination::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void Pagination::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.size)
}

// int64 total = 3;
inline void Pagination::clear_total() {
  _impl_.total_ = int64_t{0};
}
inline int64_t Pagination::_internal_total() const {
  return _impl_.total_;
}
inline int64_t Pagination::total() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.total)
  return _internal_total();
}
inline void Pagination::_internal_set_total(int64_t value) {
  
  _impl_.total_ = value;
}
inline void Pagination::set_total(int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.total)
}

// bool has_next = 11;
inline void Pagination::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool Pagination::_internal_has_next() const {
  return _impl_.has_next_;
}
inline bool Pagination::has_next() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.has_next)
  return _internal_has_next();
}
inline void Pagination::_internal_set_has_next(bool value) {
  
  _impl_.has_next_ = value;
}
inline void Pagination::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.has_next)
}

// bool has_previous = 12;
inline void Pagination::clear_has_previous() {
  _impl_.has_previous_ = false;
}
inline bool Pagination::_internal_has_previous() const {
  return _impl_.has_previous_;
}
inline bool Pagination::has_previous() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.Pagination.has_previous)
  return _internal_has_previous();
}
inline void Pagination::_internal_set_has_previous(bool value) {
  
  _impl_.has_previous_ = value;
}
inline void Pagination::set_has_previous(bool value) {
  _internal_set_has_previous(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.Pagination.has_previous)
}

// -------------------------------------------------------------------

// MediaContent

// .palm.nut.v1.MediaContent.Editor editor = 1;
inline void MediaContent::clear_editor() {
  _impl_.editor_ = 0;
}
inline ::palm::nut::v1::MediaContent_Editor MediaContent::_internal_editor() const {
  return static_cast< ::palm::nut::v1::MediaContent_Editor >(_impl_.editor_);
}
inline ::palm::nut::v1::MediaContent_Editor MediaContent::editor() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.editor)
  return _internal_editor();
}
inline void MediaContent::_internal_set_editor(::palm::nut::v1::MediaContent_Editor value) {
  
  _impl_.editor_ = value;
}
inline void MediaContent::set_editor(::palm::nut::v1::MediaContent_Editor value) {
  _internal_set_editor(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.MediaContent.editor)
}

// string body = 2;
inline void MediaContent::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& MediaContent::body() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaContent::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.nut.v1.MediaContent.body)
}
inline std::string* MediaContent::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.MediaContent.body)
  return _s;
}
inline const std::string& MediaContent::_internal_body() const {
  return _impl_.body_.Get();
}
inline void MediaContent::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* MediaContent::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* MediaContent::release_body() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.MediaContent.body)
  return _impl_.body_.Release();
}
inline void MediaContent::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.MediaContent.body)
}

// .palm.nut.v1.MediaContent.Status status = 3;
inline void MediaContent::clear_status() {
  _impl_.status_ = 0;
}
inline ::palm::nut::v1::MediaContent_Status MediaContent::_internal_status() const {
  return static_cast< ::palm::nut::v1::MediaContent_Status >(_impl_.status_);
}
inline ::palm::nut::v1::MediaContent_Status MediaContent::status() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.status)
  return _internal_status();
}
inline void MediaContent::_internal_set_status(::palm::nut::v1::MediaContent_Status value) {
  
  _impl_.status_ = value;
}
inline void MediaContent::set_status(::palm::nut::v1::MediaContent_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:palm.nut.v1.MediaContent.status)
}

// optional .google.protobuf.Timestamp published_at = 11;
inline bool MediaContent::_internal_has_published_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.published_at_ != nullptr);
  return value;
}
inline bool MediaContent::has_published_at() const {
  return _internal_has_published_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MediaContent::_internal_published_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.published_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MediaContent::published_at() const {
  // @@protoc_insertion_point(field_get:palm.nut.v1.MediaContent.published_at)
  return _internal_published_at();
}
inline void MediaContent::unsafe_arena_set_allocated_published_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* published_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.published_at_);
  }
  _impl_.published_at_ = published_at;
  if (published_at) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.nut.v1.MediaContent.published_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::release_published_at() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.published_at_;
  _impl_.published_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::unsafe_arena_release_published_at() {
  // @@protoc_insertion_point(field_release:palm.nut.v1.MediaContent.published_at)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.published_at_;
  _impl_.published_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::_internal_mutable_published_at() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.published_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.published_at_ = p;
  }
  return _impl_.published_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MediaContent::mutable_published_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_published_at();
  // @@protoc_insertion_point(field_mutable:palm.nut.v1.MediaContent.published_at)
  return _msg;
}
inline void MediaContent::set_allocated_published_at(::PROTOBUF_NAMESPACE_ID::Timestamp* published_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.published_at_);
  }
  if (published_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(published_at));
    if (message_arena != submessage_arena) {
      published_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, published_at, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.published_at_ = published_at;
  // @@protoc_insertion_point(field_set_allocated:palm.nut.v1.MediaContent.published_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace nut
}  // namespace palm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::palm::nut::v1::MediaContent_Editor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palm::nut::v1::MediaContent_Editor>() {
  return ::palm::nut::v1::MediaContent_Editor_descriptor();
}
template <> struct is_proto_enum< ::palm::nut::v1::MediaContent_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::palm::nut::v1::MediaContent_Status>() {
  return ::palm::nut::v1::MediaContent_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
