// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ops-router.proto

#include "ops-router.pb.h"
#include "ops-router.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace ops {
namespace router {
namespace v1 {

static const char* Router_method_names[] = {
  "/palm.ops.router.v1.Router/Reboot",
  "/palm.ops.router.v1.Router/Apply",
  "/palm.ops.router.v1.Router/Status",
  "/palm.ops.router.v1.Router/SetDns",
  "/palm.ops.router.v1.Router/SetWan",
  "/palm.ops.router.v1.Router/SetWanPool",
  "/palm.ops.router.v1.Router/SetLan",
  "/palm.ops.router.v1.Router/SetDmz",
  "/palm.ops.router.v1.Router/CreateRule",
  "/palm.ops.router.v1.Router/UpdateRule",
  "/palm.ops.router.v1.Router/IndexRule",
  "/palm.ops.router.v1.Router/UpdateHost",
  "/palm.ops.router.v1.Router/IndexUser",
  "/palm.ops.router.v1.Router/UpdateUser",
  "/palm.ops.router.v1.Router/CreateUser",
};

std::unique_ptr< Router::Stub> Router::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Router::Stub> stub(new Router::Stub(channel, options));
  return stub;
}

Router::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Reboot_(Router_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Apply_(Router_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Router_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDns_(Router_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWan_(Router_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWanPool_(Router_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLan_(Router_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDmz_(Router_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRule_(Router_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRule_(Router_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IndexRule_(Router_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateHost_(Router_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IndexUser_(Router_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(Router_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateUser_(Router_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Router::Stub::Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reboot_, context, request, response);
}

void Router::Stub::async::Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void Router::Stub::async::Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reboot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRebootRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::Apply(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Apply_, context, request, response);
}

void Router::Stub::async::Apply(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Apply_, context, request, response, std::move(f));
}

void Router::Stub::async::Apply(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Apply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncApplyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Apply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncApplyRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::ops::router::v1::RouterStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Router::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Router::Stub::async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::RouterStatusResponse>* Router::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::ops::router::v1::RouterStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::RouterStatusResponse>* Router::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::SetDns(::grpc::ClientContext* context, const ::palm::ops::router::v1::Dns& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::Dns, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDns_, context, request, response);
}

void Router::Stub::async::SetDns(::grpc::ClientContext* context, const ::palm::ops::router::v1::Dns* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::Dns, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDns_, context, request, response, std::move(f));
}

void Router::Stub::async::SetDns(::grpc::ClientContext* context, const ::palm::ops::router::v1::Dns* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncSetDnsRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::Dns& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::Dns, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncSetDnsRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::Dns& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDnsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::SetWan(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetWanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterSetWanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetWan_, context, request, response);
}

void Router::Stub::async::SetWan(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetWanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterSetWanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWan_, context, request, response, std::move(f));
}

void Router::Stub::async::SetWan(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetWanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncSetWanRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetWanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterSetWanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetWan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncSetWanRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetWanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetWanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::SetWanPool(::grpc::ClientContext* context, const ::palm::ops::router::v1::WanPool& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::WanPool, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetWanPool_, context, request, response);
}

void Router::Stub::async::SetWanPool(::grpc::ClientContext* context, const ::palm::ops::router::v1::WanPool* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::WanPool, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWanPool_, context, request, response, std::move(f));
}

void Router::Stub::async::SetWanPool(::grpc::ClientContext* context, const ::palm::ops::router::v1::WanPool* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWanPool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncSetWanPoolRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::WanPool& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::WanPool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetWanPool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncSetWanPoolRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::WanPool& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetWanPoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::SetLan(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetLanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterSetLanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLan_, context, request, response);
}

void Router::Stub::async::SetLan(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetLanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterSetLanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLan_, context, request, response, std::move(f));
}

void Router::Stub::async::SetLan(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetLanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncSetLanRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetLanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterSetLanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncSetLanRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetLanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::SetDmz(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetDmzRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterSetDmzRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDmz_, context, request, response);
}

void Router::Stub::async::SetDmz(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetDmzRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterSetDmzRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDmz_, context, request, response, std::move(f));
}

void Router::Stub::async::SetDmz(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetDmzRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDmz_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncSetDmzRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetDmzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterSetDmzRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDmz_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncSetDmzRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterSetDmzRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDmzRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::CreateRule(::grpc::ClientContext* context, const ::palm::ops::router::v1::Rule& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::Rule, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRule_, context, request, response);
}

void Router::Stub::async::CreateRule(::grpc::ClientContext* context, const ::palm::ops::router::v1::Rule* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::Rule, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRule_, context, request, response, std::move(f));
}

void Router::Stub::async::CreateRule(::grpc::ClientContext* context, const ::palm::ops::router::v1::Rule* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncCreateRuleRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::Rule& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncCreateRuleRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::Rule& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::UpdateRule(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexRuleResponse_Item& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterIndexRuleResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRule_, context, request, response);
}

void Router::Stub::async::UpdateRule(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexRuleResponse_Item* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterIndexRuleResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRule_, context, request, response, std::move(f));
}

void Router::Stub::async::UpdateRule(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexRuleResponse_Item* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncUpdateRuleRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexRuleResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexRuleResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncUpdateRuleRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexRuleResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::IndexRule(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::ops::router::v1::RouterIndexRuleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IndexRule_, context, request, response);
}

void Router::Stub::async::IndexRule(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterIndexRuleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexRule_, context, request, response, std::move(f));
}

void Router::Stub::async::IndexRule(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterIndexRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::RouterIndexRuleResponse>* Router::Stub::PrepareAsyncIndexRuleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::ops::router::v1::RouterIndexRuleResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IndexRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::RouterIndexRuleResponse>* Router::Stub::AsyncIndexRuleRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::UpdateHost(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterUpdateHostRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterUpdateHostRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateHost_, context, request, response);
}

void Router::Stub::async::UpdateHost(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterUpdateHostRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterUpdateHostRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateHost_, context, request, response, std::move(f));
}

void Router::Stub::async::UpdateHost(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterUpdateHostRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateHost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncUpdateHostRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterUpdateHostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterUpdateHostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateHost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncUpdateHostRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterUpdateHostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateHostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::IndexUser(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::ops::router::v1::RouterIndexUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IndexUser_, context, request, response);
}

void Router::Stub::async::IndexUser(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterIndexUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexUser_, context, request, response, std::move(f));
}

void Router::Stub::async::IndexUser(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterIndexUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IndexUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::RouterIndexUserResponse>* Router::Stub::PrepareAsyncIndexUserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::ops::router::v1::RouterIndexUserResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IndexUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::RouterIndexUserResponse>* Router::Stub::AsyncIndexUserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::UpdateUser(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexUserResponse_Item& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterIndexUserResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void Router::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexUserResponse_Item* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterIndexUserResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void Router::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexUserResponse_Item* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexUserResponse_Item& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterIndexUserResponse_Item& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Router::Stub::CreateUser(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterCreateUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::RouterCreateUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void Router::Stub::async::CreateUser(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterCreateUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::RouterCreateUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void Router::Stub::async::CreateUser(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterCreateUserRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterCreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::RouterCreateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Router::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::RouterCreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Router::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Reboot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Apply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::google::protobuf::Empty, ::palm::ops::router::v1::RouterStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::ops::router::v1::RouterStatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::Dns, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::Dns* req,
             ::google::protobuf::Empty* resp) {
               return service->SetDns(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterSetWanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterSetWanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetWan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::WanPool, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::WanPool* req,
             ::google::protobuf::Empty* resp) {
               return service->SetWanPool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterSetLanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterSetLanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetLan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterSetDmzRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterSetDmzRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetDmz(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::Rule, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::Rule* req,
             ::google::protobuf::Empty* resp) {
               return service->CreateRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterIndexRuleResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterIndexRuleResponse_Item* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::ops::router::v1::RouterIndexRuleResponse* resp) {
               return service->IndexRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterUpdateHostRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterUpdateHostRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateHost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::google::protobuf::Empty, ::palm::ops::router::v1::RouterIndexUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::ops::router::v1::RouterIndexUserResponse* resp) {
               return service->IndexUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterIndexUserResponse_Item, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterIndexUserResponse_Item* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::palm::ops::router::v1::RouterCreateUserRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Router::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::RouterCreateUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CreateUser(ctx, req, resp);
             }, this)));
}

Router::Service::~Service() {
}

::grpc::Status Router::Service::Reboot(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::Apply(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SetDns(::grpc::ServerContext* context, const ::palm::ops::router::v1::Dns* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SetWan(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterSetWanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SetWanPool(::grpc::ServerContext* context, const ::palm::ops::router::v1::WanPool* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SetLan(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterSetLanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SetDmz(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterSetDmzRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::CreateRule(::grpc::ServerContext* context, const ::palm::ops::router::v1::Rule* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::UpdateRule(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterIndexRuleResponse_Item* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::IndexRule(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterIndexRuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::UpdateHost(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterUpdateHostRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::IndexUser(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::RouterIndexUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::UpdateUser(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterIndexUserResponse_Item* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::CreateUser(::grpc::ServerContext* context, const ::palm::ops::router::v1::RouterCreateUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* User_method_names[] = {
  "/palm.ops.router.v1.User/SignIn",
  "/palm.ops.router.v1.User/Refresh",
  "/palm.ops.router.v1.User/Update",
  "/palm.ops.router.v1.User/SignOut",
  "/palm.ops.router.v1.User/Logs",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignIn_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Refresh_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignOut_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logs_(User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::SignIn(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserSignInRequest& request, ::palm::ops::router::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::UserSignInRequest, ::palm::ops::router::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void User::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserSignInRequest* request, ::palm::ops::router::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::UserSignInRequest, ::palm::ops::router::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

void User::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserSignInRequest* request, ::palm::ops::router::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::UserSignInResponse>* User::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserSignInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::ops::router::v1::UserSignInResponse, ::palm::ops::router::v1::UserSignInRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::UserSignInResponse>* User::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserSignInRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::palm::ops::router::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Duration, ::palm::ops::router::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Refresh_, context, request, response);
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::ops::router::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Duration, ::palm::ops::router::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, std::move(f));
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::ops::router::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::UserSignInResponse>* User::Stub::PrepareAsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::ops::router::v1::UserSignInResponse, ::google::protobuf::Duration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Refresh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::UserSignInResponse>* User::Stub::AsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Update(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::ops::router::v1::UserUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void User::Stub::async::Update(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::ops::router::v1::UserUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void User::Stub::async::Update(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::ops::router::v1::UserUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::ops::router::v1::UserUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignOut_, context, request, response);
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, std::move(f));
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Logs(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::ops::router::v1::UserLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logs_, context, request, response);
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::UserLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::ops::router::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, std::move(f));
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::UserLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::UserLogsResponse>* User::Stub::PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::ops::router::v1::UserLogsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::ops::router::v1::UserLogsResponse>* User::Stub::AsyncLogsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::ops::router::v1::UserSignInRequest, ::palm::ops::router::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::UserSignInRequest* req,
             ::palm::ops::router::v1::UserSignInResponse* resp) {
               return service->SignIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Duration, ::palm::ops::router::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Duration* req,
             ::palm::ops::router::v1::UserSignInResponse* resp) {
               return service->Refresh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::ops::router::v1::UserUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::ops::router::v1::UserUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SignOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::palm::ops::router::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::ops::router::v1::UserLogsResponse* resp) {
               return service->Logs(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::SignIn(::grpc::ServerContext* context, const ::palm::ops::router::v1::UserSignInRequest* request, ::palm::ops::router::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Refresh(::grpc::ServerContext* context, const ::google::protobuf::Duration* request, ::palm::ops::router::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Update(::grpc::ServerContext* context, const ::palm::ops::router::v1::UserUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignOut(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Logs(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::ops::router::v1::UserLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace ops
}  // namespace router
}  // namespace v1

