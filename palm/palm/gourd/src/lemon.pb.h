// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lemon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lemon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lemon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lemon_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lemon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_lemon_2eproto;
namespace palm {
namespace lemon {
namespace v1 {
class CleanWhiteHomePage;
struct CleanWhiteHomePageDefaultTypeInternal;
extern CleanWhiteHomePageDefaultTypeInternal _CleanWhiteHomePage_default_instance_;
class CleanWhiteLayout;
struct CleanWhiteLayoutDefaultTypeInternal;
extern CleanWhiteLayoutDefaultTypeInternal _CleanWhiteLayout_default_instance_;
class DocsyHomePage;
struct DocsyHomePageDefaultTypeInternal;
extern DocsyHomePageDefaultTypeInternal _DocsyHomePage_default_instance_;
class DocsyLayout;
struct DocsyLayoutDefaultTypeInternal;
extern DocsyLayoutDefaultTypeInternal _DocsyLayout_default_instance_;
class GantryHomePage;
struct GantryHomePageDefaultTypeInternal;
extern GantryHomePageDefaultTypeInternal _GantryHomePage_default_instance_;
class GantryLayout;
struct GantryLayoutDefaultTypeInternal;
extern GantryLayoutDefaultTypeInternal _GantryLayout_default_instance_;
class HinodeHomePage;
struct HinodeHomePageDefaultTypeInternal;
extern HinodeHomePageDefaultTypeInternal _HinodeHomePage_default_instance_;
class HinodeLayout;
struct HinodeLayoutDefaultTypeInternal;
extern HinodeLayoutDefaultTypeInternal _HinodeLayout_default_instance_;
class Page;
struct PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class Rss;
struct RssDefaultTypeInternal;
extern RssDefaultTypeInternal _Rss_default_instance_;
class Rss_Link;
struct Rss_LinkDefaultTypeInternal;
extern Rss_LinkDefaultTypeInternal _Rss_Link_default_instance_;
class SiteHomePageRequest;
struct SiteHomePageRequestDefaultTypeInternal;
extern SiteHomePageRequestDefaultTypeInternal _SiteHomePageRequest_default_instance_;
class SiteHomePageResponse;
struct SiteHomePageResponseDefaultTypeInternal;
extern SiteHomePageResponseDefaultTypeInternal _SiteHomePageResponse_default_instance_;
class SiteLayoutRequest;
struct SiteLayoutRequestDefaultTypeInternal;
extern SiteLayoutRequestDefaultTypeInternal _SiteLayoutRequest_default_instance_;
class SiteLayoutResponse;
struct SiteLayoutResponseDefaultTypeInternal;
extern SiteLayoutResponseDefaultTypeInternal _SiteLayoutResponse_default_instance_;
class SiteRssResponse;
struct SiteRssResponseDefaultTypeInternal;
extern SiteRssResponseDefaultTypeInternal _SiteRssResponse_default_instance_;
class SiteRssResponse_ItemsEntry_DoNotUse;
struct SiteRssResponse_ItemsEntry_DoNotUseDefaultTypeInternal;
extern SiteRssResponse_ItemsEntry_DoNotUseDefaultTypeInternal _SiteRssResponse_ItemsEntry_DoNotUse_default_instance_;
class SiteShowPageRequest;
struct SiteShowPageRequestDefaultTypeInternal;
extern SiteShowPageRequestDefaultTypeInternal _SiteShowPageRequest_default_instance_;
class SiteShowPageResponse;
struct SiteShowPageResponseDefaultTypeInternal;
extern SiteShowPageResponseDefaultTypeInternal _SiteShowPageResponse_default_instance_;
class SiteShowPageResponse_Link;
struct SiteShowPageResponse_LinkDefaultTypeInternal;
extern SiteShowPageResponse_LinkDefaultTypeInternal _SiteShowPageResponse_Link_default_instance_;
class SiteSitemapResponse;
struct SiteSitemapResponseDefaultTypeInternal;
extern SiteSitemapResponseDefaultTypeInternal _SiteSitemapResponse_default_instance_;
class SiteSitemapResponse_ItemsEntry_DoNotUse;
struct SiteSitemapResponse_ItemsEntry_DoNotUseDefaultTypeInternal;
extern SiteSitemapResponse_ItemsEntry_DoNotUseDefaultTypeInternal _SiteSitemapResponse_ItemsEntry_DoNotUse_default_instance_;
class Sitemap;
struct SitemapDefaultTypeInternal;
extern SitemapDefaultTypeInternal _Sitemap_default_instance_;
class Sitemap_Index;
struct Sitemap_IndexDefaultTypeInternal;
extern Sitemap_IndexDefaultTypeInternal _Sitemap_Index_default_instance_;
class Sitemap_Link;
struct Sitemap_LinkDefaultTypeInternal;
extern Sitemap_LinkDefaultTypeInternal _Sitemap_Link_default_instance_;
class Sitemap_UrlSet;
struct Sitemap_UrlSetDefaultTypeInternal;
extern Sitemap_UrlSetDefaultTypeInternal _Sitemap_UrlSet_default_instance_;
class UniversalHomePage;
struct UniversalHomePageDefaultTypeInternal;
extern UniversalHomePageDefaultTypeInternal _UniversalHomePage_default_instance_;
class UniversalLayout;
struct UniversalLayoutDefaultTypeInternal;
extern UniversalLayoutDefaultTypeInternal _UniversalLayout_default_instance_;
class XCorporationHomePage;
struct XCorporationHomePageDefaultTypeInternal;
extern XCorporationHomePageDefaultTypeInternal _XCorporationHomePage_default_instance_;
class XCorporationLayout;
struct XCorporationLayoutDefaultTypeInternal;
extern XCorporationLayoutDefaultTypeInternal _XCorporationLayout_default_instance_;
}  // namespace v1
}  // namespace lemon
}  // namespace palm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace palm {
namespace lemon {
namespace v1 {
enum Sitemap_Link_ChangeFreq : int {
  Sitemap_Link_ChangeFreq_Never = 0,
  Sitemap_Link_ChangeFreq_Always = 1,
  Sitemap_Link_ChangeFreq_Hourly = 2,
  Sitemap_Link_ChangeFreq_Daily = 3,
  Sitemap_Link_ChangeFreq_Weekly = 4,
  Sitemap_Link_ChangeFreq_Monthly = 5,
  Sitemap_Link_ChangeFreq_Yearly = 6,
  Sitemap_Link_ChangeFreq_Sitemap_Link_ChangeFreq_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Sitemap_Link_ChangeFreq_Sitemap_Link_ChangeFreq_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Sitemap_Link_ChangeFreq_IsValid(int value);
constexpr Sitemap_Link_ChangeFreq Sitemap_Link_ChangeFreq_ChangeFreq_MIN = static_cast<Sitemap_Link_ChangeFreq>(0);
constexpr Sitemap_Link_ChangeFreq Sitemap_Link_ChangeFreq_ChangeFreq_MAX = static_cast<Sitemap_Link_ChangeFreq>(6);
constexpr int Sitemap_Link_ChangeFreq_ChangeFreq_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Sitemap_Link_ChangeFreq_descriptor();
template <typename T>
const std::string& Sitemap_Link_ChangeFreq_Name(T value) {
  static_assert(std::is_same<T, Sitemap_Link_ChangeFreq>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChangeFreq_Name().");
  return Sitemap_Link_ChangeFreq_Name(static_cast<Sitemap_Link_ChangeFreq>(value));
}
template <>
inline const std::string& Sitemap_Link_ChangeFreq_Name(Sitemap_Link_ChangeFreq value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Sitemap_Link_ChangeFreq_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Sitemap_Link_ChangeFreq_Parse(absl::string_view name, Sitemap_Link_ChangeFreq* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sitemap_Link_ChangeFreq>(
      Sitemap_Link_ChangeFreq_descriptor(), name, value);
}
enum Theme : int {
  Universal = 0,
  CleanWhite = 1,
  Docsy = 2,
  Gantry = 3,
  Hinode = 4,
  XCorporation = 5,
  Theme_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Theme_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Theme_IsValid(int value);
constexpr Theme Theme_MIN = static_cast<Theme>(0);
constexpr Theme Theme_MAX = static_cast<Theme>(5);
constexpr int Theme_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Theme_descriptor();
template <typename T>
const std::string& Theme_Name(T value) {
  static_assert(std::is_same<T, Theme>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Theme_Name().");
  return Theme_Name(static_cast<Theme>(value));
}
template <>
inline const std::string& Theme_Name(Theme value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Theme_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Theme_Parse(absl::string_view name, Theme* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Theme>(
      Theme_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SiteLayoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteLayoutRequest) */ {
 public:
  inline SiteLayoutRequest() : SiteLayoutRequest(nullptr) {}
  ~SiteLayoutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteLayoutRequest(::google::protobuf::internal::ConstantInitialized);

  SiteLayoutRequest(const SiteLayoutRequest& from);
  SiteLayoutRequest(SiteLayoutRequest&& from) noexcept
    : SiteLayoutRequest() {
    *this = ::std::move(from);
  }

  inline SiteLayoutRequest& operator=(const SiteLayoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteLayoutRequest& operator=(SiteLayoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteLayoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteLayoutRequest* internal_default_instance() {
    return reinterpret_cast<const SiteLayoutRequest*>(
               &_SiteLayoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteLayoutRequest& a, SiteLayoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteLayoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteLayoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteLayoutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteLayoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteLayoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteLayoutRequest& from) {
    SiteLayoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteLayoutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteLayoutRequest";
  }
  protected:
  explicit SiteLayoutRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleFieldNumber = 1,
    kThemeFieldNumber = 2,
  };
  // string locale = 1;
  void clear_locale() ;
  const std::string& locale() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_locale(Arg_&& arg, Args_... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* ptr);

  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(
      const std::string& value);
  std::string* _internal_mutable_locale();

  public:
  // .palm.lemon.v1.Theme theme = 2;
  void clear_theme() ;
  ::palm::lemon::v1::Theme theme() const;
  void set_theme(::palm::lemon::v1::Theme value);

  private:
  ::palm::lemon::v1::Theme _internal_theme() const;
  void _internal_set_theme(::palm::lemon::v1::Theme value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteLayoutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr locale_;
    int theme_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteLayoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteLayoutResponse) */ {
 public:
  inline SiteLayoutResponse() : SiteLayoutResponse(nullptr) {}
  ~SiteLayoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteLayoutResponse(::google::protobuf::internal::ConstantInitialized);

  SiteLayoutResponse(const SiteLayoutResponse& from);
  SiteLayoutResponse(SiteLayoutResponse&& from) noexcept
    : SiteLayoutResponse() {
    *this = ::std::move(from);
  }

  inline SiteLayoutResponse& operator=(const SiteLayoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteLayoutResponse& operator=(SiteLayoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteLayoutResponse& default_instance() {
    return *internal_default_instance();
  }
  enum LayoutCase {
    kCleanWhite = 1,
    kDocsy = 2,
    kGantry = 3,
    kHinode = 4,
    kUniversal = 5,
    kXCorporation = 6,
    LAYOUT_NOT_SET = 0,
  };

  static inline const SiteLayoutResponse* internal_default_instance() {
    return reinterpret_cast<const SiteLayoutResponse*>(
               &_SiteLayoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SiteLayoutResponse& a, SiteLayoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteLayoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteLayoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteLayoutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteLayoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteLayoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteLayoutResponse& from) {
    SiteLayoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteLayoutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteLayoutResponse";
  }
  protected:
  explicit SiteLayoutResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCleanWhiteFieldNumber = 1,
    kDocsyFieldNumber = 2,
    kGantryFieldNumber = 3,
    kHinodeFieldNumber = 4,
    kUniversalFieldNumber = 5,
    kXCorporationFieldNumber = 6,
  };
  // .palm.lemon.v1.CleanWhiteLayout clean_white = 1;
  bool has_clean_white() const;
  private:
  bool _internal_has_clean_white() const;

  public:
  void clear_clean_white() ;
  const ::palm::lemon::v1::CleanWhiteLayout& clean_white() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::CleanWhiteLayout* release_clean_white();
  ::palm::lemon::v1::CleanWhiteLayout* mutable_clean_white();
  void set_allocated_clean_white(::palm::lemon::v1::CleanWhiteLayout* value);
  void unsafe_arena_set_allocated_clean_white(::palm::lemon::v1::CleanWhiteLayout* value);
  ::palm::lemon::v1::CleanWhiteLayout* unsafe_arena_release_clean_white();

  private:
  const ::palm::lemon::v1::CleanWhiteLayout& _internal_clean_white() const;
  ::palm::lemon::v1::CleanWhiteLayout* _internal_mutable_clean_white();

  public:
  // .palm.lemon.v1.DocsyLayout docsy = 2;
  bool has_docsy() const;
  private:
  bool _internal_has_docsy() const;

  public:
  void clear_docsy() ;
  const ::palm::lemon::v1::DocsyLayout& docsy() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::DocsyLayout* release_docsy();
  ::palm::lemon::v1::DocsyLayout* mutable_docsy();
  void set_allocated_docsy(::palm::lemon::v1::DocsyLayout* value);
  void unsafe_arena_set_allocated_docsy(::palm::lemon::v1::DocsyLayout* value);
  ::palm::lemon::v1::DocsyLayout* unsafe_arena_release_docsy();

  private:
  const ::palm::lemon::v1::DocsyLayout& _internal_docsy() const;
  ::palm::lemon::v1::DocsyLayout* _internal_mutable_docsy();

  public:
  // .palm.lemon.v1.GantryLayout gantry = 3;
  bool has_gantry() const;
  private:
  bool _internal_has_gantry() const;

  public:
  void clear_gantry() ;
  const ::palm::lemon::v1::GantryLayout& gantry() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::GantryLayout* release_gantry();
  ::palm::lemon::v1::GantryLayout* mutable_gantry();
  void set_allocated_gantry(::palm::lemon::v1::GantryLayout* value);
  void unsafe_arena_set_allocated_gantry(::palm::lemon::v1::GantryLayout* value);
  ::palm::lemon::v1::GantryLayout* unsafe_arena_release_gantry();

  private:
  const ::palm::lemon::v1::GantryLayout& _internal_gantry() const;
  ::palm::lemon::v1::GantryLayout* _internal_mutable_gantry();

  public:
  // .palm.lemon.v1.HinodeLayout hinode = 4;
  bool has_hinode() const;
  private:
  bool _internal_has_hinode() const;

  public:
  void clear_hinode() ;
  const ::palm::lemon::v1::HinodeLayout& hinode() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::HinodeLayout* release_hinode();
  ::palm::lemon::v1::HinodeLayout* mutable_hinode();
  void set_allocated_hinode(::palm::lemon::v1::HinodeLayout* value);
  void unsafe_arena_set_allocated_hinode(::palm::lemon::v1::HinodeLayout* value);
  ::palm::lemon::v1::HinodeLayout* unsafe_arena_release_hinode();

  private:
  const ::palm::lemon::v1::HinodeLayout& _internal_hinode() const;
  ::palm::lemon::v1::HinodeLayout* _internal_mutable_hinode();

  public:
  // .palm.lemon.v1.UniversalLayout universal = 5;
  bool has_universal() const;
  private:
  bool _internal_has_universal() const;

  public:
  void clear_universal() ;
  const ::palm::lemon::v1::UniversalLayout& universal() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::UniversalLayout* release_universal();
  ::palm::lemon::v1::UniversalLayout* mutable_universal();
  void set_allocated_universal(::palm::lemon::v1::UniversalLayout* value);
  void unsafe_arena_set_allocated_universal(::palm::lemon::v1::UniversalLayout* value);
  ::palm::lemon::v1::UniversalLayout* unsafe_arena_release_universal();

  private:
  const ::palm::lemon::v1::UniversalLayout& _internal_universal() const;
  ::palm::lemon::v1::UniversalLayout* _internal_mutable_universal();

  public:
  // .palm.lemon.v1.XCorporationLayout x_corporation = 6;
  bool has_x_corporation() const;
  private:
  bool _internal_has_x_corporation() const;

  public:
  void clear_x_corporation() ;
  const ::palm::lemon::v1::XCorporationLayout& x_corporation() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::XCorporationLayout* release_x_corporation();
  ::palm::lemon::v1::XCorporationLayout* mutable_x_corporation();
  void set_allocated_x_corporation(::palm::lemon::v1::XCorporationLayout* value);
  void unsafe_arena_set_allocated_x_corporation(::palm::lemon::v1::XCorporationLayout* value);
  ::palm::lemon::v1::XCorporationLayout* unsafe_arena_release_x_corporation();

  private:
  const ::palm::lemon::v1::XCorporationLayout& _internal_x_corporation() const;
  ::palm::lemon::v1::XCorporationLayout* _internal_mutable_x_corporation();

  public:
  void clear_layout();
  LayoutCase layout_case() const;
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteLayoutResponse)
 private:
  class _Internal;
  void set_has_clean_white();
  void set_has_docsy();
  void set_has_gantry();
  void set_has_hinode();
  void set_has_universal();
  void set_has_x_corporation();

  inline bool has_layout() const;
  inline void clear_has_layout();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 6, 6, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union LayoutUnion {
      constexpr LayoutUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::lemon::v1::CleanWhiteLayout* clean_white_;
      ::palm::lemon::v1::DocsyLayout* docsy_;
      ::palm::lemon::v1::GantryLayout* gantry_;
      ::palm::lemon::v1::HinodeLayout* hinode_;
      ::palm::lemon::v1::UniversalLayout* universal_;
      ::palm::lemon::v1::XCorporationLayout* x_corporation_;
    } layout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteRssResponse_ItemsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<SiteRssResponse_ItemsEntry_DoNotUse, 
    std::string, ::palm::lemon::v1::Rss,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<SiteRssResponse_ItemsEntry_DoNotUse, 
    std::string, ::palm::lemon::v1::Rss,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SiteRssResponse_ItemsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SiteRssResponse_ItemsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SiteRssResponse_ItemsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SiteRssResponse_ItemsEntry_DoNotUse& other);
  static const SiteRssResponse_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SiteRssResponse_ItemsEntry_DoNotUse*>(&_SiteRssResponse_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "palm.lemon.v1.SiteRssResponse.ItemsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lemon_2eproto;
};
// -------------------------------------------------------------------

class SiteRssResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteRssResponse) */ {
 public:
  inline SiteRssResponse() : SiteRssResponse(nullptr) {}
  ~SiteRssResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteRssResponse(::google::protobuf::internal::ConstantInitialized);

  SiteRssResponse(const SiteRssResponse& from);
  SiteRssResponse(SiteRssResponse&& from) noexcept
    : SiteRssResponse() {
    *this = ::std::move(from);
  }

  inline SiteRssResponse& operator=(const SiteRssResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteRssResponse& operator=(SiteRssResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteRssResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteRssResponse* internal_default_instance() {
    return reinterpret_cast<const SiteRssResponse*>(
               &_SiteRssResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SiteRssResponse& a, SiteRssResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteRssResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteRssResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteRssResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteRssResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteRssResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteRssResponse& from) {
    SiteRssResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteRssResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteRssResponse";
  }
  protected:
  explicit SiteRssResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // map<string, .palm.lemon.v1.Rss> items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>& items() const;
  ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>* mutable_items();

  private:
  const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>& _internal_items() const;
  ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>* _internal_mutable_items();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteRssResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 2, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<SiteRssResponse_ItemsEntry_DoNotUse, std::string, ::palm::lemon::v1::Rss,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteSitemapResponse_ItemsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<SiteSitemapResponse_ItemsEntry_DoNotUse, 
    std::string, ::palm::lemon::v1::Sitemap,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<SiteSitemapResponse_ItemsEntry_DoNotUse, 
    std::string, ::palm::lemon::v1::Sitemap,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SiteSitemapResponse_ItemsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSitemapResponse_ItemsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SiteSitemapResponse_ItemsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SiteSitemapResponse_ItemsEntry_DoNotUse& other);
  static const SiteSitemapResponse_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SiteSitemapResponse_ItemsEntry_DoNotUse*>(&_SiteSitemapResponse_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "palm.lemon.v1.SiteSitemapResponse.ItemsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lemon_2eproto;
};
// -------------------------------------------------------------------

class SiteSitemapResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteSitemapResponse) */ {
 public:
  inline SiteSitemapResponse() : SiteSitemapResponse(nullptr) {}
  ~SiteSitemapResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteSitemapResponse(::google::protobuf::internal::ConstantInitialized);

  SiteSitemapResponse(const SiteSitemapResponse& from);
  SiteSitemapResponse(SiteSitemapResponse&& from) noexcept
    : SiteSitemapResponse() {
    *this = ::std::move(from);
  }

  inline SiteSitemapResponse& operator=(const SiteSitemapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteSitemapResponse& operator=(SiteSitemapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteSitemapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteSitemapResponse* internal_default_instance() {
    return reinterpret_cast<const SiteSitemapResponse*>(
               &_SiteSitemapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SiteSitemapResponse& a, SiteSitemapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteSitemapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteSitemapResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteSitemapResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteSitemapResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteSitemapResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteSitemapResponse& from) {
    SiteSitemapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteSitemapResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteSitemapResponse";
  }
  protected:
  explicit SiteSitemapResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // map<string, .palm.lemon.v1.Sitemap> items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>& items() const;
  ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>* mutable_items();

  private:
  const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>& _internal_items() const;
  ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>* _internal_mutable_items();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteSitemapResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 2, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<SiteSitemapResponse_ItemsEntry_DoNotUse, std::string, ::palm::lemon::v1::Sitemap,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteShowPageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteShowPageRequest) */ {
 public:
  inline SiteShowPageRequest() : SiteShowPageRequest(nullptr) {}
  ~SiteShowPageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteShowPageRequest(::google::protobuf::internal::ConstantInitialized);

  SiteShowPageRequest(const SiteShowPageRequest& from);
  SiteShowPageRequest(SiteShowPageRequest&& from) noexcept
    : SiteShowPageRequest() {
    *this = ::std::move(from);
  }

  inline SiteShowPageRequest& operator=(const SiteShowPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteShowPageRequest& operator=(SiteShowPageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteShowPageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteShowPageRequest* internal_default_instance() {
    return reinterpret_cast<const SiteShowPageRequest*>(
               &_SiteShowPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SiteShowPageRequest& a, SiteShowPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteShowPageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteShowPageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteShowPageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteShowPageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteShowPageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteShowPageRequest& from) {
    SiteShowPageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteShowPageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteShowPageRequest";
  }
  protected:
  explicit SiteShowPageRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlugFieldNumber = 1,
  };
  // string slug = 1;
  void clear_slug() ;
  const std::string& slug() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slug(Arg_&& arg, Args_... args);
  std::string* mutable_slug();
  PROTOBUF_NODISCARD std::string* release_slug();
  void set_allocated_slug(std::string* ptr);

  private:
  const std::string& _internal_slug() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slug(
      const std::string& value);
  std::string* _internal_mutable_slug();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteShowPageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr slug_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteShowPageResponse_Link final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteShowPageResponse.Link) */ {
 public:
  inline SiteShowPageResponse_Link() : SiteShowPageResponse_Link(nullptr) {}
  ~SiteShowPageResponse_Link() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteShowPageResponse_Link(::google::protobuf::internal::ConstantInitialized);

  SiteShowPageResponse_Link(const SiteShowPageResponse_Link& from);
  SiteShowPageResponse_Link(SiteShowPageResponse_Link&& from) noexcept
    : SiteShowPageResponse_Link() {
    *this = ::std::move(from);
  }

  inline SiteShowPageResponse_Link& operator=(const SiteShowPageResponse_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteShowPageResponse_Link& operator=(SiteShowPageResponse_Link&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteShowPageResponse_Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteShowPageResponse_Link* internal_default_instance() {
    return reinterpret_cast<const SiteShowPageResponse_Link*>(
               &_SiteShowPageResponse_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SiteShowPageResponse_Link& a, SiteShowPageResponse_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteShowPageResponse_Link* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteShowPageResponse_Link* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteShowPageResponse_Link* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteShowPageResponse_Link>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteShowPageResponse_Link& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteShowPageResponse_Link& from) {
    SiteShowPageResponse_Link::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteShowPageResponse_Link* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteShowPageResponse.Link";
  }
  protected:
  explicit SiteShowPageResponse_Link(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlugFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // string slug = 1;
  void clear_slug() ;
  const std::string& slug() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slug(Arg_&& arg, Args_... args);
  std::string* mutable_slug();
  PROTOBUF_NODISCARD std::string* release_slug();
  void set_allocated_slug(std::string* ptr);

  private:
  const std::string& _internal_slug() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slug(
      const std::string& value);
  std::string* _internal_mutable_slug();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteShowPageResponse.Link)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr slug_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteShowPageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteShowPageResponse) */ {
 public:
  inline SiteShowPageResponse() : SiteShowPageResponse(nullptr) {}
  ~SiteShowPageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteShowPageResponse(::google::protobuf::internal::ConstantInitialized);

  SiteShowPageResponse(const SiteShowPageResponse& from);
  SiteShowPageResponse(SiteShowPageResponse&& from) noexcept
    : SiteShowPageResponse() {
    *this = ::std::move(from);
  }

  inline SiteShowPageResponse& operator=(const SiteShowPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteShowPageResponse& operator=(SiteShowPageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteShowPageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteShowPageResponse* internal_default_instance() {
    return reinterpret_cast<const SiteShowPageResponse*>(
               &_SiteShowPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SiteShowPageResponse& a, SiteShowPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteShowPageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteShowPageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteShowPageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteShowPageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteShowPageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteShowPageResponse& from) {
    SiteShowPageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteShowPageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteShowPageResponse";
  }
  protected:
  explicit SiteShowPageResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteShowPageResponse_Link Link;

  // accessors -------------------------------------------------------

  enum : int {
    kRelatedFieldNumber = 2,
    kPageFieldNumber = 1,
  };
  // repeated .palm.lemon.v1.SiteShowPageResponse.Link related = 2;
  int related_size() const;
  private:
  int _internal_related_size() const;

  public:
  void clear_related() ;
  ::palm::lemon::v1::SiteShowPageResponse_Link* mutable_related(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::SiteShowPageResponse_Link >*
      mutable_related();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::SiteShowPageResponse_Link>& _internal_related() const;
  ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::SiteShowPageResponse_Link>* _internal_mutable_related();
  public:
  const ::palm::lemon::v1::SiteShowPageResponse_Link& related(int index) const;
  ::palm::lemon::v1::SiteShowPageResponse_Link* add_related();
  const ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::SiteShowPageResponse_Link >&
      related() const;
  // .palm.lemon.v1.Page page = 1;
  bool has_page() const;
  void clear_page() ;
  const ::palm::lemon::v1::Page& page() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::Page* release_page();
  ::palm::lemon::v1::Page* mutable_page();
  void set_allocated_page(::palm::lemon::v1::Page* value);
  void unsafe_arena_set_allocated_page(::palm::lemon::v1::Page* value);
  ::palm::lemon::v1::Page* unsafe_arena_release_page();

  private:
  const ::palm::lemon::v1::Page& _internal_page() const;
  ::palm::lemon::v1::Page* _internal_mutable_page();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteShowPageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::SiteShowPageResponse_Link > related_;
    ::palm::lemon::v1::Page* page_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteHomePageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteHomePageRequest) */ {
 public:
  inline SiteHomePageRequest() : SiteHomePageRequest(nullptr) {}
  ~SiteHomePageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteHomePageRequest(::google::protobuf::internal::ConstantInitialized);

  SiteHomePageRequest(const SiteHomePageRequest& from);
  SiteHomePageRequest(SiteHomePageRequest&& from) noexcept
    : SiteHomePageRequest() {
    *this = ::std::move(from);
  }

  inline SiteHomePageRequest& operator=(const SiteHomePageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteHomePageRequest& operator=(SiteHomePageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteHomePageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteHomePageRequest* internal_default_instance() {
    return reinterpret_cast<const SiteHomePageRequest*>(
               &_SiteHomePageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SiteHomePageRequest& a, SiteHomePageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteHomePageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteHomePageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteHomePageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteHomePageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteHomePageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteHomePageRequest& from) {
    SiteHomePageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteHomePageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteHomePageRequest";
  }
  protected:
  explicit SiteHomePageRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaleFieldNumber = 1,
    kThemeFieldNumber = 2,
  };
  // string locale = 1;
  void clear_locale() ;
  const std::string& locale() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_locale(Arg_&& arg, Args_... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* ptr);

  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(
      const std::string& value);
  std::string* _internal_mutable_locale();

  public:
  // .palm.lemon.v1.Theme theme = 2;
  void clear_theme() ;
  ::palm::lemon::v1::Theme theme() const;
  void set_theme(::palm::lemon::v1::Theme value);

  private:
  ::palm::lemon::v1::Theme _internal_theme() const;
  void _internal_set_theme(::palm::lemon::v1::Theme value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteHomePageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr locale_;
    int theme_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class SiteHomePageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.SiteHomePageResponse) */ {
 public:
  inline SiteHomePageResponse() : SiteHomePageResponse(nullptr) {}
  ~SiteHomePageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SiteHomePageResponse(::google::protobuf::internal::ConstantInitialized);

  SiteHomePageResponse(const SiteHomePageResponse& from);
  SiteHomePageResponse(SiteHomePageResponse&& from) noexcept
    : SiteHomePageResponse() {
    *this = ::std::move(from);
  }

  inline SiteHomePageResponse& operator=(const SiteHomePageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteHomePageResponse& operator=(SiteHomePageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteHomePageResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kCleanWhite = 1,
    kDocsy = 2,
    kGantry = 3,
    kHinode = 4,
    kUniversal = 5,
    kXCorporation = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const SiteHomePageResponse* internal_default_instance() {
    return reinterpret_cast<const SiteHomePageResponse*>(
               &_SiteHomePageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SiteHomePageResponse& a, SiteHomePageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteHomePageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteHomePageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteHomePageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteHomePageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SiteHomePageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SiteHomePageResponse& from) {
    SiteHomePageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteHomePageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.SiteHomePageResponse";
  }
  protected:
  explicit SiteHomePageResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCleanWhiteFieldNumber = 1,
    kDocsyFieldNumber = 2,
    kGantryFieldNumber = 3,
    kHinodeFieldNumber = 4,
    kUniversalFieldNumber = 5,
    kXCorporationFieldNumber = 6,
  };
  // .palm.lemon.v1.CleanWhiteHomePage clean_white = 1;
  bool has_clean_white() const;
  private:
  bool _internal_has_clean_white() const;

  public:
  void clear_clean_white() ;
  const ::palm::lemon::v1::CleanWhiteHomePage& clean_white() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::CleanWhiteHomePage* release_clean_white();
  ::palm::lemon::v1::CleanWhiteHomePage* mutable_clean_white();
  void set_allocated_clean_white(::palm::lemon::v1::CleanWhiteHomePage* value);
  void unsafe_arena_set_allocated_clean_white(::palm::lemon::v1::CleanWhiteHomePage* value);
  ::palm::lemon::v1::CleanWhiteHomePage* unsafe_arena_release_clean_white();

  private:
  const ::palm::lemon::v1::CleanWhiteHomePage& _internal_clean_white() const;
  ::palm::lemon::v1::CleanWhiteHomePage* _internal_mutable_clean_white();

  public:
  // .palm.lemon.v1.DocsyHomePage docsy = 2;
  bool has_docsy() const;
  private:
  bool _internal_has_docsy() const;

  public:
  void clear_docsy() ;
  const ::palm::lemon::v1::DocsyHomePage& docsy() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::DocsyHomePage* release_docsy();
  ::palm::lemon::v1::DocsyHomePage* mutable_docsy();
  void set_allocated_docsy(::palm::lemon::v1::DocsyHomePage* value);
  void unsafe_arena_set_allocated_docsy(::palm::lemon::v1::DocsyHomePage* value);
  ::palm::lemon::v1::DocsyHomePage* unsafe_arena_release_docsy();

  private:
  const ::palm::lemon::v1::DocsyHomePage& _internal_docsy() const;
  ::palm::lemon::v1::DocsyHomePage* _internal_mutable_docsy();

  public:
  // .palm.lemon.v1.GantryHomePage gantry = 3;
  bool has_gantry() const;
  private:
  bool _internal_has_gantry() const;

  public:
  void clear_gantry() ;
  const ::palm::lemon::v1::GantryHomePage& gantry() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::GantryHomePage* release_gantry();
  ::palm::lemon::v1::GantryHomePage* mutable_gantry();
  void set_allocated_gantry(::palm::lemon::v1::GantryHomePage* value);
  void unsafe_arena_set_allocated_gantry(::palm::lemon::v1::GantryHomePage* value);
  ::palm::lemon::v1::GantryHomePage* unsafe_arena_release_gantry();

  private:
  const ::palm::lemon::v1::GantryHomePage& _internal_gantry() const;
  ::palm::lemon::v1::GantryHomePage* _internal_mutable_gantry();

  public:
  // .palm.lemon.v1.HinodeHomePage hinode = 4;
  bool has_hinode() const;
  private:
  bool _internal_has_hinode() const;

  public:
  void clear_hinode() ;
  const ::palm::lemon::v1::HinodeHomePage& hinode() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::HinodeHomePage* release_hinode();
  ::palm::lemon::v1::HinodeHomePage* mutable_hinode();
  void set_allocated_hinode(::palm::lemon::v1::HinodeHomePage* value);
  void unsafe_arena_set_allocated_hinode(::palm::lemon::v1::HinodeHomePage* value);
  ::palm::lemon::v1::HinodeHomePage* unsafe_arena_release_hinode();

  private:
  const ::palm::lemon::v1::HinodeHomePage& _internal_hinode() const;
  ::palm::lemon::v1::HinodeHomePage* _internal_mutable_hinode();

  public:
  // .palm.lemon.v1.UniversalHomePage universal = 5;
  bool has_universal() const;
  private:
  bool _internal_has_universal() const;

  public:
  void clear_universal() ;
  const ::palm::lemon::v1::UniversalHomePage& universal() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::UniversalHomePage* release_universal();
  ::palm::lemon::v1::UniversalHomePage* mutable_universal();
  void set_allocated_universal(::palm::lemon::v1::UniversalHomePage* value);
  void unsafe_arena_set_allocated_universal(::palm::lemon::v1::UniversalHomePage* value);
  ::palm::lemon::v1::UniversalHomePage* unsafe_arena_release_universal();

  private:
  const ::palm::lemon::v1::UniversalHomePage& _internal_universal() const;
  ::palm::lemon::v1::UniversalHomePage* _internal_mutable_universal();

  public:
  // .palm.lemon.v1.XCorporationHomePage x_corporation = 6;
  bool has_x_corporation() const;
  private:
  bool _internal_has_x_corporation() const;

  public:
  void clear_x_corporation() ;
  const ::palm::lemon::v1::XCorporationHomePage& x_corporation() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::XCorporationHomePage* release_x_corporation();
  ::palm::lemon::v1::XCorporationHomePage* mutable_x_corporation();
  void set_allocated_x_corporation(::palm::lemon::v1::XCorporationHomePage* value);
  void unsafe_arena_set_allocated_x_corporation(::palm::lemon::v1::XCorporationHomePage* value);
  ::palm::lemon::v1::XCorporationHomePage* unsafe_arena_release_x_corporation();

  private:
  const ::palm::lemon::v1::XCorporationHomePage& _internal_x_corporation() const;
  ::palm::lemon::v1::XCorporationHomePage* _internal_mutable_x_corporation();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.SiteHomePageResponse)
 private:
  class _Internal;
  void set_has_clean_white();
  void set_has_docsy();
  void set_has_gantry();
  void set_has_hinode();
  void set_has_universal();
  void set_has_x_corporation();

  inline bool has_payload() const;
  inline void clear_has_payload();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 6, 6, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::lemon::v1::CleanWhiteHomePage* clean_white_;
      ::palm::lemon::v1::DocsyHomePage* docsy_;
      ::palm::lemon::v1::GantryHomePage* gantry_;
      ::palm::lemon::v1::HinodeHomePage* hinode_;
      ::palm::lemon::v1::UniversalHomePage* universal_;
      ::palm::lemon::v1::XCorporationHomePage* x_corporation_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class CleanWhiteLayout final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.CleanWhiteLayout) */ {
 public:
  inline CleanWhiteLayout() : CleanWhiteLayout(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CleanWhiteLayout(::google::protobuf::internal::ConstantInitialized);

  CleanWhiteLayout(const CleanWhiteLayout& from);
  CleanWhiteLayout(CleanWhiteLayout&& from) noexcept
    : CleanWhiteLayout() {
    *this = ::std::move(from);
  }

  inline CleanWhiteLayout& operator=(const CleanWhiteLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanWhiteLayout& operator=(CleanWhiteLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanWhiteLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanWhiteLayout* internal_default_instance() {
    return reinterpret_cast<const CleanWhiteLayout*>(
               &_CleanWhiteLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CleanWhiteLayout& a, CleanWhiteLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanWhiteLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanWhiteLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanWhiteLayout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanWhiteLayout>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CleanWhiteLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CleanWhiteLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.CleanWhiteLayout";
  }
  protected:
  explicit CleanWhiteLayout(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.CleanWhiteLayout)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class DocsyLayout final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.DocsyLayout) */ {
 public:
  inline DocsyLayout() : DocsyLayout(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DocsyLayout(::google::protobuf::internal::ConstantInitialized);

  DocsyLayout(const DocsyLayout& from);
  DocsyLayout(DocsyLayout&& from) noexcept
    : DocsyLayout() {
    *this = ::std::move(from);
  }

  inline DocsyLayout& operator=(const DocsyLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocsyLayout& operator=(DocsyLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocsyLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocsyLayout* internal_default_instance() {
    return reinterpret_cast<const DocsyLayout*>(
               &_DocsyLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DocsyLayout& a, DocsyLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(DocsyLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocsyLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocsyLayout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocsyLayout>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DocsyLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DocsyLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.DocsyLayout";
  }
  protected:
  explicit DocsyLayout(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.DocsyLayout)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class GantryLayout final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.GantryLayout) */ {
 public:
  inline GantryLayout() : GantryLayout(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GantryLayout(::google::protobuf::internal::ConstantInitialized);

  GantryLayout(const GantryLayout& from);
  GantryLayout(GantryLayout&& from) noexcept
    : GantryLayout() {
    *this = ::std::move(from);
  }

  inline GantryLayout& operator=(const GantryLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline GantryLayout& operator=(GantryLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GantryLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const GantryLayout* internal_default_instance() {
    return reinterpret_cast<const GantryLayout*>(
               &_GantryLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GantryLayout& a, GantryLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(GantryLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GantryLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GantryLayout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GantryLayout>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GantryLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GantryLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.GantryLayout";
  }
  protected:
  explicit GantryLayout(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.GantryLayout)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class HinodeLayout final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.HinodeLayout) */ {
 public:
  inline HinodeLayout() : HinodeLayout(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HinodeLayout(::google::protobuf::internal::ConstantInitialized);

  HinodeLayout(const HinodeLayout& from);
  HinodeLayout(HinodeLayout&& from) noexcept
    : HinodeLayout() {
    *this = ::std::move(from);
  }

  inline HinodeLayout& operator=(const HinodeLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline HinodeLayout& operator=(HinodeLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HinodeLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const HinodeLayout* internal_default_instance() {
    return reinterpret_cast<const HinodeLayout*>(
               &_HinodeLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HinodeLayout& a, HinodeLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(HinodeLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HinodeLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HinodeLayout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HinodeLayout>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HinodeLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HinodeLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.HinodeLayout";
  }
  protected:
  explicit HinodeLayout(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.HinodeLayout)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class UniversalLayout final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.UniversalLayout) */ {
 public:
  inline UniversalLayout() : UniversalLayout(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UniversalLayout(::google::protobuf::internal::ConstantInitialized);

  UniversalLayout(const UniversalLayout& from);
  UniversalLayout(UniversalLayout&& from) noexcept
    : UniversalLayout() {
    *this = ::std::move(from);
  }

  inline UniversalLayout& operator=(const UniversalLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalLayout& operator=(UniversalLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UniversalLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalLayout* internal_default_instance() {
    return reinterpret_cast<const UniversalLayout*>(
               &_UniversalLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UniversalLayout& a, UniversalLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniversalLayout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UniversalLayout>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UniversalLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UniversalLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.UniversalLayout";
  }
  protected:
  explicit UniversalLayout(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.UniversalLayout)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class XCorporationLayout final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.XCorporationLayout) */ {
 public:
  inline XCorporationLayout() : XCorporationLayout(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR XCorporationLayout(::google::protobuf::internal::ConstantInitialized);

  XCorporationLayout(const XCorporationLayout& from);
  XCorporationLayout(XCorporationLayout&& from) noexcept
    : XCorporationLayout() {
    *this = ::std::move(from);
  }

  inline XCorporationLayout& operator=(const XCorporationLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline XCorporationLayout& operator=(XCorporationLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XCorporationLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const XCorporationLayout* internal_default_instance() {
    return reinterpret_cast<const XCorporationLayout*>(
               &_XCorporationLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(XCorporationLayout& a, XCorporationLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(XCorporationLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XCorporationLayout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XCorporationLayout* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XCorporationLayout>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const XCorporationLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const XCorporationLayout& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.XCorporationLayout";
  }
  protected:
  explicit XCorporationLayout(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.XCorporationLayout)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class CleanWhiteHomePage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.CleanWhiteHomePage) */ {
 public:
  inline CleanWhiteHomePage() : CleanWhiteHomePage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CleanWhiteHomePage(::google::protobuf::internal::ConstantInitialized);

  CleanWhiteHomePage(const CleanWhiteHomePage& from);
  CleanWhiteHomePage(CleanWhiteHomePage&& from) noexcept
    : CleanWhiteHomePage() {
    *this = ::std::move(from);
  }

  inline CleanWhiteHomePage& operator=(const CleanWhiteHomePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanWhiteHomePage& operator=(CleanWhiteHomePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanWhiteHomePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanWhiteHomePage* internal_default_instance() {
    return reinterpret_cast<const CleanWhiteHomePage*>(
               &_CleanWhiteHomePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CleanWhiteHomePage& a, CleanWhiteHomePage& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanWhiteHomePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanWhiteHomePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanWhiteHomePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanWhiteHomePage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CleanWhiteHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CleanWhiteHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.CleanWhiteHomePage";
  }
  protected:
  explicit CleanWhiteHomePage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.CleanWhiteHomePage)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class DocsyHomePage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.DocsyHomePage) */ {
 public:
  inline DocsyHomePage() : DocsyHomePage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DocsyHomePage(::google::protobuf::internal::ConstantInitialized);

  DocsyHomePage(const DocsyHomePage& from);
  DocsyHomePage(DocsyHomePage&& from) noexcept
    : DocsyHomePage() {
    *this = ::std::move(from);
  }

  inline DocsyHomePage& operator=(const DocsyHomePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocsyHomePage& operator=(DocsyHomePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocsyHomePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocsyHomePage* internal_default_instance() {
    return reinterpret_cast<const DocsyHomePage*>(
               &_DocsyHomePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DocsyHomePage& a, DocsyHomePage& b) {
    a.Swap(&b);
  }
  inline void Swap(DocsyHomePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocsyHomePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocsyHomePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocsyHomePage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DocsyHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DocsyHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.DocsyHomePage";
  }
  protected:
  explicit DocsyHomePage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.DocsyHomePage)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class GantryHomePage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.GantryHomePage) */ {
 public:
  inline GantryHomePage() : GantryHomePage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GantryHomePage(::google::protobuf::internal::ConstantInitialized);

  GantryHomePage(const GantryHomePage& from);
  GantryHomePage(GantryHomePage&& from) noexcept
    : GantryHomePage() {
    *this = ::std::move(from);
  }

  inline GantryHomePage& operator=(const GantryHomePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GantryHomePage& operator=(GantryHomePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GantryHomePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GantryHomePage* internal_default_instance() {
    return reinterpret_cast<const GantryHomePage*>(
               &_GantryHomePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GantryHomePage& a, GantryHomePage& b) {
    a.Swap(&b);
  }
  inline void Swap(GantryHomePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GantryHomePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GantryHomePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GantryHomePage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GantryHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GantryHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.GantryHomePage";
  }
  protected:
  explicit GantryHomePage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.GantryHomePage)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class HinodeHomePage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.HinodeHomePage) */ {
 public:
  inline HinodeHomePage() : HinodeHomePage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HinodeHomePage(::google::protobuf::internal::ConstantInitialized);

  HinodeHomePage(const HinodeHomePage& from);
  HinodeHomePage(HinodeHomePage&& from) noexcept
    : HinodeHomePage() {
    *this = ::std::move(from);
  }

  inline HinodeHomePage& operator=(const HinodeHomePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HinodeHomePage& operator=(HinodeHomePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HinodeHomePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HinodeHomePage* internal_default_instance() {
    return reinterpret_cast<const HinodeHomePage*>(
               &_HinodeHomePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HinodeHomePage& a, HinodeHomePage& b) {
    a.Swap(&b);
  }
  inline void Swap(HinodeHomePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HinodeHomePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HinodeHomePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HinodeHomePage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HinodeHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HinodeHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.HinodeHomePage";
  }
  protected:
  explicit HinodeHomePage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.HinodeHomePage)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class UniversalHomePage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.UniversalHomePage) */ {
 public:
  inline UniversalHomePage() : UniversalHomePage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UniversalHomePage(::google::protobuf::internal::ConstantInitialized);

  UniversalHomePage(const UniversalHomePage& from);
  UniversalHomePage(UniversalHomePage&& from) noexcept
    : UniversalHomePage() {
    *this = ::std::move(from);
  }

  inline UniversalHomePage& operator=(const UniversalHomePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalHomePage& operator=(UniversalHomePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UniversalHomePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalHomePage* internal_default_instance() {
    return reinterpret_cast<const UniversalHomePage*>(
               &_UniversalHomePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UniversalHomePage& a, UniversalHomePage& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalHomePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalHomePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniversalHomePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UniversalHomePage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UniversalHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UniversalHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.UniversalHomePage";
  }
  protected:
  explicit UniversalHomePage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.UniversalHomePage)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class XCorporationHomePage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lemon.v1.XCorporationHomePage) */ {
 public:
  inline XCorporationHomePage() : XCorporationHomePage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR XCorporationHomePage(::google::protobuf::internal::ConstantInitialized);

  XCorporationHomePage(const XCorporationHomePage& from);
  XCorporationHomePage(XCorporationHomePage&& from) noexcept
    : XCorporationHomePage() {
    *this = ::std::move(from);
  }

  inline XCorporationHomePage& operator=(const XCorporationHomePage& from) {
    CopyFrom(from);
    return *this;
  }
  inline XCorporationHomePage& operator=(XCorporationHomePage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XCorporationHomePage& default_instance() {
    return *internal_default_instance();
  }
  static inline const XCorporationHomePage* internal_default_instance() {
    return reinterpret_cast<const XCorporationHomePage*>(
               &_XCorporationHomePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(XCorporationHomePage& a, XCorporationHomePage& b) {
    a.Swap(&b);
  }
  inline void Swap(XCorporationHomePage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XCorporationHomePage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XCorporationHomePage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XCorporationHomePage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const XCorporationHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const XCorporationHomePage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.XCorporationHomePage";
  }
  protected:
  explicit XCorporationHomePage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lemon.v1.XCorporationHomePage)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Rss_Link final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Rss.Link) */ {
 public:
  inline Rss_Link() : Rss_Link(nullptr) {}
  ~Rss_Link() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Rss_Link(::google::protobuf::internal::ConstantInitialized);

  Rss_Link(const Rss_Link& from);
  Rss_Link(Rss_Link&& from) noexcept
    : Rss_Link() {
    *this = ::std::move(from);
  }

  inline Rss_Link& operator=(const Rss_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rss_Link& operator=(Rss_Link&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rss_Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rss_Link* internal_default_instance() {
    return reinterpret_cast<const Rss_Link*>(
               &_Rss_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Rss_Link& a, Rss_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Rss_Link* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rss_Link* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rss_Link* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rss_Link>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rss_Link& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Rss_Link& from) {
    Rss_Link::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rss_Link* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Rss.Link";
  }
  protected:
  explicit Rss_Link(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kUpdatedAtFieldNumber = 9,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Rss.Link)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::Timestamp* updated_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Rss final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Rss) */ {
 public:
  inline Rss() : Rss(nullptr) {}
  ~Rss() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Rss(::google::protobuf::internal::ConstantInitialized);

  Rss(const Rss& from);
  Rss(Rss&& from) noexcept
    : Rss() {
    *this = ::std::move(from);
  }

  inline Rss& operator=(const Rss& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rss& operator=(Rss&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rss& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rss* internal_default_instance() {
    return reinterpret_cast<const Rss*>(
               &_Rss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Rss& a, Rss& b) {
    a.Swap(&b);
  }
  inline void Swap(Rss* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rss* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rss* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rss>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rss& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Rss& from) {
    Rss::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rss* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Rss";
  }
  protected:
  explicit Rss(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Rss_Link Link;

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 9,
    kHomeFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // repeated .palm.lemon.v1.Rss.Link links = 9;
  int links_size() const;
  private:
  int _internal_links_size() const;

  public:
  void clear_links() ;
  ::palm::lemon::v1::Rss_Link* mutable_links(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Rss_Link >*
      mutable_links();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Rss_Link>& _internal_links() const;
  ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Rss_Link>* _internal_mutable_links();
  public:
  const ::palm::lemon::v1::Rss_Link& links(int index) const;
  ::palm::lemon::v1::Rss_Link* add_links();
  const ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Rss_Link >&
      links() const;
  // string home = 1;
  void clear_home() ;
  const std::string& home() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Rss)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Rss_Link > links_;
    ::google::protobuf::internal::ArenaStringPtr home_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Sitemap_Link final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Sitemap.Link) */ {
 public:
  inline Sitemap_Link() : Sitemap_Link(nullptr) {}
  ~Sitemap_Link() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sitemap_Link(::google::protobuf::internal::ConstantInitialized);

  Sitemap_Link(const Sitemap_Link& from);
  Sitemap_Link(Sitemap_Link&& from) noexcept
    : Sitemap_Link() {
    *this = ::std::move(from);
  }

  inline Sitemap_Link& operator=(const Sitemap_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sitemap_Link& operator=(Sitemap_Link&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sitemap_Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sitemap_Link* internal_default_instance() {
    return reinterpret_cast<const Sitemap_Link*>(
               &_Sitemap_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Sitemap_Link& a, Sitemap_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Sitemap_Link* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sitemap_Link* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sitemap_Link* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sitemap_Link>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sitemap_Link& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Sitemap_Link& from) {
    Sitemap_Link::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sitemap_Link* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Sitemap.Link";
  }
  protected:
  explicit Sitemap_Link(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ChangeFreq = Sitemap_Link_ChangeFreq;
  static constexpr ChangeFreq Never = Sitemap_Link_ChangeFreq_Never;
  static constexpr ChangeFreq Always = Sitemap_Link_ChangeFreq_Always;
  static constexpr ChangeFreq Hourly = Sitemap_Link_ChangeFreq_Hourly;
  static constexpr ChangeFreq Daily = Sitemap_Link_ChangeFreq_Daily;
  static constexpr ChangeFreq Weekly = Sitemap_Link_ChangeFreq_Weekly;
  static constexpr ChangeFreq Monthly = Sitemap_Link_ChangeFreq_Monthly;
  static constexpr ChangeFreq Yearly = Sitemap_Link_ChangeFreq_Yearly;
  static inline bool ChangeFreq_IsValid(int value) {
    return Sitemap_Link_ChangeFreq_IsValid(value);
  }
  static constexpr ChangeFreq ChangeFreq_MIN = Sitemap_Link_ChangeFreq_ChangeFreq_MIN;
  static constexpr ChangeFreq ChangeFreq_MAX = Sitemap_Link_ChangeFreq_ChangeFreq_MAX;
  static constexpr int ChangeFreq_ARRAYSIZE = Sitemap_Link_ChangeFreq_ChangeFreq_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ChangeFreq_descriptor() {
    return Sitemap_Link_ChangeFreq_descriptor();
  }
  template <typename T>
  static inline const std::string& ChangeFreq_Name(T value) {
    return Sitemap_Link_ChangeFreq_Name(value);
  }
  static inline bool ChangeFreq_Parse(absl::string_view name, ChangeFreq* value) {
    return Sitemap_Link_ChangeFreq_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kUpdatedAtFieldNumber = 9,
    kChangeFreqFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // .palm.lemon.v1.Sitemap.Link.ChangeFreq change_freq = 2;
  void clear_change_freq() ;
  ::palm::lemon::v1::Sitemap_Link_ChangeFreq change_freq() const;
  void set_change_freq(::palm::lemon::v1::Sitemap_Link_ChangeFreq value);

  private:
  ::palm::lemon::v1::Sitemap_Link_ChangeFreq _internal_change_freq() const;
  void _internal_set_change_freq(::palm::lemon::v1::Sitemap_Link_ChangeFreq value);

  public:
  // float priority = 3;
  void clear_priority() ;
  float priority() const;
  void set_priority(float value);

  private:
  float _internal_priority() const;
  void _internal_set_priority(float value);

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Sitemap.Link)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::Timestamp* updated_at_;
    int change_freq_;
    float priority_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Sitemap_UrlSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Sitemap.UrlSet) */ {
 public:
  inline Sitemap_UrlSet() : Sitemap_UrlSet(nullptr) {}
  ~Sitemap_UrlSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sitemap_UrlSet(::google::protobuf::internal::ConstantInitialized);

  Sitemap_UrlSet(const Sitemap_UrlSet& from);
  Sitemap_UrlSet(Sitemap_UrlSet&& from) noexcept
    : Sitemap_UrlSet() {
    *this = ::std::move(from);
  }

  inline Sitemap_UrlSet& operator=(const Sitemap_UrlSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sitemap_UrlSet& operator=(Sitemap_UrlSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sitemap_UrlSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sitemap_UrlSet* internal_default_instance() {
    return reinterpret_cast<const Sitemap_UrlSet*>(
               &_Sitemap_UrlSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Sitemap_UrlSet& a, Sitemap_UrlSet& b) {
    a.Swap(&b);
  }
  inline void Swap(Sitemap_UrlSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sitemap_UrlSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sitemap_UrlSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sitemap_UrlSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sitemap_UrlSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Sitemap_UrlSet& from) {
    Sitemap_UrlSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sitemap_UrlSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Sitemap.UrlSet";
  }
  protected:
  explicit Sitemap_UrlSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 1,
  };
  // repeated .palm.lemon.v1.Sitemap.Link links = 1;
  int links_size() const;
  private:
  int _internal_links_size() const;

  public:
  void clear_links() ;
  ::palm::lemon::v1::Sitemap_Link* mutable_links(int index);
  ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Sitemap_Link >*
      mutable_links();
  private:
  const ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Sitemap_Link>& _internal_links() const;
  ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Sitemap_Link>* _internal_mutable_links();
  public:
  const ::palm::lemon::v1::Sitemap_Link& links(int index) const;
  ::palm::lemon::v1::Sitemap_Link* add_links();
  const ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Sitemap_Link >&
      links() const;
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Sitemap.UrlSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Sitemap_Link > links_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Sitemap_Index final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Sitemap.Index) */ {
 public:
  inline Sitemap_Index() : Sitemap_Index(nullptr) {}
  ~Sitemap_Index() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sitemap_Index(::google::protobuf::internal::ConstantInitialized);

  Sitemap_Index(const Sitemap_Index& from);
  Sitemap_Index(Sitemap_Index&& from) noexcept
    : Sitemap_Index() {
    *this = ::std::move(from);
  }

  inline Sitemap_Index& operator=(const Sitemap_Index& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sitemap_Index& operator=(Sitemap_Index&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sitemap_Index& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sitemap_Index* internal_default_instance() {
    return reinterpret_cast<const Sitemap_Index*>(
               &_Sitemap_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Sitemap_Index& a, Sitemap_Index& b) {
    a.Swap(&b);
  }
  inline void Swap(Sitemap_Index* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sitemap_Index* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sitemap_Index* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sitemap_Index>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sitemap_Index& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Sitemap_Index& from) {
    Sitemap_Index::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sitemap_Index* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Sitemap.Index";
  }
  protected:
  explicit Sitemap_Index(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 1,
  };
  // repeated string links = 1;
  int links_size() const;
  private:
  int _internal_links_size() const;

  public:
  void clear_links() ;
  const std::string& links(int index) const;
  std::string* mutable_links(int index);
  void set_links(int index, const std::string& value);
  void set_links(int index, std::string&& value);
  void set_links(int index, const char* value);
  void set_links(int index, const char* value, std::size_t size);
  void set_links(int index, absl::string_view value);
  std::string* add_links();
  void add_links(const std::string& value);
  void add_links(std::string&& value);
  void add_links(const char* value);
  void add_links(const char* value, std::size_t size);
  void add_links(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& links() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_links();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_links() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_links();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Sitemap.Index)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> links_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Sitemap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Sitemap) */ {
 public:
  inline Sitemap() : Sitemap(nullptr) {}
  ~Sitemap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sitemap(::google::protobuf::internal::ConstantInitialized);

  Sitemap(const Sitemap& from);
  Sitemap(Sitemap&& from) noexcept
    : Sitemap() {
    *this = ::std::move(from);
  }

  inline Sitemap& operator=(const Sitemap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sitemap& operator=(Sitemap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sitemap& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kUrlset = 11,
    kIndex = 12,
    BODY_NOT_SET = 0,
  };

  static inline const Sitemap* internal_default_instance() {
    return reinterpret_cast<const Sitemap*>(
               &_Sitemap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Sitemap& a, Sitemap& b) {
    a.Swap(&b);
  }
  inline void Swap(Sitemap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sitemap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sitemap* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sitemap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sitemap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Sitemap& from) {
    Sitemap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sitemap* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Sitemap";
  }
  protected:
  explicit Sitemap(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Sitemap_Link Link;
  typedef Sitemap_UrlSet UrlSet;
  typedef Sitemap_Index Index;

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 1,
    kUrlsetFieldNumber = 11,
    kIndexFieldNumber = 12,
  };
  // string home = 1;
  void clear_home() ;
  const std::string& home() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_home(Arg_&& arg, Args_... args);
  std::string* mutable_home();
  PROTOBUF_NODISCARD std::string* release_home();
  void set_allocated_home(std::string* ptr);

  private:
  const std::string& _internal_home() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home(
      const std::string& value);
  std::string* _internal_mutable_home();

  public:
  // .palm.lemon.v1.Sitemap.UrlSet urlset = 11;
  bool has_urlset() const;
  private:
  bool _internal_has_urlset() const;

  public:
  void clear_urlset() ;
  const ::palm::lemon::v1::Sitemap_UrlSet& urlset() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::Sitemap_UrlSet* release_urlset();
  ::palm::lemon::v1::Sitemap_UrlSet* mutable_urlset();
  void set_allocated_urlset(::palm::lemon::v1::Sitemap_UrlSet* value);
  void unsafe_arena_set_allocated_urlset(::palm::lemon::v1::Sitemap_UrlSet* value);
  ::palm::lemon::v1::Sitemap_UrlSet* unsafe_arena_release_urlset();

  private:
  const ::palm::lemon::v1::Sitemap_UrlSet& _internal_urlset() const;
  ::palm::lemon::v1::Sitemap_UrlSet* _internal_mutable_urlset();

  public:
  // .palm.lemon.v1.Sitemap.Index index = 12;
  bool has_index() const;
  private:
  bool _internal_has_index() const;

  public:
  void clear_index() ;
  const ::palm::lemon::v1::Sitemap_Index& index() const;
  PROTOBUF_NODISCARD ::palm::lemon::v1::Sitemap_Index* release_index();
  ::palm::lemon::v1::Sitemap_Index* mutable_index();
  void set_allocated_index(::palm::lemon::v1::Sitemap_Index* value);
  void unsafe_arena_set_allocated_index(::palm::lemon::v1::Sitemap_Index* value);
  ::palm::lemon::v1::Sitemap_Index* unsafe_arena_release_index();

  private:
  const ::palm::lemon::v1::Sitemap_Index& _internal_index() const;
  ::palm::lemon::v1::Sitemap_Index* _internal_mutable_index();

  public:
  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Sitemap)
 private:
  class _Internal;
  void set_has_urlset();
  void set_has_index();

  inline bool has_body() const;
  inline void clear_has_body();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3, 2, 34, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr home_;
    union BodyUnion {
      constexpr BodyUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::palm::lemon::v1::Sitemap_UrlSet* urlset_;
      ::palm::lemon::v1::Sitemap_Index* index_;
    } body_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};// -------------------------------------------------------------------

class Page final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:palm.lemon.v1.Page) */ {
 public:
  inline Page() : Page(nullptr) {}
  ~Page() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Page(::google::protobuf::internal::ConstantInitialized);

  Page(const Page& from);
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Page& operator=(Page&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Page& default_instance() {
    return *internal_default_instance();
  }
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }
  inline void Swap(Page* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Page* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Page* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Page& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Page& from) {
    Page::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "palm.lemon.v1.Page";
  }
  protected:
  explicit Page(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlugFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // string slug = 1;
  void clear_slug() ;
  const std::string& slug() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slug(Arg_&& arg, Args_... args);
  std::string* mutable_slug();
  PROTOBUF_NODISCARD std::string* release_slug();
  void set_allocated_slug(std::string* ptr);

  private:
  const std::string& _internal_slug() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slug(
      const std::string& value);
  std::string* _internal_mutable_slug();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // @@protoc_insertion_point(class_scope:palm.lemon.v1.Page)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 36, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr slug_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lemon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SiteLayoutRequest

// string locale = 1;
inline void SiteLayoutRequest::clear_locale() {
  _impl_.locale_.ClearToEmpty();
}
inline const std::string& SiteLayoutRequest::locale() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutRequest.locale)
  return _internal_locale();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteLayoutRequest::set_locale(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.locale_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteLayoutRequest.locale)
}
inline std::string* SiteLayoutRequest::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutRequest.locale)
  return _s;
}
inline const std::string& SiteLayoutRequest::_internal_locale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.locale_.Get();
}
inline void SiteLayoutRequest::_internal_set_locale(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteLayoutRequest::_internal_mutable_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.locale_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteLayoutRequest::release_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutRequest.locale)
  return _impl_.locale_.Release();
}
inline void SiteLayoutRequest::set_allocated_locale(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locale_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.locale_.IsDefault()) {
          _impl_.locale_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteLayoutRequest.locale)
}

// .palm.lemon.v1.Theme theme = 2;
inline void SiteLayoutRequest::clear_theme() {
  _impl_.theme_ = 0;
}
inline ::palm::lemon::v1::Theme SiteLayoutRequest::theme() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutRequest.theme)
  return _internal_theme();
}
inline void SiteLayoutRequest::set_theme(::palm::lemon::v1::Theme value) {
  _internal_set_theme(value);
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteLayoutRequest.theme)
}
inline ::palm::lemon::v1::Theme SiteLayoutRequest::_internal_theme() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::lemon::v1::Theme>(_impl_.theme_);
}
inline void SiteLayoutRequest::_internal_set_theme(::palm::lemon::v1::Theme value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.theme_ = value;
}

// -------------------------------------------------------------------

// SiteLayoutResponse

// .palm.lemon.v1.CleanWhiteLayout clean_white = 1;
inline bool SiteLayoutResponse::has_clean_white() const {
  return layout_case() == kCleanWhite;
}
inline bool SiteLayoutResponse::_internal_has_clean_white() const {
  return layout_case() == kCleanWhite;
}
inline void SiteLayoutResponse::set_has_clean_white() {
  _impl_._oneof_case_[0] = kCleanWhite;
}
inline void SiteLayoutResponse::clear_clean_white() {
  if (layout_case() == kCleanWhite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.layout_.clean_white_;
    }
    clear_has_layout();
  }
}
inline ::palm::lemon::v1::CleanWhiteLayout* SiteLayoutResponse::release_clean_white() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutResponse.clean_white)
  if (layout_case() == kCleanWhite) {
    clear_has_layout();
    ::palm::lemon::v1::CleanWhiteLayout* temp = _impl_.layout_.clean_white_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.layout_.clean_white_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::CleanWhiteLayout& SiteLayoutResponse::_internal_clean_white() const {
  return layout_case() == kCleanWhite
      ? *_impl_.layout_.clean_white_
      : reinterpret_cast<::palm::lemon::v1::CleanWhiteLayout&>(::palm::lemon::v1::_CleanWhiteLayout_default_instance_);
}
inline const ::palm::lemon::v1::CleanWhiteLayout& SiteLayoutResponse::clean_white() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutResponse.clean_white)
  return _internal_clean_white();
}
inline ::palm::lemon::v1::CleanWhiteLayout* SiteLayoutResponse::unsafe_arena_release_clean_white() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteLayoutResponse.clean_white)
  if (layout_case() == kCleanWhite) {
    clear_has_layout();
    ::palm::lemon::v1::CleanWhiteLayout* temp = _impl_.layout_.clean_white_;
    _impl_.layout_.clean_white_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_clean_white(::palm::lemon::v1::CleanWhiteLayout* clean_white) {
  clear_layout();
  if (clean_white) {
    set_has_clean_white();
    _impl_.layout_.clean_white_ = clean_white;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteLayoutResponse.clean_white)
}
inline ::palm::lemon::v1::CleanWhiteLayout* SiteLayoutResponse::_internal_mutable_clean_white() {
  if (layout_case() != kCleanWhite) {
    clear_layout();
    set_has_clean_white();
    _impl_.layout_.clean_white_ = CreateMaybeMessage< ::palm::lemon::v1::CleanWhiteLayout >(GetArenaForAllocation());
  }
  return _impl_.layout_.clean_white_;
}
inline ::palm::lemon::v1::CleanWhiteLayout* SiteLayoutResponse::mutable_clean_white() {
  ::palm::lemon::v1::CleanWhiteLayout* _msg = _internal_mutable_clean_white();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutResponse.clean_white)
  return _msg;
}

// .palm.lemon.v1.DocsyLayout docsy = 2;
inline bool SiteLayoutResponse::has_docsy() const {
  return layout_case() == kDocsy;
}
inline bool SiteLayoutResponse::_internal_has_docsy() const {
  return layout_case() == kDocsy;
}
inline void SiteLayoutResponse::set_has_docsy() {
  _impl_._oneof_case_[0] = kDocsy;
}
inline void SiteLayoutResponse::clear_docsy() {
  if (layout_case() == kDocsy) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.layout_.docsy_;
    }
    clear_has_layout();
  }
}
inline ::palm::lemon::v1::DocsyLayout* SiteLayoutResponse::release_docsy() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutResponse.docsy)
  if (layout_case() == kDocsy) {
    clear_has_layout();
    ::palm::lemon::v1::DocsyLayout* temp = _impl_.layout_.docsy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.layout_.docsy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::DocsyLayout& SiteLayoutResponse::_internal_docsy() const {
  return layout_case() == kDocsy
      ? *_impl_.layout_.docsy_
      : reinterpret_cast<::palm::lemon::v1::DocsyLayout&>(::palm::lemon::v1::_DocsyLayout_default_instance_);
}
inline const ::palm::lemon::v1::DocsyLayout& SiteLayoutResponse::docsy() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutResponse.docsy)
  return _internal_docsy();
}
inline ::palm::lemon::v1::DocsyLayout* SiteLayoutResponse::unsafe_arena_release_docsy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteLayoutResponse.docsy)
  if (layout_case() == kDocsy) {
    clear_has_layout();
    ::palm::lemon::v1::DocsyLayout* temp = _impl_.layout_.docsy_;
    _impl_.layout_.docsy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_docsy(::palm::lemon::v1::DocsyLayout* docsy) {
  clear_layout();
  if (docsy) {
    set_has_docsy();
    _impl_.layout_.docsy_ = docsy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteLayoutResponse.docsy)
}
inline ::palm::lemon::v1::DocsyLayout* SiteLayoutResponse::_internal_mutable_docsy() {
  if (layout_case() != kDocsy) {
    clear_layout();
    set_has_docsy();
    _impl_.layout_.docsy_ = CreateMaybeMessage< ::palm::lemon::v1::DocsyLayout >(GetArenaForAllocation());
  }
  return _impl_.layout_.docsy_;
}
inline ::palm::lemon::v1::DocsyLayout* SiteLayoutResponse::mutable_docsy() {
  ::palm::lemon::v1::DocsyLayout* _msg = _internal_mutable_docsy();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutResponse.docsy)
  return _msg;
}

// .palm.lemon.v1.GantryLayout gantry = 3;
inline bool SiteLayoutResponse::has_gantry() const {
  return layout_case() == kGantry;
}
inline bool SiteLayoutResponse::_internal_has_gantry() const {
  return layout_case() == kGantry;
}
inline void SiteLayoutResponse::set_has_gantry() {
  _impl_._oneof_case_[0] = kGantry;
}
inline void SiteLayoutResponse::clear_gantry() {
  if (layout_case() == kGantry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.layout_.gantry_;
    }
    clear_has_layout();
  }
}
inline ::palm::lemon::v1::GantryLayout* SiteLayoutResponse::release_gantry() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutResponse.gantry)
  if (layout_case() == kGantry) {
    clear_has_layout();
    ::palm::lemon::v1::GantryLayout* temp = _impl_.layout_.gantry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.layout_.gantry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::GantryLayout& SiteLayoutResponse::_internal_gantry() const {
  return layout_case() == kGantry
      ? *_impl_.layout_.gantry_
      : reinterpret_cast<::palm::lemon::v1::GantryLayout&>(::palm::lemon::v1::_GantryLayout_default_instance_);
}
inline const ::palm::lemon::v1::GantryLayout& SiteLayoutResponse::gantry() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutResponse.gantry)
  return _internal_gantry();
}
inline ::palm::lemon::v1::GantryLayout* SiteLayoutResponse::unsafe_arena_release_gantry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteLayoutResponse.gantry)
  if (layout_case() == kGantry) {
    clear_has_layout();
    ::palm::lemon::v1::GantryLayout* temp = _impl_.layout_.gantry_;
    _impl_.layout_.gantry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_gantry(::palm::lemon::v1::GantryLayout* gantry) {
  clear_layout();
  if (gantry) {
    set_has_gantry();
    _impl_.layout_.gantry_ = gantry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteLayoutResponse.gantry)
}
inline ::palm::lemon::v1::GantryLayout* SiteLayoutResponse::_internal_mutable_gantry() {
  if (layout_case() != kGantry) {
    clear_layout();
    set_has_gantry();
    _impl_.layout_.gantry_ = CreateMaybeMessage< ::palm::lemon::v1::GantryLayout >(GetArenaForAllocation());
  }
  return _impl_.layout_.gantry_;
}
inline ::palm::lemon::v1::GantryLayout* SiteLayoutResponse::mutable_gantry() {
  ::palm::lemon::v1::GantryLayout* _msg = _internal_mutable_gantry();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutResponse.gantry)
  return _msg;
}

// .palm.lemon.v1.HinodeLayout hinode = 4;
inline bool SiteLayoutResponse::has_hinode() const {
  return layout_case() == kHinode;
}
inline bool SiteLayoutResponse::_internal_has_hinode() const {
  return layout_case() == kHinode;
}
inline void SiteLayoutResponse::set_has_hinode() {
  _impl_._oneof_case_[0] = kHinode;
}
inline void SiteLayoutResponse::clear_hinode() {
  if (layout_case() == kHinode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.layout_.hinode_;
    }
    clear_has_layout();
  }
}
inline ::palm::lemon::v1::HinodeLayout* SiteLayoutResponse::release_hinode() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutResponse.hinode)
  if (layout_case() == kHinode) {
    clear_has_layout();
    ::palm::lemon::v1::HinodeLayout* temp = _impl_.layout_.hinode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.layout_.hinode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::HinodeLayout& SiteLayoutResponse::_internal_hinode() const {
  return layout_case() == kHinode
      ? *_impl_.layout_.hinode_
      : reinterpret_cast<::palm::lemon::v1::HinodeLayout&>(::palm::lemon::v1::_HinodeLayout_default_instance_);
}
inline const ::palm::lemon::v1::HinodeLayout& SiteLayoutResponse::hinode() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutResponse.hinode)
  return _internal_hinode();
}
inline ::palm::lemon::v1::HinodeLayout* SiteLayoutResponse::unsafe_arena_release_hinode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteLayoutResponse.hinode)
  if (layout_case() == kHinode) {
    clear_has_layout();
    ::palm::lemon::v1::HinodeLayout* temp = _impl_.layout_.hinode_;
    _impl_.layout_.hinode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_hinode(::palm::lemon::v1::HinodeLayout* hinode) {
  clear_layout();
  if (hinode) {
    set_has_hinode();
    _impl_.layout_.hinode_ = hinode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteLayoutResponse.hinode)
}
inline ::palm::lemon::v1::HinodeLayout* SiteLayoutResponse::_internal_mutable_hinode() {
  if (layout_case() != kHinode) {
    clear_layout();
    set_has_hinode();
    _impl_.layout_.hinode_ = CreateMaybeMessage< ::palm::lemon::v1::HinodeLayout >(GetArenaForAllocation());
  }
  return _impl_.layout_.hinode_;
}
inline ::palm::lemon::v1::HinodeLayout* SiteLayoutResponse::mutable_hinode() {
  ::palm::lemon::v1::HinodeLayout* _msg = _internal_mutable_hinode();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutResponse.hinode)
  return _msg;
}

// .palm.lemon.v1.UniversalLayout universal = 5;
inline bool SiteLayoutResponse::has_universal() const {
  return layout_case() == kUniversal;
}
inline bool SiteLayoutResponse::_internal_has_universal() const {
  return layout_case() == kUniversal;
}
inline void SiteLayoutResponse::set_has_universal() {
  _impl_._oneof_case_[0] = kUniversal;
}
inline void SiteLayoutResponse::clear_universal() {
  if (layout_case() == kUniversal) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.layout_.universal_;
    }
    clear_has_layout();
  }
}
inline ::palm::lemon::v1::UniversalLayout* SiteLayoutResponse::release_universal() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutResponse.universal)
  if (layout_case() == kUniversal) {
    clear_has_layout();
    ::palm::lemon::v1::UniversalLayout* temp = _impl_.layout_.universal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.layout_.universal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::UniversalLayout& SiteLayoutResponse::_internal_universal() const {
  return layout_case() == kUniversal
      ? *_impl_.layout_.universal_
      : reinterpret_cast<::palm::lemon::v1::UniversalLayout&>(::palm::lemon::v1::_UniversalLayout_default_instance_);
}
inline const ::palm::lemon::v1::UniversalLayout& SiteLayoutResponse::universal() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutResponse.universal)
  return _internal_universal();
}
inline ::palm::lemon::v1::UniversalLayout* SiteLayoutResponse::unsafe_arena_release_universal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteLayoutResponse.universal)
  if (layout_case() == kUniversal) {
    clear_has_layout();
    ::palm::lemon::v1::UniversalLayout* temp = _impl_.layout_.universal_;
    _impl_.layout_.universal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_universal(::palm::lemon::v1::UniversalLayout* universal) {
  clear_layout();
  if (universal) {
    set_has_universal();
    _impl_.layout_.universal_ = universal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteLayoutResponse.universal)
}
inline ::palm::lemon::v1::UniversalLayout* SiteLayoutResponse::_internal_mutable_universal() {
  if (layout_case() != kUniversal) {
    clear_layout();
    set_has_universal();
    _impl_.layout_.universal_ = CreateMaybeMessage< ::palm::lemon::v1::UniversalLayout >(GetArenaForAllocation());
  }
  return _impl_.layout_.universal_;
}
inline ::palm::lemon::v1::UniversalLayout* SiteLayoutResponse::mutable_universal() {
  ::palm::lemon::v1::UniversalLayout* _msg = _internal_mutable_universal();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutResponse.universal)
  return _msg;
}

// .palm.lemon.v1.XCorporationLayout x_corporation = 6;
inline bool SiteLayoutResponse::has_x_corporation() const {
  return layout_case() == kXCorporation;
}
inline bool SiteLayoutResponse::_internal_has_x_corporation() const {
  return layout_case() == kXCorporation;
}
inline void SiteLayoutResponse::set_has_x_corporation() {
  _impl_._oneof_case_[0] = kXCorporation;
}
inline void SiteLayoutResponse::clear_x_corporation() {
  if (layout_case() == kXCorporation) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.layout_.x_corporation_;
    }
    clear_has_layout();
  }
}
inline ::palm::lemon::v1::XCorporationLayout* SiteLayoutResponse::release_x_corporation() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteLayoutResponse.x_corporation)
  if (layout_case() == kXCorporation) {
    clear_has_layout();
    ::palm::lemon::v1::XCorporationLayout* temp = _impl_.layout_.x_corporation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.layout_.x_corporation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::XCorporationLayout& SiteLayoutResponse::_internal_x_corporation() const {
  return layout_case() == kXCorporation
      ? *_impl_.layout_.x_corporation_
      : reinterpret_cast<::palm::lemon::v1::XCorporationLayout&>(::palm::lemon::v1::_XCorporationLayout_default_instance_);
}
inline const ::palm::lemon::v1::XCorporationLayout& SiteLayoutResponse::x_corporation() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteLayoutResponse.x_corporation)
  return _internal_x_corporation();
}
inline ::palm::lemon::v1::XCorporationLayout* SiteLayoutResponse::unsafe_arena_release_x_corporation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteLayoutResponse.x_corporation)
  if (layout_case() == kXCorporation) {
    clear_has_layout();
    ::palm::lemon::v1::XCorporationLayout* temp = _impl_.layout_.x_corporation_;
    _impl_.layout_.x_corporation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteLayoutResponse::unsafe_arena_set_allocated_x_corporation(::palm::lemon::v1::XCorporationLayout* x_corporation) {
  clear_layout();
  if (x_corporation) {
    set_has_x_corporation();
    _impl_.layout_.x_corporation_ = x_corporation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteLayoutResponse.x_corporation)
}
inline ::palm::lemon::v1::XCorporationLayout* SiteLayoutResponse::_internal_mutable_x_corporation() {
  if (layout_case() != kXCorporation) {
    clear_layout();
    set_has_x_corporation();
    _impl_.layout_.x_corporation_ = CreateMaybeMessage< ::palm::lemon::v1::XCorporationLayout >(GetArenaForAllocation());
  }
  return _impl_.layout_.x_corporation_;
}
inline ::palm::lemon::v1::XCorporationLayout* SiteLayoutResponse::mutable_x_corporation() {
  ::palm::lemon::v1::XCorporationLayout* _msg = _internal_mutable_x_corporation();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteLayoutResponse.x_corporation)
  return _msg;
}

inline bool SiteLayoutResponse::has_layout() const {
  return layout_case() != LAYOUT_NOT_SET;
}
inline void SiteLayoutResponse::clear_has_layout() {
  _impl_._oneof_case_[0] = LAYOUT_NOT_SET;
}
inline SiteLayoutResponse::LayoutCase SiteLayoutResponse::layout_case() const {
  return SiteLayoutResponse::LayoutCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SiteRssResponse

// map<string, .palm.lemon.v1.Rss> items = 1;
inline int SiteRssResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int SiteRssResponse::items_size() const {
  return _internal_items_size();
}
inline void SiteRssResponse::clear_items() {
  _impl_.items_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>& SiteRssResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>& SiteRssResponse::items() const {
  // @@protoc_insertion_point(field_map:palm.lemon.v1.SiteRssResponse.items)
  return _internal_items();
}
inline ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>* SiteRssResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.items_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::palm::lemon::v1::Rss>* SiteRssResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:palm.lemon.v1.SiteRssResponse.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SiteSitemapResponse

// map<string, .palm.lemon.v1.Sitemap> items = 1;
inline int SiteSitemapResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int SiteSitemapResponse::items_size() const {
  return _internal_items_size();
}
inline void SiteSitemapResponse::clear_items() {
  _impl_.items_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>& SiteSitemapResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>& SiteSitemapResponse::items() const {
  // @@protoc_insertion_point(field_map:palm.lemon.v1.SiteSitemapResponse.items)
  return _internal_items();
}
inline ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>* SiteSitemapResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.items_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::palm::lemon::v1::Sitemap>* SiteSitemapResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:palm.lemon.v1.SiteSitemapResponse.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// SiteShowPageRequest

// string slug = 1;
inline void SiteShowPageRequest::clear_slug() {
  _impl_.slug_.ClearToEmpty();
}
inline const std::string& SiteShowPageRequest::slug() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteShowPageRequest.slug)
  return _internal_slug();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteShowPageRequest::set_slug(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slug_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteShowPageRequest.slug)
}
inline std::string* SiteShowPageRequest::mutable_slug() {
  std::string* _s = _internal_mutable_slug();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteShowPageRequest.slug)
  return _s;
}
inline const std::string& SiteShowPageRequest::_internal_slug() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slug_.Get();
}
inline void SiteShowPageRequest::_internal_set_slug(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slug_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteShowPageRequest::_internal_mutable_slug() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.slug_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteShowPageRequest::release_slug() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteShowPageRequest.slug)
  return _impl_.slug_.Release();
}
inline void SiteShowPageRequest::set_allocated_slug(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slug_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slug_.IsDefault()) {
          _impl_.slug_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteShowPageRequest.slug)
}

// -------------------------------------------------------------------

// SiteShowPageResponse_Link

// string slug = 1;
inline void SiteShowPageResponse_Link::clear_slug() {
  _impl_.slug_.ClearToEmpty();
}
inline const std::string& SiteShowPageResponse_Link::slug() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteShowPageResponse.Link.slug)
  return _internal_slug();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteShowPageResponse_Link::set_slug(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slug_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteShowPageResponse.Link.slug)
}
inline std::string* SiteShowPageResponse_Link::mutable_slug() {
  std::string* _s = _internal_mutable_slug();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteShowPageResponse.Link.slug)
  return _s;
}
inline const std::string& SiteShowPageResponse_Link::_internal_slug() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slug_.Get();
}
inline void SiteShowPageResponse_Link::_internal_set_slug(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slug_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteShowPageResponse_Link::_internal_mutable_slug() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.slug_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteShowPageResponse_Link::release_slug() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteShowPageResponse.Link.slug)
  return _impl_.slug_.Release();
}
inline void SiteShowPageResponse_Link::set_allocated_slug(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slug_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slug_.IsDefault()) {
          _impl_.slug_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteShowPageResponse.Link.slug)
}

// string title = 2;
inline void SiteShowPageResponse_Link::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SiteShowPageResponse_Link::title() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteShowPageResponse.Link.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteShowPageResponse_Link::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteShowPageResponse.Link.title)
}
inline std::string* SiteShowPageResponse_Link::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteShowPageResponse.Link.title)
  return _s;
}
inline const std::string& SiteShowPageResponse_Link::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void SiteShowPageResponse_Link::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteShowPageResponse_Link::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteShowPageResponse_Link::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteShowPageResponse.Link.title)
  return _impl_.title_.Release();
}
inline void SiteShowPageResponse_Link::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteShowPageResponse.Link.title)
}

// -------------------------------------------------------------------

// SiteShowPageResponse

// .palm.lemon.v1.Page page = 1;
inline bool SiteShowPageResponse::has_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.page_ != nullptr);
  return value;
}
inline void SiteShowPageResponse::clear_page() {
  if (_impl_.page_ != nullptr) _impl_.page_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::palm::lemon::v1::Page& SiteShowPageResponse::_internal_page() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::palm::lemon::v1::Page* p = _impl_.page_;
  return p != nullptr ? *p : reinterpret_cast<const ::palm::lemon::v1::Page&>(::palm::lemon::v1::_Page_default_instance_);
}
inline const ::palm::lemon::v1::Page& SiteShowPageResponse::page() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteShowPageResponse.page)
  return _internal_page();
}
inline void SiteShowPageResponse::unsafe_arena_set_allocated_page(::palm::lemon::v1::Page* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.page_);
  }
  _impl_.page_ = reinterpret_cast<::palm::lemon::v1::Page*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteShowPageResponse.page)
}
inline ::palm::lemon::v1::Page* SiteShowPageResponse::release_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::lemon::v1::Page* released = _impl_.page_;
  _impl_.page_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::palm::lemon::v1::Page* SiteShowPageResponse::unsafe_arena_release_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteShowPageResponse.page)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::palm::lemon::v1::Page* temp = _impl_.page_;
  _impl_.page_ = nullptr;
  return temp;
}
inline ::palm::lemon::v1::Page* SiteShowPageResponse::_internal_mutable_page() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.page_ == nullptr) {
    auto* p = CreateMaybeMessage<::palm::lemon::v1::Page>(GetArenaForAllocation());
    _impl_.page_ = reinterpret_cast<::palm::lemon::v1::Page*>(p);
  }
  return _impl_.page_;
}
inline ::palm::lemon::v1::Page* SiteShowPageResponse::mutable_page() {
  ::palm::lemon::v1::Page* _msg = _internal_mutable_page();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteShowPageResponse.page)
  return _msg;
}
inline void SiteShowPageResponse::set_allocated_page(::palm::lemon::v1::Page* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::palm::lemon::v1::Page*>(_impl_.page_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::palm::lemon::v1::Page*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.page_ = reinterpret_cast<::palm::lemon::v1::Page*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteShowPageResponse.page)
}

// repeated .palm.lemon.v1.SiteShowPageResponse.Link related = 2;
inline int SiteShowPageResponse::_internal_related_size() const {
  return _internal_related().size();
}
inline int SiteShowPageResponse::related_size() const {
  return _internal_related_size();
}
inline void SiteShowPageResponse::clear_related() {
  _internal_mutable_related()->Clear();
}
inline ::palm::lemon::v1::SiteShowPageResponse_Link* SiteShowPageResponse::mutable_related(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteShowPageResponse.related)
  return _internal_mutable_related()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::SiteShowPageResponse_Link >*
SiteShowPageResponse::mutable_related() {
  // @@protoc_insertion_point(field_mutable_list:palm.lemon.v1.SiteShowPageResponse.related)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_related();
}
inline const ::palm::lemon::v1::SiteShowPageResponse_Link& SiteShowPageResponse::related(int index) const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteShowPageResponse.related)
    return _internal_related().Get(index);
}
inline ::palm::lemon::v1::SiteShowPageResponse_Link* SiteShowPageResponse::add_related() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::lemon::v1::SiteShowPageResponse_Link* _add = _internal_mutable_related()->Add();
  // @@protoc_insertion_point(field_add:palm.lemon.v1.SiteShowPageResponse.related)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::SiteShowPageResponse_Link >&
SiteShowPageResponse::related() const {
  // @@protoc_insertion_point(field_list:palm.lemon.v1.SiteShowPageResponse.related)
  return _internal_related();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::SiteShowPageResponse_Link>&
SiteShowPageResponse::_internal_related() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.related_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::SiteShowPageResponse_Link>*
SiteShowPageResponse::_internal_mutable_related() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.related_;
}

// -------------------------------------------------------------------

// SiteHomePageRequest

// string locale = 1;
inline void SiteHomePageRequest::clear_locale() {
  _impl_.locale_.ClearToEmpty();
}
inline const std::string& SiteHomePageRequest::locale() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageRequest.locale)
  return _internal_locale();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SiteHomePageRequest::set_locale(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.locale_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteHomePageRequest.locale)
}
inline std::string* SiteHomePageRequest::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageRequest.locale)
  return _s;
}
inline const std::string& SiteHomePageRequest::_internal_locale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.locale_.Get();
}
inline void SiteHomePageRequest::_internal_set_locale(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* SiteHomePageRequest::_internal_mutable_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.locale_.Mutable( GetArenaForAllocation());
}
inline std::string* SiteHomePageRequest::release_locale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageRequest.locale)
  return _impl_.locale_.Release();
}
inline void SiteHomePageRequest::set_allocated_locale(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locale_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.locale_.IsDefault()) {
          _impl_.locale_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.SiteHomePageRequest.locale)
}

// .palm.lemon.v1.Theme theme = 2;
inline void SiteHomePageRequest::clear_theme() {
  _impl_.theme_ = 0;
}
inline ::palm::lemon::v1::Theme SiteHomePageRequest::theme() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageRequest.theme)
  return _internal_theme();
}
inline void SiteHomePageRequest::set_theme(::palm::lemon::v1::Theme value) {
  _internal_set_theme(value);
  // @@protoc_insertion_point(field_set:palm.lemon.v1.SiteHomePageRequest.theme)
}
inline ::palm::lemon::v1::Theme SiteHomePageRequest::_internal_theme() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::lemon::v1::Theme>(_impl_.theme_);
}
inline void SiteHomePageRequest::_internal_set_theme(::palm::lemon::v1::Theme value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.theme_ = value;
}

// -------------------------------------------------------------------

// SiteHomePageResponse

// .palm.lemon.v1.CleanWhiteHomePage clean_white = 1;
inline bool SiteHomePageResponse::has_clean_white() const {
  return payload_case() == kCleanWhite;
}
inline bool SiteHomePageResponse::_internal_has_clean_white() const {
  return payload_case() == kCleanWhite;
}
inline void SiteHomePageResponse::set_has_clean_white() {
  _impl_._oneof_case_[0] = kCleanWhite;
}
inline void SiteHomePageResponse::clear_clean_white() {
  if (payload_case() == kCleanWhite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.clean_white_;
    }
    clear_has_payload();
  }
}
inline ::palm::lemon::v1::CleanWhiteHomePage* SiteHomePageResponse::release_clean_white() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageResponse.clean_white)
  if (payload_case() == kCleanWhite) {
    clear_has_payload();
    ::palm::lemon::v1::CleanWhiteHomePage* temp = _impl_.payload_.clean_white_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.clean_white_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::CleanWhiteHomePage& SiteHomePageResponse::_internal_clean_white() const {
  return payload_case() == kCleanWhite
      ? *_impl_.payload_.clean_white_
      : reinterpret_cast<::palm::lemon::v1::CleanWhiteHomePage&>(::palm::lemon::v1::_CleanWhiteHomePage_default_instance_);
}
inline const ::palm::lemon::v1::CleanWhiteHomePage& SiteHomePageResponse::clean_white() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageResponse.clean_white)
  return _internal_clean_white();
}
inline ::palm::lemon::v1::CleanWhiteHomePage* SiteHomePageResponse::unsafe_arena_release_clean_white() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteHomePageResponse.clean_white)
  if (payload_case() == kCleanWhite) {
    clear_has_payload();
    ::palm::lemon::v1::CleanWhiteHomePage* temp = _impl_.payload_.clean_white_;
    _impl_.payload_.clean_white_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteHomePageResponse::unsafe_arena_set_allocated_clean_white(::palm::lemon::v1::CleanWhiteHomePage* clean_white) {
  clear_payload();
  if (clean_white) {
    set_has_clean_white();
    _impl_.payload_.clean_white_ = clean_white;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteHomePageResponse.clean_white)
}
inline ::palm::lemon::v1::CleanWhiteHomePage* SiteHomePageResponse::_internal_mutable_clean_white() {
  if (payload_case() != kCleanWhite) {
    clear_payload();
    set_has_clean_white();
    _impl_.payload_.clean_white_ = CreateMaybeMessage< ::palm::lemon::v1::CleanWhiteHomePage >(GetArenaForAllocation());
  }
  return _impl_.payload_.clean_white_;
}
inline ::palm::lemon::v1::CleanWhiteHomePage* SiteHomePageResponse::mutable_clean_white() {
  ::palm::lemon::v1::CleanWhiteHomePage* _msg = _internal_mutable_clean_white();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageResponse.clean_white)
  return _msg;
}

// .palm.lemon.v1.DocsyHomePage docsy = 2;
inline bool SiteHomePageResponse::has_docsy() const {
  return payload_case() == kDocsy;
}
inline bool SiteHomePageResponse::_internal_has_docsy() const {
  return payload_case() == kDocsy;
}
inline void SiteHomePageResponse::set_has_docsy() {
  _impl_._oneof_case_[0] = kDocsy;
}
inline void SiteHomePageResponse::clear_docsy() {
  if (payload_case() == kDocsy) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.docsy_;
    }
    clear_has_payload();
  }
}
inline ::palm::lemon::v1::DocsyHomePage* SiteHomePageResponse::release_docsy() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageResponse.docsy)
  if (payload_case() == kDocsy) {
    clear_has_payload();
    ::palm::lemon::v1::DocsyHomePage* temp = _impl_.payload_.docsy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.docsy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::DocsyHomePage& SiteHomePageResponse::_internal_docsy() const {
  return payload_case() == kDocsy
      ? *_impl_.payload_.docsy_
      : reinterpret_cast<::palm::lemon::v1::DocsyHomePage&>(::palm::lemon::v1::_DocsyHomePage_default_instance_);
}
inline const ::palm::lemon::v1::DocsyHomePage& SiteHomePageResponse::docsy() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageResponse.docsy)
  return _internal_docsy();
}
inline ::palm::lemon::v1::DocsyHomePage* SiteHomePageResponse::unsafe_arena_release_docsy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteHomePageResponse.docsy)
  if (payload_case() == kDocsy) {
    clear_has_payload();
    ::palm::lemon::v1::DocsyHomePage* temp = _impl_.payload_.docsy_;
    _impl_.payload_.docsy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteHomePageResponse::unsafe_arena_set_allocated_docsy(::palm::lemon::v1::DocsyHomePage* docsy) {
  clear_payload();
  if (docsy) {
    set_has_docsy();
    _impl_.payload_.docsy_ = docsy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteHomePageResponse.docsy)
}
inline ::palm::lemon::v1::DocsyHomePage* SiteHomePageResponse::_internal_mutable_docsy() {
  if (payload_case() != kDocsy) {
    clear_payload();
    set_has_docsy();
    _impl_.payload_.docsy_ = CreateMaybeMessage< ::palm::lemon::v1::DocsyHomePage >(GetArenaForAllocation());
  }
  return _impl_.payload_.docsy_;
}
inline ::palm::lemon::v1::DocsyHomePage* SiteHomePageResponse::mutable_docsy() {
  ::palm::lemon::v1::DocsyHomePage* _msg = _internal_mutable_docsy();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageResponse.docsy)
  return _msg;
}

// .palm.lemon.v1.GantryHomePage gantry = 3;
inline bool SiteHomePageResponse::has_gantry() const {
  return payload_case() == kGantry;
}
inline bool SiteHomePageResponse::_internal_has_gantry() const {
  return payload_case() == kGantry;
}
inline void SiteHomePageResponse::set_has_gantry() {
  _impl_._oneof_case_[0] = kGantry;
}
inline void SiteHomePageResponse::clear_gantry() {
  if (payload_case() == kGantry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.gantry_;
    }
    clear_has_payload();
  }
}
inline ::palm::lemon::v1::GantryHomePage* SiteHomePageResponse::release_gantry() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageResponse.gantry)
  if (payload_case() == kGantry) {
    clear_has_payload();
    ::palm::lemon::v1::GantryHomePage* temp = _impl_.payload_.gantry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.gantry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::GantryHomePage& SiteHomePageResponse::_internal_gantry() const {
  return payload_case() == kGantry
      ? *_impl_.payload_.gantry_
      : reinterpret_cast<::palm::lemon::v1::GantryHomePage&>(::palm::lemon::v1::_GantryHomePage_default_instance_);
}
inline const ::palm::lemon::v1::GantryHomePage& SiteHomePageResponse::gantry() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageResponse.gantry)
  return _internal_gantry();
}
inline ::palm::lemon::v1::GantryHomePage* SiteHomePageResponse::unsafe_arena_release_gantry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteHomePageResponse.gantry)
  if (payload_case() == kGantry) {
    clear_has_payload();
    ::palm::lemon::v1::GantryHomePage* temp = _impl_.payload_.gantry_;
    _impl_.payload_.gantry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteHomePageResponse::unsafe_arena_set_allocated_gantry(::palm::lemon::v1::GantryHomePage* gantry) {
  clear_payload();
  if (gantry) {
    set_has_gantry();
    _impl_.payload_.gantry_ = gantry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteHomePageResponse.gantry)
}
inline ::palm::lemon::v1::GantryHomePage* SiteHomePageResponse::_internal_mutable_gantry() {
  if (payload_case() != kGantry) {
    clear_payload();
    set_has_gantry();
    _impl_.payload_.gantry_ = CreateMaybeMessage< ::palm::lemon::v1::GantryHomePage >(GetArenaForAllocation());
  }
  return _impl_.payload_.gantry_;
}
inline ::palm::lemon::v1::GantryHomePage* SiteHomePageResponse::mutable_gantry() {
  ::palm::lemon::v1::GantryHomePage* _msg = _internal_mutable_gantry();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageResponse.gantry)
  return _msg;
}

// .palm.lemon.v1.HinodeHomePage hinode = 4;
inline bool SiteHomePageResponse::has_hinode() const {
  return payload_case() == kHinode;
}
inline bool SiteHomePageResponse::_internal_has_hinode() const {
  return payload_case() == kHinode;
}
inline void SiteHomePageResponse::set_has_hinode() {
  _impl_._oneof_case_[0] = kHinode;
}
inline void SiteHomePageResponse::clear_hinode() {
  if (payload_case() == kHinode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.hinode_;
    }
    clear_has_payload();
  }
}
inline ::palm::lemon::v1::HinodeHomePage* SiteHomePageResponse::release_hinode() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageResponse.hinode)
  if (payload_case() == kHinode) {
    clear_has_payload();
    ::palm::lemon::v1::HinodeHomePage* temp = _impl_.payload_.hinode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.hinode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::HinodeHomePage& SiteHomePageResponse::_internal_hinode() const {
  return payload_case() == kHinode
      ? *_impl_.payload_.hinode_
      : reinterpret_cast<::palm::lemon::v1::HinodeHomePage&>(::palm::lemon::v1::_HinodeHomePage_default_instance_);
}
inline const ::palm::lemon::v1::HinodeHomePage& SiteHomePageResponse::hinode() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageResponse.hinode)
  return _internal_hinode();
}
inline ::palm::lemon::v1::HinodeHomePage* SiteHomePageResponse::unsafe_arena_release_hinode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteHomePageResponse.hinode)
  if (payload_case() == kHinode) {
    clear_has_payload();
    ::palm::lemon::v1::HinodeHomePage* temp = _impl_.payload_.hinode_;
    _impl_.payload_.hinode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteHomePageResponse::unsafe_arena_set_allocated_hinode(::palm::lemon::v1::HinodeHomePage* hinode) {
  clear_payload();
  if (hinode) {
    set_has_hinode();
    _impl_.payload_.hinode_ = hinode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteHomePageResponse.hinode)
}
inline ::palm::lemon::v1::HinodeHomePage* SiteHomePageResponse::_internal_mutable_hinode() {
  if (payload_case() != kHinode) {
    clear_payload();
    set_has_hinode();
    _impl_.payload_.hinode_ = CreateMaybeMessage< ::palm::lemon::v1::HinodeHomePage >(GetArenaForAllocation());
  }
  return _impl_.payload_.hinode_;
}
inline ::palm::lemon::v1::HinodeHomePage* SiteHomePageResponse::mutable_hinode() {
  ::palm::lemon::v1::HinodeHomePage* _msg = _internal_mutable_hinode();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageResponse.hinode)
  return _msg;
}

// .palm.lemon.v1.UniversalHomePage universal = 5;
inline bool SiteHomePageResponse::has_universal() const {
  return payload_case() == kUniversal;
}
inline bool SiteHomePageResponse::_internal_has_universal() const {
  return payload_case() == kUniversal;
}
inline void SiteHomePageResponse::set_has_universal() {
  _impl_._oneof_case_[0] = kUniversal;
}
inline void SiteHomePageResponse::clear_universal() {
  if (payload_case() == kUniversal) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.universal_;
    }
    clear_has_payload();
  }
}
inline ::palm::lemon::v1::UniversalHomePage* SiteHomePageResponse::release_universal() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageResponse.universal)
  if (payload_case() == kUniversal) {
    clear_has_payload();
    ::palm::lemon::v1::UniversalHomePage* temp = _impl_.payload_.universal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.universal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::UniversalHomePage& SiteHomePageResponse::_internal_universal() const {
  return payload_case() == kUniversal
      ? *_impl_.payload_.universal_
      : reinterpret_cast<::palm::lemon::v1::UniversalHomePage&>(::palm::lemon::v1::_UniversalHomePage_default_instance_);
}
inline const ::palm::lemon::v1::UniversalHomePage& SiteHomePageResponse::universal() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageResponse.universal)
  return _internal_universal();
}
inline ::palm::lemon::v1::UniversalHomePage* SiteHomePageResponse::unsafe_arena_release_universal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteHomePageResponse.universal)
  if (payload_case() == kUniversal) {
    clear_has_payload();
    ::palm::lemon::v1::UniversalHomePage* temp = _impl_.payload_.universal_;
    _impl_.payload_.universal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteHomePageResponse::unsafe_arena_set_allocated_universal(::palm::lemon::v1::UniversalHomePage* universal) {
  clear_payload();
  if (universal) {
    set_has_universal();
    _impl_.payload_.universal_ = universal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteHomePageResponse.universal)
}
inline ::palm::lemon::v1::UniversalHomePage* SiteHomePageResponse::_internal_mutable_universal() {
  if (payload_case() != kUniversal) {
    clear_payload();
    set_has_universal();
    _impl_.payload_.universal_ = CreateMaybeMessage< ::palm::lemon::v1::UniversalHomePage >(GetArenaForAllocation());
  }
  return _impl_.payload_.universal_;
}
inline ::palm::lemon::v1::UniversalHomePage* SiteHomePageResponse::mutable_universal() {
  ::palm::lemon::v1::UniversalHomePage* _msg = _internal_mutable_universal();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageResponse.universal)
  return _msg;
}

// .palm.lemon.v1.XCorporationHomePage x_corporation = 6;
inline bool SiteHomePageResponse::has_x_corporation() const {
  return payload_case() == kXCorporation;
}
inline bool SiteHomePageResponse::_internal_has_x_corporation() const {
  return payload_case() == kXCorporation;
}
inline void SiteHomePageResponse::set_has_x_corporation() {
  _impl_._oneof_case_[0] = kXCorporation;
}
inline void SiteHomePageResponse::clear_x_corporation() {
  if (payload_case() == kXCorporation) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.x_corporation_;
    }
    clear_has_payload();
  }
}
inline ::palm::lemon::v1::XCorporationHomePage* SiteHomePageResponse::release_x_corporation() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.SiteHomePageResponse.x_corporation)
  if (payload_case() == kXCorporation) {
    clear_has_payload();
    ::palm::lemon::v1::XCorporationHomePage* temp = _impl_.payload_.x_corporation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.x_corporation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::XCorporationHomePage& SiteHomePageResponse::_internal_x_corporation() const {
  return payload_case() == kXCorporation
      ? *_impl_.payload_.x_corporation_
      : reinterpret_cast<::palm::lemon::v1::XCorporationHomePage&>(::palm::lemon::v1::_XCorporationHomePage_default_instance_);
}
inline const ::palm::lemon::v1::XCorporationHomePage& SiteHomePageResponse::x_corporation() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.SiteHomePageResponse.x_corporation)
  return _internal_x_corporation();
}
inline ::palm::lemon::v1::XCorporationHomePage* SiteHomePageResponse::unsafe_arena_release_x_corporation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.SiteHomePageResponse.x_corporation)
  if (payload_case() == kXCorporation) {
    clear_has_payload();
    ::palm::lemon::v1::XCorporationHomePage* temp = _impl_.payload_.x_corporation_;
    _impl_.payload_.x_corporation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SiteHomePageResponse::unsafe_arena_set_allocated_x_corporation(::palm::lemon::v1::XCorporationHomePage* x_corporation) {
  clear_payload();
  if (x_corporation) {
    set_has_x_corporation();
    _impl_.payload_.x_corporation_ = x_corporation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.SiteHomePageResponse.x_corporation)
}
inline ::palm::lemon::v1::XCorporationHomePage* SiteHomePageResponse::_internal_mutable_x_corporation() {
  if (payload_case() != kXCorporation) {
    clear_payload();
    set_has_x_corporation();
    _impl_.payload_.x_corporation_ = CreateMaybeMessage< ::palm::lemon::v1::XCorporationHomePage >(GetArenaForAllocation());
  }
  return _impl_.payload_.x_corporation_;
}
inline ::palm::lemon::v1::XCorporationHomePage* SiteHomePageResponse::mutable_x_corporation() {
  ::palm::lemon::v1::XCorporationHomePage* _msg = _internal_mutable_x_corporation();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.SiteHomePageResponse.x_corporation)
  return _msg;
}

inline bool SiteHomePageResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void SiteHomePageResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline SiteHomePageResponse::PayloadCase SiteHomePageResponse::payload_case() const {
  return SiteHomePageResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CleanWhiteLayout

// -------------------------------------------------------------------

// DocsyLayout

// -------------------------------------------------------------------

// GantryLayout

// -------------------------------------------------------------------

// HinodeLayout

// -------------------------------------------------------------------

// UniversalLayout

// -------------------------------------------------------------------

// XCorporationLayout

// -------------------------------------------------------------------

// CleanWhiteHomePage

// -------------------------------------------------------------------

// DocsyHomePage

// -------------------------------------------------------------------

// GantryHomePage

// -------------------------------------------------------------------

// HinodeHomePage

// -------------------------------------------------------------------

// UniversalHomePage

// -------------------------------------------------------------------

// XCorporationHomePage

// -------------------------------------------------------------------

// Rss_Link

// string path = 1;
inline void Rss_Link::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Rss_Link::path() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.Link.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rss_Link::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Rss.Link.path)
}
inline std::string* Rss_Link::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.Link.path)
  return _s;
}
inline const std::string& Rss_Link::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void Rss_Link::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Rss_Link::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* Rss_Link::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.Link.path)
  return _impl_.path_.Release();
}
inline void Rss_Link::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.Link.path)
}

// string title = 2;
inline void Rss_Link::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Rss_Link::title() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.Link.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rss_Link::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Rss.Link.title)
}
inline std::string* Rss_Link::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.Link.title)
  return _s;
}
inline const std::string& Rss_Link::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void Rss_Link::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Rss_Link::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* Rss_Link::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.Link.title)
  return _impl_.title_.Release();
}
inline void Rss_Link::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.Link.title)
}

// string description = 3;
inline void Rss_Link::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Rss_Link::description() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.Link.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rss_Link::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Rss.Link.description)
}
inline std::string* Rss_Link::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.Link.description)
  return _s;
}
inline const std::string& Rss_Link::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Rss_Link::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Rss_Link::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Rss_Link::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.Link.description)
  return _impl_.description_.Release();
}
inline void Rss_Link::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.Link.description)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool Rss_Link::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Rss_Link::_internal_updated_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Rss_Link::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.Link.updated_at)
  return _internal_updated_at();
}
inline void Rss_Link::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.Rss.Link.updated_at)
}
inline ::google::protobuf::Timestamp* Rss_Link::release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Rss_Link::unsafe_arena_release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.Link.updated_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Rss_Link::_internal_mutable_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* Rss_Link::mutable_updated_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.Link.updated_at)
  return _msg;
}
inline void Rss_Link::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.Link.updated_at)
}

// -------------------------------------------------------------------

// Rss

// string home = 1;
inline void Rss::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& Rss::home() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rss::set_home(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Rss.home)
}
inline std::string* Rss::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.home)
  return _s;
}
inline const std::string& Rss::_internal_home() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.home_.Get();
}
inline void Rss::_internal_set_home(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* Rss::_internal_mutable_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* Rss::release_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.home)
  return _impl_.home_.Release();
}
inline void Rss::set_allocated_home(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.home)
}

// string title = 2;
inline void Rss::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Rss::title() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rss::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Rss.title)
}
inline std::string* Rss::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.title)
  return _s;
}
inline const std::string& Rss::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void Rss::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Rss::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* Rss::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.title)
  return _impl_.title_.Release();
}
inline void Rss::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.title)
}

// string description = 3;
inline void Rss::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Rss::description() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rss::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Rss.description)
}
inline std::string* Rss::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.description)
  return _s;
}
inline const std::string& Rss::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Rss::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Rss::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Rss::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Rss.description)
  return _impl_.description_.Release();
}
inline void Rss::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Rss.description)
}

// repeated .palm.lemon.v1.Rss.Link links = 9;
inline int Rss::_internal_links_size() const {
  return _internal_links().size();
}
inline int Rss::links_size() const {
  return _internal_links_size();
}
inline void Rss::clear_links() {
  _internal_mutable_links()->Clear();
}
inline ::palm::lemon::v1::Rss_Link* Rss::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Rss.links)
  return _internal_mutable_links()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Rss_Link >*
Rss::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:palm.lemon.v1.Rss.links)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_links();
}
inline const ::palm::lemon::v1::Rss_Link& Rss::links(int index) const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Rss.links)
    return _internal_links().Get(index);
}
inline ::palm::lemon::v1::Rss_Link* Rss::add_links() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::lemon::v1::Rss_Link* _add = _internal_mutable_links()->Add();
  // @@protoc_insertion_point(field_add:palm.lemon.v1.Rss.links)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Rss_Link >&
Rss::links() const {
  // @@protoc_insertion_point(field_list:palm.lemon.v1.Rss.links)
  return _internal_links();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Rss_Link>&
Rss::_internal_links() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.links_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Rss_Link>*
Rss::_internal_mutable_links() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.links_;
}

// -------------------------------------------------------------------

// Sitemap_Link

// string path = 1;
inline void Sitemap_Link::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Sitemap_Link::path() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.Link.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sitemap_Link::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Sitemap.Link.path)
}
inline std::string* Sitemap_Link::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.Link.path)
  return _s;
}
inline const std::string& Sitemap_Link::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void Sitemap_Link::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Sitemap_Link::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* Sitemap_Link::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Sitemap.Link.path)
  return _impl_.path_.Release();
}
inline void Sitemap_Link::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Sitemap.Link.path)
}

// .palm.lemon.v1.Sitemap.Link.ChangeFreq change_freq = 2;
inline void Sitemap_Link::clear_change_freq() {
  _impl_.change_freq_ = 0;
}
inline ::palm::lemon::v1::Sitemap_Link_ChangeFreq Sitemap_Link::change_freq() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.Link.change_freq)
  return _internal_change_freq();
}
inline void Sitemap_Link::set_change_freq(::palm::lemon::v1::Sitemap_Link_ChangeFreq value) {
  _internal_set_change_freq(value);
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Sitemap.Link.change_freq)
}
inline ::palm::lemon::v1::Sitemap_Link_ChangeFreq Sitemap_Link::_internal_change_freq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::palm::lemon::v1::Sitemap_Link_ChangeFreq>(_impl_.change_freq_);
}
inline void Sitemap_Link::_internal_set_change_freq(::palm::lemon::v1::Sitemap_Link_ChangeFreq value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_freq_ = value;
}

// float priority = 3;
inline void Sitemap_Link::clear_priority() {
  _impl_.priority_ = 0;
}
inline float Sitemap_Link::priority() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.Link.priority)
  return _internal_priority();
}
inline void Sitemap_Link::set_priority(float value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Sitemap.Link.priority)
}
inline float Sitemap_Link::_internal_priority() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.priority_;
}
inline void Sitemap_Link::_internal_set_priority(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.priority_ = value;
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool Sitemap_Link::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Sitemap_Link::_internal_updated_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Sitemap_Link::updated_at() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.Link.updated_at)
  return _internal_updated_at();
}
inline void Sitemap_Link::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.Sitemap.Link.updated_at)
}
inline ::google::protobuf::Timestamp* Sitemap_Link::release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Sitemap_Link::unsafe_arena_release_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Sitemap.Link.updated_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Sitemap_Link::_internal_mutable_updated_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* Sitemap_Link::mutable_updated_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.Link.updated_at)
  return _msg;
}
inline void Sitemap_Link::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Sitemap.Link.updated_at)
}

// -------------------------------------------------------------------

// Sitemap_UrlSet

// repeated .palm.lemon.v1.Sitemap.Link links = 1;
inline int Sitemap_UrlSet::_internal_links_size() const {
  return _internal_links().size();
}
inline int Sitemap_UrlSet::links_size() const {
  return _internal_links_size();
}
inline void Sitemap_UrlSet::clear_links() {
  _internal_mutable_links()->Clear();
}
inline ::palm::lemon::v1::Sitemap_Link* Sitemap_UrlSet::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.UrlSet.links)
  return _internal_mutable_links()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Sitemap_Link >*
Sitemap_UrlSet::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:palm.lemon.v1.Sitemap.UrlSet.links)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_links();
}
inline const ::palm::lemon::v1::Sitemap_Link& Sitemap_UrlSet::links(int index) const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.UrlSet.links)
    return _internal_links().Get(index);
}
inline ::palm::lemon::v1::Sitemap_Link* Sitemap_UrlSet::add_links() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::palm::lemon::v1::Sitemap_Link* _add = _internal_mutable_links()->Add();
  // @@protoc_insertion_point(field_add:palm.lemon.v1.Sitemap.UrlSet.links)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::palm::lemon::v1::Sitemap_Link >&
Sitemap_UrlSet::links() const {
  // @@protoc_insertion_point(field_list:palm.lemon.v1.Sitemap.UrlSet.links)
  return _internal_links();
}
inline const ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Sitemap_Link>&
Sitemap_UrlSet::_internal_links() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.links_;
}
inline ::google::protobuf::RepeatedPtrField<::palm::lemon::v1::Sitemap_Link>*
Sitemap_UrlSet::_internal_mutable_links() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.links_;
}

// -------------------------------------------------------------------

// Sitemap_Index

// repeated string links = 1;
inline int Sitemap_Index::_internal_links_size() const {
  return _internal_links().size();
}
inline int Sitemap_Index::links_size() const {
  return _internal_links_size();
}
inline void Sitemap_Index::clear_links() {
  _internal_mutable_links()->Clear();
}
inline std::string* Sitemap_Index::add_links() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_links()->Add();
  // @@protoc_insertion_point(field_add_mutable:palm.lemon.v1.Sitemap.Index.links)
  return _s;
}
inline const std::string& Sitemap_Index::links(int index) const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.Index.links)
  return _internal_links().Get(index);
}
inline std::string* Sitemap_Index::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.Index.links)
  return _internal_mutable_links()->Mutable(index);
}
inline void Sitemap_Index::set_links(int index, const std::string& value) {
  _internal_mutable_links()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::set_links(int index, std::string&& value) {
  _internal_mutable_links()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::set_links(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_links()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::set_links(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_links()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::set_links(int index, absl::string_view value) {
  _internal_mutable_links()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::add_links(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_links()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::add_links(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_links()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::add_links(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_links()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::add_links(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_links()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:palm.lemon.v1.Sitemap.Index.links)
}
inline void Sitemap_Index::add_links(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_links()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:palm.lemon.v1.Sitemap.Index.links)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Sitemap_Index::links() const {
  // @@protoc_insertion_point(field_list:palm.lemon.v1.Sitemap.Index.links)
  return _internal_links();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Sitemap_Index::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:palm.lemon.v1.Sitemap.Index.links)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_links();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Sitemap_Index::_internal_links() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.links_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Sitemap_Index::_internal_mutable_links() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.links_;
}

// -------------------------------------------------------------------

// Sitemap

// string home = 1;
inline void Sitemap::clear_home() {
  _impl_.home_.ClearToEmpty();
}
inline const std::string& Sitemap::home() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.home)
  return _internal_home();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sitemap::set_home(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Sitemap.home)
}
inline std::string* Sitemap::mutable_home() {
  std::string* _s = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.home)
  return _s;
}
inline const std::string& Sitemap::_internal_home() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.home_.Get();
}
inline void Sitemap::_internal_set_home(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.home_.Set(value, GetArenaForAllocation());
}
inline std::string* Sitemap::_internal_mutable_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.home_.Mutable( GetArenaForAllocation());
}
inline std::string* Sitemap::release_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Sitemap.home)
  return _impl_.home_.Release();
}
inline void Sitemap::set_allocated_home(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.home_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.home_.IsDefault()) {
          _impl_.home_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Sitemap.home)
}

// .palm.lemon.v1.Sitemap.UrlSet urlset = 11;
inline bool Sitemap::has_urlset() const {
  return body_case() == kUrlset;
}
inline bool Sitemap::_internal_has_urlset() const {
  return body_case() == kUrlset;
}
inline void Sitemap::set_has_urlset() {
  _impl_._oneof_case_[0] = kUrlset;
}
inline void Sitemap::clear_urlset() {
  if (body_case() == kUrlset) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.body_.urlset_;
    }
    clear_has_body();
  }
}
inline ::palm::lemon::v1::Sitemap_UrlSet* Sitemap::release_urlset() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Sitemap.urlset)
  if (body_case() == kUrlset) {
    clear_has_body();
    ::palm::lemon::v1::Sitemap_UrlSet* temp = _impl_.body_.urlset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.body_.urlset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::Sitemap_UrlSet& Sitemap::_internal_urlset() const {
  return body_case() == kUrlset
      ? *_impl_.body_.urlset_
      : reinterpret_cast<::palm::lemon::v1::Sitemap_UrlSet&>(::palm::lemon::v1::_Sitemap_UrlSet_default_instance_);
}
inline const ::palm::lemon::v1::Sitemap_UrlSet& Sitemap::urlset() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.urlset)
  return _internal_urlset();
}
inline ::palm::lemon::v1::Sitemap_UrlSet* Sitemap::unsafe_arena_release_urlset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.Sitemap.urlset)
  if (body_case() == kUrlset) {
    clear_has_body();
    ::palm::lemon::v1::Sitemap_UrlSet* temp = _impl_.body_.urlset_;
    _impl_.body_.urlset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Sitemap::unsafe_arena_set_allocated_urlset(::palm::lemon::v1::Sitemap_UrlSet* urlset) {
  clear_body();
  if (urlset) {
    set_has_urlset();
    _impl_.body_.urlset_ = urlset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.Sitemap.urlset)
}
inline ::palm::lemon::v1::Sitemap_UrlSet* Sitemap::_internal_mutable_urlset() {
  if (body_case() != kUrlset) {
    clear_body();
    set_has_urlset();
    _impl_.body_.urlset_ = CreateMaybeMessage< ::palm::lemon::v1::Sitemap_UrlSet >(GetArenaForAllocation());
  }
  return _impl_.body_.urlset_;
}
inline ::palm::lemon::v1::Sitemap_UrlSet* Sitemap::mutable_urlset() {
  ::palm::lemon::v1::Sitemap_UrlSet* _msg = _internal_mutable_urlset();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.urlset)
  return _msg;
}

// .palm.lemon.v1.Sitemap.Index index = 12;
inline bool Sitemap::has_index() const {
  return body_case() == kIndex;
}
inline bool Sitemap::_internal_has_index() const {
  return body_case() == kIndex;
}
inline void Sitemap::set_has_index() {
  _impl_._oneof_case_[0] = kIndex;
}
inline void Sitemap::clear_index() {
  if (body_case() == kIndex) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.body_.index_;
    }
    clear_has_body();
  }
}
inline ::palm::lemon::v1::Sitemap_Index* Sitemap::release_index() {
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Sitemap.index)
  if (body_case() == kIndex) {
    clear_has_body();
    ::palm::lemon::v1::Sitemap_Index* temp = _impl_.body_.index_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.body_.index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::palm::lemon::v1::Sitemap_Index& Sitemap::_internal_index() const {
  return body_case() == kIndex
      ? *_impl_.body_.index_
      : reinterpret_cast<::palm::lemon::v1::Sitemap_Index&>(::palm::lemon::v1::_Sitemap_Index_default_instance_);
}
inline const ::palm::lemon::v1::Sitemap_Index& Sitemap::index() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Sitemap.index)
  return _internal_index();
}
inline ::palm::lemon::v1::Sitemap_Index* Sitemap::unsafe_arena_release_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:palm.lemon.v1.Sitemap.index)
  if (body_case() == kIndex) {
    clear_has_body();
    ::palm::lemon::v1::Sitemap_Index* temp = _impl_.body_.index_;
    _impl_.body_.index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Sitemap::unsafe_arena_set_allocated_index(::palm::lemon::v1::Sitemap_Index* index) {
  clear_body();
  if (index) {
    set_has_index();
    _impl_.body_.index_ = index;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lemon.v1.Sitemap.index)
}
inline ::palm::lemon::v1::Sitemap_Index* Sitemap::_internal_mutable_index() {
  if (body_case() != kIndex) {
    clear_body();
    set_has_index();
    _impl_.body_.index_ = CreateMaybeMessage< ::palm::lemon::v1::Sitemap_Index >(GetArenaForAllocation());
  }
  return _impl_.body_.index_;
}
inline ::palm::lemon::v1::Sitemap_Index* Sitemap::mutable_index() {
  ::palm::lemon::v1::Sitemap_Index* _msg = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Sitemap.index)
  return _msg;
}

inline bool Sitemap::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void Sitemap::clear_has_body() {
  _impl_._oneof_case_[0] = BODY_NOT_SET;
}
inline Sitemap::BodyCase Sitemap::body_case() const {
  return Sitemap::BodyCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Page

// string slug = 1;
inline void Page::clear_slug() {
  _impl_.slug_.ClearToEmpty();
}
inline const std::string& Page::slug() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Page.slug)
  return _internal_slug();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Page::set_slug(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slug_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Page.slug)
}
inline std::string* Page::mutable_slug() {
  std::string* _s = _internal_mutable_slug();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Page.slug)
  return _s;
}
inline const std::string& Page::_internal_slug() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slug_.Get();
}
inline void Page::_internal_set_slug(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slug_.Set(value, GetArenaForAllocation());
}
inline std::string* Page::_internal_mutable_slug() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.slug_.Mutable( GetArenaForAllocation());
}
inline std::string* Page::release_slug() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Page.slug)
  return _impl_.slug_.Release();
}
inline void Page::set_allocated_slug(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slug_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slug_.IsDefault()) {
          _impl_.slug_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Page.slug)
}

// string title = 2;
inline void Page::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Page::title() const {
  // @@protoc_insertion_point(field_get:palm.lemon.v1.Page.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Page::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lemon.v1.Page.title)
}
inline std::string* Page::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.lemon.v1.Page.title)
  return _s;
}
inline const std::string& Page::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void Page::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Page::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* Page::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:palm.lemon.v1.Page.title)
  return _impl_.title_.Release();
}
inline void Page::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lemon.v1.Page.title)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lemon
}  // namespace palm


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::palm::lemon::v1::Sitemap_Link_ChangeFreq> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::lemon::v1::Sitemap_Link_ChangeFreq>() {
  return ::palm::lemon::v1::Sitemap_Link_ChangeFreq_descriptor();
}
template <>
struct is_proto_enum<::palm::lemon::v1::Theme> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::palm::lemon::v1::Theme>() {
  return ::palm::lemon::v1::Theme_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lemon_2eproto_2epb_2eh
