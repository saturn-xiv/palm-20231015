// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: casbin.proto

#include "casbin.pb.h"
#include "casbin.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace casbin {
namespace v1 {

static const char* Casbin_method_names[] = {
  "/palm.casbin.v1.Casbin/NewEnforcer",
  "/palm.casbin.v1.Casbin/NewAdapter",
  "/palm.casbin.v1.Casbin/Enforce",
  "/palm.casbin.v1.Casbin/LoadPolicy",
  "/palm.casbin.v1.Casbin/SavePolicy",
  "/palm.casbin.v1.Casbin/AddPolicy",
  "/palm.casbin.v1.Casbin/AddNamedPolicy",
  "/palm.casbin.v1.Casbin/RemovePolicy",
  "/palm.casbin.v1.Casbin/RemoveNamedPolicy",
  "/palm.casbin.v1.Casbin/RemoveFilteredPolicy",
  "/palm.casbin.v1.Casbin/RemoveFilteredNamedPolicy",
  "/palm.casbin.v1.Casbin/GetPolicy",
  "/palm.casbin.v1.Casbin/GetNamedPolicy",
  "/palm.casbin.v1.Casbin/GetFilteredPolicy",
  "/palm.casbin.v1.Casbin/GetFilteredNamedPolicy",
  "/palm.casbin.v1.Casbin/AddGroupingPolicy",
  "/palm.casbin.v1.Casbin/AddNamedGroupingPolicy",
  "/palm.casbin.v1.Casbin/RemoveGroupingPolicy",
  "/palm.casbin.v1.Casbin/RemoveNamedGroupingPolicy",
  "/palm.casbin.v1.Casbin/RemoveFilteredGroupingPolicy",
  "/palm.casbin.v1.Casbin/RemoveFilteredNamedGroupingPolicy",
  "/palm.casbin.v1.Casbin/GetGroupingPolicy",
  "/palm.casbin.v1.Casbin/GetNamedGroupingPolicy",
  "/palm.casbin.v1.Casbin/GetFilteredGroupingPolicy",
  "/palm.casbin.v1.Casbin/GetFilteredNamedGroupingPolicy",
  "/palm.casbin.v1.Casbin/GetAllSubjects",
  "/palm.casbin.v1.Casbin/GetAllNamedSubjects",
  "/palm.casbin.v1.Casbin/GetAllObjects",
  "/palm.casbin.v1.Casbin/GetAllNamedObjects",
  "/palm.casbin.v1.Casbin/GetAllActions",
  "/palm.casbin.v1.Casbin/GetAllNamedActions",
  "/palm.casbin.v1.Casbin/GetAllRoles",
  "/palm.casbin.v1.Casbin/GetAllNamedRoles",
  "/palm.casbin.v1.Casbin/HasPolicy",
  "/palm.casbin.v1.Casbin/HasNamedPolicy",
  "/palm.casbin.v1.Casbin/HasGroupingPolicy",
  "/palm.casbin.v1.Casbin/HasNamedGroupingPolicy",
  "/palm.casbin.v1.Casbin/GetDomains",
  "/palm.casbin.v1.Casbin/GetRolesForUser",
  "/palm.casbin.v1.Casbin/GetImplicitRolesForUser",
  "/palm.casbin.v1.Casbin/GetUsersForRole",
  "/palm.casbin.v1.Casbin/HasRoleForUser",
  "/palm.casbin.v1.Casbin/AddRoleForUser",
  "/palm.casbin.v1.Casbin/DeleteRoleForUser",
  "/palm.casbin.v1.Casbin/DeleteRolesForUser",
  "/palm.casbin.v1.Casbin/DeleteUser",
  "/palm.casbin.v1.Casbin/DeleteRole",
  "/palm.casbin.v1.Casbin/GetPermissionsForUser",
  "/palm.casbin.v1.Casbin/GetImplicitPermissionsForUser",
  "/palm.casbin.v1.Casbin/DeletePermission",
  "/palm.casbin.v1.Casbin/AddPermissionForUser",
  "/palm.casbin.v1.Casbin/DeletePermissionForUser",
  "/palm.casbin.v1.Casbin/DeletePermissionsForUser",
  "/palm.casbin.v1.Casbin/HasPermissionForUser",
};

std::unique_ptr< Casbin::Stub> Casbin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Casbin::Stub> stub(new Casbin::Stub(channel, options));
  return stub;
}

Casbin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NewEnforcer_(Casbin_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewAdapter_(Casbin_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enforce_(Casbin_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadPolicy_(Casbin_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SavePolicy_(Casbin_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPolicy_(Casbin_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddNamedPolicy_(Casbin_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePolicy_(Casbin_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveNamedPolicy_(Casbin_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFilteredPolicy_(Casbin_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFilteredNamedPolicy_(Casbin_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPolicy_(Casbin_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNamedPolicy_(Casbin_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFilteredPolicy_(Casbin_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFilteredNamedPolicy_(Casbin_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGroupingPolicy_(Casbin_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddNamedGroupingPolicy_(Casbin_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGroupingPolicy_(Casbin_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveNamedGroupingPolicy_(Casbin_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFilteredGroupingPolicy_(Casbin_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFilteredNamedGroupingPolicy_(Casbin_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGroupingPolicy_(Casbin_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNamedGroupingPolicy_(Casbin_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFilteredGroupingPolicy_(Casbin_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFilteredNamedGroupingPolicy_(Casbin_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllSubjects_(Casbin_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllNamedSubjects_(Casbin_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllObjects_(Casbin_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllNamedObjects_(Casbin_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllActions_(Casbin_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllNamedActions_(Casbin_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllRoles_(Casbin_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllNamedRoles_(Casbin_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasPolicy_(Casbin_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasNamedPolicy_(Casbin_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasGroupingPolicy_(Casbin_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasNamedGroupingPolicy_(Casbin_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDomains_(Casbin_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRolesForUser_(Casbin_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitRolesForUser_(Casbin_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsersForRole_(Casbin_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasRoleForUser_(Casbin_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRoleForUser_(Casbin_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRoleForUser_(Casbin_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRolesForUser_(Casbin_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(Casbin_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRole_(Casbin_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionsForUser_(Casbin_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImplicitPermissionsForUser_(Casbin_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermission_(Casbin_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPermissionForUser_(Casbin_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionForUser_(Casbin_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionsForUser_(Casbin_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasPermissionForUser_(Casbin_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Casbin::Stub::NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::palm::casbin::v1::NewEnforcerReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewEnforcer_, context, request, response);
}

void Casbin::Stub::async::NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewEnforcer_, context, request, response, std::move(f));
}

void Casbin::Stub::async::NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewEnforcer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>* Casbin::Stub::PrepareAsyncNewEnforcerRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::NewEnforcerReply, ::palm::casbin::v1::NewEnforcerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewEnforcer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>* Casbin::Stub::AsyncNewEnforcerRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewEnforcerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::palm::casbin::v1::NewAdapterReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewAdapter_, context, request, response);
}

void Casbin::Stub::async::NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewAdapter_, context, request, response, std::move(f));
}

void Casbin::Stub::async::NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewAdapter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>* Casbin::Stub::PrepareAsyncNewAdapterRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::NewAdapterReply, ::palm::casbin::v1::NewAdapterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewAdapter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>* Casbin::Stub::AsyncNewAdapterRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewAdapterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enforce_, context, request, response);
}

void Casbin::Stub::async::Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enforce_, context, request, response, std::move(f));
}

void Casbin::Stub::async::Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enforce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncEnforceRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::EnforceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enforce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncEnforceRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnforceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::EmptyReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadPolicy_, context, request, response);
}

void Casbin::Stub::async::LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* Casbin::Stub::PrepareAsyncLoadPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::EmptyReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* Casbin::Stub::AsyncLoadPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::EmptyReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SavePolicy_, context, request, response);
}

void Casbin::Stub::async::SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SavePolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SavePolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* Casbin::Stub::PrepareAsyncSavePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::EmptyReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SavePolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* Casbin::Stub::AsyncSavePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSavePolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPolicy_, context, request, response);
}

void Casbin::Stub::async::AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncAddPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncAddPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddNamedPolicy_, context, request, response);
}

void Casbin::Stub::async::AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNamedPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNamedPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncAddNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddNamedPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncAddNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddNamedPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemovePolicy_, context, request, response);
}

void Casbin::Stub::async::RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemovePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemovePolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemovePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveNamedPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveNamedPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveNamedPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveNamedPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveNamedPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFilteredPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFilteredPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFilteredPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFilteredNamedPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredNamedPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredNamedPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFilteredNamedPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFilteredNamedPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPolicy_, context, request, response);
}

void Casbin::Stub::async::GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNamedPolicy_, context, request, response);
}

void Casbin::Stub::async::GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNamedPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNamedPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNamedPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNamedPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFilteredPolicy_, context, request, response);
}

void Casbin::Stub::async::GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFilteredPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFilteredPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFilteredNamedPolicy_, context, request, response);
}

void Casbin::Stub::async::GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredNamedPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredNamedPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFilteredNamedPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFilteredNamedPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncAddGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncAddGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddNamedGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNamedGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddNamedGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncAddNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddNamedGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncAddNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddNamedGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveNamedGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveNamedGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveNamedGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveNamedGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveNamedGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFilteredGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFilteredGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFilteredGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFilteredNamedGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredNamedGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFilteredNamedGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncRemoveFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFilteredNamedGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncRemoveFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFilteredNamedGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNamedGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNamedGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNamedGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNamedGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNamedGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFilteredGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFilteredGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFilteredGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFilteredNamedGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredNamedGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFilteredNamedGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::FilteredPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFilteredNamedGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFilteredNamedGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllSubjects_, context, request, response);
}

void Casbin::Stub::async::GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSubjects_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSubjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllSubjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllSubjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllNamedSubjects_, context, request, response);
}

void Casbin::Stub::async::GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedSubjects_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedSubjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllNamedSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::SimpleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllNamedSubjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllNamedSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllNamedSubjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllObjects_, context, request, response);
}

void Casbin::Stub::async::GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllObjects_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllObjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllNamedObjects_, context, request, response);
}

void Casbin::Stub::async::GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedObjects_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllNamedObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::SimpleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllNamedObjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllNamedObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllNamedObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllActions_, context, request, response);
}

void Casbin::Stub::async::GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllActions_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllActions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllActionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllNamedActions_, context, request, response);
}

void Casbin::Stub::async::GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedActions_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllNamedActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::SimpleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllNamedActions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllNamedActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllNamedActionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllRoles_, context, request, response);
}

void Casbin::Stub::async::GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllRoles_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllRoles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllRoles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllRolesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllNamedRoles_, context, request, response);
}

void Casbin::Stub::async::GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedRoles_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllNamedRoles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetAllNamedRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::SimpleGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllNamedRoles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetAllNamedRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllNamedRolesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasPolicy_, context, request, response);
}

void Casbin::Stub::async::HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncHasPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncHasPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasNamedPolicy_, context, request, response);
}

void Casbin::Stub::async::HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasNamedPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasNamedPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncHasNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasNamedPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncHasNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasNamedPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncHasGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncHasGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasNamedGroupingPolicy_, context, request, response);
}

void Casbin::Stub::async::HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasNamedGroupingPolicy_, context, request, response, std::move(f));
}

void Casbin::Stub::async::HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasNamedGroupingPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncHasNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasNamedGroupingPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncHasNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasNamedGroupingPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetDomains(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDomains_, context, request, response);
}

void Casbin::Stub::async::GetDomains(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDomains_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetDomains(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDomains_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetDomainsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDomains_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetDomainsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDomainsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRolesForUser_, context, request, response);
}

void Casbin::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitRolesForUser_, context, request, response);
}

void Casbin::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUsersForRole_, context, request, response);
}

void Casbin::Stub::async::GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsersForRole_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsersForRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::ArrayReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUsersForRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* Casbin::Stub::AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUsersForRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasRoleForUser_, context, request, response);
}

void Casbin::Stub::async::HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasRoleForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasRoleForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncHasRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasRoleForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncHasRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasRoleForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRoleForUser_, context, request, response);
}

void Casbin::Stub::async::AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRoleForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRoleForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncAddRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddRoleForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncAddRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRoleForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRoleForUser_, context, request, response);
}

void Casbin::Stub::async::DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoleForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoleForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncDeleteRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRoleForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncDeleteRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoleForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRolesForUser_, context, request, response);
}

void Casbin::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRolesForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRolesForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRolesForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void Casbin::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::EmptyReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void Casbin::Stub::async::DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* Casbin::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::EmptyReply, ::palm::casbin::v1::UserRoleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRole_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* Casbin::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRoleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionsForUser_, context, request, response);
}

void Casbin::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::Array2DReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImplicitPermissionsForUser_, context, request, response);
}

void Casbin::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImplicitPermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::Array2DReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImplicitPermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* Casbin::Stub::AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermission_, context, request, response);
}

void Casbin::Stub::async::DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermission_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPermissionForUser_, context, request, response);
}

void Casbin::Stub::async::AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPermissionForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncAddPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPermissionForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncAddPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPermissionForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionForUser_, context, request, response);
}

void Casbin::Stub::async::DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncDeletePermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncDeletePermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionsForUser_, context, request, response);
}

void Casbin::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionsForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionsForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionsForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Casbin::Stub::HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HasPermissionForUser_, context, request, response);
}

void Casbin::Stub::async::HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasPermissionForUser_, context, request, response, std::move(f));
}

void Casbin::Stub::async::HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HasPermissionForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::PrepareAsyncHasPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::casbin::v1::BoolReply, ::palm::casbin::v1::PermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HasPermissionForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* Casbin::Stub::AsyncHasPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHasPermissionForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

Casbin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::NewEnforcerRequest* req,
             ::palm::casbin::v1::NewEnforcerReply* resp) {
               return service->NewEnforcer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::NewAdapterRequest* req,
             ::palm::casbin::v1::NewAdapterReply* resp) {
               return service->NewAdapter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EnforceRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->Enforce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::EmptyReply* resp) {
               return service->LoadPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::EmptyReply* resp) {
               return service->SavePolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->AddPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->AddNamedPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemovePolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveNamedPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveFilteredPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveFilteredNamedPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetNamedPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetFilteredPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetFilteredNamedPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->AddGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->AddNamedGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveNamedGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveFilteredGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->RemoveFilteredNamedGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetNamedGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetFilteredGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::FilteredPolicyRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetFilteredNamedGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllSubjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::SimpleGetRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllNamedSubjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllObjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::SimpleGetRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllNamedObjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllActions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::SimpleGetRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllNamedActions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::EmptyRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllRoles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::SimpleGetRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetAllNamedRoles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->HasPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->HasNamedPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->HasGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PolicyRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->HasNamedGroupingPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetDomains(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetImplicitRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::ArrayReply* resp) {
               return service->GetUsersForRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->HasRoleForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->AddRoleForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->DeleteRoleForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->DeleteRolesForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->DeleteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::UserRoleRequest* req,
             ::palm::casbin::v1::EmptyReply* resp) {
               return service->DeleteRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::Array2DReply* resp) {
               return service->GetImplicitPermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->DeletePermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->AddPermissionForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->DeletePermissionForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->DeletePermissionsForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Casbin_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Casbin::Service, ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Casbin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::casbin::v1::PermissionRequest* req,
             ::palm::casbin::v1::BoolReply* resp) {
               return service->HasPermissionForUser(ctx, req, resp);
             }, this)));
}

Casbin::Service::~Service() {
}

::grpc::Status Casbin::Service::NewEnforcer(::grpc::ServerContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::NewAdapter(::grpc::ServerContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::Enforce(::grpc::ServerContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::LoadPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::SavePolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::AddPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::AddNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemovePolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveFilteredPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveFilteredNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetFilteredPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetFilteredNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::AddGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::AddNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveFilteredGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetFilteredGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetFilteredNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllSubjects(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllNamedSubjects(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllObjects(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllNamedObjects(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllActions(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllNamedActions(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllRoles(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetAllNamedRoles(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::HasPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::HasNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::HasGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::HasNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetDomains(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetRolesForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetUsersForRole(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::HasRoleForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::AddRoleForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeleteRoleForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeleteUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeleteRole(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeletePermission(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::AddPermissionForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeletePermissionForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::DeletePermissionsForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Casbin::Service::HasPermissionForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace casbin
}  // namespace v1

