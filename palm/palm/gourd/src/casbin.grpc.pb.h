// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: casbin.proto
// Original file comments:
// f2292d7:
// https://github.com/casbin-rs/casbin-grpc/blob/main/api/protos/casbin.proto
#ifndef GRPC_casbin_2eproto__INCLUDED
#define GRPC_casbin_2eproto__INCLUDED

#include "casbin.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace palm {
namespace casbin {
namespace v1 {

// The Casbin service definition.
class Casbin final {
 public:
  static constexpr char const* service_full_name() {
    return "palm.casbin.v1.Casbin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::palm::casbin::v1::NewEnforcerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewEnforcerReply>> AsyncNewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewEnforcerReply>>(AsyncNewEnforcerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewEnforcerReply>> PrepareAsyncNewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewEnforcerReply>>(PrepareAsyncNewEnforcerRaw(context, request, cq));
    }
    virtual ::grpc::Status NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::palm::casbin::v1::NewAdapterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewAdapterReply>> AsyncNewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewAdapterReply>>(AsyncNewAdapterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewAdapterReply>> PrepareAsyncNewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewAdapterReply>>(PrepareAsyncNewAdapterRaw(context, request, cq));
    }
    virtual ::grpc::Status Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncEnforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncEnforceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncEnforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncEnforceRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::EmptyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>> AsyncLoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>>(AsyncLoadPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>> PrepareAsyncLoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>>(PrepareAsyncLoadPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::EmptyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>> AsyncSavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>>(AsyncSavePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>> PrepareAsyncSavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>>(PrepareAsyncSavePolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncAddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncAddPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncAddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncAddNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddNamedPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemovePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemovePolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveNamedPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredNamedPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetNamedPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredNamedPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncAddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncAddGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncAddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncAddNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddNamedGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveNamedGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetNamedGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllSubjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllSubjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedSubjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedSubjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllObjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllObjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedObjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedObjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllActionsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedActionsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllRolesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedRolesRaw(context, request, cq));
    }
    virtual ::grpc::Status HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncHasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncHasPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncHasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncHasNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasNamedPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncHasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncHasGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncHasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncHasNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasNamedGroupingPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> AsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(AsyncGetUsersForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetUsersForRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncHasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncHasRoleForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasRoleForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncAddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncAddRoleForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddRoleForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncDeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncDeleteRoleForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeleteRoleForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncDeleteRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeleteRolesForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncDeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::EmptyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>> AsyncDeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetPermissionsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::Array2DReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> AsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(AsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncDeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncDeletePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeletePermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncAddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncAddPermissionForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddPermissionForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncDeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncDeletePermissionForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeletePermissionForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncDeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncDeletePermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeletePermissionsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> AsyncHasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(AsyncHasPermissionForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasPermissionForUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewEnforcerReply>* AsyncNewEnforcerRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewEnforcerReply>* PrepareAsyncNewEnforcerRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewAdapterReply>* AsyncNewAdapterRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::NewAdapterReply>* PrepareAsyncNewAdapterRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncEnforceRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncEnforceRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>* AsyncLoadPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>* PrepareAsyncLoadPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>* AsyncSavePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>* PrepareAsyncSavePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncAddPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncAddNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemovePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemovePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncAddGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncAddNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncHasPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncHasNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncHasGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncHasNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncHasRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncAddRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncDeleteRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeleteRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::EmptyReply>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncAddPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncDeletePermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeletePermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* AsyncHasPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::palm::casbin::v1::NewEnforcerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>> AsyncNewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>>(AsyncNewEnforcerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>> PrepareAsyncNewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>>(PrepareAsyncNewEnforcerRaw(context, request, cq));
    }
    ::grpc::Status NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::palm::casbin::v1::NewAdapterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>> AsyncNewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>>(AsyncNewAdapterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>> PrepareAsyncNewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>>(PrepareAsyncNewAdapterRaw(context, request, cq));
    }
    ::grpc::Status Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncEnforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncEnforceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncEnforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncEnforceRaw(context, request, cq));
    }
    ::grpc::Status LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::EmptyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>> AsyncLoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>>(AsyncLoadPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>> PrepareAsyncLoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>>(PrepareAsyncLoadPolicyRaw(context, request, cq));
    }
    ::grpc::Status SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::EmptyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>> AsyncSavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>>(AsyncSavePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>> PrepareAsyncSavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>>(PrepareAsyncSavePolicyRaw(context, request, cq));
    }
    ::grpc::Status AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncAddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncAddPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddPolicyRaw(context, request, cq));
    }
    ::grpc::Status AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncAddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncAddNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddNamedPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemovePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemovePolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveNamedPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredNamedPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetNamedPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredNamedPolicyRaw(context, request, cq));
    }
    ::grpc::Status AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncAddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncAddGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncAddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncAddNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddNamedGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveNamedGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncRemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncRemoveFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncRemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncRemoveFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetNamedGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetFilteredNamedGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllSubjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllSubjectsRaw(context, request, cq));
    }
    ::grpc::Status GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedSubjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedSubjectsRaw(context, request, cq));
    }
    ::grpc::Status GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllObjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllObjectsRaw(context, request, cq));
    }
    ::grpc::Status GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedObjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedObjectsRaw(context, request, cq));
    }
    ::grpc::Status GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllActionsRaw(context, request, cq));
    }
    ::grpc::Status GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedActionsRaw(context, request, cq));
    }
    ::grpc::Status GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllRolesRaw(context, request, cq));
    }
    ::grpc::Status GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetAllNamedRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetAllNamedRolesRaw(context, request, cq));
    }
    ::grpc::Status HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncHasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncHasPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasPolicyRaw(context, request, cq));
    }
    ::grpc::Status HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncHasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncHasNamedPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasNamedPolicyRaw(context, request, cq));
    }
    ::grpc::Status HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncHasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncHasGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncHasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncHasNamedGroupingPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasNamedGroupingPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetImplicitRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::ArrayReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> AsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(AsyncGetUsersForRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>> PrepareAsyncGetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>>(PrepareAsyncGetUsersForRoleRaw(context, request, cq));
    }
    ::grpc::Status HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncHasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncHasRoleForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasRoleForUserRaw(context, request, cq));
    }
    ::grpc::Status AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncAddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncAddRoleForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddRoleForUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncDeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncDeleteRoleForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeleteRoleForUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncDeleteRolesForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeleteRolesForUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncDeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::palm::casbin::v1::EmptyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>> AsyncDeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetPermissionsForUserRaw(context, request, cq));
    }
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::Array2DReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> AsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(AsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>> PrepareAsyncGetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>>(PrepareAsyncGetImplicitPermissionsForUserRaw(context, request, cq));
    }
    ::grpc::Status DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncDeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncDeletePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeletePermissionRaw(context, request, cq));
    }
    ::grpc::Status AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncAddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncAddPermissionForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncAddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncAddPermissionForUserRaw(context, request, cq));
    }
    ::grpc::Status DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncDeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncDeletePermissionForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeletePermissionForUserRaw(context, request, cq));
    }
    ::grpc::Status DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncDeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncDeletePermissionsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncDeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncDeletePermissionsForUserRaw(context, request, cq));
    }
    ::grpc::Status HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::palm::casbin::v1::BoolReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> AsyncHasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(AsyncHasPermissionForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>> PrepareAsyncHasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>>(PrepareAsyncHasPermissionForUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response, std::function<void(::grpc::Status)>) override;
      void NewEnforcer(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response, std::function<void(::grpc::Status)>) override;
      void NewAdapter(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void Enforce(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)>) override;
      void LoadPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)>) override;
      void SavePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void AddPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void AddNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemovePolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetFilteredPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetFilteredNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void AddGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void AddNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetFilteredGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetFilteredNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllNamedSubjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllNamedObjects(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllActions(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllNamedActions(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllNamedRoles(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void HasPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void HasNamedPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void HasGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void HasNamedGroupingPolicy(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, std::function<void(::grpc::Status)>) override;
      void GetUsersForRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void HasRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void AddRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteRoleForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteRolesForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteUser(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteRole(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, std::function<void(::grpc::Status)>) override;
      void GetImplicitPermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void DeletePermission(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void AddPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void DeletePermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void DeletePermissionsForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, std::function<void(::grpc::Status)>) override;
      void HasPermissionForUser(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>* AsyncNewEnforcerRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewEnforcerReply>* PrepareAsyncNewEnforcerRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewEnforcerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>* AsyncNewAdapterRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::NewAdapterReply>* PrepareAsyncNewAdapterRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::NewAdapterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncEnforceRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncEnforceRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EnforceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* AsyncLoadPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* PrepareAsyncLoadPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* AsyncSavePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* PrepareAsyncSavePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncAddPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncAddNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemovePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemovePolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncAddGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncAddNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncRemoveFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncRemoveFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetFilteredNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::FilteredPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedSubjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedObjectsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedActionsRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetAllNamedRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetAllNamedRolesRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::SimpleGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncHasPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncHasNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasNamedPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncHasGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncHasNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasNamedGroupingPolicyRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetImplicitRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* AsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::ArrayReply>* PrepareAsyncGetUsersForRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncHasRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncAddRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncDeleteRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeleteRoleForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeleteRolesForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::EmptyReply>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::UserRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* AsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::Array2DReply>* PrepareAsyncGetImplicitPermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeletePermissionRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncAddPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncAddPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncDeletePermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeletePermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncDeletePermissionsForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* AsyncHasPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::palm::casbin::v1::BoolReply>* PrepareAsyncHasPermissionForUserRaw(::grpc::ClientContext* context, const ::palm::casbin::v1::PermissionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewEnforcer_;
    const ::grpc::internal::RpcMethod rpcmethod_NewAdapter_;
    const ::grpc::internal::RpcMethod rpcmethod_Enforce_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SavePolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNamedPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveNamedPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveFilteredPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveFilteredNamedPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNamedPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFilteredPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFilteredNamedPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_AddGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNamedGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveNamedGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveFilteredGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveFilteredNamedGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNamedGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFilteredGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFilteredNamedGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllSubjects_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllNamedSubjects_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllObjects_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllNamedObjects_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllActions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllNamedActions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllNamedRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_HasPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_HasNamedPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_HasGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_HasNamedGroupingPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsersForRole_;
    const ::grpc::internal::RpcMethod rpcmethod_HasRoleForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRoleForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRoleForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRolesForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissionsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImplicitPermissionsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPermissionForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermissionForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermissionsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_HasPermissionForUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NewEnforcer(::grpc::ServerContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response);
    virtual ::grpc::Status NewAdapter(::grpc::ServerContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response);
    virtual ::grpc::Status Enforce(::grpc::ServerContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status LoadPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response);
    virtual ::grpc::Status SavePolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response);
    virtual ::grpc::Status AddPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status AddNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemovePolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status GetPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetAllSubjects(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllObjects(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllActions(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllNamedActions(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllRoles(::grpc::ServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status HasPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status HasNamedPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status GetRolesForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status GetUsersForRole(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response);
    virtual ::grpc::Status HasRoleForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status AddRoleForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status DeleteUser(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response);
    virtual ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response);
    virtual ::grpc::Status DeletePermission(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status AddPermissionForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response);
    virtual ::grpc::Status HasPermissionForUser(::grpc::ServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewEnforcer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewEnforcer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewEnforcer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewEnforcer(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewEnforcer(::grpc::ServerContext* context, ::palm::casbin::v1::NewEnforcerRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::NewEnforcerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewAdapter() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NewAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAdapter(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewAdapter(::grpc::ServerContext* context, ::palm::casbin::v1::NewAdapterRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::NewAdapterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Enforce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Enforce() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Enforce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enforce(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnforce(::grpc::ServerContext* context, ::palm::casbin::v1::EnforceRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadPolicy() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::EmptyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SavePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SavePolicy() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SavePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSavePolicy(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::EmptyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPolicy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddNamedPolicy() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AddNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNamedPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemovePolicy() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RemovePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveNamedPolicy() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RemoveNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNamedPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveFilteredPolicy() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RemoveFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_RemoveFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredNamedPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPolicy() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNamedPolicy() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNamedPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFilteredPolicy() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredNamedPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_AddGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_AddNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNamedGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_RemoveGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_RemoveNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNamedGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_RemoveFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_RemoveFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNamedGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredNamedGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::FilteredPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllSubjects() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_GetAllSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSubjects(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllNamedSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllNamedSubjects() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetAllNamedSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedSubjects(::grpc::ServerContext* context, ::palm::casbin::v1::SimpleGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllObjects() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetAllObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllObjects(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllNamedObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllNamedObjects() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetAllNamedObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedObjects(::grpc::ServerContext* context, ::palm::casbin::v1::SimpleGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllActions() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllActions(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllNamedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllNamedActions() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_GetAllNamedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedActions(::grpc::ServerContext* context, ::palm::casbin::v1::SimpleGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRoles(::grpc::ServerContext* context, ::palm::casbin::v1::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllNamedRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllNamedRoles() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetAllNamedRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedRoles(::grpc::ServerContext* context, ::palm::casbin::v1::SimpleGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasPolicy() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_HasPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasNamedPolicy() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_HasNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasNamedPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_HasGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_HasNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasNamedGroupingPolicy(::grpc::ServerContext* context, ::palm::casbin::v1::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesForUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitRolesForUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsersForRole(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::ArrayReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasRoleForUser() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_HasRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasRoleForUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRoleForUser() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_AddRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoleForUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRoleForUser() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_DeleteRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRoleForUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolesForUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUser() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRole() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::palm::casbin::v1::UserRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::EmptyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissionsForUser(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitPermissionsForUser(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::Array2DReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePermission() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermission(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPermissionForUser() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_AddPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPermissionForUser(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePermissionForUser() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_DeletePermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissionForUser(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePermissionsForUser() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_DeletePermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissionsForUser(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasPermissionForUser() {
      ::grpc::Service::MarkMethodAsync(52);
    }
    ~WithAsyncMethod_HasPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasPermissionForUser(::grpc::ServerContext* context, ::palm::casbin::v1::PermissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::palm::casbin::v1::BoolReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewEnforcer<WithAsyncMethod_NewAdapter<WithAsyncMethod_Enforce<WithAsyncMethod_LoadPolicy<WithAsyncMethod_SavePolicy<WithAsyncMethod_AddPolicy<WithAsyncMethod_AddNamedPolicy<WithAsyncMethod_RemovePolicy<WithAsyncMethod_RemoveNamedPolicy<WithAsyncMethod_RemoveFilteredPolicy<WithAsyncMethod_RemoveFilteredNamedPolicy<WithAsyncMethod_GetPolicy<WithAsyncMethod_GetNamedPolicy<WithAsyncMethod_GetFilteredPolicy<WithAsyncMethod_GetFilteredNamedPolicy<WithAsyncMethod_AddGroupingPolicy<WithAsyncMethod_AddNamedGroupingPolicy<WithAsyncMethod_RemoveGroupingPolicy<WithAsyncMethod_RemoveNamedGroupingPolicy<WithAsyncMethod_RemoveFilteredGroupingPolicy<WithAsyncMethod_RemoveFilteredNamedGroupingPolicy<WithAsyncMethod_GetGroupingPolicy<WithAsyncMethod_GetNamedGroupingPolicy<WithAsyncMethod_GetFilteredGroupingPolicy<WithAsyncMethod_GetFilteredNamedGroupingPolicy<WithAsyncMethod_GetAllSubjects<WithAsyncMethod_GetAllNamedSubjects<WithAsyncMethod_GetAllObjects<WithAsyncMethod_GetAllNamedObjects<WithAsyncMethod_GetAllActions<WithAsyncMethod_GetAllNamedActions<WithAsyncMethod_GetAllRoles<WithAsyncMethod_GetAllNamedRoles<WithAsyncMethod_HasPolicy<WithAsyncMethod_HasNamedPolicy<WithAsyncMethod_HasGroupingPolicy<WithAsyncMethod_HasNamedGroupingPolicy<WithAsyncMethod_GetRolesForUser<WithAsyncMethod_GetImplicitRolesForUser<WithAsyncMethod_GetUsersForRole<WithAsyncMethod_HasRoleForUser<WithAsyncMethod_AddRoleForUser<WithAsyncMethod_DeleteRoleForUser<WithAsyncMethod_DeleteRolesForUser<WithAsyncMethod_DeleteUser<WithAsyncMethod_DeleteRole<WithAsyncMethod_GetPermissionsForUser<WithAsyncMethod_GetImplicitPermissionsForUser<WithAsyncMethod_DeletePermission<WithAsyncMethod_AddPermissionForUser<WithAsyncMethod_DeletePermissionForUser<WithAsyncMethod_DeletePermissionsForUser<WithAsyncMethod_HasPermissionForUser<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NewEnforcer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewEnforcer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::NewEnforcerRequest* request, ::palm::casbin::v1::NewEnforcerReply* response) { return this->NewEnforcer(context, request, response); }));}
    void SetMessageAllocatorFor_NewEnforcer(
        ::grpc::MessageAllocator< ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewEnforcer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewEnforcer(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewEnforcer(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewAdapter() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::NewAdapterRequest* request, ::palm::casbin::v1::NewAdapterReply* response) { return this->NewAdapter(context, request, response); }));}
    void SetMessageAllocatorFor_NewAdapter(
        ::grpc::MessageAllocator< ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAdapter(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewAdapter(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Enforce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Enforce() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EnforceRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->Enforce(context, request, response); }));}
    void SetMessageAllocatorFor_Enforce(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Enforce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enforce(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Enforce(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadPolicy() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response) { return this->LoadPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_LoadPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SavePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SavePolicy() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::EmptyReply* response) { return this->SavePolicy(context, request, response); }));}
    void SetMessageAllocatorFor_SavePolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SavePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SavePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddPolicy() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->AddPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_AddPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddNamedPolicy() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->AddNamedPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_AddNamedPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemovePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemovePolicy() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemovePolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemovePolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemovePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemovePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveNamedPolicy() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveNamedPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveNamedPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveFilteredPolicy() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveFilteredPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveFilteredPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveFilteredNamedPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveFilteredNamedPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPolicy() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNamedPolicy() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetNamedPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetNamedPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFilteredPolicy() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetFilteredPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetFilteredPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetFilteredNamedPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetFilteredNamedPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->AddGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_AddGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->AddNamedGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_AddNamedGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveNamedGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveNamedGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveFilteredGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveFilteredGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->RemoveFilteredNamedGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveFilteredNamedGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetNamedGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetNamedGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetFilteredGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetFilteredGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::FilteredPolicyRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetFilteredNamedGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_GetFilteredNamedGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllSubjects() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllSubjects(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllSubjects(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSubjects(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllNamedSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllNamedSubjects() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllNamedSubjects(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllNamedSubjects(
        ::grpc::MessageAllocator< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllNamedSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedSubjects(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllObjects() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllObjects(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllObjects(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllNamedObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllNamedObjects() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllNamedObjects(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllNamedObjects(
        ::grpc::MessageAllocator< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllNamedObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllActions() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllActions(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllActions(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllActions(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllNamedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllNamedActions() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllNamedActions(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllNamedActions(
        ::grpc::MessageAllocator< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllNamedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedActions(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::EmptyRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllRoles(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllRoles(
        ::grpc::MessageAllocator< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRoles(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllNamedRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllNamedRoles() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::SimpleGetRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetAllNamedRoles(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllNamedRoles(
        ::grpc::MessageAllocator< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllNamedRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedRoles(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasPolicy() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->HasPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_HasPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasNamedPolicy() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->HasNamedPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_HasNamedPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->HasGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_HasGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PolicyRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->HasNamedGroupingPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_HasNamedGroupingPolicy(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetRolesForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetImplicitRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitRolesForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::ArrayReply* response) { return this->GetUsersForRole(context, request, response); }));}
    void SetMessageAllocatorFor_GetUsersForRole(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsersForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasRoleForUser() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->HasRoleForUser(context, request, response); }));}
    void SetMessageAllocatorFor_HasRoleForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasRoleForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddRoleForUser() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->AddRoleForUser(context, request, response); }));}
    void SetMessageAllocatorFor_AddRoleForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddRoleForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRoleForUser() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->DeleteRoleForUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRoleForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRoleForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->DeleteRolesForUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRolesForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->DeleteUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRole() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::UserRoleRequest* request, ::palm::casbin::v1::EmptyReply* response) { return this->DeleteRole(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRole(
        ::grpc::MessageAllocator< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetPermissionsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissionsForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::Array2DReply* response) { return this->GetImplicitPermissionsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetImplicitPermissionsForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePermission() {
      ::grpc::Service::MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->DeletePermission(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePermission(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddPermissionForUser() {
      ::grpc::Service::MarkMethodCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->AddPermissionForUser(context, request, response); }));}
    void SetMessageAllocatorFor_AddPermissionForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPermissionForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePermissionForUser() {
      ::grpc::Service::MarkMethodCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->DeletePermissionForUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePermissionForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermissionForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePermissionsForUser() {
      ::grpc::Service::MarkMethodCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->DeletePermissionsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePermissionsForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HasPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HasPermissionForUser() {
      ::grpc::Service::MarkMethodCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::palm::casbin::v1::PermissionRequest* request, ::palm::casbin::v1::BoolReply* response) { return this->HasPermissionForUser(context, request, response); }));}
    void SetMessageAllocatorFor_HasPermissionForUser(
        ::grpc::MessageAllocator< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(52);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HasPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasPermissionForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NewEnforcer<WithCallbackMethod_NewAdapter<WithCallbackMethod_Enforce<WithCallbackMethod_LoadPolicy<WithCallbackMethod_SavePolicy<WithCallbackMethod_AddPolicy<WithCallbackMethod_AddNamedPolicy<WithCallbackMethod_RemovePolicy<WithCallbackMethod_RemoveNamedPolicy<WithCallbackMethod_RemoveFilteredPolicy<WithCallbackMethod_RemoveFilteredNamedPolicy<WithCallbackMethod_GetPolicy<WithCallbackMethod_GetNamedPolicy<WithCallbackMethod_GetFilteredPolicy<WithCallbackMethod_GetFilteredNamedPolicy<WithCallbackMethod_AddGroupingPolicy<WithCallbackMethod_AddNamedGroupingPolicy<WithCallbackMethod_RemoveGroupingPolicy<WithCallbackMethod_RemoveNamedGroupingPolicy<WithCallbackMethod_RemoveFilteredGroupingPolicy<WithCallbackMethod_RemoveFilteredNamedGroupingPolicy<WithCallbackMethod_GetGroupingPolicy<WithCallbackMethod_GetNamedGroupingPolicy<WithCallbackMethod_GetFilteredGroupingPolicy<WithCallbackMethod_GetFilteredNamedGroupingPolicy<WithCallbackMethod_GetAllSubjects<WithCallbackMethod_GetAllNamedSubjects<WithCallbackMethod_GetAllObjects<WithCallbackMethod_GetAllNamedObjects<WithCallbackMethod_GetAllActions<WithCallbackMethod_GetAllNamedActions<WithCallbackMethod_GetAllRoles<WithCallbackMethod_GetAllNamedRoles<WithCallbackMethod_HasPolicy<WithCallbackMethod_HasNamedPolicy<WithCallbackMethod_HasGroupingPolicy<WithCallbackMethod_HasNamedGroupingPolicy<WithCallbackMethod_GetRolesForUser<WithCallbackMethod_GetImplicitRolesForUser<WithCallbackMethod_GetUsersForRole<WithCallbackMethod_HasRoleForUser<WithCallbackMethod_AddRoleForUser<WithCallbackMethod_DeleteRoleForUser<WithCallbackMethod_DeleteRolesForUser<WithCallbackMethod_DeleteUser<WithCallbackMethod_DeleteRole<WithCallbackMethod_GetPermissionsForUser<WithCallbackMethod_GetImplicitPermissionsForUser<WithCallbackMethod_DeletePermission<WithCallbackMethod_AddPermissionForUser<WithCallbackMethod_DeletePermissionForUser<WithCallbackMethod_DeletePermissionsForUser<WithCallbackMethod_HasPermissionForUser<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NewEnforcer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewEnforcer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewEnforcer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewEnforcer(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewAdapter() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NewAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAdapter(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Enforce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Enforce() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Enforce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enforce(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadPolicy() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SavePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SavePolicy() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SavePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPolicy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddNamedPolicy() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AddNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemovePolicy() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RemovePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveNamedPolicy() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RemoveNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveFilteredPolicy() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RemoveFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_RemoveFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPolicy() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNamedPolicy() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFilteredPolicy() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_AddGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_AddNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_RemoveGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_RemoveNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_RemoveFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_RemoveFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllSubjects() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_GetAllSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllNamedSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllNamedSubjects() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetAllNamedSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllObjects() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetAllObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllNamedObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllNamedObjects() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetAllNamedObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllActions() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllNamedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllNamedActions() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_GetAllNamedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllNamedRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllNamedRoles() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetAllNamedRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasPolicy() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_HasPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasNamedPolicy() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_HasNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_HasGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_HasNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasRoleForUser() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_HasRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRoleForUser() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_AddRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRoleForUser() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_DeleteRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUser() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRole() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePermission() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPermissionForUser() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_AddPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePermissionForUser() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_DeletePermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePermissionsForUser() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_DeletePermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasPermissionForUser() {
      ::grpc::Service::MarkMethodGeneric(52);
    }
    ~WithGenericMethod_HasPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewEnforcer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewEnforcer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewEnforcer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewEnforcer(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewEnforcer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewAdapter() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NewAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAdapter(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewAdapter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Enforce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Enforce() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Enforce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enforce(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnforce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadPolicy() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LoadPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SavePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SavePolicy() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SavePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSavePolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPolicy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddNamedPolicy() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_AddNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNamedPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemovePolicy() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RemovePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveNamedPolicy() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RemoveNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNamedPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveFilteredPolicy() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RemoveFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_RemoveFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredNamedPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPolicy() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNamedPolicy() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNamedPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFilteredPolicy() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredNamedPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_AddGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_AddNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_RemoveGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_RemoveNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_RemoveFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_RemoveFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilteredNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllSubjects() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_GetAllSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSubjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllNamedSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllNamedSubjects() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetAllNamedSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedSubjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllObjects() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetAllObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllObjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllNamedObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllNamedObjects() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetAllNamedObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedObjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllActions() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllActions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllNamedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllNamedActions() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_GetAllNamedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedActions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRoles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllNamedRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllNamedRoles() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_GetAllNamedRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNamedRoles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasPolicy() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_HasPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasNamedPolicy() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_HasNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasNamedPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_HasGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_HasNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsersForRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasRoleForUser() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_HasRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasRoleForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRoleForUser() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_AddRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoleForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRoleForUser() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_DeleteRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRoleForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolesForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissionsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImplicitPermissionsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePermission() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPermissionForUser() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_AddPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPermissionForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePermissionForUser() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_DeletePermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissionForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePermissionsForUser() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_DeletePermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissionsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasPermissionForUser() {
      ::grpc::Service::MarkMethodRaw(52);
    }
    ~WithRawMethod_HasPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasPermissionForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewEnforcer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewEnforcer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewEnforcer(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewEnforcer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewEnforcer(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewEnforcer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewAdapter() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewAdapter(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAdapter(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewAdapter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Enforce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Enforce() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Enforce(context, request, response); }));
    }
    ~WithRawCallbackMethod_Enforce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enforce(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Enforce(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadPolicy() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SavePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SavePolicy() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SavePolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_SavePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SavePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SavePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddPolicy() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddNamedPolicy() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddNamedPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemovePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemovePolicy() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemovePolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemovePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemovePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveNamedPolicy() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveNamedPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveFilteredPolicy() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveFilteredPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveFilteredNamedPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPolicy() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNamedPolicy() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNamedPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFilteredPolicy() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFilteredPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFilteredNamedPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddNamedGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveNamedGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveFilteredGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveFilteredNamedGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFilteredNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNamedGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFilteredGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFilteredNamedGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilteredNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllSubjects() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllSubjects(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSubjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllNamedSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllNamedSubjects() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllNamedSubjects(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllNamedSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedSubjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllObjects() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllObjects(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllNamedObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllNamedObjects() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllNamedObjects(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllNamedObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllActions() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllActions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllActions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllNamedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllNamedActions() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllNamedActions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllNamedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedActions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllRoles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRoles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllNamedRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllNamedRoles() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllNamedRoles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllNamedRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllNamedRoles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasPolicy() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasNamedPolicy() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasNamedPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasNamedPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasNamedGroupingPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasNamedGroupingPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUsersForRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsersForRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasRoleForUser() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasRoleForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasRoleForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddRoleForUser() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRoleForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddRoleForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRoleForUser() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRoleForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRoleForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRolesForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRolesForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRole(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissionsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImplicitPermissionsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImplicitPermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePermission() {
      ::grpc::Service::MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePermission(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddPermissionForUser() {
      ::grpc::Service::MarkMethodRawCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPermissionForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPermissionForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePermissionForUser() {
      ::grpc::Service::MarkMethodRawCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePermissionForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermissionForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePermissionsForUser() {
      ::grpc::Service::MarkMethodRawCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePermissionsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePermissionsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HasPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HasPermissionForUser() {
      ::grpc::Service::MarkMethodRawCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasPermissionForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_HasPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HasPermissionForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewEnforcer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewEnforcer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::NewEnforcerRequest, ::palm::casbin::v1::NewEnforcerReply>* streamer) {
                       return this->StreamedNewEnforcer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewEnforcer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewEnforcer(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewEnforcerRequest* /*request*/, ::palm::casbin::v1::NewEnforcerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewEnforcer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::NewEnforcerRequest,::palm::casbin::v1::NewEnforcerReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewAdapter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewAdapter() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::NewAdapterRequest, ::palm::casbin::v1::NewAdapterReply>* streamer) {
                       return this->StreamedNewAdapter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewAdapter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewAdapter(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::NewAdapterRequest* /*request*/, ::palm::casbin::v1::NewAdapterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewAdapter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::NewAdapterRequest,::palm::casbin::v1::NewAdapterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Enforce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Enforce() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EnforceRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedEnforce(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Enforce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Enforce(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EnforceRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnforce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EnforceRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadPolicy() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>* streamer) {
                       return this->StreamedLoadPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::EmptyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SavePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SavePolicy() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::EmptyReply>* streamer) {
                       return this->StreamedSavePolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SavePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SavePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSavePolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::EmptyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPolicy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedAddPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddNamedPolicy() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedAddNamedPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemovePolicy() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemovePolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemovePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveNamedPolicy() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveNamedPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveNamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveFilteredPolicy() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveFilteredPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveFilteredPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveFilteredNamedPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveFilteredNamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPolicy() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNamedPolicy() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetNamedPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFilteredPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFilteredPolicy() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetFilteredPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFilteredPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFilteredPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFilteredPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFilteredNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFilteredNamedPolicy() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetFilteredNamedPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFilteredNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFilteredNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFilteredNamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedAddGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedAddNamedGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveNamedGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveFilteredGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveFilteredGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedRemoveFilteredNamedGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveFilteredNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetNamedGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFilteredGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFilteredGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetFilteredGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFilteredGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFilteredGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFilteredGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFilteredNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFilteredNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::FilteredPolicyRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetFilteredNamedGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFilteredNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFilteredNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::FilteredPolicyRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFilteredNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::FilteredPolicyRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllSubjects() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllSubjects(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllSubjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllNamedSubjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllNamedSubjects() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllNamedSubjects(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllNamedSubjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllNamedSubjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllNamedSubjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::SimpleGetRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllObjects() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllObjects(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllObjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllNamedObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllNamedObjects() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllNamedObjects(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllNamedObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllNamedObjects(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllNamedObjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::SimpleGetRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllActions() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllActions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllActions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllNamedActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllNamedActions() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllNamedActions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllNamedActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllNamedActions(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllNamedActions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::SimpleGetRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllRoles() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::EmptyRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllRoles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::EmptyRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::EmptyRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllNamedRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllNamedRoles() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::SimpleGetRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetAllNamedRoles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllNamedRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllNamedRoles(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::SimpleGetRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllNamedRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::SimpleGetRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasPolicy() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedHasPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasNamedPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasNamedPolicy() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedHasNamedPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasNamedPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasNamedPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasNamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedHasGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasNamedGroupingPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasNamedGroupingPolicy() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PolicyRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedHasNamedGroupingPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasNamedGroupingPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasNamedGroupingPolicy(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PolicyRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasNamedGroupingPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PolicyRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetImplicitRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUsersForRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUsersForRole() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::ArrayReply>* streamer) {
                       return this->StreamedGetUsersForRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUsersForRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUsersForRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::ArrayReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUsersForRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::ArrayReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasRoleForUser() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedHasRoleForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasRoleForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRoleForUser() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedAddRoleForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRoleForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRoleForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRoleForUser() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedDeleteRoleForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRoleForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRoleForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRoleForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRolesForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRolesForUser() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedDeleteRolesForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRolesForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRolesForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRolesForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteUser() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedDeleteUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRole() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::UserRoleRequest, ::palm::casbin::v1::EmptyReply>* streamer) {
                       return this->StreamedDeleteRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::UserRoleRequest* /*request*/, ::palm::casbin::v1::EmptyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::UserRoleRequest,::palm::casbin::v1::EmptyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissionsForUser() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetPermissionsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissionsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImplicitPermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImplicitPermissionsForUser() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::Array2DReply>* streamer) {
                       return this->StreamedGetImplicitPermissionsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImplicitPermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImplicitPermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::Array2DReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImplicitPermissionsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::Array2DReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePermission() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedDeletePermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermission(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPermissionForUser() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedAddPermissionForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPermissionForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePermissionForUser() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedDeletePermissionForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermissionForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermissionsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePermissionsForUser() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedDeletePermissionsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePermissionsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermissionsForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermissionsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasPermissionForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasPermissionForUser() {
      ::grpc::Service::MarkMethodStreamed(52,
        new ::grpc::internal::StreamedUnaryHandler<
          ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::palm::casbin::v1::PermissionRequest, ::palm::casbin::v1::BoolReply>* streamer) {
                       return this->StreamedHasPermissionForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HasPermissionForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasPermissionForUser(::grpc::ServerContext* /*context*/, const ::palm::casbin::v1::PermissionRequest* /*request*/, ::palm::casbin::v1::BoolReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasPermissionForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::palm::casbin::v1::PermissionRequest,::palm::casbin::v1::BoolReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewEnforcer<WithStreamedUnaryMethod_NewAdapter<WithStreamedUnaryMethod_Enforce<WithStreamedUnaryMethod_LoadPolicy<WithStreamedUnaryMethod_SavePolicy<WithStreamedUnaryMethod_AddPolicy<WithStreamedUnaryMethod_AddNamedPolicy<WithStreamedUnaryMethod_RemovePolicy<WithStreamedUnaryMethod_RemoveNamedPolicy<WithStreamedUnaryMethod_RemoveFilteredPolicy<WithStreamedUnaryMethod_RemoveFilteredNamedPolicy<WithStreamedUnaryMethod_GetPolicy<WithStreamedUnaryMethod_GetNamedPolicy<WithStreamedUnaryMethod_GetFilteredPolicy<WithStreamedUnaryMethod_GetFilteredNamedPolicy<WithStreamedUnaryMethod_AddGroupingPolicy<WithStreamedUnaryMethod_AddNamedGroupingPolicy<WithStreamedUnaryMethod_RemoveGroupingPolicy<WithStreamedUnaryMethod_RemoveNamedGroupingPolicy<WithStreamedUnaryMethod_RemoveFilteredGroupingPolicy<WithStreamedUnaryMethod_RemoveFilteredNamedGroupingPolicy<WithStreamedUnaryMethod_GetGroupingPolicy<WithStreamedUnaryMethod_GetNamedGroupingPolicy<WithStreamedUnaryMethod_GetFilteredGroupingPolicy<WithStreamedUnaryMethod_GetFilteredNamedGroupingPolicy<WithStreamedUnaryMethod_GetAllSubjects<WithStreamedUnaryMethod_GetAllNamedSubjects<WithStreamedUnaryMethod_GetAllObjects<WithStreamedUnaryMethod_GetAllNamedObjects<WithStreamedUnaryMethod_GetAllActions<WithStreamedUnaryMethod_GetAllNamedActions<WithStreamedUnaryMethod_GetAllRoles<WithStreamedUnaryMethod_GetAllNamedRoles<WithStreamedUnaryMethod_HasPolicy<WithStreamedUnaryMethod_HasNamedPolicy<WithStreamedUnaryMethod_HasGroupingPolicy<WithStreamedUnaryMethod_HasNamedGroupingPolicy<WithStreamedUnaryMethod_GetRolesForUser<WithStreamedUnaryMethod_GetImplicitRolesForUser<WithStreamedUnaryMethod_GetUsersForRole<WithStreamedUnaryMethod_HasRoleForUser<WithStreamedUnaryMethod_AddRoleForUser<WithStreamedUnaryMethod_DeleteRoleForUser<WithStreamedUnaryMethod_DeleteRolesForUser<WithStreamedUnaryMethod_DeleteUser<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_GetPermissionsForUser<WithStreamedUnaryMethod_GetImplicitPermissionsForUser<WithStreamedUnaryMethod_DeletePermission<WithStreamedUnaryMethod_AddPermissionForUser<WithStreamedUnaryMethod_DeletePermissionForUser<WithStreamedUnaryMethod_DeletePermissionsForUser<WithStreamedUnaryMethod_HasPermissionForUser<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewEnforcer<WithStreamedUnaryMethod_NewAdapter<WithStreamedUnaryMethod_Enforce<WithStreamedUnaryMethod_LoadPolicy<WithStreamedUnaryMethod_SavePolicy<WithStreamedUnaryMethod_AddPolicy<WithStreamedUnaryMethod_AddNamedPolicy<WithStreamedUnaryMethod_RemovePolicy<WithStreamedUnaryMethod_RemoveNamedPolicy<WithStreamedUnaryMethod_RemoveFilteredPolicy<WithStreamedUnaryMethod_RemoveFilteredNamedPolicy<WithStreamedUnaryMethod_GetPolicy<WithStreamedUnaryMethod_GetNamedPolicy<WithStreamedUnaryMethod_GetFilteredPolicy<WithStreamedUnaryMethod_GetFilteredNamedPolicy<WithStreamedUnaryMethod_AddGroupingPolicy<WithStreamedUnaryMethod_AddNamedGroupingPolicy<WithStreamedUnaryMethod_RemoveGroupingPolicy<WithStreamedUnaryMethod_RemoveNamedGroupingPolicy<WithStreamedUnaryMethod_RemoveFilteredGroupingPolicy<WithStreamedUnaryMethod_RemoveFilteredNamedGroupingPolicy<WithStreamedUnaryMethod_GetGroupingPolicy<WithStreamedUnaryMethod_GetNamedGroupingPolicy<WithStreamedUnaryMethod_GetFilteredGroupingPolicy<WithStreamedUnaryMethod_GetFilteredNamedGroupingPolicy<WithStreamedUnaryMethod_GetAllSubjects<WithStreamedUnaryMethod_GetAllNamedSubjects<WithStreamedUnaryMethod_GetAllObjects<WithStreamedUnaryMethod_GetAllNamedObjects<WithStreamedUnaryMethod_GetAllActions<WithStreamedUnaryMethod_GetAllNamedActions<WithStreamedUnaryMethod_GetAllRoles<WithStreamedUnaryMethod_GetAllNamedRoles<WithStreamedUnaryMethod_HasPolicy<WithStreamedUnaryMethod_HasNamedPolicy<WithStreamedUnaryMethod_HasGroupingPolicy<WithStreamedUnaryMethod_HasNamedGroupingPolicy<WithStreamedUnaryMethod_GetRolesForUser<WithStreamedUnaryMethod_GetImplicitRolesForUser<WithStreamedUnaryMethod_GetUsersForRole<WithStreamedUnaryMethod_HasRoleForUser<WithStreamedUnaryMethod_AddRoleForUser<WithStreamedUnaryMethod_DeleteRoleForUser<WithStreamedUnaryMethod_DeleteRolesForUser<WithStreamedUnaryMethod_DeleteUser<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_GetPermissionsForUser<WithStreamedUnaryMethod_GetImplicitPermissionsForUser<WithStreamedUnaryMethod_DeletePermission<WithStreamedUnaryMethod_AddPermissionForUser<WithStreamedUnaryMethod_DeletePermissionForUser<WithStreamedUnaryMethod_DeletePermissionsForUser<WithStreamedUnaryMethod_HasPermissionForUser<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace casbin
}  // namespace palm


#endif  // GRPC_casbin_2eproto__INCLUDED
